package org.asteriskjava;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.AsteriskSettings asteriskSettings0 = org.asteriskjava.pbx.PBXFactory.getActiveProfile();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: you must call setAsteriskSettings() before getActiveProfile() is called the first time");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = asteriskVersion0.compareTo(asteriskVersion1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.PBX pBX0 = org.asteriskjava.pbx.PBXFactory.getActivePBX();
            org.junit.Assert.fail("Expected exception of type java.lang.ExceptionInInitializerError; message: null");
        } catch (java.lang.ExceptionInInitializerError e) {
            // Expected exception.
        }
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum0 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str1 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str2 = activityStatusEnum0.getDefaultMessage();
        java.lang.Class<?> wildcardClass3 = activityStatusEnum0.getClass();
        org.junit.Assert.assertTrue("'" + activityStatusEnum0 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum0.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Progress" + "'", str1, "Progress");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Progress" + "'", str2, "Progress");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point 'hi!' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        java.lang.Class<?> wildcardClass1 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        java.lang.Class<?> wildcardClass3 = asteriskVersion1.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent1 = null;
        htmlEventTracer0.onManagerEvent(managerEvent1);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("Progress");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.asteriskjava.pbx.TechType techType0 = org.asteriskjava.pbx.TechType.SIPPEER;
        org.junit.Assert.assertTrue("'" + techType0 + "' != '" + org.asteriskjava.pbx.TechType.SIPPEER + "'", techType0.equals(org.asteriskjava.pbx.TechType.SIPPEER));
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("Asterisk 14");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point 'Asterisk 14' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("3");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point '3' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("6");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point '6' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("*");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("*");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("6");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("Progress");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point 'Progress' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("6");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("hi!");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("Asterisk 11");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum0 = org.asteriskjava.pbx.ActivityStatusEnum.START;
        java.lang.Class<?> wildcardClass1 = activityStatusEnum0.getClass();
        org.junit.Assert.assertTrue("'" + activityStatusEnum0 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.START + "'", activityStatusEnum0.equals(org.asteriskjava.pbx.ActivityStatusEnum.START));
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point '' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("*");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point '*' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("3");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("Asterisk 1.0");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("*");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        java.lang.Class<?> wildcardClass2 = htmlEventTracer0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.asteriskjava.pbx.TechType techType0 = org.asteriskjava.pbx.TechType.SIP;
        java.lang.Class<?> wildcardClass1 = techType0.getClass();
        org.junit.Assert.assertTrue("'" + techType0 + "' != '" + org.asteriskjava.pbx.TechType.SIP + "'", techType0.equals(org.asteriskjava.pbx.TechType.SIP));
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("Progress");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("Asterisk 11");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point 'Asterisk 11' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("Asterisk 20");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean3 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str5 = asteriskVersion4.toString();
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int8 = asteriskVersion0.compareTo(asteriskVersion7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 11" + "'", str1, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Asterisk 14" + "'", str5, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("4");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("Asterisk 14");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("Progress");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = asteriskVersion0.compareTo(asteriskVersion1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point '4' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("Asterisk 11");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("Asterisk 20");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("Failure");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("Asterisk 12");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point 'Asterisk 12' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("Asterisk 20");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point 'Asterisk 20' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point '0' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent1 = null;
        htmlEventTracer0.onManagerEvent(managerEvent1);
        org.asteriskjava.manager.event.ManagerEvent managerEvent3 = null;
        htmlEventTracer0.onManagerEvent(managerEvent3);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("9");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent2 = null;
        htmlEventTracer0.onManagerEvent(managerEvent2);
        org.asteriskjava.manager.event.ManagerEvent managerEvent4 = null;
        htmlEventTracer0.onManagerEvent(managerEvent4);
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("4");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("Success");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("Asterisk 1.8");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent1 = null;
        htmlEventTracer0.onManagerEvent(managerEvent1);
        org.asteriskjava.manager.event.ManagerEvent managerEvent3 = null;
        htmlEventTracer0.onManagerEvent(managerEvent3);
        java.lang.Class<?> wildcardClass5 = htmlEventTracer0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("Asterisk 1.8");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("Asterisk 1.4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point 'Asterisk 1.4' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("Asterisk 18");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("1");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        java.lang.Class<?> wildcardClass1 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("4");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent2 = null;
        htmlEventTracer0.onManagerEvent(managerEvent2);
        org.asteriskjava.manager.event.ManagerEvent managerEvent4 = null;
        htmlEventTracer0.onManagerEvent(managerEvent4);
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("Asterisk 18");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("3");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.pbx.TechType techType3 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass4 = techType3.getClass();
        boolean boolean5 = asteriskVersion1.equals((java.lang.Object) wildcardClass4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion1);
        java.lang.Class<?> wildcardClass7 = asteriskVersion1.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 1.0" + "'", str2, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType3 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType3.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("Asterisk 1.4");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("Asterisk 1.4");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent2 = null;
        htmlEventTracer0.onManagerEvent(managerEvent2);
        org.asteriskjava.manager.event.ManagerEvent managerEvent4 = null;
        htmlEventTracer0.onManagerEvent(managerEvent4);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("Asterisk 18");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int5 = listenerPriority3.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int7 = listenerPriority4.compare(listenerPriority6);
        int int8 = listenerPriority1.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int11 = listenerPriority9.compare(listenerPriority10);
        int int12 = listenerPriority1.compare(listenerPriority9);
        java.lang.Class<?> wildcardClass13 = listenerPriority1.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-4) + "'", int7 == (-4));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("Asterisk 17");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point 'Asterisk 17' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("Asterisk 11");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("0");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("9");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("Asterisk 1.8");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point 'Asterisk 1.8' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str6 = asteriskVersion5.toString();
        int int7 = asteriskVersion1.compareTo(asteriskVersion5);
        boolean boolean8 = asteriskVersion0.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int12 = asteriskVersion10.compareTo(asteriskVersion11);
        boolean boolean13 = asteriskVersion9.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int18 = asteriskVersion15.compareTo(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean20 = asteriskVersion17.isAtLeast(asteriskVersion19);
        int int21 = asteriskVersion9.compareTo(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        boolean boolean26 = asteriskVersion22.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean29 = asteriskVersion27.isAtLeast(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int31 = asteriskVersion28.compareTo(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean33 = asteriskVersion30.isAtLeast(asteriskVersion32);
        int int34 = asteriskVersion22.compareTo(asteriskVersion30);
        boolean boolean35 = asteriskVersion9.isAtLeast(asteriskVersion30);
        boolean boolean37 = asteriskVersion9.equals((java.lang.Object) 0);
        int int38 = asteriskVersion5.compareTo(asteriskVersion9);
        java.lang.Class<?> wildcardClass39 = asteriskVersion9.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Asterisk 14" + "'", str6, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("7");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point '7' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.asteriskjava.pbx.DTMFTone dTMFTone0 = org.asteriskjava.pbx.DTMFTone.ONE;
        java.lang.Class<?> wildcardClass1 = dTMFTone0.getClass();
        org.junit.Assert.assertTrue("'" + dTMFTone0 + "' != '" + org.asteriskjava.pbx.DTMFTone.ONE + "'", dTMFTone0.equals(org.asteriskjava.pbx.DTMFTone.ONE));
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("1");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("7");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("Asterisk 20");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("Asterisk 10");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("Asterisk 10");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point 'Asterisk 10' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("Asterisk 1.4");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("2");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point '2' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent4 = null;
        htmlEventTracer0.onManagerEvent(managerEvent4);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("9");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point '9' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent2 = null;
        htmlEventTracer0.onManagerEvent(managerEvent2);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent3 = null;
        htmlEventTracer0.onManagerEvent(managerEvent3);
        org.asteriskjava.manager.event.ManagerEvent managerEvent5 = null;
        htmlEventTracer0.onManagerEvent(managerEvent5);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("Asterisk 14");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("Asterisk 10");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        java.lang.String str1 = asteriskVersion0.toString();
        java.lang.Class<?> wildcardClass2 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 12" + "'", str1, "Asterisk 12");
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent3 = null;
        htmlEventTracer0.onManagerEvent(managerEvent3);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("Asterisk 13");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("Starting");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("7");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int6 = listenerPriority3.compare(listenerPriority5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int5 = listenerPriority3.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int7 = listenerPriority4.compare(listenerPriority6);
        int int8 = listenerPriority1.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int11 = listenerPriority9.compare(listenerPriority10);
        int int12 = listenerPriority1.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int15 = listenerPriority13.compare(listenerPriority14);
        int int16 = listenerPriority1.compare(listenerPriority13);
        org.asteriskjava.pbx.ListenerPriority listenerPriority17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = listenerPriority13.compare(listenerPriority17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-4) + "'", int7 == (-4));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("Asterisk 1.6");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer7.write();
        boolean boolean9 = asteriskVersion4.equals((java.lang.Object) htmlEventTracer7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer7.onManagerEvent(managerEvent10);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("Success");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.equals((java.lang.Object) asteriskVersion5);
        int int9 = asteriskVersion0.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int14 = asteriskVersion12.compareTo(asteriskVersion13);
        boolean boolean15 = asteriskVersion11.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int18 = asteriskVersion16.compareTo(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int20 = asteriskVersion16.compareTo(asteriskVersion19);
        org.asteriskjava.pbx.TechType techType21 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean22 = asteriskVersion16.equals((java.lang.Object) techType21);
        boolean boolean23 = asteriskVersion13.isAtLeast(asteriskVersion16);
        boolean boolean24 = asteriskVersion10.isAtLeast(asteriskVersion16);
        int int25 = asteriskVersion0.compareTo(asteriskVersion16);
        java.lang.Class<?> wildcardClass26 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + techType21 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType21.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("2");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int6 = listenerPriority1.compare(listenerPriority5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        int int13 = asteriskVersion7.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        boolean boolean17 = asteriskVersion11.isAtLeast(asteriskVersion15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean19 = asteriskVersion11.equals((java.lang.Object) listenerPriority18);
        int int20 = listenerPriority5.compare(listenerPriority18);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int24 = asteriskVersion22.compareTo(asteriskVersion23);
        boolean boolean25 = asteriskVersion21.isAtLeast(asteriskVersion23);
        org.asteriskjava.pbx.ListenerPriority listenerPriority26 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int28 = listenerPriority26.compare(listenerPriority27);
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int30 = listenerPriority27.compare(listenerPriority29);
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int32 = listenerPriority27.compare(listenerPriority31);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean35 = asteriskVersion33.isAtLeast(asteriskVersion34);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean38 = asteriskVersion36.isAtLeast(asteriskVersion37);
        int int39 = asteriskVersion33.compareTo(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean42 = asteriskVersion40.isAtLeast(asteriskVersion41);
        boolean boolean43 = asteriskVersion37.isAtLeast(asteriskVersion41);
        org.asteriskjava.pbx.ListenerPriority listenerPriority44 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean45 = asteriskVersion37.equals((java.lang.Object) listenerPriority44);
        int int46 = listenerPriority31.compare(listenerPriority44);
        boolean boolean47 = asteriskVersion23.equals((java.lang.Object) listenerPriority31);
        int int48 = listenerPriority18.compare(listenerPriority31);
        org.asteriskjava.pbx.ListenerPriority listenerPriority49 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int50 = listenerPriority18.compare(listenerPriority49);
        java.lang.Class<?> wildcardClass51 = listenerPriority49.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-6) + "'", int6 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority26 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority26.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-4) + "'", int30 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-6) + "'", int32 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority44 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority44.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority49 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority49.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean20 = asteriskVersion18.isAtLeast(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int22 = asteriskVersion19.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean24 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int25 = asteriskVersion13.compareTo(asteriskVersion21);
        boolean boolean26 = asteriskVersion0.isAtLeast(asteriskVersion21);
        boolean boolean28 = asteriskVersion0.equals((java.lang.Object) 0);
        boolean boolean30 = asteriskVersion0.equals((java.lang.Object) "Asterisk 11");
        java.lang.Class<?> wildcardClass31 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("Starting");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("9");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("Asterisk 12");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("Asterisk 1.8");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("Asterisk 17");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("Asterisk 1.0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point 'Asterisk 1.0' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        boolean boolean10 = asteriskVersion4.isAtLeast(asteriskVersion8);
        org.asteriskjava.pbx.TechType techType11 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean12 = asteriskVersion4.equals((java.lang.Object) techType11);
        java.lang.Class<?> wildcardClass13 = asteriskVersion4.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + techType11 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType11.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer7.write();
        boolean boolean9 = asteriskVersion4.equals((java.lang.Object) htmlEventTracer7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer7.onManagerEvent(managerEvent10);
        org.asteriskjava.manager.event.ManagerEvent managerEvent12 = null;
        htmlEventTracer7.onManagerEvent(managerEvent12);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point '1' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("2");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.pbx.TechType techType3 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass4 = techType3.getClass();
        boolean boolean5 = asteriskVersion1.equals((java.lang.Object) wildcardClass4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int11 = asteriskVersion8.compareTo(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str14 = asteriskVersion13.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean16 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str18 = asteriskVersion17.toString();
        int int19 = asteriskVersion13.compareTo(asteriskVersion17);
        boolean boolean20 = asteriskVersion12.isAtLeast(asteriskVersion17);
        boolean boolean21 = asteriskVersion8.equals((java.lang.Object) asteriskVersion17);
        boolean boolean22 = asteriskVersion1.equals((java.lang.Object) asteriskVersion8);
        java.lang.Class<?> wildcardClass23 = asteriskVersion8.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 1.0" + "'", str2, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType3 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType3.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Asterisk 11" + "'", str14, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Asterisk 14" + "'", str18, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int4 = asteriskVersion0.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        int int6 = asteriskVersion3.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        java.lang.String str8 = asteriskVersion7.toString();
        boolean boolean9 = asteriskVersion3.isAtLeast(asteriskVersion7);
        java.lang.Class<?> wildcardClass10 = asteriskVersion7.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Asterisk 12" + "'", str8, "Asterisk 12");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.equals((java.lang.Object) asteriskVersion5);
        int int9 = asteriskVersion0.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str12 = asteriskVersion11.toString();
        org.asteriskjava.pbx.TechType techType13 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass14 = techType13.getClass();
        boolean boolean15 = asteriskVersion11.equals((java.lang.Object) wildcardClass14);
        int int16 = asteriskVersion10.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int19 = asteriskVersion17.compareTo(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str21 = asteriskVersion20.toString();
        boolean boolean22 = asteriskVersion18.isAtLeast(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str27 = asteriskVersion26.toString();
        boolean boolean28 = asteriskVersion24.isAtLeast(asteriskVersion26);
        boolean boolean30 = asteriskVersion24.equals((java.lang.Object) "0");
        boolean boolean31 = asteriskVersion18.equals((java.lang.Object) asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        boolean boolean37 = asteriskVersion33.isAtLeast(asteriskVersion35);
        int int38 = asteriskVersion32.compareTo(asteriskVersion33);
        int int39 = asteriskVersion18.compareTo(asteriskVersion32);
        java.lang.String str40 = asteriskVersion18.toString();
        boolean boolean41 = asteriskVersion10.equals((java.lang.Object) asteriskVersion18);
        boolean boolean42 = asteriskVersion5.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean46 = asteriskVersion44.isAtLeast(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean49 = asteriskVersion47.isAtLeast(asteriskVersion48);
        int int50 = asteriskVersion44.compareTo(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean53 = asteriskVersion51.isAtLeast(asteriskVersion52);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean56 = asteriskVersion54.isAtLeast(asteriskVersion55);
        int int57 = asteriskVersion51.compareTo(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean60 = asteriskVersion58.isAtLeast(asteriskVersion59);
        boolean boolean61 = asteriskVersion55.isAtLeast(asteriskVersion59);
        boolean boolean62 = asteriskVersion44.isAtLeast(asteriskVersion59);
        int int63 = asteriskVersion43.compareTo(asteriskVersion44);
        int int64 = asteriskVersion18.compareTo(asteriskVersion44);
        java.lang.String str65 = asteriskVersion44.toString();
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer66 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer66.write();
        htmlEventTracer66.write();
        htmlEventTracer66.write();
        htmlEventTracer66.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent71 = null;
        htmlEventTracer66.onManagerEvent(managerEvent71);
        boolean boolean73 = asteriskVersion44.equals((java.lang.Object) htmlEventTracer66);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer66.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Asterisk 1.0" + "'", str12, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType13 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType13.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 1.0" + "'", str21, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Asterisk 1.0" + "'", str27, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 16" + "'", str40, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Asterisk 20" + "'", str65, "Asterisk 20");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("#");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("Success");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point 'Success' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean3 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str5 = asteriskVersion4.toString();
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str8 = asteriskVersion7.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean10 = asteriskVersion7.isAtLeast(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int12 = asteriskVersion7.compareTo(asteriskVersion11);
        boolean boolean13 = asteriskVersion4.isAtLeast(asteriskVersion11);
        java.lang.Class<?> wildcardClass14 = asteriskVersion11.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 11" + "'", str1, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Asterisk 14" + "'", str5, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Asterisk 11" + "'", str8, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("Asterisk 12");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("7");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent1 = null;
        htmlEventTracer0.onManagerEvent(managerEvent1);
        org.asteriskjava.manager.event.ManagerEvent managerEvent3 = null;
        htmlEventTracer0.onManagerEvent(managerEvent3);
        org.asteriskjava.manager.event.ManagerEvent managerEvent5 = null;
        htmlEventTracer0.onManagerEvent(managerEvent5);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("2");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("0");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("Asterisk 18");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point 'Asterisk 18' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("#");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point '#' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("5");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("Asterisk 16");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point 'Asterisk 16' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("Success");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("Asterisk 1.6");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.asteriskjava.pbx.DTMFTone dTMFTone0 = org.asteriskjava.pbx.DTMFTone.THREE;
        java.lang.String str1 = dTMFTone0.toString();
        java.lang.Class<?> wildcardClass2 = dTMFTone0.getClass();
        org.junit.Assert.assertTrue("'" + dTMFTone0 + "' != '" + org.asteriskjava.pbx.DTMFTone.THREE + "'", dTMFTone0.equals(org.asteriskjava.pbx.DTMFTone.THREE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "3" + "'", str1, "3");
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent5 = null;
        htmlEventTracer0.onManagerEvent(managerEvent5);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str4 = asteriskVersion3.toString();
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str10 = asteriskVersion9.toString();
        boolean boolean11 = asteriskVersion7.isAtLeast(asteriskVersion9);
        boolean boolean13 = asteriskVersion7.equals((java.lang.Object) "0");
        boolean boolean14 = asteriskVersion1.equals((java.lang.Object) asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int19 = asteriskVersion17.compareTo(asteriskVersion18);
        boolean boolean20 = asteriskVersion16.isAtLeast(asteriskVersion18);
        int int21 = asteriskVersion15.compareTo(asteriskVersion16);
        int int22 = asteriskVersion1.compareTo(asteriskVersion15);
        java.lang.Class<?> wildcardClass23 = asteriskVersion15.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Asterisk 1.0" + "'", str4, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Asterisk 1.0" + "'", str10, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int7 = listenerPriority5.compare(listenerPriority6);
        org.asteriskjava.pbx.ListenerPriority listenerPriority8 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int10 = listenerPriority8.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int12 = listenerPriority9.compare(listenerPriority11);
        int int13 = listenerPriority6.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int16 = listenerPriority14.compare(listenerPriority15);
        int int17 = listenerPriority6.compare(listenerPriority14);
        int int18 = listenerPriority3.compare(listenerPriority14);
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int21 = listenerPriority19.compare(listenerPriority20);
        org.asteriskjava.pbx.ListenerPriority listenerPriority22 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int24 = listenerPriority22.compare(listenerPriority23);
        org.asteriskjava.pbx.ListenerPriority listenerPriority25 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int26 = listenerPriority23.compare(listenerPriority25);
        int int27 = listenerPriority20.compare(listenerPriority23);
        org.asteriskjava.pbx.ListenerPriority listenerPriority28 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int30 = listenerPriority28.compare(listenerPriority29);
        int int31 = listenerPriority20.compare(listenerPriority28);
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority33 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int34 = listenerPriority32.compare(listenerPriority33);
        int int35 = listenerPriority20.compare(listenerPriority32);
        org.asteriskjava.pbx.ListenerPriority listenerPriority36 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority37 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int38 = listenerPriority36.compare(listenerPriority37);
        org.asteriskjava.pbx.ListenerPriority listenerPriority39 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int40 = listenerPriority37.compare(listenerPriority39);
        org.asteriskjava.pbx.ListenerPriority listenerPriority41 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int42 = listenerPriority37.compare(listenerPriority41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean45 = asteriskVersion43.isAtLeast(asteriskVersion44);
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean48 = asteriskVersion46.isAtLeast(asteriskVersion47);
        int int49 = asteriskVersion43.compareTo(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean52 = asteriskVersion50.isAtLeast(asteriskVersion51);
        boolean boolean53 = asteriskVersion47.isAtLeast(asteriskVersion51);
        org.asteriskjava.pbx.ListenerPriority listenerPriority54 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean55 = asteriskVersion47.equals((java.lang.Object) listenerPriority54);
        int int56 = listenerPriority41.compare(listenerPriority54);
        org.asteriskjava.pbx.ListenerPriority listenerPriority57 = org.asteriskjava.pbx.ListenerPriority.REALTIME;
        org.asteriskjava.pbx.ListenerPriority listenerPriority58 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int59 = listenerPriority57.compare(listenerPriority58);
        org.asteriskjava.pbx.ListenerPriority listenerPriority60 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority61 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int62 = listenerPriority60.compare(listenerPriority61);
        org.asteriskjava.pbx.ListenerPriority listenerPriority63 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int64 = listenerPriority61.compare(listenerPriority63);
        org.asteriskjava.pbx.ListenerPriority listenerPriority65 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority66 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int67 = listenerPriority65.compare(listenerPriority66);
        org.asteriskjava.pbx.ListenerPriority listenerPriority68 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority69 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int70 = listenerPriority68.compare(listenerPriority69);
        org.asteriskjava.pbx.ListenerPriority listenerPriority71 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int72 = listenerPriority69.compare(listenerPriority71);
        int int73 = listenerPriority66.compare(listenerPriority69);
        org.asteriskjava.pbx.ListenerPriority listenerPriority74 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority75 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int76 = listenerPriority74.compare(listenerPriority75);
        int int77 = listenerPriority66.compare(listenerPriority74);
        int int78 = listenerPriority63.compare(listenerPriority74);
        org.asteriskjava.pbx.ListenerPriority listenerPriority79 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority80 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority81 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int82 = listenerPriority80.compare(listenerPriority81);
        org.asteriskjava.pbx.ListenerPriority listenerPriority83 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority84 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int85 = listenerPriority83.compare(listenerPriority84);
        org.asteriskjava.pbx.ListenerPriority listenerPriority86 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int87 = listenerPriority84.compare(listenerPriority86);
        int int88 = listenerPriority81.compare(listenerPriority84);
        org.asteriskjava.pbx.ListenerPriority listenerPriority89 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority90 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int91 = listenerPriority89.compare(listenerPriority90);
        int int92 = listenerPriority81.compare(listenerPriority89);
        int int93 = listenerPriority79.compare(listenerPriority81);
        int int94 = listenerPriority63.compare(listenerPriority81);
        int int95 = listenerPriority57.compare(listenerPriority63);
        int int96 = listenerPriority54.compare(listenerPriority57);
        int int97 = listenerPriority32.compare(listenerPriority57);
        int int98 = listenerPriority14.compare(listenerPriority57);
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority8 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority8.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-2) + "'", int17 == (-2));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority22 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority22.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority25 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority25.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-4) + "'", int26 == (-4));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority28 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority28.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-2) + "'", int31 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority33 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority33.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-2) + "'", int35 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority36 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority36.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority37 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority37.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority39 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority39.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-4) + "'", int40 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority41 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority41.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-6) + "'", int42 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority54 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority54.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority57 + "' != '" + org.asteriskjava.pbx.ListenerPriority.REALTIME + "'", listenerPriority57.equals(org.asteriskjava.pbx.ListenerPriority.REALTIME));
        org.junit.Assert.assertTrue("'" + listenerPriority58 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority58.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-92) + "'", int59 == (-92));
        org.junit.Assert.assertTrue("'" + listenerPriority60 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority60.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority61 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority61.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority63 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority63.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-4) + "'", int64 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority65 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority65.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority66 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority66.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority68 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority68.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority69 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority69.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority71 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority71.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-4) + "'", int72 == (-4));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority74 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority74.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority75 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority75.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-2) + "'", int77 == (-2));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority79 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority79.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority80 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority80.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority81 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority81.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority83 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority83.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority84 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority84.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority86 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority86.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-4) + "'", int87 == (-4));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority89 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority89.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority90 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority90.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-2) + "'", int92 == (-2));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 4 + "'", int93 == 4);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 4 + "'", int94 == 4);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-94) + "'", int95 == (-94));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 96 + "'", int96 == 96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 92 + "'", int97 == 92);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 92 + "'", int98 == 92);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_18;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority2 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int3 = listenerPriority1.compare(listenerPriority2);
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int5 = listenerPriority2.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority7 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int8 = listenerPriority6.compare(listenerPriority7);
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int11 = listenerPriority9.compare(listenerPriority10);
        org.asteriskjava.pbx.ListenerPriority listenerPriority12 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int13 = listenerPriority10.compare(listenerPriority12);
        int int14 = listenerPriority7.compare(listenerPriority10);
        int int15 = listenerPriority4.compare(listenerPriority10);
        org.asteriskjava.pbx.ListenerPriority listenerPriority16 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority17 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int19 = listenerPriority17.compare(listenerPriority18);
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int21 = listenerPriority18.compare(listenerPriority20);
        int int22 = listenerPriority16.compare(listenerPriority18);
        int int23 = listenerPriority10.compare(listenerPriority18);
        boolean boolean24 = asteriskVersion0.equals((java.lang.Object) int23);
        org.asteriskjava.pbx.ListenerPriority listenerPriority25 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority26 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int27 = listenerPriority25.compare(listenerPriority26);
        org.asteriskjava.pbx.ListenerPriority listenerPriority28 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int29 = listenerPriority26.compare(listenerPriority28);
        org.asteriskjava.pbx.ListenerPriority listenerPriority30 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int31 = listenerPriority26.compare(listenerPriority30);
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int33 = listenerPriority26.compare(listenerPriority32);
        org.asteriskjava.pbx.ListenerPriority listenerPriority34 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority35 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority36 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int37 = listenerPriority35.compare(listenerPriority36);
        org.asteriskjava.pbx.ListenerPriority listenerPriority38 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority39 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int40 = listenerPriority38.compare(listenerPriority39);
        org.asteriskjava.pbx.ListenerPriority listenerPriority41 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int42 = listenerPriority39.compare(listenerPriority41);
        int int43 = listenerPriority36.compare(listenerPriority39);
        org.asteriskjava.pbx.ListenerPriority listenerPriority44 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority45 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int46 = listenerPriority44.compare(listenerPriority45);
        int int47 = listenerPriority36.compare(listenerPriority44);
        int int48 = listenerPriority34.compare(listenerPriority36);
        int int49 = listenerPriority32.compare(listenerPriority36);
        boolean boolean50 = asteriskVersion0.equals((java.lang.Object) listenerPriority32);
        java.lang.Class<?> wildcardClass51 = listenerPriority32.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority2 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority2.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-4) + "'", int5 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority7 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority7.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority12 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority12.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-4) + "'", int13 == (-4));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority16 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority16.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority17 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority17.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-4) + "'", int21 == (-4));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority25 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority25.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority26 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority26.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority28 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority28.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-4) + "'", int29 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority30 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority30.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-6) + "'", int31 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-4) + "'", int33 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority34 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority34.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority35 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority35.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority36 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority36.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority38 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority38.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority39 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority39.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority41 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority41.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-4) + "'", int42 == (-4));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority44 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority44.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority45 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority45.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-2) + "'", int47 == (-2));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent2 = null;
        htmlEventTracer0.onManagerEvent(managerEvent2);
        org.asteriskjava.manager.event.ManagerEvent managerEvent4 = null;
        htmlEventTracer0.onManagerEvent(managerEvent4);
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer0.onManagerEvent(managerEvent10);
        java.lang.Class<?> wildcardClass12 = htmlEventTracer0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent4 = null;
        htmlEventTracer0.onManagerEvent(managerEvent4);
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("5");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean20 = asteriskVersion18.isAtLeast(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int22 = asteriskVersion19.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean24 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int25 = asteriskVersion13.compareTo(asteriskVersion21);
        boolean boolean26 = asteriskVersion0.isAtLeast(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str29 = asteriskVersion28.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean31 = asteriskVersion28.isAtLeast(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str33 = asteriskVersion32.toString();
        int int34 = asteriskVersion28.compareTo(asteriskVersion32);
        boolean boolean35 = asteriskVersion27.isAtLeast(asteriskVersion32);
        int int36 = asteriskVersion21.compareTo(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int40 = asteriskVersion38.compareTo(asteriskVersion39);
        boolean boolean41 = asteriskVersion37.isAtLeast(asteriskVersion39);
        org.asteriskjava.pbx.ListenerPriority listenerPriority42 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority43 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int44 = listenerPriority42.compare(listenerPriority43);
        org.asteriskjava.pbx.ListenerPriority listenerPriority45 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int46 = listenerPriority43.compare(listenerPriority45);
        org.asteriskjava.pbx.ListenerPriority listenerPriority47 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int48 = listenerPriority43.compare(listenerPriority47);
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean51 = asteriskVersion49.isAtLeast(asteriskVersion50);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean54 = asteriskVersion52.isAtLeast(asteriskVersion53);
        int int55 = asteriskVersion49.compareTo(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean58 = asteriskVersion56.isAtLeast(asteriskVersion57);
        boolean boolean59 = asteriskVersion53.isAtLeast(asteriskVersion57);
        org.asteriskjava.pbx.ListenerPriority listenerPriority60 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean61 = asteriskVersion53.equals((java.lang.Object) listenerPriority60);
        int int62 = listenerPriority47.compare(listenerPriority60);
        boolean boolean63 = asteriskVersion39.equals((java.lang.Object) listenerPriority47);
        boolean boolean64 = asteriskVersion21.isAtLeast(asteriskVersion39);
        java.lang.String str65 = asteriskVersion21.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion69 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int70 = asteriskVersion68.compareTo(asteriskVersion69);
        boolean boolean71 = asteriskVersion67.isAtLeast(asteriskVersion69);
        org.asteriskjava.AsteriskVersion asteriskVersion72 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int74 = asteriskVersion72.compareTo(asteriskVersion73);
        org.asteriskjava.AsteriskVersion asteriskVersion75 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int76 = asteriskVersion72.compareTo(asteriskVersion75);
        org.asteriskjava.pbx.TechType techType77 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean78 = asteriskVersion72.equals((java.lang.Object) techType77);
        boolean boolean79 = asteriskVersion69.isAtLeast(asteriskVersion72);
        boolean boolean80 = asteriskVersion66.isAtLeast(asteriskVersion69);
        boolean boolean81 = asteriskVersion21.isAtLeast(asteriskVersion69);
        java.lang.Class<?> wildcardClass82 = asteriskVersion21.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Asterisk 11" + "'", str29, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Asterisk 14" + "'", str33, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority42 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority42.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority43 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority43.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority45 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority45.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-4) + "'", int46 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority47 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority47.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-6) + "'", int48 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority60 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority60.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Asterisk 20" + "'", str65, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertNotNull(asteriskVersion69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(asteriskVersion72);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + techType77 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType77.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.pbx.TechType techType3 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass4 = techType3.getClass();
        boolean boolean5 = asteriskVersion1.equals((java.lang.Object) wildcardClass4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int11 = asteriskVersion8.compareTo(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str14 = asteriskVersion13.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean16 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str18 = asteriskVersion17.toString();
        int int19 = asteriskVersion13.compareTo(asteriskVersion17);
        boolean boolean20 = asteriskVersion12.isAtLeast(asteriskVersion17);
        boolean boolean21 = asteriskVersion8.equals((java.lang.Object) asteriskVersion17);
        boolean boolean22 = asteriskVersion1.equals((java.lang.Object) asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int26 = asteriskVersion24.compareTo(asteriskVersion25);
        boolean boolean27 = asteriskVersion23.isAtLeast(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean30 = asteriskVersion28.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int32 = asteriskVersion29.compareTo(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean34 = asteriskVersion31.isAtLeast(asteriskVersion33);
        int int35 = asteriskVersion23.compareTo(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int38 = asteriskVersion36.compareTo(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int40 = asteriskVersion36.compareTo(asteriskVersion39);
        boolean boolean41 = asteriskVersion31.isAtLeast(asteriskVersion39);
        org.asteriskjava.pbx.PBXFactory pBXFactory42 = new org.asteriskjava.pbx.PBXFactory();
        java.lang.Class<?> wildcardClass43 = pBXFactory42.getClass();
        boolean boolean44 = asteriskVersion31.equals((java.lang.Object) wildcardClass43);
        int int45 = asteriskVersion1.compareTo(asteriskVersion31);
        java.lang.Class<?> wildcardClass46 = asteriskVersion31.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 1.0" + "'", str2, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType3 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType3.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Asterisk 11" + "'", str14, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Asterisk 14" + "'", str18, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent3 = null;
        htmlEventTracer0.onManagerEvent(managerEvent3);
        org.asteriskjava.manager.event.ManagerEvent managerEvent5 = null;
        htmlEventTracer0.onManagerEvent(managerEvent5);
        org.asteriskjava.manager.event.ManagerEvent managerEvent7 = null;
        htmlEventTracer0.onManagerEvent(managerEvent7);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("8");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.equals((java.lang.Object) asteriskVersion5);
        int int9 = asteriskVersion0.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str12 = asteriskVersion11.toString();
        org.asteriskjava.pbx.TechType techType13 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass14 = techType13.getClass();
        boolean boolean15 = asteriskVersion11.equals((java.lang.Object) wildcardClass14);
        int int16 = asteriskVersion10.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int19 = asteriskVersion17.compareTo(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str21 = asteriskVersion20.toString();
        boolean boolean22 = asteriskVersion18.isAtLeast(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str27 = asteriskVersion26.toString();
        boolean boolean28 = asteriskVersion24.isAtLeast(asteriskVersion26);
        boolean boolean30 = asteriskVersion24.equals((java.lang.Object) "0");
        boolean boolean31 = asteriskVersion18.equals((java.lang.Object) asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        boolean boolean37 = asteriskVersion33.isAtLeast(asteriskVersion35);
        int int38 = asteriskVersion32.compareTo(asteriskVersion33);
        int int39 = asteriskVersion18.compareTo(asteriskVersion32);
        java.lang.String str40 = asteriskVersion18.toString();
        boolean boolean41 = asteriskVersion10.equals((java.lang.Object) asteriskVersion18);
        boolean boolean42 = asteriskVersion5.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        java.lang.Object obj44 = null;
        boolean boolean45 = asteriskVersion43.equals(obj44);
        boolean boolean46 = asteriskVersion5.equals(obj44);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int48 = asteriskVersion5.compareTo(asteriskVersion47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Asterisk 1.0" + "'", str12, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType13 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType13.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 1.0" + "'", str21, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Asterisk 1.0" + "'", str27, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 16" + "'", str40, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("5");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point '5' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("6");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("Starting");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point 'Starting' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("Asterisk 13");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str4 = asteriskVersion3.toString();
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str10 = asteriskVersion9.toString();
        boolean boolean11 = asteriskVersion7.isAtLeast(asteriskVersion9);
        boolean boolean13 = asteriskVersion7.equals((java.lang.Object) "0");
        boolean boolean14 = asteriskVersion1.equals((java.lang.Object) asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int19 = asteriskVersion17.compareTo(asteriskVersion18);
        boolean boolean20 = asteriskVersion16.isAtLeast(asteriskVersion18);
        int int21 = asteriskVersion15.compareTo(asteriskVersion16);
        int int22 = asteriskVersion1.compareTo(asteriskVersion15);
        java.lang.Class<?> wildcardClass23 = asteriskVersion1.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Asterisk 1.0" + "'", str4, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Asterisk 1.0" + "'", str10, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("Asterisk 17");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer0.onManagerEvent(managerEvent10);
        org.asteriskjava.manager.event.ManagerEvent managerEvent12 = null;
        htmlEventTracer0.onManagerEvent(managerEvent12);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("5");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        java.lang.Class<?> wildcardClass1 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean20 = asteriskVersion18.isAtLeast(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int22 = asteriskVersion19.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean24 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int25 = asteriskVersion13.compareTo(asteriskVersion21);
        boolean boolean26 = asteriskVersion0.isAtLeast(asteriskVersion21);
        boolean boolean28 = asteriskVersion0.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean30 = asteriskVersion0.isAtLeast(asteriskVersion29);
        java.lang.Class<?> wildcardClass31 = asteriskVersion29.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int5 = asteriskVersion3.compareTo(asteriskVersion4);
        boolean boolean6 = asteriskVersion2.isAtLeast(asteriskVersion4);
        boolean boolean7 = asteriskVersion1.equals((java.lang.Object) asteriskVersion2);
        java.lang.Class<?> wildcardClass8 = asteriskVersion2.getClass();
        boolean boolean9 = asteriskVersion0.equals((java.lang.Object) asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str15 = asteriskVersion14.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean17 = asteriskVersion14.isAtLeast(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str19 = asteriskVersion18.toString();
        int int20 = asteriskVersion14.compareTo(asteriskVersion18);
        boolean boolean21 = asteriskVersion13.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        boolean boolean26 = asteriskVersion22.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean29 = asteriskVersion27.isAtLeast(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int31 = asteriskVersion28.compareTo(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean33 = asteriskVersion30.isAtLeast(asteriskVersion32);
        int int34 = asteriskVersion22.compareTo(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int38 = asteriskVersion36.compareTo(asteriskVersion37);
        boolean boolean39 = asteriskVersion35.isAtLeast(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean42 = asteriskVersion40.isAtLeast(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int44 = asteriskVersion41.compareTo(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean46 = asteriskVersion43.isAtLeast(asteriskVersion45);
        int int47 = asteriskVersion35.compareTo(asteriskVersion43);
        boolean boolean48 = asteriskVersion22.isAtLeast(asteriskVersion43);
        boolean boolean50 = asteriskVersion22.equals((java.lang.Object) 0);
        int int51 = asteriskVersion18.compareTo(asteriskVersion22);
        boolean boolean52 = asteriskVersion10.equals((java.lang.Object) asteriskVersion22);
        boolean boolean53 = asteriskVersion2.equals((java.lang.Object) asteriskVersion10);
        java.lang.Class<?> wildcardClass54 = asteriskVersion10.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Asterisk 11" + "'", str15, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Asterisk 14" + "'", str19, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean20 = asteriskVersion18.isAtLeast(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int22 = asteriskVersion19.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean24 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int25 = asteriskVersion13.compareTo(asteriskVersion21);
        boolean boolean26 = asteriskVersion0.isAtLeast(asteriskVersion21);
        java.lang.Class<?> wildcardClass27 = asteriskVersion21.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("Failure");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point 'Failure' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("Asterisk 13");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point 'Asterisk 13' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("Asterisk 16");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("Asterisk 13");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int6 = asteriskVersion4.compareTo(asteriskVersion5);
        boolean boolean7 = asteriskVersion3.isAtLeast(asteriskVersion5);
        int int8 = asteriskVersion0.compareTo(asteriskVersion3);
        java.lang.Class<?> wildcardClass9 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int5 = listenerPriority3.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int7 = listenerPriority4.compare(listenerPriority6);
        int int8 = listenerPriority1.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int11 = listenerPriority9.compare(listenerPriority10);
        int int12 = listenerPriority1.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int15 = listenerPriority13.compare(listenerPriority14);
        int int16 = listenerPriority1.compare(listenerPriority13);
        org.asteriskjava.pbx.ListenerPriority listenerPriority17 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int19 = listenerPriority17.compare(listenerPriority18);
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority21 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int22 = listenerPriority20.compare(listenerPriority21);
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int24 = listenerPriority21.compare(listenerPriority23);
        int int25 = listenerPriority18.compare(listenerPriority21);
        org.asteriskjava.pbx.ListenerPriority listenerPriority26 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int28 = listenerPriority26.compare(listenerPriority27);
        int int29 = listenerPriority18.compare(listenerPriority26);
        org.asteriskjava.pbx.ListenerPriority listenerPriority30 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int32 = listenerPriority30.compare(listenerPriority31);
        int int33 = listenerPriority18.compare(listenerPriority30);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int37 = asteriskVersion35.compareTo(asteriskVersion36);
        boolean boolean38 = asteriskVersion34.isAtLeast(asteriskVersion36);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean41 = asteriskVersion39.isAtLeast(asteriskVersion40);
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int43 = asteriskVersion40.compareTo(asteriskVersion42);
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean45 = asteriskVersion42.isAtLeast(asteriskVersion44);
        int int46 = asteriskVersion34.compareTo(asteriskVersion42);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int50 = asteriskVersion48.compareTo(asteriskVersion49);
        boolean boolean51 = asteriskVersion47.isAtLeast(asteriskVersion49);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean54 = asteriskVersion52.isAtLeast(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int56 = asteriskVersion53.compareTo(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean58 = asteriskVersion55.isAtLeast(asteriskVersion57);
        int int59 = asteriskVersion47.compareTo(asteriskVersion55);
        boolean boolean60 = asteriskVersion34.isAtLeast(asteriskVersion55);
        boolean boolean62 = asteriskVersion34.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion63 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean64 = asteriskVersion34.isAtLeast(asteriskVersion63);
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean67 = asteriskVersion65.isAtLeast(asteriskVersion66);
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion69 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean70 = asteriskVersion68.isAtLeast(asteriskVersion69);
        int int71 = asteriskVersion65.compareTo(asteriskVersion69);
        org.asteriskjava.AsteriskVersion asteriskVersion72 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean74 = asteriskVersion72.isAtLeast(asteriskVersion73);
        boolean boolean75 = asteriskVersion69.isAtLeast(asteriskVersion73);
        org.asteriskjava.pbx.ListenerPriority listenerPriority76 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean77 = asteriskVersion69.equals((java.lang.Object) listenerPriority76);
        boolean boolean78 = asteriskVersion34.equals((java.lang.Object) listenerPriority76);
        int int79 = listenerPriority18.compare(listenerPriority76);
        int int80 = listenerPriority1.compare(listenerPriority18);
        java.lang.Class<?> wildcardClass81 = listenerPriority18.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-4) + "'", int7 == (-4));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority17 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority17.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority21 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority21.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-4) + "'", int24 == (-4));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority26 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority26.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-2) + "'", int29 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority30 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority30.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-2) + "'", int33 == (-2));
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(asteriskVersion63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertNotNull(asteriskVersion69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion72);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority76 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority76.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-6) + "'", int79 == (-6));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.asteriskjava.pbx.DTMFTone dTMFTone0 = org.asteriskjava.pbx.DTMFTone.TWO;
        java.lang.String str1 = dTMFTone0.toString();
        java.lang.Class<?> wildcardClass2 = dTMFTone0.getClass();
        org.junit.Assert.assertTrue("'" + dTMFTone0 + "' != '" + org.asteriskjava.pbx.DTMFTone.TWO + "'", dTMFTone0.equals(org.asteriskjava.pbx.DTMFTone.TWO));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2" + "'", str1, "2");
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("Asterisk 14");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.pbx.TechType techType3 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass4 = techType3.getClass();
        boolean boolean5 = asteriskVersion1.equals((java.lang.Object) wildcardClass4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int11 = asteriskVersion8.compareTo(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str14 = asteriskVersion13.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean16 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str18 = asteriskVersion17.toString();
        int int19 = asteriskVersion13.compareTo(asteriskVersion17);
        boolean boolean20 = asteriskVersion12.isAtLeast(asteriskVersion17);
        boolean boolean21 = asteriskVersion8.equals((java.lang.Object) asteriskVersion17);
        boolean boolean22 = asteriskVersion1.equals((java.lang.Object) asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int26 = asteriskVersion24.compareTo(asteriskVersion25);
        boolean boolean27 = asteriskVersion23.isAtLeast(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean30 = asteriskVersion28.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int32 = asteriskVersion29.compareTo(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean34 = asteriskVersion31.isAtLeast(asteriskVersion33);
        int int35 = asteriskVersion23.compareTo(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int38 = asteriskVersion36.compareTo(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int40 = asteriskVersion36.compareTo(asteriskVersion39);
        boolean boolean41 = asteriskVersion31.isAtLeast(asteriskVersion39);
        org.asteriskjava.pbx.PBXFactory pBXFactory42 = new org.asteriskjava.pbx.PBXFactory();
        java.lang.Class<?> wildcardClass43 = pBXFactory42.getClass();
        boolean boolean44 = asteriskVersion31.equals((java.lang.Object) wildcardClass43);
        int int45 = asteriskVersion1.compareTo(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str47 = asteriskVersion46.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean49 = asteriskVersion46.isAtLeast(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int51 = asteriskVersion46.compareTo(asteriskVersion50);
        boolean boolean52 = asteriskVersion31.equals((java.lang.Object) asteriskVersion50);
        org.asteriskjava.AsteriskVersion asteriskVersion53 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int54 = asteriskVersion50.compareTo(asteriskVersion53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 1.0" + "'", str2, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType3 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType3.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Asterisk 11" + "'", str14, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Asterisk 14" + "'", str18, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Asterisk 11" + "'", str47, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int4 = asteriskVersion0.compareTo(asteriskVersion3);
        org.asteriskjava.pbx.TechType techType5 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean6 = asteriskVersion0.equals((java.lang.Object) techType5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        boolean boolean8 = asteriskVersion0.equals((java.lang.Object) asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str10 = asteriskVersion9.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean12 = asteriskVersion9.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean15 = asteriskVersion13.isAtLeast(asteriskVersion14);
        boolean boolean16 = asteriskVersion11.equals((java.lang.Object) asteriskVersion13);
        boolean boolean17 = asteriskVersion0.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int19 = asteriskVersion0.compareTo(asteriskVersion18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + techType5 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType5.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Asterisk 11" + "'", str10, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent2 = null;
        htmlEventTracer0.onManagerEvent(managerEvent2);
        org.asteriskjava.manager.event.ManagerEvent managerEvent4 = null;
        htmlEventTracer0.onManagerEvent(managerEvent4);
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer0.onManagerEvent(managerEvent10);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("Failure");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int6 = listenerPriority1.compare(listenerPriority5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        int int13 = asteriskVersion7.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        boolean boolean17 = asteriskVersion11.isAtLeast(asteriskVersion15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean19 = asteriskVersion11.equals((java.lang.Object) listenerPriority18);
        int int20 = listenerPriority5.compare(listenerPriority18);
        org.asteriskjava.pbx.ListenerPriority listenerPriority21 = org.asteriskjava.pbx.ListenerPriority.REALTIME;
        org.asteriskjava.pbx.ListenerPriority listenerPriority22 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int23 = listenerPriority21.compare(listenerPriority22);
        org.asteriskjava.pbx.ListenerPriority listenerPriority24 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority25 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int26 = listenerPriority24.compare(listenerPriority25);
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int28 = listenerPriority25.compare(listenerPriority27);
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority30 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int31 = listenerPriority29.compare(listenerPriority30);
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority33 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int34 = listenerPriority32.compare(listenerPriority33);
        org.asteriskjava.pbx.ListenerPriority listenerPriority35 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int36 = listenerPriority33.compare(listenerPriority35);
        int int37 = listenerPriority30.compare(listenerPriority33);
        int int38 = listenerPriority27.compare(listenerPriority33);
        org.asteriskjava.pbx.ListenerPriority listenerPriority39 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority40 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority41 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int42 = listenerPriority40.compare(listenerPriority41);
        org.asteriskjava.pbx.ListenerPriority listenerPriority43 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int44 = listenerPriority41.compare(listenerPriority43);
        int int45 = listenerPriority39.compare(listenerPriority41);
        int int46 = listenerPriority33.compare(listenerPriority41);
        int int47 = listenerPriority21.compare(listenerPriority33);
        int int48 = listenerPriority18.compare(listenerPriority21);
        org.asteriskjava.pbx.ListenerPriority listenerPriority49 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority50 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int51 = listenerPriority49.compare(listenerPriority50);
        org.asteriskjava.pbx.ListenerPriority listenerPriority52 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int53 = listenerPriority50.compare(listenerPriority52);
        org.asteriskjava.pbx.ListenerPriority listenerPriority54 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int55 = listenerPriority50.compare(listenerPriority54);
        org.asteriskjava.pbx.ListenerPriority listenerPriority56 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int57 = listenerPriority50.compare(listenerPriority56);
        org.asteriskjava.pbx.ListenerPriority listenerPriority58 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority59 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority60 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int61 = listenerPriority59.compare(listenerPriority60);
        org.asteriskjava.pbx.ListenerPriority listenerPriority62 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority63 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int64 = listenerPriority62.compare(listenerPriority63);
        org.asteriskjava.pbx.ListenerPriority listenerPriority65 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int66 = listenerPriority63.compare(listenerPriority65);
        int int67 = listenerPriority60.compare(listenerPriority63);
        org.asteriskjava.pbx.ListenerPriority listenerPriority68 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority69 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int70 = listenerPriority68.compare(listenerPriority69);
        int int71 = listenerPriority60.compare(listenerPriority68);
        int int72 = listenerPriority58.compare(listenerPriority60);
        int int73 = listenerPriority56.compare(listenerPriority60);
        org.asteriskjava.pbx.ListenerPriority listenerPriority74 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority75 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int76 = listenerPriority74.compare(listenerPriority75);
        org.asteriskjava.pbx.ListenerPriority listenerPriority77 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int78 = listenerPriority75.compare(listenerPriority77);
        int int79 = listenerPriority56.compare(listenerPriority75);
        int int80 = listenerPriority18.compare(listenerPriority56);
        org.asteriskjava.pbx.ListenerPriority listenerPriority81 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int82 = listenerPriority56.compare(listenerPriority81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-6) + "'", int6 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority21 + "' != '" + org.asteriskjava.pbx.ListenerPriority.REALTIME + "'", listenerPriority21.equals(org.asteriskjava.pbx.ListenerPriority.REALTIME));
        org.junit.Assert.assertTrue("'" + listenerPriority22 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority22.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-92) + "'", int23 == (-92));
        org.junit.Assert.assertTrue("'" + listenerPriority24 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority24.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority25 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority25.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-4) + "'", int28 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority30 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority30.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority33 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority33.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority35 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority35.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-4) + "'", int36 == (-4));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority39 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority39.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority40 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority40.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority41 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority41.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority43 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority43.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-4) + "'", int44 == (-4));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-90) + "'", int47 == (-90));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 96 + "'", int48 == 96);
        org.junit.Assert.assertTrue("'" + listenerPriority49 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority49.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority50 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority50.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority52 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority52.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-4) + "'", int53 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority54 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority54.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-6) + "'", int55 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority56 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority56.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-4) + "'", int57 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority58 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority58.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority59 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority59.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority60 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority60.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority62 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority62.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority63 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority63.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority65 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority65.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-4) + "'", int66 == (-4));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority68 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority68.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority69 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority69.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-2) + "'", int71 == (-2));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority74 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority74.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority75 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority75.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority77 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority77.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-4) + "'", int78 == (-4));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4 + "'", int79 == 4);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum0 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str1 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str2 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str3 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str4 = activityStatusEnum0.getDefaultMessage();
        java.lang.Class<?> wildcardClass5 = activityStatusEnum0.getClass();
        org.junit.Assert.assertTrue("'" + activityStatusEnum0 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum0.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Progress" + "'", str1, "Progress");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Progress" + "'", str2, "Progress");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Progress" + "'", str3, "Progress");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Progress" + "'", str4, "Progress");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent1 = null;
        htmlEventTracer0.onManagerEvent(managerEvent1);
        org.asteriskjava.manager.event.ManagerEvent managerEvent3 = null;
        htmlEventTracer0.onManagerEvent(managerEvent3);
        org.asteriskjava.manager.event.ManagerEvent managerEvent5 = null;
        htmlEventTracer0.onManagerEvent(managerEvent5);
        org.asteriskjava.manager.event.ManagerEvent managerEvent7 = null;
        htmlEventTracer0.onManagerEvent(managerEvent7);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean3 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int5 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean8 = asteriskVersion6.isAtLeast(asteriskVersion7);
        boolean boolean9 = asteriskVersion0.isAtLeast(asteriskVersion7);
        java.lang.Class<?> wildcardClass10 = asteriskVersion7.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 11" + "'", str1, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int4 = asteriskVersion1.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean6 = asteriskVersion3.isAtLeast(asteriskVersion5);
        java.lang.Class<?> wildcardClass7 = asteriskVersion3.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("Asterisk 1.6");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point 'Asterisk 1.6' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int7 = listenerPriority5.compare(listenerPriority6);
        org.asteriskjava.pbx.ListenerPriority listenerPriority8 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int10 = listenerPriority8.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int12 = listenerPriority9.compare(listenerPriority11);
        int int13 = listenerPriority6.compare(listenerPriority9);
        int int14 = listenerPriority3.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int16 = listenerPriority3.compare(listenerPriority15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority8 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority8.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.pbx.TechType techType3 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass4 = techType3.getClass();
        boolean boolean5 = asteriskVersion1.equals((java.lang.Object) wildcardClass4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int9 = asteriskVersion7.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str11 = asteriskVersion10.toString();
        boolean boolean12 = asteriskVersion8.isAtLeast(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int15 = asteriskVersion13.compareTo(asteriskVersion14);
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str17 = asteriskVersion16.toString();
        boolean boolean18 = asteriskVersion14.isAtLeast(asteriskVersion16);
        boolean boolean20 = asteriskVersion14.equals((java.lang.Object) "0");
        boolean boolean21 = asteriskVersion8.equals((java.lang.Object) asteriskVersion14);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int26 = asteriskVersion24.compareTo(asteriskVersion25);
        boolean boolean27 = asteriskVersion23.isAtLeast(asteriskVersion25);
        int int28 = asteriskVersion22.compareTo(asteriskVersion23);
        int int29 = asteriskVersion8.compareTo(asteriskVersion22);
        java.lang.String str30 = asteriskVersion8.toString();
        boolean boolean31 = asteriskVersion0.equals((java.lang.Object) asteriskVersion8);
        java.lang.Class<?> wildcardClass32 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 1.0" + "'", str2, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType3 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType3.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Asterisk 1.0" + "'", str11, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Asterisk 1.0" + "'", str17, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Asterisk 16" + "'", str30, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("#");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("0");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent1 = null;
        htmlEventTracer0.onManagerEvent(managerEvent1);
        org.asteriskjava.manager.event.ManagerEvent managerEvent3 = null;
        htmlEventTracer0.onManagerEvent(managerEvent3);
        org.asteriskjava.manager.event.ManagerEvent managerEvent5 = null;
        htmlEventTracer0.onManagerEvent(managerEvent5);
        org.asteriskjava.manager.event.ManagerEvent managerEvent7 = null;
        htmlEventTracer0.onManagerEvent(managerEvent7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent9 = null;
        htmlEventTracer0.onManagerEvent(managerEvent9);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int5 = listenerPriority3.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int7 = listenerPriority4.compare(listenerPriority6);
        int int8 = listenerPriority1.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int11 = listenerPriority9.compare(listenerPriority10);
        int int12 = listenerPriority1.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int15 = listenerPriority13.compare(listenerPriority14);
        org.asteriskjava.pbx.ListenerPriority listenerPriority16 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int17 = listenerPriority14.compare(listenerPriority16);
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int20 = listenerPriority18.compare(listenerPriority19);
        org.asteriskjava.pbx.ListenerPriority listenerPriority21 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority22 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int23 = listenerPriority21.compare(listenerPriority22);
        org.asteriskjava.pbx.ListenerPriority listenerPriority24 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int25 = listenerPriority22.compare(listenerPriority24);
        int int26 = listenerPriority19.compare(listenerPriority22);
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority28 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int29 = listenerPriority27.compare(listenerPriority28);
        int int30 = listenerPriority19.compare(listenerPriority27);
        int int31 = listenerPriority16.compare(listenerPriority27);
        int int32 = listenerPriority9.compare(listenerPriority27);
        org.asteriskjava.pbx.ListenerPriority listenerPriority33 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority34 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int35 = listenerPriority33.compare(listenerPriority34);
        org.asteriskjava.pbx.ListenerPriority listenerPriority36 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int37 = listenerPriority34.compare(listenerPriority36);
        org.asteriskjava.pbx.ListenerPriority listenerPriority38 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int39 = listenerPriority34.compare(listenerPriority38);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean42 = asteriskVersion40.isAtLeast(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean45 = asteriskVersion43.isAtLeast(asteriskVersion44);
        int int46 = asteriskVersion40.compareTo(asteriskVersion44);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean49 = asteriskVersion47.isAtLeast(asteriskVersion48);
        boolean boolean50 = asteriskVersion44.isAtLeast(asteriskVersion48);
        org.asteriskjava.pbx.ListenerPriority listenerPriority51 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean52 = asteriskVersion44.equals((java.lang.Object) listenerPriority51);
        int int53 = listenerPriority38.compare(listenerPriority51);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int57 = asteriskVersion55.compareTo(asteriskVersion56);
        boolean boolean58 = asteriskVersion54.isAtLeast(asteriskVersion56);
        org.asteriskjava.pbx.ListenerPriority listenerPriority59 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority60 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int61 = listenerPriority59.compare(listenerPriority60);
        org.asteriskjava.pbx.ListenerPriority listenerPriority62 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int63 = listenerPriority60.compare(listenerPriority62);
        org.asteriskjava.pbx.ListenerPriority listenerPriority64 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int65 = listenerPriority60.compare(listenerPriority64);
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean68 = asteriskVersion66.isAtLeast(asteriskVersion67);
        org.asteriskjava.AsteriskVersion asteriskVersion69 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean71 = asteriskVersion69.isAtLeast(asteriskVersion70);
        int int72 = asteriskVersion66.compareTo(asteriskVersion70);
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion74 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean75 = asteriskVersion73.isAtLeast(asteriskVersion74);
        boolean boolean76 = asteriskVersion70.isAtLeast(asteriskVersion74);
        org.asteriskjava.pbx.ListenerPriority listenerPriority77 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean78 = asteriskVersion70.equals((java.lang.Object) listenerPriority77);
        int int79 = listenerPriority64.compare(listenerPriority77);
        boolean boolean80 = asteriskVersion56.equals((java.lang.Object) listenerPriority64);
        int int81 = listenerPriority51.compare(listenerPriority64);
        org.asteriskjava.pbx.ListenerPriority listenerPriority82 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int83 = listenerPriority51.compare(listenerPriority82);
        int int84 = listenerPriority27.compare(listenerPriority51);
        java.lang.Class<?> wildcardClass85 = listenerPriority27.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-4) + "'", int7 == (-4));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority16 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority16.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-4) + "'", int17 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority21 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority21.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority22 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority22.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority24 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority24.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-4) + "'", int25 == (-4));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority28 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority28.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-2) + "'", int30 == (-2));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority33 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority33.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority34 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority34.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority36 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority36.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-4) + "'", int37 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority38 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority38.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-6) + "'", int39 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority51 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority51.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority59 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority59.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority60 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority60.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority62 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority62.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-4) + "'", int63 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority64 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority64.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-6) + "'", int65 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(asteriskVersion69);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertNotNull(asteriskVersion74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority77 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority77.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority82 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority82.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4 + "'", int83 == 4);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-4) + "'", int84 == (-4));
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.equals((java.lang.Object) asteriskVersion5);
        int int9 = asteriskVersion0.compareTo(asteriskVersion5);
        java.lang.Class<?> wildcardClass10 = asteriskVersion5.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("8");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent4 = null;
        htmlEventTracer0.onManagerEvent(managerEvent4);
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer0.onManagerEvent(managerEvent10);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.Class<?> wildcardClass1 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("8");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean6 = asteriskVersion0.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int10 = asteriskVersion8.compareTo(asteriskVersion9);
        boolean boolean11 = asteriskVersion7.isAtLeast(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int16 = asteriskVersion13.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean18 = asteriskVersion15.isAtLeast(asteriskVersion17);
        int int19 = asteriskVersion7.compareTo(asteriskVersion15);
        int int20 = asteriskVersion0.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int23 = asteriskVersion21.compareTo(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str25 = asteriskVersion24.toString();
        boolean boolean26 = asteriskVersion22.isAtLeast(asteriskVersion24);
        boolean boolean28 = asteriskVersion22.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean31 = asteriskVersion29.isAtLeast(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int33 = asteriskVersion30.compareTo(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean35 = asteriskVersion32.isAtLeast(asteriskVersion34);
        boolean boolean36 = asteriskVersion22.isAtLeast(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int39 = asteriskVersion37.compareTo(asteriskVersion38);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int43 = asteriskVersion41.compareTo(asteriskVersion42);
        boolean boolean44 = asteriskVersion40.isAtLeast(asteriskVersion42);
        int int45 = asteriskVersion37.compareTo(asteriskVersion40);
        java.lang.String str46 = asteriskVersion37.toString();
        java.lang.String str47 = asteriskVersion37.toString();
        int int48 = asteriskVersion22.compareTo(asteriskVersion37);
        int int49 = asteriskVersion7.compareTo(asteriskVersion22);
        java.lang.Class<?> wildcardClass50 = asteriskVersion22.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Asterisk 1.0" + "'", str25, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Asterisk 17" + "'", str46, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Asterisk 17" + "'", str47, "Asterisk 17");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        boolean boolean10 = asteriskVersion4.isAtLeast(asteriskVersion8);
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean12 = asteriskVersion4.equals((java.lang.Object) listenerPriority11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int14 = asteriskVersion4.compareTo(asteriskVersion13);
        java.lang.Class<?> wildcardClass15 = asteriskVersion13.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer0.onManagerEvent(managerEvent10);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("3");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean6 = asteriskVersion0.isAtLeast(asteriskVersion5);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer7.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer7.onManagerEvent(managerEvent10);
        boolean boolean12 = asteriskVersion0.equals((java.lang.Object) htmlEventTracer7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent13 = null;
        htmlEventTracer7.onManagerEvent(managerEvent13);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.asteriskjava.pbx.DTMFTone dTMFTone0 = org.asteriskjava.pbx.DTMFTone.STAR;
        java.lang.String str1 = dTMFTone0.toString();
        java.lang.Class<?> wildcardClass2 = dTMFTone0.getClass();
        org.junit.Assert.assertTrue("'" + dTMFTone0 + "' != '" + org.asteriskjava.pbx.DTMFTone.STAR + "'", dTMFTone0.equals(org.asteriskjava.pbx.DTMFTone.STAR));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "*" + "'", str1, "*");
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.pbx.TechType techType3 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass4 = techType3.getClass();
        boolean boolean5 = asteriskVersion1.equals((java.lang.Object) wildcardClass4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int11 = asteriskVersion8.compareTo(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str14 = asteriskVersion13.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean16 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str18 = asteriskVersion17.toString();
        int int19 = asteriskVersion13.compareTo(asteriskVersion17);
        boolean boolean20 = asteriskVersion12.isAtLeast(asteriskVersion17);
        boolean boolean21 = asteriskVersion8.equals((java.lang.Object) asteriskVersion17);
        boolean boolean22 = asteriskVersion1.equals((java.lang.Object) asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str24 = asteriskVersion23.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean26 = asteriskVersion23.isAtLeast(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int28 = asteriskVersion23.compareTo(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean31 = asteriskVersion29.isAtLeast(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int33 = asteriskVersion29.compareTo(asteriskVersion32);
        org.asteriskjava.pbx.DTMFTone dTMFTone34 = org.asteriskjava.pbx.DTMFTone.STAR;
        java.lang.String str35 = dTMFTone34.toString();
        java.lang.String str36 = dTMFTone34.toString();
        java.lang.String str37 = dTMFTone34.toString();
        java.lang.String str38 = dTMFTone34.toString();
        boolean boolean39 = asteriskVersion29.equals((java.lang.Object) str38);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer40 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent41 = null;
        htmlEventTracer40.onManagerEvent(managerEvent41);
        java.lang.Class<?> wildcardClass43 = htmlEventTracer40.getClass();
        boolean boolean44 = asteriskVersion29.equals((java.lang.Object) htmlEventTracer40);
        boolean boolean45 = asteriskVersion23.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int50 = asteriskVersion48.compareTo(asteriskVersion49);
        boolean boolean51 = asteriskVersion47.isAtLeast(asteriskVersion49);
        int int52 = asteriskVersion46.compareTo(asteriskVersion47);
        int int53 = asteriskVersion23.compareTo(asteriskVersion46);
        boolean boolean54 = asteriskVersion8.equals((java.lang.Object) asteriskVersion23);
        java.lang.Class<?> wildcardClass55 = asteriskVersion23.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 1.0" + "'", str2, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType3 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType3.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Asterisk 11" + "'", str14, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Asterisk 14" + "'", str18, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Asterisk 11" + "'", str24, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + dTMFTone34 + "' != '" + org.asteriskjava.pbx.DTMFTone.STAR + "'", dTMFTone34.equals(org.asteriskjava.pbx.DTMFTone.STAR));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "*" + "'", str35, "*");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "*" + "'", str36, "*");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "*" + "'", str37, "*");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "*" + "'", str38, "*");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent7 = null;
        htmlEventTracer0.onManagerEvent(managerEvent7);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int6 = asteriskVersion2.compareTo(asteriskVersion5);
        org.asteriskjava.pbx.TechType techType7 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean8 = asteriskVersion2.equals((java.lang.Object) techType7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        boolean boolean10 = asteriskVersion2.equals((java.lang.Object) asteriskVersion9);
        int int11 = asteriskVersion0.compareTo(asteriskVersion2);
        org.asteriskjava.pbx.DTMFTone dTMFTone12 = org.asteriskjava.pbx.DTMFTone.STAR;
        java.lang.String str13 = dTMFTone12.toString();
        java.lang.String str14 = dTMFTone12.toString();
        boolean boolean15 = asteriskVersion2.equals((java.lang.Object) dTMFTone12);
        java.lang.String str16 = dTMFTone12.toString();
        java.lang.String str17 = dTMFTone12.toString();
        java.lang.Class<?> wildcardClass18 = dTMFTone12.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 1.0" + "'", str1, "Asterisk 1.0");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + techType7 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType7.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + dTMFTone12 + "' != '" + org.asteriskjava.pbx.DTMFTone.STAR + "'", dTMFTone12.equals(org.asteriskjava.pbx.DTMFTone.STAR));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "*" + "'", str13, "*");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "*" + "'", str14, "*");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "*" + "'", str16, "*");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "*" + "'", str17, "*");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean6 = asteriskVersion0.isAtLeast(asteriskVersion5);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer7.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer7.onManagerEvent(managerEvent10);
        boolean boolean12 = asteriskVersion0.equals((java.lang.Object) htmlEventTracer7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent13 = null;
        htmlEventTracer7.onManagerEvent(managerEvent13);
        org.asteriskjava.manager.event.ManagerEvent managerEvent15 = null;
        htmlEventTracer7.onManagerEvent(managerEvent15);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.equals((java.lang.Object) asteriskVersion5);
        int int9 = asteriskVersion0.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str12 = asteriskVersion11.toString();
        org.asteriskjava.pbx.TechType techType13 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass14 = techType13.getClass();
        boolean boolean15 = asteriskVersion11.equals((java.lang.Object) wildcardClass14);
        int int16 = asteriskVersion10.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int19 = asteriskVersion17.compareTo(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str21 = asteriskVersion20.toString();
        boolean boolean22 = asteriskVersion18.isAtLeast(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str27 = asteriskVersion26.toString();
        boolean boolean28 = asteriskVersion24.isAtLeast(asteriskVersion26);
        boolean boolean30 = asteriskVersion24.equals((java.lang.Object) "0");
        boolean boolean31 = asteriskVersion18.equals((java.lang.Object) asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        boolean boolean37 = asteriskVersion33.isAtLeast(asteriskVersion35);
        int int38 = asteriskVersion32.compareTo(asteriskVersion33);
        int int39 = asteriskVersion18.compareTo(asteriskVersion32);
        java.lang.String str40 = asteriskVersion18.toString();
        boolean boolean41 = asteriskVersion10.equals((java.lang.Object) asteriskVersion18);
        boolean boolean42 = asteriskVersion5.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean46 = asteriskVersion44.isAtLeast(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean49 = asteriskVersion47.isAtLeast(asteriskVersion48);
        int int50 = asteriskVersion44.compareTo(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean53 = asteriskVersion51.isAtLeast(asteriskVersion52);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean56 = asteriskVersion54.isAtLeast(asteriskVersion55);
        int int57 = asteriskVersion51.compareTo(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean60 = asteriskVersion58.isAtLeast(asteriskVersion59);
        boolean boolean61 = asteriskVersion55.isAtLeast(asteriskVersion59);
        boolean boolean62 = asteriskVersion44.isAtLeast(asteriskVersion59);
        int int63 = asteriskVersion43.compareTo(asteriskVersion44);
        int int64 = asteriskVersion18.compareTo(asteriskVersion44);
        java.lang.String str65 = asteriskVersion44.toString();
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer66 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer66.write();
        htmlEventTracer66.write();
        htmlEventTracer66.write();
        htmlEventTracer66.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent71 = null;
        htmlEventTracer66.onManagerEvent(managerEvent71);
        boolean boolean73 = asteriskVersion44.equals((java.lang.Object) htmlEventTracer66);
        org.asteriskjava.pbx.ListenerPriority listenerPriority74 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority75 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int76 = listenerPriority74.compare(listenerPriority75);
        org.asteriskjava.pbx.ListenerPriority listenerPriority77 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority78 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int79 = listenerPriority77.compare(listenerPriority78);
        org.asteriskjava.pbx.ListenerPriority listenerPriority80 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int81 = listenerPriority78.compare(listenerPriority80);
        int int82 = listenerPriority75.compare(listenerPriority78);
        boolean boolean83 = asteriskVersion44.equals((java.lang.Object) listenerPriority78);
        org.asteriskjava.pbx.ListenerPriority listenerPriority84 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int85 = listenerPriority78.compare(listenerPriority84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Asterisk 1.0" + "'", str12, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType13 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType13.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 1.0" + "'", str21, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Asterisk 1.0" + "'", str27, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 16" + "'", str40, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Asterisk 20" + "'", str65, "Asterisk 20");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority74 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority74.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority75 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority75.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority77 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority77.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority78 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority78.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority80 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority80.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-4) + "'", int81 == (-4));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer7.write();
        boolean boolean9 = asteriskVersion4.equals((java.lang.Object) htmlEventTracer7);
        htmlEventTracer7.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent11 = null;
        htmlEventTracer7.onManagerEvent(managerEvent11);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum0 = org.asteriskjava.pbx.ActivityStatusEnum.SUCCESS;
        java.lang.String str1 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str2 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str3 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str4 = activityStatusEnum0.getDefaultMessage();
        java.lang.Class<?> wildcardClass5 = activityStatusEnum0.getClass();
        org.junit.Assert.assertTrue("'" + activityStatusEnum0 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.SUCCESS + "'", activityStatusEnum0.equals(org.asteriskjava.pbx.ActivityStatusEnum.SUCCESS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Success" + "'", str1, "Success");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Success" + "'", str2, "Success");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Success" + "'", str3, "Success");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Success" + "'", str4, "Success");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer7.write();
        boolean boolean9 = asteriskVersion4.equals((java.lang.Object) htmlEventTracer7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer7.onManagerEvent(managerEvent10);
        org.asteriskjava.manager.event.ManagerEvent managerEvent12 = null;
        htmlEventTracer7.onManagerEvent(managerEvent12);
        org.asteriskjava.manager.event.ManagerEvent managerEvent14 = null;
        htmlEventTracer7.onManagerEvent(managerEvent14);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("Failure");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        boolean boolean5 = asteriskVersion0.equals((java.lang.Object) boolean4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean8 = asteriskVersion6.isAtLeast(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int10 = asteriskVersion6.compareTo(asteriskVersion9);
        int int11 = asteriskVersion0.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int15 = asteriskVersion13.compareTo(asteriskVersion14);
        boolean boolean16 = asteriskVersion12.isAtLeast(asteriskVersion14);
        boolean boolean17 = asteriskVersion0.isAtLeast(asteriskVersion12);
        java.lang.Class<?> wildcardClass18 = asteriskVersion12.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("Starting");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean6 = asteriskVersion0.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int10 = asteriskVersion8.compareTo(asteriskVersion9);
        boolean boolean11 = asteriskVersion7.isAtLeast(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int16 = asteriskVersion13.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean18 = asteriskVersion15.isAtLeast(asteriskVersion17);
        int int19 = asteriskVersion7.compareTo(asteriskVersion15);
        int int20 = asteriskVersion0.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum22 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str23 = activityStatusEnum22.getDefaultMessage();
        boolean boolean24 = asteriskVersion21.equals((java.lang.Object) str23);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean27 = asteriskVersion25.isAtLeast(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean30 = asteriskVersion28.isAtLeast(asteriskVersion29);
        int int31 = asteriskVersion25.compareTo(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean34 = asteriskVersion32.isAtLeast(asteriskVersion33);
        boolean boolean35 = asteriskVersion29.isAtLeast(asteriskVersion33);
        org.asteriskjava.pbx.ListenerPriority listenerPriority36 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean37 = asteriskVersion29.equals((java.lang.Object) listenerPriority36);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int39 = asteriskVersion29.compareTo(asteriskVersion38);
        boolean boolean40 = asteriskVersion21.equals((java.lang.Object) asteriskVersion29);
        int int41 = asteriskVersion7.compareTo(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str44 = asteriskVersion43.toString();
        org.asteriskjava.pbx.TechType techType45 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass46 = techType45.getClass();
        boolean boolean47 = asteriskVersion43.equals((java.lang.Object) wildcardClass46);
        int int48 = asteriskVersion42.compareTo(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int52 = asteriskVersion50.compareTo(asteriskVersion51);
        boolean boolean53 = asteriskVersion49.isAtLeast(asteriskVersion51);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean56 = asteriskVersion54.isAtLeast(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int58 = asteriskVersion55.compareTo(asteriskVersion57);
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean60 = asteriskVersion57.isAtLeast(asteriskVersion59);
        int int61 = asteriskVersion49.compareTo(asteriskVersion57);
        org.asteriskjava.AsteriskVersion asteriskVersion62 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion63 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int65 = asteriskVersion63.compareTo(asteriskVersion64);
        boolean boolean66 = asteriskVersion62.isAtLeast(asteriskVersion64);
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean69 = asteriskVersion67.isAtLeast(asteriskVersion68);
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int71 = asteriskVersion68.compareTo(asteriskVersion70);
        org.asteriskjava.AsteriskVersion asteriskVersion72 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean73 = asteriskVersion70.isAtLeast(asteriskVersion72);
        int int74 = asteriskVersion62.compareTo(asteriskVersion70);
        boolean boolean75 = asteriskVersion49.isAtLeast(asteriskVersion70);
        boolean boolean77 = asteriskVersion49.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion78 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean79 = asteriskVersion49.isAtLeast(asteriskVersion78);
        java.lang.String str80 = asteriskVersion78.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion81 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion82 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int83 = asteriskVersion81.compareTo(asteriskVersion82);
        org.asteriskjava.AsteriskVersion asteriskVersion84 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int85 = asteriskVersion81.compareTo(asteriskVersion84);
        java.lang.String str86 = asteriskVersion84.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion87 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion88 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int89 = asteriskVersion87.compareTo(asteriskVersion88);
        org.asteriskjava.AsteriskVersion asteriskVersion90 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int91 = asteriskVersion87.compareTo(asteriskVersion90);
        org.asteriskjava.pbx.TechType techType92 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean93 = asteriskVersion87.equals((java.lang.Object) techType92);
        boolean boolean94 = asteriskVersion84.isAtLeast(asteriskVersion87);
        int int95 = asteriskVersion78.compareTo(asteriskVersion87);
        boolean boolean96 = asteriskVersion43.isAtLeast(asteriskVersion78);
        boolean boolean98 = asteriskVersion43.equals((java.lang.Object) 100);
        int int99 = asteriskVersion29.compareTo(asteriskVersion43);
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + activityStatusEnum22 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum22.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Progress" + "'", str23, "Progress");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority36 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority36.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Asterisk 1.0" + "'", str44, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType45 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType45.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion62);
        org.junit.Assert.assertNotNull(asteriskVersion63);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(asteriskVersion78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Asterisk 20" + "'", str80, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion81);
        org.junit.Assert.assertNotNull(asteriskVersion82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Asterisk 1.8" + "'", str86, "Asterisk 1.8");
        org.junit.Assert.assertNotNull(asteriskVersion87);
        org.junit.Assert.assertNotNull(asteriskVersion88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + techType92 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType92.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.REALTIME;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority2 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int3 = listenerPriority1.compare(listenerPriority2);
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int5 = listenerPriority2.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int7 = listenerPriority2.compare(listenerPriority6);
        org.asteriskjava.pbx.ListenerPriority listenerPriority8 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int9 = listenerPriority2.compare(listenerPriority8);
        int int10 = listenerPriority0.compare(listenerPriority2);
        java.lang.Class<?> wildcardClass11 = listenerPriority0.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.REALTIME + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.REALTIME));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority2 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority2.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-4) + "'", int5 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-6) + "'", int7 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority8 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority8.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-4) + "'", int9 == (-4));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-90) + "'", int10 == (-90));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        boolean boolean10 = asteriskVersion4.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean12 = asteriskVersion8.isAtLeast(asteriskVersion11);
        java.lang.String str13 = asteriskVersion11.toString();
        boolean boolean15 = asteriskVersion11.equals((java.lang.Object) "Asterisk 18");
        java.lang.Class<?> wildcardClass16 = asteriskVersion11.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Asterisk 1.4" + "'", str13, "Asterisk 1.4");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.equals((java.lang.Object) asteriskVersion5);
        int int9 = asteriskVersion0.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        java.lang.Object obj11 = null;
        boolean boolean12 = asteriskVersion10.equals(obj11);
        boolean boolean13 = asteriskVersion0.isAtLeast(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str15 = asteriskVersion14.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean17 = asteriskVersion14.isAtLeast(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int19 = asteriskVersion14.compareTo(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int21 = asteriskVersion18.compareTo(asteriskVersion20);
        int int22 = asteriskVersion0.compareTo(asteriskVersion18);
        java.lang.Class<?> wildcardClass23 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Asterisk 11" + "'", str15, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("Asterisk 1.6");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int4 = asteriskVersion1.compareTo(asteriskVersion3);
        java.lang.String str5 = asteriskVersion3.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str8 = asteriskVersion7.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean10 = asteriskVersion7.isAtLeast(asteriskVersion9);
        boolean boolean11 = asteriskVersion6.equals((java.lang.Object) boolean10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int16 = asteriskVersion12.compareTo(asteriskVersion15);
        int int17 = asteriskVersion6.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int21 = asteriskVersion19.compareTo(asteriskVersion20);
        boolean boolean22 = asteriskVersion18.isAtLeast(asteriskVersion20);
        boolean boolean23 = asteriskVersion6.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int26 = asteriskVersion24.compareTo(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int28 = asteriskVersion24.compareTo(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean31 = asteriskVersion29.isAtLeast(asteriskVersion30);
        boolean boolean32 = asteriskVersion27.isAtLeast(asteriskVersion30);
        int int33 = asteriskVersion18.compareTo(asteriskVersion27);
        boolean boolean34 = asteriskVersion3.isAtLeast(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        java.lang.String str36 = asteriskVersion35.toString();
        boolean boolean37 = asteriskVersion27.isAtLeast(asteriskVersion35);
        java.lang.Class<?> wildcardClass38 = asteriskVersion27.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Asterisk 20" + "'", str5, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Asterisk 11" + "'", str8, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Asterisk 12" + "'", str36, "Asterisk 12");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent1 = null;
        htmlEventTracer0.onManagerEvent(managerEvent1);
        org.asteriskjava.manager.event.ManagerEvent managerEvent3 = null;
        htmlEventTracer0.onManagerEvent(managerEvent3);
        org.asteriskjava.manager.event.ManagerEvent managerEvent5 = null;
        htmlEventTracer0.onManagerEvent(managerEvent5);
        org.asteriskjava.manager.event.ManagerEvent managerEvent7 = null;
        htmlEventTracer0.onManagerEvent(managerEvent7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent9 = null;
        htmlEventTracer0.onManagerEvent(managerEvent9);
        java.lang.Class<?> wildcardClass11 = htmlEventTracer0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int7 = listenerPriority5.compare(listenerPriority6);
        org.asteriskjava.pbx.ListenerPriority listenerPriority8 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int10 = listenerPriority8.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int12 = listenerPriority9.compare(listenerPriority11);
        int int13 = listenerPriority6.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int16 = listenerPriority14.compare(listenerPriority15);
        int int17 = listenerPriority6.compare(listenerPriority14);
        int int18 = listenerPriority3.compare(listenerPriority14);
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority21 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int22 = listenerPriority20.compare(listenerPriority21);
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority24 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int25 = listenerPriority23.compare(listenerPriority24);
        org.asteriskjava.pbx.ListenerPriority listenerPriority26 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int27 = listenerPriority24.compare(listenerPriority26);
        int int28 = listenerPriority21.compare(listenerPriority24);
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority30 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int31 = listenerPriority29.compare(listenerPriority30);
        int int32 = listenerPriority21.compare(listenerPriority29);
        int int33 = listenerPriority19.compare(listenerPriority21);
        int int34 = listenerPriority3.compare(listenerPriority21);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int38 = asteriskVersion36.compareTo(asteriskVersion37);
        boolean boolean39 = asteriskVersion35.isAtLeast(asteriskVersion37);
        org.asteriskjava.pbx.ListenerPriority listenerPriority40 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority41 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int42 = listenerPriority40.compare(listenerPriority41);
        org.asteriskjava.pbx.ListenerPriority listenerPriority43 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int44 = listenerPriority41.compare(listenerPriority43);
        org.asteriskjava.pbx.ListenerPriority listenerPriority45 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int46 = listenerPriority41.compare(listenerPriority45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean49 = asteriskVersion47.isAtLeast(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean52 = asteriskVersion50.isAtLeast(asteriskVersion51);
        int int53 = asteriskVersion47.compareTo(asteriskVersion51);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean56 = asteriskVersion54.isAtLeast(asteriskVersion55);
        boolean boolean57 = asteriskVersion51.isAtLeast(asteriskVersion55);
        org.asteriskjava.pbx.ListenerPriority listenerPriority58 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean59 = asteriskVersion51.equals((java.lang.Object) listenerPriority58);
        int int60 = listenerPriority45.compare(listenerPriority58);
        boolean boolean61 = asteriskVersion37.equals((java.lang.Object) listenerPriority45);
        int int62 = listenerPriority3.compare(listenerPriority45);
        org.asteriskjava.pbx.ListenerPriority listenerPriority63 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority64 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int65 = listenerPriority63.compare(listenerPriority64);
        org.asteriskjava.pbx.ListenerPriority listenerPriority66 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int67 = listenerPriority64.compare(listenerPriority66);
        org.asteriskjava.pbx.ListenerPriority listenerPriority68 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int69 = listenerPriority64.compare(listenerPriority68);
        int int70 = listenerPriority45.compare(listenerPriority68);
        org.asteriskjava.pbx.ListenerPriority listenerPriority71 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int72 = listenerPriority68.compare(listenerPriority71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority8 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority8.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-2) + "'", int17 == (-2));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority21 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority21.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority24 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority24.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority26 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority26.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-4) + "'", int27 == (-4));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority30 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority30.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-2) + "'", int32 == (-2));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority40 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority40.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority41 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority41.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority43 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority43.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-4) + "'", int44 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority45 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority45.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-6) + "'", int46 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority58 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority58.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-2) + "'", int62 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority63 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority63.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority64 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority64.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority66 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority66.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-4) + "'", int67 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority68 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority68.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-6) + "'", int69 == (-6));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer7.write();
        boolean boolean9 = asteriskVersion4.equals((java.lang.Object) htmlEventTracer7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer7.onManagerEvent(managerEvent10);
        org.asteriskjava.manager.event.ManagerEvent managerEvent12 = null;
        htmlEventTracer7.onManagerEvent(managerEvent12);
        org.asteriskjava.manager.event.ManagerEvent managerEvent14 = null;
        htmlEventTracer7.onManagerEvent(managerEvent14);
        org.asteriskjava.manager.event.ManagerEvent managerEvent16 = null;
        htmlEventTracer7.onManagerEvent(managerEvent16);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str4 = asteriskVersion3.toString();
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        boolean boolean7 = asteriskVersion1.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int10 = asteriskVersion8.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str12 = asteriskVersion11.toString();
        boolean boolean13 = asteriskVersion9.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str18 = asteriskVersion17.toString();
        boolean boolean19 = asteriskVersion15.isAtLeast(asteriskVersion17);
        boolean boolean21 = asteriskVersion15.equals((java.lang.Object) "0");
        boolean boolean22 = asteriskVersion9.equals((java.lang.Object) asteriskVersion15);
        boolean boolean23 = asteriskVersion1.isAtLeast(asteriskVersion15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority24 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority25 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int26 = listenerPriority24.compare(listenerPriority25);
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int28 = listenerPriority25.compare(listenerPriority27);
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int30 = listenerPriority25.compare(listenerPriority29);
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int32 = listenerPriority25.compare(listenerPriority31);
        boolean boolean33 = asteriskVersion15.equals((java.lang.Object) listenerPriority25);
        java.lang.Class<?> wildcardClass34 = listenerPriority25.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Asterisk 1.0" + "'", str4, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Asterisk 1.0" + "'", str12, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Asterisk 1.0" + "'", str18, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority24 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority24.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority25 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority25.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-4) + "'", int28 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-6) + "'", int30 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-4) + "'", int32 == (-4));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        boolean boolean9 = asteriskVersion5.isAtLeast(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int14 = asteriskVersion11.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean16 = asteriskVersion13.isAtLeast(asteriskVersion15);
        int int17 = asteriskVersion5.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int20 = asteriskVersion18.compareTo(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int22 = asteriskVersion18.compareTo(asteriskVersion21);
        boolean boolean23 = asteriskVersion13.isAtLeast(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int26 = asteriskVersion24.compareTo(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str28 = asteriskVersion27.toString();
        boolean boolean29 = asteriskVersion25.isAtLeast(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int32 = asteriskVersion30.compareTo(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str34 = asteriskVersion33.toString();
        boolean boolean35 = asteriskVersion31.isAtLeast(asteriskVersion33);
        boolean boolean37 = asteriskVersion31.equals((java.lang.Object) "0");
        boolean boolean38 = asteriskVersion25.equals((java.lang.Object) asteriskVersion31);
        boolean boolean39 = asteriskVersion21.isAtLeast(asteriskVersion25);
        int int40 = asteriskVersion3.compareTo(asteriskVersion21);
        int int41 = asteriskVersion0.compareTo(asteriskVersion21);
        java.lang.Class<?> wildcardClass42 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Asterisk 1.0" + "'", str28, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Asterisk 1.0" + "'", str34, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        java.lang.String str1 = asteriskVersion0.toString();
        java.lang.String str2 = asteriskVersion0.toString();
        java.lang.Class<?> wildcardClass3 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 12" + "'", str1, "Asterisk 12");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 12" + "'", str2, "Asterisk 12");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.pbx.DTMFTone dTMFTone3 = org.asteriskjava.pbx.DTMFTone.FOUR;
        boolean boolean4 = asteriskVersion0.equals((java.lang.Object) dTMFTone3);
        java.lang.String str5 = dTMFTone3.toString();
        java.lang.String str6 = dTMFTone3.toString();
        java.lang.Class<?> wildcardClass7 = dTMFTone3.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + dTMFTone3 + "' != '" + org.asteriskjava.pbx.DTMFTone.FOUR + "'", dTMFTone3.equals(org.asteriskjava.pbx.DTMFTone.FOUR));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "4" + "'", str5, "4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "4" + "'", str6, "4");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        boolean boolean9 = asteriskVersion5.isAtLeast(asteriskVersion7);
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int12 = listenerPriority10.compare(listenerPriority11);
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int14 = listenerPriority11.compare(listenerPriority13);
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int16 = listenerPriority11.compare(listenerPriority15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean19 = asteriskVersion17.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean22 = asteriskVersion20.isAtLeast(asteriskVersion21);
        int int23 = asteriskVersion17.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean26 = asteriskVersion24.isAtLeast(asteriskVersion25);
        boolean boolean27 = asteriskVersion21.isAtLeast(asteriskVersion25);
        org.asteriskjava.pbx.ListenerPriority listenerPriority28 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean29 = asteriskVersion21.equals((java.lang.Object) listenerPriority28);
        int int30 = listenerPriority15.compare(listenerPriority28);
        boolean boolean31 = asteriskVersion7.equals((java.lang.Object) listenerPriority15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority33 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int34 = listenerPriority32.compare(listenerPriority33);
        int int35 = listenerPriority15.compare(listenerPriority33);
        int int36 = listenerPriority3.compare(listenerPriority15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority37 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority38 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int39 = listenerPriority37.compare(listenerPriority38);
        org.asteriskjava.pbx.ListenerPriority listenerPriority40 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int41 = listenerPriority38.compare(listenerPriority40);
        org.asteriskjava.pbx.ListenerPriority listenerPriority42 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int43 = listenerPriority38.compare(listenerPriority42);
        org.asteriskjava.pbx.ListenerPriority listenerPriority44 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int45 = listenerPriority38.compare(listenerPriority44);
        org.asteriskjava.pbx.ListenerPriority listenerPriority46 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority47 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority48 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int49 = listenerPriority47.compare(listenerPriority48);
        org.asteriskjava.pbx.ListenerPriority listenerPriority50 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority51 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int52 = listenerPriority50.compare(listenerPriority51);
        org.asteriskjava.pbx.ListenerPriority listenerPriority53 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int54 = listenerPriority51.compare(listenerPriority53);
        int int55 = listenerPriority48.compare(listenerPriority51);
        org.asteriskjava.pbx.ListenerPriority listenerPriority56 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority57 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int58 = listenerPriority56.compare(listenerPriority57);
        int int59 = listenerPriority48.compare(listenerPriority56);
        int int60 = listenerPriority46.compare(listenerPriority48);
        int int61 = listenerPriority44.compare(listenerPriority48);
        int int62 = listenerPriority15.compare(listenerPriority48);
        org.asteriskjava.pbx.ListenerPriority listenerPriority63 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority64 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int65 = listenerPriority63.compare(listenerPriority64);
        org.asteriskjava.pbx.ListenerPriority listenerPriority66 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int67 = listenerPriority64.compare(listenerPriority66);
        org.asteriskjava.pbx.ListenerPriority listenerPriority68 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int69 = listenerPriority64.compare(listenerPriority68);
        org.asteriskjava.pbx.ListenerPriority listenerPriority70 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int71 = listenerPriority64.compare(listenerPriority70);
        org.asteriskjava.pbx.ListenerPriority listenerPriority72 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority73 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority74 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int75 = listenerPriority73.compare(listenerPriority74);
        org.asteriskjava.pbx.ListenerPriority listenerPriority76 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority77 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int78 = listenerPriority76.compare(listenerPriority77);
        org.asteriskjava.pbx.ListenerPriority listenerPriority79 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int80 = listenerPriority77.compare(listenerPriority79);
        int int81 = listenerPriority74.compare(listenerPriority77);
        org.asteriskjava.pbx.ListenerPriority listenerPriority82 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority83 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int84 = listenerPriority82.compare(listenerPriority83);
        int int85 = listenerPriority74.compare(listenerPriority82);
        int int86 = listenerPriority72.compare(listenerPriority74);
        int int87 = listenerPriority70.compare(listenerPriority74);
        org.asteriskjava.pbx.ListenerPriority listenerPriority88 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority89 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int90 = listenerPriority88.compare(listenerPriority89);
        org.asteriskjava.pbx.ListenerPriority listenerPriority91 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int92 = listenerPriority89.compare(listenerPriority91);
        int int93 = listenerPriority70.compare(listenerPriority89);
        org.asteriskjava.pbx.ListenerPriority listenerPriority94 = org.asteriskjava.pbx.ListenerPriority.REALTIME;
        org.asteriskjava.pbx.ListenerPriority listenerPriority95 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int96 = listenerPriority94.compare(listenerPriority95);
        int int97 = listenerPriority89.compare(listenerPriority95);
        int int98 = listenerPriority15.compare(listenerPriority89);
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-4) + "'", int14 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-6) + "'", int16 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority28 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority28.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority33 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority33.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-2) + "'", int36 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority37 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority37.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority38 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority38.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority40 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority40.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-4) + "'", int41 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority42 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority42.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-6) + "'", int43 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority44 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority44.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-4) + "'", int45 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority46 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority46.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority47 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority47.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority48 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority48.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority50 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority50.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority51 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority51.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority53 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority53.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-4) + "'", int54 == (-4));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority56 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority56.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority57 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority57.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-2) + "'", int59 == (-2));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertTrue("'" + listenerPriority63 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority63.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority64 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority64.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority66 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority66.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-4) + "'", int67 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority68 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority68.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-6) + "'", int69 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority70 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority70.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-4) + "'", int71 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority72 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority72.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority73 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority73.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority74 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority74.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority76 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority76.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority77 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority77.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority79 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority79.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-4) + "'", int80 == (-4));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority82 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority82.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority83 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority83.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-2) + "'", int85 == (-2));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority88 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority88.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority89 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority89.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority91 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority91.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-4) + "'", int92 == (-4));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 4 + "'", int93 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority94 + "' != '" + org.asteriskjava.pbx.ListenerPriority.REALTIME + "'", listenerPriority94.equals(org.asteriskjava.pbx.ListenerPriority.REALTIME));
        org.junit.Assert.assertTrue("'" + listenerPriority95 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority95.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-92) + "'", int96 == (-92));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-2) + "'", int97 == (-2));
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 6 + "'", int98 == 6);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("Asterisk 12");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("#");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent4 = null;
        htmlEventTracer0.onManagerEvent(managerEvent4);
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer0.onManagerEvent(managerEvent10);
        java.lang.Class<?> wildcardClass12 = htmlEventTracer0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int7 = asteriskVersion5.compareTo(asteriskVersion6);
        boolean boolean8 = asteriskVersion0.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int11 = asteriskVersion9.compareTo(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str13 = asteriskVersion12.toString();
        boolean boolean14 = asteriskVersion10.isAtLeast(asteriskVersion12);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int17 = asteriskVersion15.compareTo(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str19 = asteriskVersion18.toString();
        boolean boolean20 = asteriskVersion16.isAtLeast(asteriskVersion18);
        boolean boolean22 = asteriskVersion16.equals((java.lang.Object) "0");
        boolean boolean23 = asteriskVersion10.equals((java.lang.Object) asteriskVersion16);
        int int24 = asteriskVersion0.compareTo(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean27 = asteriskVersion25.isAtLeast(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int29 = asteriskVersion26.compareTo(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str32 = asteriskVersion31.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean34 = asteriskVersion31.isAtLeast(asteriskVersion33);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str36 = asteriskVersion35.toString();
        int int37 = asteriskVersion31.compareTo(asteriskVersion35);
        boolean boolean38 = asteriskVersion30.isAtLeast(asteriskVersion35);
        boolean boolean39 = asteriskVersion26.equals((java.lang.Object) asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int43 = asteriskVersion41.compareTo(asteriskVersion42);
        boolean boolean44 = asteriskVersion40.isAtLeast(asteriskVersion42);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int47 = asteriskVersion45.compareTo(asteriskVersion46);
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int49 = asteriskVersion45.compareTo(asteriskVersion48);
        org.asteriskjava.pbx.TechType techType50 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean51 = asteriskVersion45.equals((java.lang.Object) techType50);
        boolean boolean52 = asteriskVersion42.isAtLeast(asteriskVersion45);
        int int53 = asteriskVersion26.compareTo(asteriskVersion45);
        java.lang.String str54 = asteriskVersion26.toString();
        int int55 = asteriskVersion16.compareTo(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str57 = asteriskVersion56.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int60 = asteriskVersion58.compareTo(asteriskVersion59);
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int62 = asteriskVersion58.compareTo(asteriskVersion61);
        org.asteriskjava.pbx.TechType techType63 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean64 = asteriskVersion58.equals((java.lang.Object) techType63);
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        boolean boolean66 = asteriskVersion58.equals((java.lang.Object) asteriskVersion65);
        int int67 = asteriskVersion56.compareTo(asteriskVersion58);
        org.asteriskjava.pbx.DTMFTone dTMFTone68 = org.asteriskjava.pbx.DTMFTone.STAR;
        java.lang.String str69 = dTMFTone68.toString();
        java.lang.String str70 = dTMFTone68.toString();
        boolean boolean71 = asteriskVersion58.equals((java.lang.Object) dTMFTone68);
        org.asteriskjava.AsteriskVersion asteriskVersion72 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str74 = asteriskVersion73.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion75 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean76 = asteriskVersion73.isAtLeast(asteriskVersion75);
        org.asteriskjava.AsteriskVersion asteriskVersion77 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion78 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean79 = asteriskVersion77.isAtLeast(asteriskVersion78);
        boolean boolean80 = asteriskVersion75.equals((java.lang.Object) asteriskVersion77);
        int int81 = asteriskVersion72.compareTo(asteriskVersion77);
        org.asteriskjava.AsteriskVersion asteriskVersion82 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.AsteriskVersion asteriskVersion83 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion84 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion85 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int86 = asteriskVersion84.compareTo(asteriskVersion85);
        boolean boolean87 = asteriskVersion83.isAtLeast(asteriskVersion85);
        org.asteriskjava.AsteriskVersion asteriskVersion88 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion89 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int90 = asteriskVersion88.compareTo(asteriskVersion89);
        org.asteriskjava.AsteriskVersion asteriskVersion91 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int92 = asteriskVersion88.compareTo(asteriskVersion91);
        org.asteriskjava.pbx.TechType techType93 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean94 = asteriskVersion88.equals((java.lang.Object) techType93);
        boolean boolean95 = asteriskVersion85.isAtLeast(asteriskVersion88);
        boolean boolean96 = asteriskVersion82.isAtLeast(asteriskVersion88);
        int int97 = asteriskVersion72.compareTo(asteriskVersion88);
        boolean boolean98 = asteriskVersion58.isAtLeast(asteriskVersion88);
        boolean boolean99 = asteriskVersion16.equals((java.lang.Object) asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Asterisk 1.0" + "'", str13, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Asterisk 1.0" + "'", str19, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Asterisk 11" + "'", str32, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Asterisk 14" + "'", str36, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + techType50 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType50.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Asterisk 20" + "'", str54, "Asterisk 20");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Asterisk 1.0" + "'", str57, "Asterisk 1.0");
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + techType63 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType63.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + dTMFTone68 + "' != '" + org.asteriskjava.pbx.DTMFTone.STAR + "'", dTMFTone68.equals(org.asteriskjava.pbx.DTMFTone.STAR));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "*" + "'", str69, "*");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "*" + "'", str70, "*");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(asteriskVersion72);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Asterisk 11" + "'", str74, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(asteriskVersion77);
        org.junit.Assert.assertNotNull(asteriskVersion78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion82);
        org.junit.Assert.assertNotNull(asteriskVersion83);
        org.junit.Assert.assertNotNull(asteriskVersion84);
        org.junit.Assert.assertNotNull(asteriskVersion85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(asteriskVersion88);
        org.junit.Assert.assertNotNull(asteriskVersion89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + techType93 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType93.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean3 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int5 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean8 = asteriskVersion6.isAtLeast(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int10 = asteriskVersion6.compareTo(asteriskVersion9);
        org.asteriskjava.pbx.DTMFTone dTMFTone11 = org.asteriskjava.pbx.DTMFTone.STAR;
        java.lang.String str12 = dTMFTone11.toString();
        java.lang.String str13 = dTMFTone11.toString();
        java.lang.String str14 = dTMFTone11.toString();
        java.lang.String str15 = dTMFTone11.toString();
        boolean boolean16 = asteriskVersion6.equals((java.lang.Object) str15);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer17 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent18 = null;
        htmlEventTracer17.onManagerEvent(managerEvent18);
        java.lang.Class<?> wildcardClass20 = htmlEventTracer17.getClass();
        boolean boolean21 = asteriskVersion6.equals((java.lang.Object) htmlEventTracer17);
        boolean boolean22 = asteriskVersion0.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean25 = asteriskVersion23.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean28 = asteriskVersion26.isAtLeast(asteriskVersion27);
        int int29 = asteriskVersion23.compareTo(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean32 = asteriskVersion30.isAtLeast(asteriskVersion31);
        boolean boolean33 = asteriskVersion27.isAtLeast(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean35 = asteriskVersion31.isAtLeast(asteriskVersion34);
        java.lang.String str36 = asteriskVersion31.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str38 = asteriskVersion37.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean40 = asteriskVersion37.isAtLeast(asteriskVersion39);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int42 = asteriskVersion37.compareTo(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean45 = asteriskVersion43.isAtLeast(asteriskVersion44);
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int47 = asteriskVersion43.compareTo(asteriskVersion46);
        org.asteriskjava.pbx.DTMFTone dTMFTone48 = org.asteriskjava.pbx.DTMFTone.STAR;
        java.lang.String str49 = dTMFTone48.toString();
        java.lang.String str50 = dTMFTone48.toString();
        java.lang.String str51 = dTMFTone48.toString();
        java.lang.String str52 = dTMFTone48.toString();
        boolean boolean53 = asteriskVersion43.equals((java.lang.Object) str52);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer54 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent55 = null;
        htmlEventTracer54.onManagerEvent(managerEvent55);
        java.lang.Class<?> wildcardClass57 = htmlEventTracer54.getClass();
        boolean boolean58 = asteriskVersion43.equals((java.lang.Object) htmlEventTracer54);
        boolean boolean59 = asteriskVersion37.isAtLeast(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion62 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion63 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int64 = asteriskVersion62.compareTo(asteriskVersion63);
        boolean boolean65 = asteriskVersion61.isAtLeast(asteriskVersion63);
        int int66 = asteriskVersion60.compareTo(asteriskVersion61);
        int int67 = asteriskVersion37.compareTo(asteriskVersion60);
        boolean boolean68 = asteriskVersion31.equals((java.lang.Object) asteriskVersion37);
        boolean boolean69 = asteriskVersion0.equals((java.lang.Object) asteriskVersion37);
        java.lang.Class<?> wildcardClass70 = asteriskVersion37.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 11" + "'", str1, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + dTMFTone11 + "' != '" + org.asteriskjava.pbx.DTMFTone.STAR + "'", dTMFTone11.equals(org.asteriskjava.pbx.DTMFTone.STAR));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "*" + "'", str12, "*");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "*" + "'", str13, "*");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "*" + "'", str14, "*");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "*" + "'", str15, "*");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Asterisk 20" + "'", str36, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Asterisk 11" + "'", str38, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + dTMFTone48 + "' != '" + org.asteriskjava.pbx.DTMFTone.STAR + "'", dTMFTone48.equals(org.asteriskjava.pbx.DTMFTone.STAR));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "*" + "'", str49, "*");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "*" + "'", str50, "*");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "*" + "'", str51, "*");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "*" + "'", str52, "*");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertNotNull(asteriskVersion62);
        org.junit.Assert.assertNotNull(asteriskVersion63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer7.write();
        boolean boolean9 = asteriskVersion4.equals((java.lang.Object) htmlEventTracer7);
        htmlEventTracer7.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent11 = null;
        htmlEventTracer7.onManagerEvent(managerEvent11);
        org.asteriskjava.manager.event.ManagerEvent managerEvent13 = null;
        htmlEventTracer7.onManagerEvent(managerEvent13);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int6 = listenerPriority1.compare(listenerPriority5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        int int13 = asteriskVersion7.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        boolean boolean17 = asteriskVersion11.isAtLeast(asteriskVersion15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean19 = asteriskVersion11.equals((java.lang.Object) listenerPriority18);
        int int20 = listenerPriority5.compare(listenerPriority18);
        org.asteriskjava.pbx.ListenerPriority listenerPriority21 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int22 = listenerPriority5.compare(listenerPriority21);
        java.lang.Class<?> wildcardClass23 = listenerPriority5.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-6) + "'", int6 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority21 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority21.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer7.write();
        boolean boolean9 = asteriskVersion4.equals((java.lang.Object) htmlEventTracer7);
        htmlEventTracer7.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent11 = null;
        htmlEventTracer7.onManagerEvent(managerEvent11);
        org.asteriskjava.manager.event.ManagerEvent managerEvent13 = null;
        htmlEventTracer7.onManagerEvent(managerEvent13);
        org.asteriskjava.manager.event.ManagerEvent managerEvent15 = null;
        htmlEventTracer7.onManagerEvent(managerEvent15);
        org.asteriskjava.manager.event.ManagerEvent managerEvent17 = null;
        htmlEventTracer7.onManagerEvent(managerEvent17);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority2 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int3 = listenerPriority1.compare(listenerPriority2);
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int5 = listenerPriority2.compare(listenerPriority4);
        int int6 = listenerPriority0.compare(listenerPriority2);
        org.asteriskjava.pbx.ListenerPriority listenerPriority7 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority8 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int9 = listenerPriority7.compare(listenerPriority8);
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int11 = listenerPriority8.compare(listenerPriority10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int15 = asteriskVersion13.compareTo(asteriskVersion14);
        boolean boolean16 = asteriskVersion12.isAtLeast(asteriskVersion14);
        org.asteriskjava.pbx.ListenerPriority listenerPriority17 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int19 = listenerPriority17.compare(listenerPriority18);
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int21 = listenerPriority18.compare(listenerPriority20);
        org.asteriskjava.pbx.ListenerPriority listenerPriority22 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int23 = listenerPriority18.compare(listenerPriority22);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean26 = asteriskVersion24.isAtLeast(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean29 = asteriskVersion27.isAtLeast(asteriskVersion28);
        int int30 = asteriskVersion24.compareTo(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean33 = asteriskVersion31.isAtLeast(asteriskVersion32);
        boolean boolean34 = asteriskVersion28.isAtLeast(asteriskVersion32);
        org.asteriskjava.pbx.ListenerPriority listenerPriority35 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean36 = asteriskVersion28.equals((java.lang.Object) listenerPriority35);
        int int37 = listenerPriority22.compare(listenerPriority35);
        boolean boolean38 = asteriskVersion14.equals((java.lang.Object) listenerPriority22);
        org.asteriskjava.pbx.ListenerPriority listenerPriority39 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority40 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int41 = listenerPriority39.compare(listenerPriority40);
        int int42 = listenerPriority22.compare(listenerPriority40);
        int int43 = listenerPriority10.compare(listenerPriority22);
        org.asteriskjava.pbx.ListenerPriority listenerPriority44 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority45 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int46 = listenerPriority44.compare(listenerPriority45);
        org.asteriskjava.pbx.ListenerPriority listenerPriority47 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int48 = listenerPriority45.compare(listenerPriority47);
        org.asteriskjava.pbx.ListenerPriority listenerPriority49 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int50 = listenerPriority45.compare(listenerPriority49);
        org.asteriskjava.pbx.ListenerPriority listenerPriority51 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int52 = listenerPriority45.compare(listenerPriority51);
        org.asteriskjava.pbx.ListenerPriority listenerPriority53 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority54 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority55 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int56 = listenerPriority54.compare(listenerPriority55);
        org.asteriskjava.pbx.ListenerPriority listenerPriority57 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority58 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int59 = listenerPriority57.compare(listenerPriority58);
        org.asteriskjava.pbx.ListenerPriority listenerPriority60 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int61 = listenerPriority58.compare(listenerPriority60);
        int int62 = listenerPriority55.compare(listenerPriority58);
        org.asteriskjava.pbx.ListenerPriority listenerPriority63 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority64 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int65 = listenerPriority63.compare(listenerPriority64);
        int int66 = listenerPriority55.compare(listenerPriority63);
        int int67 = listenerPriority53.compare(listenerPriority55);
        int int68 = listenerPriority51.compare(listenerPriority55);
        int int69 = listenerPriority22.compare(listenerPriority55);
        int int70 = listenerPriority0.compare(listenerPriority22);
        java.lang.Class<?> wildcardClass71 = listenerPriority22.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority2 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority2.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-4) + "'", int5 == (-4));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority7 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority7.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority8 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority8.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-4) + "'", int11 == (-4));
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority17 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority17.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-4) + "'", int21 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority22 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority22.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-6) + "'", int23 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority35 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority35.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority39 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority39.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority40 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority40.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 6 + "'", int42 == 6);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-2) + "'", int43 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority44 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority44.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority45 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority45.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority47 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority47.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-4) + "'", int48 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority49 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority49.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-6) + "'", int50 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority51 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority51.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-4) + "'", int52 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority53 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority53.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority54 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority54.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority55 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority55.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority57 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority57.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority58 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority58.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority60 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority60.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-4) + "'", int61 == (-4));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority63 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority63.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority64 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority64.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-2) + "'", int66 == (-2));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6 + "'", int69 == 6);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-4) + "'", int70 == (-4));
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int4 = asteriskVersion0.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str6 = asteriskVersion5.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int9 = asteriskVersion7.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int11 = asteriskVersion7.compareTo(asteriskVersion10);
        org.asteriskjava.pbx.TechType techType12 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean13 = asteriskVersion7.equals((java.lang.Object) techType12);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        boolean boolean15 = asteriskVersion7.equals((java.lang.Object) asteriskVersion14);
        int int16 = asteriskVersion5.compareTo(asteriskVersion7);
        boolean boolean17 = asteriskVersion0.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean19 = asteriskVersion5.isAtLeast(asteriskVersion18);
        java.lang.Class<?> wildcardClass20 = asteriskVersion18.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Asterisk 1.0" + "'", str6, "Asterisk 1.0");
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + techType12 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType12.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int10 = asteriskVersion6.compareTo(asteriskVersion9);
        org.asteriskjava.pbx.TechType techType11 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean12 = asteriskVersion6.equals((java.lang.Object) techType11);
        boolean boolean13 = asteriskVersion3.isAtLeast(asteriskVersion6);
        boolean boolean14 = asteriskVersion0.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int18 = asteriskVersion16.compareTo(asteriskVersion17);
        boolean boolean19 = asteriskVersion15.isAtLeast(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean22 = asteriskVersion20.isAtLeast(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int24 = asteriskVersion21.compareTo(asteriskVersion23);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean26 = asteriskVersion23.isAtLeast(asteriskVersion25);
        int int27 = asteriskVersion15.compareTo(asteriskVersion23);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int31 = asteriskVersion29.compareTo(asteriskVersion30);
        boolean boolean32 = asteriskVersion28.isAtLeast(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean35 = asteriskVersion33.isAtLeast(asteriskVersion34);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int37 = asteriskVersion34.compareTo(asteriskVersion36);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean39 = asteriskVersion36.isAtLeast(asteriskVersion38);
        int int40 = asteriskVersion28.compareTo(asteriskVersion36);
        boolean boolean41 = asteriskVersion15.isAtLeast(asteriskVersion36);
        boolean boolean43 = asteriskVersion15.equals((java.lang.Object) 0);
        boolean boolean45 = asteriskVersion15.equals((java.lang.Object) "Asterisk 11");
        int int46 = asteriskVersion3.compareTo(asteriskVersion15);
        java.lang.Class<?> wildcardClass47 = asteriskVersion3.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + techType11 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType11.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer7.write();
        boolean boolean9 = asteriskVersion4.equals((java.lang.Object) htmlEventTracer7);
        htmlEventTracer7.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent11 = null;
        htmlEventTracer7.onManagerEvent(managerEvent11);
        org.asteriskjava.manager.event.ManagerEvent managerEvent13 = null;
        htmlEventTracer7.onManagerEvent(managerEvent13);
        org.asteriskjava.manager.event.ManagerEvent managerEvent15 = null;
        htmlEventTracer7.onManagerEvent(managerEvent15);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int4 = asteriskVersion1.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str7 = asteriskVersion6.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean9 = asteriskVersion6.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str11 = asteriskVersion10.toString();
        int int12 = asteriskVersion6.compareTo(asteriskVersion10);
        boolean boolean13 = asteriskVersion5.isAtLeast(asteriskVersion10);
        boolean boolean14 = asteriskVersion1.equals((java.lang.Object) asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int18 = asteriskVersion16.compareTo(asteriskVersion17);
        boolean boolean19 = asteriskVersion15.isAtLeast(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int22 = asteriskVersion20.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int24 = asteriskVersion20.compareTo(asteriskVersion23);
        org.asteriskjava.pbx.TechType techType25 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean26 = asteriskVersion20.equals((java.lang.Object) techType25);
        boolean boolean27 = asteriskVersion17.isAtLeast(asteriskVersion20);
        int int28 = asteriskVersion1.compareTo(asteriskVersion20);
        java.lang.String str29 = asteriskVersion1.toString();
        java.lang.Class<?> wildcardClass30 = asteriskVersion1.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Asterisk 11" + "'", str7, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Asterisk 14" + "'", str11, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + techType25 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType25.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Asterisk 20" + "'", str29, "Asterisk 20");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.equals((java.lang.Object) asteriskVersion5);
        int int9 = asteriskVersion0.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str12 = asteriskVersion11.toString();
        org.asteriskjava.pbx.TechType techType13 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass14 = techType13.getClass();
        boolean boolean15 = asteriskVersion11.equals((java.lang.Object) wildcardClass14);
        int int16 = asteriskVersion10.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int19 = asteriskVersion17.compareTo(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str21 = asteriskVersion20.toString();
        boolean boolean22 = asteriskVersion18.isAtLeast(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str27 = asteriskVersion26.toString();
        boolean boolean28 = asteriskVersion24.isAtLeast(asteriskVersion26);
        boolean boolean30 = asteriskVersion24.equals((java.lang.Object) "0");
        boolean boolean31 = asteriskVersion18.equals((java.lang.Object) asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        boolean boolean37 = asteriskVersion33.isAtLeast(asteriskVersion35);
        int int38 = asteriskVersion32.compareTo(asteriskVersion33);
        int int39 = asteriskVersion18.compareTo(asteriskVersion32);
        java.lang.String str40 = asteriskVersion18.toString();
        boolean boolean41 = asteriskVersion10.equals((java.lang.Object) asteriskVersion18);
        boolean boolean42 = asteriskVersion5.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean46 = asteriskVersion44.isAtLeast(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean49 = asteriskVersion47.isAtLeast(asteriskVersion48);
        int int50 = asteriskVersion44.compareTo(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean53 = asteriskVersion51.isAtLeast(asteriskVersion52);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean56 = asteriskVersion54.isAtLeast(asteriskVersion55);
        int int57 = asteriskVersion51.compareTo(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean60 = asteriskVersion58.isAtLeast(asteriskVersion59);
        boolean boolean61 = asteriskVersion55.isAtLeast(asteriskVersion59);
        boolean boolean62 = asteriskVersion44.isAtLeast(asteriskVersion59);
        int int63 = asteriskVersion43.compareTo(asteriskVersion44);
        int int64 = asteriskVersion18.compareTo(asteriskVersion44);
        java.lang.String str65 = asteriskVersion44.toString();
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer66 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer66.write();
        htmlEventTracer66.write();
        htmlEventTracer66.write();
        htmlEventTracer66.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent71 = null;
        htmlEventTracer66.onManagerEvent(managerEvent71);
        boolean boolean73 = asteriskVersion44.equals((java.lang.Object) htmlEventTracer66);
        org.asteriskjava.manager.event.ManagerEvent managerEvent74 = null;
        htmlEventTracer66.onManagerEvent(managerEvent74);
        org.asteriskjava.manager.event.ManagerEvent managerEvent76 = null;
        htmlEventTracer66.onManagerEvent(managerEvent76);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer66.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Asterisk 1.0" + "'", str12, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType13 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType13.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 1.0" + "'", str21, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Asterisk 1.0" + "'", str27, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 16" + "'", str40, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Asterisk 20" + "'", str65, "Asterisk 20");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean20 = asteriskVersion18.isAtLeast(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int22 = asteriskVersion19.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean24 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int25 = asteriskVersion13.compareTo(asteriskVersion21);
        boolean boolean26 = asteriskVersion0.isAtLeast(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean29 = asteriskVersion27.isAtLeast(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean32 = asteriskVersion30.isAtLeast(asteriskVersion31);
        int int33 = asteriskVersion27.compareTo(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean36 = asteriskVersion34.isAtLeast(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean39 = asteriskVersion37.isAtLeast(asteriskVersion38);
        int int40 = asteriskVersion34.compareTo(asteriskVersion38);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean43 = asteriskVersion41.isAtLeast(asteriskVersion42);
        boolean boolean44 = asteriskVersion38.isAtLeast(asteriskVersion42);
        boolean boolean45 = asteriskVersion27.isAtLeast(asteriskVersion42);
        int int46 = asteriskVersion21.compareTo(asteriskVersion27);
        java.lang.String str47 = asteriskVersion27.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion48 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean49 = asteriskVersion27.isAtLeast(asteriskVersion48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Asterisk 20" + "'", str47, "Asterisk 20");
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int5 = listenerPriority3.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int7 = listenerPriority4.compare(listenerPriority6);
        int int8 = listenerPriority1.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int11 = listenerPriority9.compare(listenerPriority10);
        int int12 = listenerPriority1.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int15 = listenerPriority13.compare(listenerPriority14);
        int int16 = listenerPriority1.compare(listenerPriority13);
        org.asteriskjava.pbx.ListenerPriority listenerPriority17 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int19 = listenerPriority17.compare(listenerPriority18);
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority21 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int22 = listenerPriority20.compare(listenerPriority21);
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int24 = listenerPriority21.compare(listenerPriority23);
        int int25 = listenerPriority18.compare(listenerPriority21);
        org.asteriskjava.pbx.ListenerPriority listenerPriority26 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int28 = listenerPriority26.compare(listenerPriority27);
        int int29 = listenerPriority18.compare(listenerPriority26);
        org.asteriskjava.pbx.ListenerPriority listenerPriority30 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int32 = listenerPriority30.compare(listenerPriority31);
        int int33 = listenerPriority18.compare(listenerPriority30);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int37 = asteriskVersion35.compareTo(asteriskVersion36);
        boolean boolean38 = asteriskVersion34.isAtLeast(asteriskVersion36);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean41 = asteriskVersion39.isAtLeast(asteriskVersion40);
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int43 = asteriskVersion40.compareTo(asteriskVersion42);
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean45 = asteriskVersion42.isAtLeast(asteriskVersion44);
        int int46 = asteriskVersion34.compareTo(asteriskVersion42);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int50 = asteriskVersion48.compareTo(asteriskVersion49);
        boolean boolean51 = asteriskVersion47.isAtLeast(asteriskVersion49);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean54 = asteriskVersion52.isAtLeast(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int56 = asteriskVersion53.compareTo(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean58 = asteriskVersion55.isAtLeast(asteriskVersion57);
        int int59 = asteriskVersion47.compareTo(asteriskVersion55);
        boolean boolean60 = asteriskVersion34.isAtLeast(asteriskVersion55);
        boolean boolean62 = asteriskVersion34.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion63 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean64 = asteriskVersion34.isAtLeast(asteriskVersion63);
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean67 = asteriskVersion65.isAtLeast(asteriskVersion66);
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion69 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean70 = asteriskVersion68.isAtLeast(asteriskVersion69);
        int int71 = asteriskVersion65.compareTo(asteriskVersion69);
        org.asteriskjava.AsteriskVersion asteriskVersion72 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean74 = asteriskVersion72.isAtLeast(asteriskVersion73);
        boolean boolean75 = asteriskVersion69.isAtLeast(asteriskVersion73);
        org.asteriskjava.pbx.ListenerPriority listenerPriority76 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean77 = asteriskVersion69.equals((java.lang.Object) listenerPriority76);
        boolean boolean78 = asteriskVersion34.equals((java.lang.Object) listenerPriority76);
        int int79 = listenerPriority18.compare(listenerPriority76);
        int int80 = listenerPriority1.compare(listenerPriority18);
        java.lang.Class<?> wildcardClass81 = listenerPriority1.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-4) + "'", int7 == (-4));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority17 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority17.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority21 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority21.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-4) + "'", int24 == (-4));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority26 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority26.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-2) + "'", int29 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority30 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority30.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-2) + "'", int33 == (-2));
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(asteriskVersion63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertNotNull(asteriskVersion69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion72);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority76 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority76.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-6) + "'", int79 == (-6));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int4 = asteriskVersion1.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int7 = asteriskVersion5.compareTo(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str9 = asteriskVersion8.toString();
        boolean boolean10 = asteriskVersion6.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int13 = asteriskVersion11.compareTo(asteriskVersion12);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str15 = asteriskVersion14.toString();
        boolean boolean16 = asteriskVersion12.isAtLeast(asteriskVersion14);
        boolean boolean18 = asteriskVersion12.equals((java.lang.Object) "0");
        boolean boolean19 = asteriskVersion6.equals((java.lang.Object) asteriskVersion12);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int24 = asteriskVersion22.compareTo(asteriskVersion23);
        boolean boolean25 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int26 = asteriskVersion20.compareTo(asteriskVersion21);
        int int27 = asteriskVersion6.compareTo(asteriskVersion20);
        int int28 = asteriskVersion1.compareTo(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int31 = asteriskVersion29.compareTo(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str33 = asteriskVersion32.toString();
        boolean boolean34 = asteriskVersion30.isAtLeast(asteriskVersion32);
        boolean boolean36 = asteriskVersion30.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean39 = asteriskVersion37.isAtLeast(asteriskVersion38);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int41 = asteriskVersion38.compareTo(asteriskVersion40);
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean43 = asteriskVersion40.isAtLeast(asteriskVersion42);
        boolean boolean44 = asteriskVersion30.isAtLeast(asteriskVersion40);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int47 = asteriskVersion45.compareTo(asteriskVersion46);
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int51 = asteriskVersion49.compareTo(asteriskVersion50);
        boolean boolean52 = asteriskVersion48.isAtLeast(asteriskVersion50);
        int int53 = asteriskVersion45.compareTo(asteriskVersion48);
        java.lang.String str54 = asteriskVersion45.toString();
        java.lang.String str55 = asteriskVersion45.toString();
        int int56 = asteriskVersion30.compareTo(asteriskVersion45);
        boolean boolean57 = asteriskVersion1.isAtLeast(asteriskVersion30);
        java.lang.Class<?> wildcardClass58 = asteriskVersion30.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Asterisk 1.0" + "'", str9, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Asterisk 1.0" + "'", str15, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Asterisk 1.0" + "'", str33, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Asterisk 17" + "'", str54, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Asterisk 17" + "'", str55, "Asterisk 17");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("1");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.asteriskjava.pbx.DTMFTone dTMFTone0 = org.asteriskjava.pbx.DTMFTone.TWO;
        java.lang.Class<?> wildcardClass1 = dTMFTone0.getClass();
        org.junit.Assert.assertTrue("'" + dTMFTone0 + "' != '" + org.asteriskjava.pbx.DTMFTone.TWO + "'", dTMFTone0.equals(org.asteriskjava.pbx.DTMFTone.TWO));
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum3 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str4 = activityStatusEnum3.getDefaultMessage();
        boolean boolean5 = asteriskVersion2.equals((java.lang.Object) str4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean8 = asteriskVersion6.isAtLeast(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean11 = asteriskVersion9.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion6.compareTo(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean15 = asteriskVersion13.isAtLeast(asteriskVersion14);
        boolean boolean16 = asteriskVersion10.isAtLeast(asteriskVersion14);
        org.asteriskjava.pbx.ListenerPriority listenerPriority17 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean18 = asteriskVersion10.equals((java.lang.Object) listenerPriority17);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int20 = asteriskVersion10.compareTo(asteriskVersion19);
        boolean boolean21 = asteriskVersion2.equals((java.lang.Object) asteriskVersion10);
        java.lang.String str22 = asteriskVersion2.toString();
        boolean boolean23 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        java.lang.String str25 = asteriskVersion24.toString();
        boolean boolean26 = asteriskVersion2.isAtLeast(asteriskVersion24);
        java.lang.Class<?> wildcardClass27 = asteriskVersion2.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 10" + "'", str1, "Asterisk 10");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + activityStatusEnum3 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum3.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Progress" + "'", str4, "Progress");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority17 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority17.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Asterisk 1.0" + "'", str22, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Asterisk 16" + "'", str25, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean3 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int5 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = asteriskVersion4.compareTo(asteriskVersion6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 11" + "'", str1, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean3 = asteriskVersion1.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean6 = asteriskVersion4.isAtLeast(asteriskVersion5);
        int int7 = asteriskVersion1.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean10 = asteriskVersion8.isAtLeast(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean13 = asteriskVersion11.isAtLeast(asteriskVersion12);
        int int14 = asteriskVersion8.compareTo(asteriskVersion12);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean17 = asteriskVersion15.isAtLeast(asteriskVersion16);
        boolean boolean18 = asteriskVersion12.isAtLeast(asteriskVersion16);
        boolean boolean19 = asteriskVersion1.isAtLeast(asteriskVersion16);
        int int20 = asteriskVersion0.compareTo(asteriskVersion1);
        java.lang.String str21 = asteriskVersion0.toString();
        java.lang.Class<?> wildcardClass22 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 1.8" + "'", str21, "Asterisk 1.8");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("Asterisk 17");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean3 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int5 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean8 = asteriskVersion6.isAtLeast(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int10 = asteriskVersion6.compareTo(asteriskVersion9);
        org.asteriskjava.pbx.DTMFTone dTMFTone11 = org.asteriskjava.pbx.DTMFTone.STAR;
        java.lang.String str12 = dTMFTone11.toString();
        java.lang.String str13 = dTMFTone11.toString();
        java.lang.String str14 = dTMFTone11.toString();
        java.lang.String str15 = dTMFTone11.toString();
        boolean boolean16 = asteriskVersion6.equals((java.lang.Object) str15);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer17 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent18 = null;
        htmlEventTracer17.onManagerEvent(managerEvent18);
        java.lang.Class<?> wildcardClass20 = htmlEventTracer17.getClass();
        boolean boolean21 = asteriskVersion6.equals((java.lang.Object) htmlEventTracer17);
        boolean boolean22 = asteriskVersion0.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int26 = asteriskVersion24.compareTo(asteriskVersion25);
        boolean boolean27 = asteriskVersion23.isAtLeast(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean29 = asteriskVersion23.isAtLeast(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int33 = asteriskVersion31.compareTo(asteriskVersion32);
        boolean boolean34 = asteriskVersion30.isAtLeast(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean37 = asteriskVersion35.isAtLeast(asteriskVersion36);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int39 = asteriskVersion36.compareTo(asteriskVersion38);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean41 = asteriskVersion38.isAtLeast(asteriskVersion40);
        int int42 = asteriskVersion30.compareTo(asteriskVersion38);
        int int43 = asteriskVersion23.compareTo(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum45 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str46 = activityStatusEnum45.getDefaultMessage();
        boolean boolean47 = asteriskVersion44.equals((java.lang.Object) str46);
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean50 = asteriskVersion48.isAtLeast(asteriskVersion49);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean53 = asteriskVersion51.isAtLeast(asteriskVersion52);
        int int54 = asteriskVersion48.compareTo(asteriskVersion52);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean57 = asteriskVersion55.isAtLeast(asteriskVersion56);
        boolean boolean58 = asteriskVersion52.isAtLeast(asteriskVersion56);
        org.asteriskjava.pbx.ListenerPriority listenerPriority59 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean60 = asteriskVersion52.equals((java.lang.Object) listenerPriority59);
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int62 = asteriskVersion52.compareTo(asteriskVersion61);
        boolean boolean63 = asteriskVersion44.equals((java.lang.Object) asteriskVersion52);
        int int64 = asteriskVersion30.compareTo(asteriskVersion52);
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean67 = asteriskVersion65.isAtLeast(asteriskVersion66);
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion69 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean70 = asteriskVersion68.isAtLeast(asteriskVersion69);
        int int71 = asteriskVersion65.compareTo(asteriskVersion69);
        org.asteriskjava.AsteriskVersion asteriskVersion72 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean74 = asteriskVersion72.isAtLeast(asteriskVersion73);
        boolean boolean75 = asteriskVersion69.isAtLeast(asteriskVersion73);
        org.asteriskjava.pbx.ListenerPriority listenerPriority76 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean77 = asteriskVersion69.equals((java.lang.Object) listenerPriority76);
        boolean boolean78 = asteriskVersion30.isAtLeast(asteriskVersion69);
        org.asteriskjava.AsteriskVersion asteriskVersion79 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion80 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean81 = asteriskVersion79.isAtLeast(asteriskVersion80);
        org.asteriskjava.AsteriskVersion asteriskVersion82 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion83 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean84 = asteriskVersion82.isAtLeast(asteriskVersion83);
        int int85 = asteriskVersion79.compareTo(asteriskVersion83);
        org.asteriskjava.AsteriskVersion asteriskVersion86 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion87 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean88 = asteriskVersion86.isAtLeast(asteriskVersion87);
        org.asteriskjava.AsteriskVersion asteriskVersion89 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion90 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean91 = asteriskVersion89.isAtLeast(asteriskVersion90);
        int int92 = asteriskVersion86.compareTo(asteriskVersion90);
        org.asteriskjava.AsteriskVersion asteriskVersion93 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion94 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean95 = asteriskVersion93.isAtLeast(asteriskVersion94);
        boolean boolean96 = asteriskVersion90.isAtLeast(asteriskVersion94);
        boolean boolean97 = asteriskVersion79.isAtLeast(asteriskVersion94);
        boolean boolean98 = asteriskVersion30.equals((java.lang.Object) asteriskVersion94);
        int int99 = asteriskVersion0.compareTo(asteriskVersion94);
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 11" + "'", str1, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + dTMFTone11 + "' != '" + org.asteriskjava.pbx.DTMFTone.STAR + "'", dTMFTone11.equals(org.asteriskjava.pbx.DTMFTone.STAR));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "*" + "'", str12, "*");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "*" + "'", str13, "*");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "*" + "'", str14, "*");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "*" + "'", str15, "*");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertTrue("'" + activityStatusEnum45 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum45.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Progress" + "'", str46, "Progress");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority59 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority59.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertNotNull(asteriskVersion69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion72);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority76 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority76.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(asteriskVersion79);
        org.junit.Assert.assertNotNull(asteriskVersion80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(asteriskVersion82);
        org.junit.Assert.assertNotNull(asteriskVersion83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion86);
        org.junit.Assert.assertNotNull(asteriskVersion87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(asteriskVersion89);
        org.junit.Assert.assertNotNull(asteriskVersion90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion93);
        org.junit.Assert.assertNotNull(asteriskVersion94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority2 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int3 = listenerPriority1.compare(listenerPriority2);
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int6 = listenerPriority4.compare(listenerPriority5);
        org.asteriskjava.pbx.ListenerPriority listenerPriority7 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int8 = listenerPriority5.compare(listenerPriority7);
        int int9 = listenerPriority2.compare(listenerPriority5);
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int12 = listenerPriority10.compare(listenerPriority11);
        int int13 = listenerPriority2.compare(listenerPriority10);
        int int14 = listenerPriority0.compare(listenerPriority2);
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int16 = listenerPriority0.compare(listenerPriority15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority2 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority2.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority7 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority7.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-4) + "'", int8 == (-4));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-2) + "'", int13 == (-2));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int15 = asteriskVersion13.compareTo(asteriskVersion14);
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int17 = asteriskVersion13.compareTo(asteriskVersion16);
        boolean boolean18 = asteriskVersion8.isAtLeast(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str21 = asteriskVersion20.toString();
        org.asteriskjava.pbx.TechType techType22 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass23 = techType22.getClass();
        boolean boolean24 = asteriskVersion20.equals((java.lang.Object) wildcardClass23);
        int int25 = asteriskVersion19.compareTo(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int29 = asteriskVersion27.compareTo(asteriskVersion28);
        boolean boolean30 = asteriskVersion26.isAtLeast(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean33 = asteriskVersion31.isAtLeast(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int35 = asteriskVersion32.compareTo(asteriskVersion34);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean37 = asteriskVersion34.isAtLeast(asteriskVersion36);
        int int38 = asteriskVersion26.compareTo(asteriskVersion34);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int42 = asteriskVersion40.compareTo(asteriskVersion41);
        boolean boolean43 = asteriskVersion39.isAtLeast(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean46 = asteriskVersion44.isAtLeast(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int48 = asteriskVersion45.compareTo(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean50 = asteriskVersion47.isAtLeast(asteriskVersion49);
        int int51 = asteriskVersion39.compareTo(asteriskVersion47);
        boolean boolean52 = asteriskVersion26.isAtLeast(asteriskVersion47);
        boolean boolean54 = asteriskVersion26.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean56 = asteriskVersion26.isAtLeast(asteriskVersion55);
        java.lang.String str57 = asteriskVersion55.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int60 = asteriskVersion58.compareTo(asteriskVersion59);
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int62 = asteriskVersion58.compareTo(asteriskVersion61);
        java.lang.String str63 = asteriskVersion61.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int66 = asteriskVersion64.compareTo(asteriskVersion65);
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int68 = asteriskVersion64.compareTo(asteriskVersion67);
        org.asteriskjava.pbx.TechType techType69 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean70 = asteriskVersion64.equals((java.lang.Object) techType69);
        boolean boolean71 = asteriskVersion61.isAtLeast(asteriskVersion64);
        int int72 = asteriskVersion55.compareTo(asteriskVersion64);
        boolean boolean73 = asteriskVersion20.isAtLeast(asteriskVersion55);
        boolean boolean75 = asteriskVersion20.equals((java.lang.Object) 100);
        boolean boolean76 = asteriskVersion16.isAtLeast(asteriskVersion20);
        java.lang.Class<?> wildcardClass77 = asteriskVersion20.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 1.0" + "'", str21, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType22 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType22.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Asterisk 20" + "'", str57, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Asterisk 1.8" + "'", str63, "Asterisk 1.8");
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + techType69 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType69.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int4 = asteriskVersion0.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.isAtLeast(asteriskVersion6);
        java.lang.String str9 = asteriskVersion6.toString();
        java.lang.Class<?> wildcardClass10 = asteriskVersion6.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Asterisk 20" + "'", str9, "Asterisk 20");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int4 = asteriskVersion0.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int9 = asteriskVersion7.compareTo(asteriskVersion8);
        boolean boolean10 = asteriskVersion6.isAtLeast(asteriskVersion8);
        int int11 = asteriskVersion5.compareTo(asteriskVersion6);
        int int12 = asteriskVersion0.compareTo(asteriskVersion6);
        java.lang.Class<?> wildcardClass13 = asteriskVersion6.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.asteriskjava.pbx.DTMFTone dTMFTone0 = org.asteriskjava.pbx.DTMFTone.FOUR;
        java.lang.String str1 = dTMFTone0.toString();
        java.lang.String str2 = dTMFTone0.toString();
        java.lang.String str3 = dTMFTone0.toString();
        java.lang.String str4 = dTMFTone0.toString();
        java.lang.Class<?> wildcardClass5 = dTMFTone0.getClass();
        org.junit.Assert.assertTrue("'" + dTMFTone0 + "' != '" + org.asteriskjava.pbx.DTMFTone.FOUR + "'", dTMFTone0.equals(org.asteriskjava.pbx.DTMFTone.FOUR));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "4" + "'", str1, "4");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "4" + "'", str2, "4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "4" + "'", str3, "4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "4" + "'", str4, "4");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent1 = null;
        htmlEventTracer0.onManagerEvent(managerEvent1);
        org.asteriskjava.manager.event.ManagerEvent managerEvent3 = null;
        htmlEventTracer0.onManagerEvent(managerEvent3);
        org.asteriskjava.manager.event.ManagerEvent managerEvent5 = null;
        htmlEventTracer0.onManagerEvent(managerEvent5);
        org.asteriskjava.manager.event.ManagerEvent managerEvent7 = null;
        htmlEventTracer0.onManagerEvent(managerEvent7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent9 = null;
        htmlEventTracer0.onManagerEvent(managerEvent9);
        org.asteriskjava.manager.event.ManagerEvent managerEvent11 = null;
        htmlEventTracer0.onManagerEvent(managerEvent11);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("Asterisk 19");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        boolean boolean10 = asteriskVersion4.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean12 = asteriskVersion8.isAtLeast(asteriskVersion11);
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int15 = listenerPriority13.compare(listenerPriority14);
        org.asteriskjava.pbx.ListenerPriority listenerPriority16 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority17 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int18 = listenerPriority16.compare(listenerPriority17);
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int20 = listenerPriority17.compare(listenerPriority19);
        int int21 = listenerPriority14.compare(listenerPriority17);
        org.asteriskjava.pbx.ListenerPriority listenerPriority22 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int24 = listenerPriority22.compare(listenerPriority23);
        int int25 = listenerPriority14.compare(listenerPriority22);
        boolean boolean26 = asteriskVersion8.equals((java.lang.Object) listenerPriority14);
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority28 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int29 = listenerPriority27.compare(listenerPriority28);
        org.asteriskjava.pbx.ListenerPriority listenerPriority30 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int31 = listenerPriority28.compare(listenerPriority30);
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int33 = listenerPriority28.compare(listenerPriority32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean36 = asteriskVersion34.isAtLeast(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean39 = asteriskVersion37.isAtLeast(asteriskVersion38);
        int int40 = asteriskVersion34.compareTo(asteriskVersion38);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean43 = asteriskVersion41.isAtLeast(asteriskVersion42);
        boolean boolean44 = asteriskVersion38.isAtLeast(asteriskVersion42);
        org.asteriskjava.pbx.ListenerPriority listenerPriority45 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean46 = asteriskVersion38.equals((java.lang.Object) listenerPriority45);
        int int47 = listenerPriority32.compare(listenerPriority45);
        int int48 = listenerPriority14.compare(listenerPriority45);
        org.asteriskjava.pbx.ListenerPriority listenerPriority49 = org.asteriskjava.pbx.ListenerPriority.REALTIME;
        org.asteriskjava.pbx.ListenerPriority listenerPriority50 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int51 = listenerPriority49.compare(listenerPriority50);
        org.asteriskjava.pbx.ListenerPriority listenerPriority52 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority53 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int54 = listenerPriority52.compare(listenerPriority53);
        org.asteriskjava.pbx.ListenerPriority listenerPriority55 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int56 = listenerPriority53.compare(listenerPriority55);
        org.asteriskjava.pbx.ListenerPriority listenerPriority57 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority58 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int59 = listenerPriority57.compare(listenerPriority58);
        org.asteriskjava.pbx.ListenerPriority listenerPriority60 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority61 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int62 = listenerPriority60.compare(listenerPriority61);
        org.asteriskjava.pbx.ListenerPriority listenerPriority63 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int64 = listenerPriority61.compare(listenerPriority63);
        int int65 = listenerPriority58.compare(listenerPriority61);
        int int66 = listenerPriority55.compare(listenerPriority61);
        org.asteriskjava.pbx.ListenerPriority listenerPriority67 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority68 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority69 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int70 = listenerPriority68.compare(listenerPriority69);
        org.asteriskjava.pbx.ListenerPriority listenerPriority71 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int72 = listenerPriority69.compare(listenerPriority71);
        int int73 = listenerPriority67.compare(listenerPriority69);
        int int74 = listenerPriority61.compare(listenerPriority69);
        int int75 = listenerPriority49.compare(listenerPriority61);
        int int76 = listenerPriority45.compare(listenerPriority49);
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority16 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority16.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority17 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority17.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-4) + "'", int20 == (-4));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority22 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority22.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-2) + "'", int25 == (-2));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority28 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority28.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority30 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority30.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-4) + "'", int31 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-6) + "'", int33 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority45 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority45.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-6) + "'", int48 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority49 + "' != '" + org.asteriskjava.pbx.ListenerPriority.REALTIME + "'", listenerPriority49.equals(org.asteriskjava.pbx.ListenerPriority.REALTIME));
        org.junit.Assert.assertTrue("'" + listenerPriority50 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority50.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-92) + "'", int51 == (-92));
        org.junit.Assert.assertTrue("'" + listenerPriority52 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority52.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority53 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority53.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority55 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority55.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-4) + "'", int56 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority57 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority57.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority58 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority58.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority60 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority60.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority61 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority61.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority63 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority63.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-4) + "'", int64 == (-4));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority67 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority67.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority68 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority68.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority69 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority69.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority71 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority71.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-4) + "'", int72 == (-4));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-90) + "'", int75 == (-90));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 96 + "'", int76 == 96);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.pbx.TechType techType3 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass4 = techType3.getClass();
        boolean boolean5 = asteriskVersion1.equals((java.lang.Object) wildcardClass4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion1);
        boolean boolean8 = asteriskVersion1.equals((java.lang.Object) '4');
        java.lang.Class<?> wildcardClass9 = asteriskVersion1.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 1.0" + "'", str2, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType3 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType3.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        boolean boolean10 = asteriskVersion4.isAtLeast(asteriskVersion8);
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean12 = asteriskVersion4.equals((java.lang.Object) listenerPriority11);
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int14 = listenerPriority11.compare(listenerPriority13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int9 = asteriskVersion7.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int11 = asteriskVersion7.compareTo(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        boolean boolean15 = asteriskVersion10.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        boolean boolean17 = asteriskVersion10.equals((java.lang.Object) asteriskVersion16);
        boolean boolean18 = asteriskVersion0.isAtLeast(asteriskVersion10);
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int21 = listenerPriority19.compare(listenerPriority20);
        org.asteriskjava.pbx.ListenerPriority listenerPriority22 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int23 = listenerPriority20.compare(listenerPriority22);
        org.asteriskjava.pbx.ListenerPriority listenerPriority24 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority25 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int26 = listenerPriority24.compare(listenerPriority25);
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int28 = listenerPriority25.compare(listenerPriority27);
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int30 = listenerPriority25.compare(listenerPriority29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean33 = asteriskVersion31.isAtLeast(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean36 = asteriskVersion34.isAtLeast(asteriskVersion35);
        int int37 = asteriskVersion31.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean40 = asteriskVersion38.isAtLeast(asteriskVersion39);
        boolean boolean41 = asteriskVersion35.isAtLeast(asteriskVersion39);
        org.asteriskjava.pbx.ListenerPriority listenerPriority42 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean43 = asteriskVersion35.equals((java.lang.Object) listenerPriority42);
        int int44 = listenerPriority29.compare(listenerPriority42);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int48 = asteriskVersion46.compareTo(asteriskVersion47);
        boolean boolean49 = asteriskVersion45.isAtLeast(asteriskVersion47);
        org.asteriskjava.pbx.ListenerPriority listenerPriority50 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority51 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int52 = listenerPriority50.compare(listenerPriority51);
        org.asteriskjava.pbx.ListenerPriority listenerPriority53 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int54 = listenerPriority51.compare(listenerPriority53);
        org.asteriskjava.pbx.ListenerPriority listenerPriority55 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int56 = listenerPriority51.compare(listenerPriority55);
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean59 = asteriskVersion57.isAtLeast(asteriskVersion58);
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean62 = asteriskVersion60.isAtLeast(asteriskVersion61);
        int int63 = asteriskVersion57.compareTo(asteriskVersion61);
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean66 = asteriskVersion64.isAtLeast(asteriskVersion65);
        boolean boolean67 = asteriskVersion61.isAtLeast(asteriskVersion65);
        org.asteriskjava.pbx.ListenerPriority listenerPriority68 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean69 = asteriskVersion61.equals((java.lang.Object) listenerPriority68);
        int int70 = listenerPriority55.compare(listenerPriority68);
        boolean boolean71 = asteriskVersion47.equals((java.lang.Object) listenerPriority55);
        int int72 = listenerPriority42.compare(listenerPriority55);
        org.asteriskjava.pbx.ListenerPriority listenerPriority73 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int74 = listenerPriority42.compare(listenerPriority73);
        int int75 = listenerPriority20.compare(listenerPriority73);
        boolean boolean76 = asteriskVersion10.equals((java.lang.Object) listenerPriority73);
        org.asteriskjava.pbx.ListenerPriority listenerPriority77 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int78 = listenerPriority73.compare(listenerPriority77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority22 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority22.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-4) + "'", int23 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority24 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority24.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority25 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority25.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-4) + "'", int28 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-6) + "'", int30 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority42 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority42.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority50 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority50.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority51 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority51.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority53 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority53.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-4) + "'", int54 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority55 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority55.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-6) + "'", int56 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority68 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority68.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority73 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority73.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-2) + "'", int75 == (-2));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("Asterisk 19");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point 'Asterisk 19' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        boolean boolean10 = asteriskVersion4.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean12 = asteriskVersion8.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int14 = asteriskVersion11.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str17 = asteriskVersion16.toString();
        org.asteriskjava.pbx.TechType techType18 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass19 = techType18.getClass();
        boolean boolean20 = asteriskVersion16.equals((java.lang.Object) wildcardClass19);
        int int21 = asteriskVersion15.compareTo(asteriskVersion16);
        boolean boolean23 = asteriskVersion16.equals((java.lang.Object) '4');
        boolean boolean24 = asteriskVersion11.isAtLeast(asteriskVersion16);
        java.lang.Class<?> wildcardClass25 = asteriskVersion11.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Asterisk 1.0" + "'", str17, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType18 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType18.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean20 = asteriskVersion18.isAtLeast(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int22 = asteriskVersion19.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean24 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int25 = asteriskVersion13.compareTo(asteriskVersion21);
        boolean boolean26 = asteriskVersion0.isAtLeast(asteriskVersion21);
        boolean boolean28 = asteriskVersion0.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str30 = asteriskVersion29.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean32 = asteriskVersion29.isAtLeast(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean35 = asteriskVersion33.isAtLeast(asteriskVersion34);
        boolean boolean36 = asteriskVersion31.equals((java.lang.Object) asteriskVersion33);
        boolean boolean37 = asteriskVersion0.isAtLeast(asteriskVersion31);
        java.lang.Class<?> wildcardClass38 = asteriskVersion31.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Asterisk 11" + "'", str30, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int6 = listenerPriority1.compare(listenerPriority5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        int int13 = asteriskVersion7.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        boolean boolean17 = asteriskVersion11.isAtLeast(asteriskVersion15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean19 = asteriskVersion11.equals((java.lang.Object) listenerPriority18);
        int int20 = listenerPriority5.compare(listenerPriority18);
        org.asteriskjava.pbx.ListenerPriority listenerPriority21 = org.asteriskjava.pbx.ListenerPriority.REALTIME;
        org.asteriskjava.pbx.ListenerPriority listenerPriority22 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int23 = listenerPriority21.compare(listenerPriority22);
        org.asteriskjava.pbx.ListenerPriority listenerPriority24 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority25 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int26 = listenerPriority24.compare(listenerPriority25);
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int28 = listenerPriority25.compare(listenerPriority27);
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority30 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int31 = listenerPriority29.compare(listenerPriority30);
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority33 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int34 = listenerPriority32.compare(listenerPriority33);
        org.asteriskjava.pbx.ListenerPriority listenerPriority35 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int36 = listenerPriority33.compare(listenerPriority35);
        int int37 = listenerPriority30.compare(listenerPriority33);
        org.asteriskjava.pbx.ListenerPriority listenerPriority38 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority39 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int40 = listenerPriority38.compare(listenerPriority39);
        int int41 = listenerPriority30.compare(listenerPriority38);
        int int42 = listenerPriority27.compare(listenerPriority38);
        org.asteriskjava.pbx.ListenerPriority listenerPriority43 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority44 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority45 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int46 = listenerPriority44.compare(listenerPriority45);
        org.asteriskjava.pbx.ListenerPriority listenerPriority47 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority48 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int49 = listenerPriority47.compare(listenerPriority48);
        org.asteriskjava.pbx.ListenerPriority listenerPriority50 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int51 = listenerPriority48.compare(listenerPriority50);
        int int52 = listenerPriority45.compare(listenerPriority48);
        org.asteriskjava.pbx.ListenerPriority listenerPriority53 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority54 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int55 = listenerPriority53.compare(listenerPriority54);
        int int56 = listenerPriority45.compare(listenerPriority53);
        int int57 = listenerPriority43.compare(listenerPriority45);
        int int58 = listenerPriority27.compare(listenerPriority45);
        int int59 = listenerPriority21.compare(listenerPriority27);
        int int60 = listenerPriority18.compare(listenerPriority21);
        org.asteriskjava.pbx.ListenerPriority listenerPriority61 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority62 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int63 = listenerPriority61.compare(listenerPriority62);
        org.asteriskjava.pbx.ListenerPriority listenerPriority64 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int65 = listenerPriority62.compare(listenerPriority64);
        org.asteriskjava.pbx.ListenerPriority listenerPriority66 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int67 = listenerPriority62.compare(listenerPriority66);
        org.asteriskjava.pbx.ListenerPriority listenerPriority68 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int69 = listenerPriority62.compare(listenerPriority68);
        org.asteriskjava.pbx.ListenerPriority listenerPriority70 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority71 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority72 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int73 = listenerPriority71.compare(listenerPriority72);
        org.asteriskjava.pbx.ListenerPriority listenerPriority74 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority75 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int76 = listenerPriority74.compare(listenerPriority75);
        org.asteriskjava.pbx.ListenerPriority listenerPriority77 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int78 = listenerPriority75.compare(listenerPriority77);
        int int79 = listenerPriority72.compare(listenerPriority75);
        org.asteriskjava.pbx.ListenerPriority listenerPriority80 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority81 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int82 = listenerPriority80.compare(listenerPriority81);
        int int83 = listenerPriority72.compare(listenerPriority80);
        int int84 = listenerPriority70.compare(listenerPriority72);
        int int85 = listenerPriority68.compare(listenerPriority72);
        org.asteriskjava.pbx.ListenerPriority listenerPriority86 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority87 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int88 = listenerPriority86.compare(listenerPriority87);
        org.asteriskjava.pbx.ListenerPriority listenerPriority89 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int90 = listenerPriority87.compare(listenerPriority89);
        int int91 = listenerPriority68.compare(listenerPriority87);
        int int92 = listenerPriority18.compare(listenerPriority87);
        java.lang.Class<?> wildcardClass93 = listenerPriority18.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-6) + "'", int6 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority21 + "' != '" + org.asteriskjava.pbx.ListenerPriority.REALTIME + "'", listenerPriority21.equals(org.asteriskjava.pbx.ListenerPriority.REALTIME));
        org.junit.Assert.assertTrue("'" + listenerPriority22 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority22.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-92) + "'", int23 == (-92));
        org.junit.Assert.assertTrue("'" + listenerPriority24 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority24.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority25 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority25.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-4) + "'", int28 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority30 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority30.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority33 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority33.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority35 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority35.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-4) + "'", int36 == (-4));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority38 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority38.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority39 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority39.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-2) + "'", int41 == (-2));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority43 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority43.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority44 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority44.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority45 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority45.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority47 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority47.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority48 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority48.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority50 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority50.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-4) + "'", int51 == (-4));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority53 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority53.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority54 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority54.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-2) + "'", int56 == (-2));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-94) + "'", int59 == (-94));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 96 + "'", int60 == 96);
        org.junit.Assert.assertTrue("'" + listenerPriority61 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority61.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority62 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority62.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority64 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority64.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-4) + "'", int65 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority66 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority66.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-6) + "'", int67 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority68 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority68.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-4) + "'", int69 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority70 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority70.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority71 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority71.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority72 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority72.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority74 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority74.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority75 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority75.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority77 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority77.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-4) + "'", int78 == (-4));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority80 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority80.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority81 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority81.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-2) + "'", int83 == (-2));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 4 + "'", int85 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority86 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority86.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority87 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority87.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority89 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority89.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-4) + "'", int90 == (-4));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 6 + "'", int92 == 6);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        // The following exception was thrown during execution in test generation
        try {
            org.asteriskjava.pbx.TechType techType1 = org.asteriskjava.pbx.TechType.getTech("8");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The provided end point '8' must contain a tech prefix. e.g. SIP/100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        boolean boolean10 = asteriskVersion4.isAtLeast(asteriskVersion8);
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean12 = asteriskVersion4.equals((java.lang.Object) listenerPriority11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int14 = asteriskVersion4.compareTo(asteriskVersion13);
        java.lang.Class<?> wildcardClass15 = asteriskVersion4.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int7 = listenerPriority5.compare(listenerPriority6);
        org.asteriskjava.pbx.ListenerPriority listenerPriority8 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int10 = listenerPriority8.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int12 = listenerPriority9.compare(listenerPriority11);
        int int13 = listenerPriority6.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int16 = listenerPriority14.compare(listenerPriority15);
        int int17 = listenerPriority6.compare(listenerPriority14);
        int int18 = listenerPriority3.compare(listenerPriority14);
        java.lang.Class<?> wildcardClass19 = listenerPriority14.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority8 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority8.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-2) + "'", int17 == (-2));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean3 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int5 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_15;
        boolean boolean7 = asteriskVersion0.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int10 = asteriskVersion8.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int12 = asteriskVersion8.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean15 = asteriskVersion13.isAtLeast(asteriskVersion14);
        boolean boolean16 = asteriskVersion11.isAtLeast(asteriskVersion14);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        boolean boolean18 = asteriskVersion11.equals((java.lang.Object) asteriskVersion17);
        int int19 = asteriskVersion0.compareTo(asteriskVersion11);
        java.lang.Class<?> wildcardClass20 = asteriskVersion11.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 11" + "'", str1, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.getDetermineVersionFromString("Asterisk 10");
        org.junit.Assert.assertNull(asteriskVersion1);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.equals((java.lang.Object) asteriskVersion5);
        int int9 = asteriskVersion0.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str12 = asteriskVersion11.toString();
        org.asteriskjava.pbx.TechType techType13 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass14 = techType13.getClass();
        boolean boolean15 = asteriskVersion11.equals((java.lang.Object) wildcardClass14);
        int int16 = asteriskVersion10.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int19 = asteriskVersion17.compareTo(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str21 = asteriskVersion20.toString();
        boolean boolean22 = asteriskVersion18.isAtLeast(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str27 = asteriskVersion26.toString();
        boolean boolean28 = asteriskVersion24.isAtLeast(asteriskVersion26);
        boolean boolean30 = asteriskVersion24.equals((java.lang.Object) "0");
        boolean boolean31 = asteriskVersion18.equals((java.lang.Object) asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        boolean boolean37 = asteriskVersion33.isAtLeast(asteriskVersion35);
        int int38 = asteriskVersion32.compareTo(asteriskVersion33);
        int int39 = asteriskVersion18.compareTo(asteriskVersion32);
        java.lang.String str40 = asteriskVersion18.toString();
        boolean boolean41 = asteriskVersion10.equals((java.lang.Object) asteriskVersion18);
        boolean boolean42 = asteriskVersion5.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean46 = asteriskVersion44.isAtLeast(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean49 = asteriskVersion47.isAtLeast(asteriskVersion48);
        int int50 = asteriskVersion44.compareTo(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean53 = asteriskVersion51.isAtLeast(asteriskVersion52);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean56 = asteriskVersion54.isAtLeast(asteriskVersion55);
        int int57 = asteriskVersion51.compareTo(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean60 = asteriskVersion58.isAtLeast(asteriskVersion59);
        boolean boolean61 = asteriskVersion55.isAtLeast(asteriskVersion59);
        boolean boolean62 = asteriskVersion44.isAtLeast(asteriskVersion59);
        int int63 = asteriskVersion43.compareTo(asteriskVersion44);
        int int64 = asteriskVersion18.compareTo(asteriskVersion44);
        java.lang.String str65 = asteriskVersion44.toString();
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer66 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer66.write();
        htmlEventTracer66.write();
        htmlEventTracer66.write();
        htmlEventTracer66.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent71 = null;
        htmlEventTracer66.onManagerEvent(managerEvent71);
        boolean boolean73 = asteriskVersion44.equals((java.lang.Object) htmlEventTracer66);
        org.asteriskjava.manager.event.ManagerEvent managerEvent74 = null;
        htmlEventTracer66.onManagerEvent(managerEvent74);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer66.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Asterisk 1.0" + "'", str12, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType13 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType13.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 1.0" + "'", str21, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Asterisk 1.0" + "'", str27, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 16" + "'", str40, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Asterisk 20" + "'", str65, "Asterisk 20");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent3 = null;
        htmlEventTracer0.onManagerEvent(managerEvent3);
        org.asteriskjava.manager.event.ManagerEvent managerEvent5 = null;
        htmlEventTracer0.onManagerEvent(managerEvent5);
        org.asteriskjava.manager.event.ManagerEvent managerEvent7 = null;
        htmlEventTracer0.onManagerEvent(managerEvent7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent9 = null;
        htmlEventTracer0.onManagerEvent(managerEvent9);
        org.asteriskjava.manager.event.ManagerEvent managerEvent11 = null;
        htmlEventTracer0.onManagerEvent(managerEvent11);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean3 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int6 = asteriskVersion4.compareTo(asteriskVersion5);
        boolean boolean7 = asteriskVersion0.isAtLeast(asteriskVersion4);
        java.lang.String str8 = asteriskVersion0.toString();
        java.lang.String str9 = asteriskVersion0.toString();
        java.lang.Class<?> wildcardClass10 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 11" + "'", str1, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Asterisk 11" + "'", str8, "Asterisk 11");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Asterisk 11" + "'", str9, "Asterisk 11");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int5 = asteriskVersion3.compareTo(asteriskVersion4);
        boolean boolean6 = asteriskVersion2.isAtLeast(asteriskVersion4);
        boolean boolean7 = asteriskVersion1.equals((java.lang.Object) asteriskVersion2);
        java.lang.Class<?> wildcardClass8 = asteriskVersion2.getClass();
        boolean boolean9 = asteriskVersion0.equals((java.lang.Object) asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str15 = asteriskVersion14.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean17 = asteriskVersion14.isAtLeast(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str19 = asteriskVersion18.toString();
        int int20 = asteriskVersion14.compareTo(asteriskVersion18);
        boolean boolean21 = asteriskVersion13.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        boolean boolean26 = asteriskVersion22.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean29 = asteriskVersion27.isAtLeast(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int31 = asteriskVersion28.compareTo(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean33 = asteriskVersion30.isAtLeast(asteriskVersion32);
        int int34 = asteriskVersion22.compareTo(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int38 = asteriskVersion36.compareTo(asteriskVersion37);
        boolean boolean39 = asteriskVersion35.isAtLeast(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean42 = asteriskVersion40.isAtLeast(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int44 = asteriskVersion41.compareTo(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean46 = asteriskVersion43.isAtLeast(asteriskVersion45);
        int int47 = asteriskVersion35.compareTo(asteriskVersion43);
        boolean boolean48 = asteriskVersion22.isAtLeast(asteriskVersion43);
        boolean boolean50 = asteriskVersion22.equals((java.lang.Object) 0);
        int int51 = asteriskVersion18.compareTo(asteriskVersion22);
        boolean boolean52 = asteriskVersion10.equals((java.lang.Object) asteriskVersion22);
        boolean boolean53 = asteriskVersion2.equals((java.lang.Object) asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int56 = asteriskVersion54.compareTo(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int58 = asteriskVersion54.compareTo(asteriskVersion57);
        org.asteriskjava.pbx.TechType techType59 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean60 = asteriskVersion54.equals((java.lang.Object) techType59);
        boolean boolean61 = asteriskVersion10.equals((java.lang.Object) asteriskVersion54);
        java.lang.Class<?> wildcardClass62 = asteriskVersion10.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Asterisk 11" + "'", str15, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Asterisk 14" + "'", str19, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + techType59 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType59.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer7.write();
        boolean boolean9 = asteriskVersion4.equals((java.lang.Object) htmlEventTracer7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer7.onManagerEvent(managerEvent10);
        org.asteriskjava.manager.event.ManagerEvent managerEvent12 = null;
        htmlEventTracer7.onManagerEvent(managerEvent12);
        org.asteriskjava.manager.event.ManagerEvent managerEvent14 = null;
        htmlEventTracer7.onManagerEvent(managerEvent14);
        org.asteriskjava.manager.event.ManagerEvent managerEvent16 = null;
        htmlEventTracer7.onManagerEvent(managerEvent16);
        org.asteriskjava.manager.event.ManagerEvent managerEvent18 = null;
        htmlEventTracer7.onManagerEvent(managerEvent18);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int7 = listenerPriority5.compare(listenerPriority6);
        org.asteriskjava.pbx.ListenerPriority listenerPriority8 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int9 = listenerPriority6.compare(listenerPriority8);
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int11 = listenerPriority6.compare(listenerPriority10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean17 = asteriskVersion15.isAtLeast(asteriskVersion16);
        int int18 = asteriskVersion12.compareTo(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean21 = asteriskVersion19.isAtLeast(asteriskVersion20);
        boolean boolean22 = asteriskVersion16.isAtLeast(asteriskVersion20);
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean24 = asteriskVersion16.equals((java.lang.Object) listenerPriority23);
        int int25 = listenerPriority10.compare(listenerPriority23);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int29 = asteriskVersion27.compareTo(asteriskVersion28);
        boolean boolean30 = asteriskVersion26.isAtLeast(asteriskVersion28);
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int33 = listenerPriority31.compare(listenerPriority32);
        org.asteriskjava.pbx.ListenerPriority listenerPriority34 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int35 = listenerPriority32.compare(listenerPriority34);
        org.asteriskjava.pbx.ListenerPriority listenerPriority36 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int37 = listenerPriority32.compare(listenerPriority36);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean40 = asteriskVersion38.isAtLeast(asteriskVersion39);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean43 = asteriskVersion41.isAtLeast(asteriskVersion42);
        int int44 = asteriskVersion38.compareTo(asteriskVersion42);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean47 = asteriskVersion45.isAtLeast(asteriskVersion46);
        boolean boolean48 = asteriskVersion42.isAtLeast(asteriskVersion46);
        org.asteriskjava.pbx.ListenerPriority listenerPriority49 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean50 = asteriskVersion42.equals((java.lang.Object) listenerPriority49);
        int int51 = listenerPriority36.compare(listenerPriority49);
        boolean boolean52 = asteriskVersion28.equals((java.lang.Object) listenerPriority36);
        int int53 = listenerPriority23.compare(listenerPriority36);
        org.asteriskjava.pbx.ListenerPriority listenerPriority54 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int55 = listenerPriority23.compare(listenerPriority54);
        int int56 = listenerPriority1.compare(listenerPriority54);
        org.asteriskjava.pbx.ListenerPriority listenerPriority57 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int58 = listenerPriority54.compare(listenerPriority57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority8 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority8.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-4) + "'", int9 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-6) + "'", int11 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority34 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority34.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-4) + "'", int35 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority36 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority36.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-6) + "'", int37 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority49 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority49.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority54 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority54.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-2) + "'", int56 == (-2));
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int6 = asteriskVersion2.compareTo(asteriskVersion5);
        org.asteriskjava.pbx.TechType techType7 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean8 = asteriskVersion2.equals((java.lang.Object) techType7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        boolean boolean10 = asteriskVersion2.equals((java.lang.Object) asteriskVersion9);
        int int11 = asteriskVersion0.compareTo(asteriskVersion2);
        org.asteriskjava.pbx.DTMFTone dTMFTone12 = org.asteriskjava.pbx.DTMFTone.STAR;
        java.lang.String str13 = dTMFTone12.toString();
        java.lang.String str14 = dTMFTone12.toString();
        boolean boolean15 = asteriskVersion2.equals((java.lang.Object) dTMFTone12);
        java.lang.Class<?> wildcardClass16 = asteriskVersion2.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 1.0" + "'", str1, "Asterisk 1.0");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + techType7 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType7.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + dTMFTone12 + "' != '" + org.asteriskjava.pbx.DTMFTone.STAR + "'", dTMFTone12.equals(org.asteriskjava.pbx.DTMFTone.STAR));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "*" + "'", str13, "*");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "*" + "'", str14, "*");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int5 = listenerPriority3.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int7 = listenerPriority4.compare(listenerPriority6);
        int int8 = listenerPriority1.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int11 = listenerPriority9.compare(listenerPriority10);
        org.asteriskjava.pbx.ListenerPriority listenerPriority12 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int13 = listenerPriority10.compare(listenerPriority12);
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int15 = listenerPriority10.compare(listenerPriority14);
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean18 = asteriskVersion16.isAtLeast(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean21 = asteriskVersion19.isAtLeast(asteriskVersion20);
        int int22 = asteriskVersion16.compareTo(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean25 = asteriskVersion23.isAtLeast(asteriskVersion24);
        boolean boolean26 = asteriskVersion20.isAtLeast(asteriskVersion24);
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean28 = asteriskVersion20.equals((java.lang.Object) listenerPriority27);
        int int29 = listenerPriority14.compare(listenerPriority27);
        org.asteriskjava.pbx.ListenerPriority listenerPriority30 = org.asteriskjava.pbx.ListenerPriority.REALTIME;
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int32 = listenerPriority30.compare(listenerPriority31);
        org.asteriskjava.pbx.ListenerPriority listenerPriority33 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority34 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int35 = listenerPriority33.compare(listenerPriority34);
        org.asteriskjava.pbx.ListenerPriority listenerPriority36 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int37 = listenerPriority34.compare(listenerPriority36);
        org.asteriskjava.pbx.ListenerPriority listenerPriority38 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority39 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int40 = listenerPriority38.compare(listenerPriority39);
        org.asteriskjava.pbx.ListenerPriority listenerPriority41 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority42 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int43 = listenerPriority41.compare(listenerPriority42);
        org.asteriskjava.pbx.ListenerPriority listenerPriority44 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int45 = listenerPriority42.compare(listenerPriority44);
        int int46 = listenerPriority39.compare(listenerPriority42);
        int int47 = listenerPriority36.compare(listenerPriority42);
        org.asteriskjava.pbx.ListenerPriority listenerPriority48 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority49 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority50 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int51 = listenerPriority49.compare(listenerPriority50);
        org.asteriskjava.pbx.ListenerPriority listenerPriority52 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int53 = listenerPriority50.compare(listenerPriority52);
        int int54 = listenerPriority48.compare(listenerPriority50);
        int int55 = listenerPriority42.compare(listenerPriority50);
        int int56 = listenerPriority30.compare(listenerPriority42);
        int int57 = listenerPriority27.compare(listenerPriority30);
        int int58 = listenerPriority1.compare(listenerPriority30);
        java.lang.Class<?> wildcardClass59 = listenerPriority1.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-4) + "'", int7 == (-4));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority12 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority12.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-4) + "'", int13 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-6) + "'", int15 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority30 + "' != '" + org.asteriskjava.pbx.ListenerPriority.REALTIME + "'", listenerPriority30.equals(org.asteriskjava.pbx.ListenerPriority.REALTIME));
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-92) + "'", int32 == (-92));
        org.junit.Assert.assertTrue("'" + listenerPriority33 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority33.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority34 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority34.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority36 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority36.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-4) + "'", int37 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority38 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority38.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority39 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority39.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority41 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority41.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority42 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority42.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority44 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority44.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-4) + "'", int45 == (-4));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority48 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority48.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority49 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority49.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority50 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority50.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority52 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority52.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-4) + "'", int53 == (-4));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-90) + "'", int56 == (-90));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 96 + "'", int57 == 96);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 90 + "'", int58 == 90);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int7 = listenerPriority5.compare(listenerPriority6);
        org.asteriskjava.pbx.ListenerPriority listenerPriority8 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int9 = listenerPriority6.compare(listenerPriority8);
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int11 = listenerPriority6.compare(listenerPriority10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean17 = asteriskVersion15.isAtLeast(asteriskVersion16);
        int int18 = asteriskVersion12.compareTo(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean21 = asteriskVersion19.isAtLeast(asteriskVersion20);
        boolean boolean22 = asteriskVersion16.isAtLeast(asteriskVersion20);
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean24 = asteriskVersion16.equals((java.lang.Object) listenerPriority23);
        int int25 = listenerPriority10.compare(listenerPriority23);
        org.asteriskjava.pbx.ListenerPriority listenerPriority26 = org.asteriskjava.pbx.ListenerPriority.REALTIME;
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int28 = listenerPriority26.compare(listenerPriority27);
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority30 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int31 = listenerPriority29.compare(listenerPriority30);
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int33 = listenerPriority30.compare(listenerPriority32);
        org.asteriskjava.pbx.ListenerPriority listenerPriority34 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority35 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int36 = listenerPriority34.compare(listenerPriority35);
        org.asteriskjava.pbx.ListenerPriority listenerPriority37 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority38 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int39 = listenerPriority37.compare(listenerPriority38);
        org.asteriskjava.pbx.ListenerPriority listenerPriority40 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int41 = listenerPriority38.compare(listenerPriority40);
        int int42 = listenerPriority35.compare(listenerPriority38);
        int int43 = listenerPriority32.compare(listenerPriority38);
        org.asteriskjava.pbx.ListenerPriority listenerPriority44 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority45 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority46 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int47 = listenerPriority45.compare(listenerPriority46);
        org.asteriskjava.pbx.ListenerPriority listenerPriority48 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int49 = listenerPriority46.compare(listenerPriority48);
        int int50 = listenerPriority44.compare(listenerPriority46);
        int int51 = listenerPriority38.compare(listenerPriority46);
        int int52 = listenerPriority26.compare(listenerPriority38);
        int int53 = listenerPriority23.compare(listenerPriority26);
        org.asteriskjava.pbx.ListenerPriority listenerPriority54 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority55 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int56 = listenerPriority54.compare(listenerPriority55);
        org.asteriskjava.pbx.ListenerPriority listenerPriority57 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int58 = listenerPriority55.compare(listenerPriority57);
        org.asteriskjava.pbx.ListenerPriority listenerPriority59 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int60 = listenerPriority55.compare(listenerPriority59);
        org.asteriskjava.pbx.ListenerPriority listenerPriority61 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int62 = listenerPriority55.compare(listenerPriority61);
        org.asteriskjava.pbx.ListenerPriority listenerPriority63 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority64 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority65 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int66 = listenerPriority64.compare(listenerPriority65);
        org.asteriskjava.pbx.ListenerPriority listenerPriority67 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority68 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int69 = listenerPriority67.compare(listenerPriority68);
        org.asteriskjava.pbx.ListenerPriority listenerPriority70 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int71 = listenerPriority68.compare(listenerPriority70);
        int int72 = listenerPriority65.compare(listenerPriority68);
        org.asteriskjava.pbx.ListenerPriority listenerPriority73 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority74 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int75 = listenerPriority73.compare(listenerPriority74);
        int int76 = listenerPriority65.compare(listenerPriority73);
        int int77 = listenerPriority63.compare(listenerPriority65);
        int int78 = listenerPriority61.compare(listenerPriority65);
        org.asteriskjava.pbx.ListenerPriority listenerPriority79 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority80 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int81 = listenerPriority79.compare(listenerPriority80);
        org.asteriskjava.pbx.ListenerPriority listenerPriority82 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int83 = listenerPriority80.compare(listenerPriority82);
        int int84 = listenerPriority61.compare(listenerPriority80);
        int int85 = listenerPriority23.compare(listenerPriority61);
        int int86 = listenerPriority3.compare(listenerPriority23);
        java.lang.Class<?> wildcardClass87 = listenerPriority3.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority8 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority8.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-4) + "'", int9 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-6) + "'", int11 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority26 + "' != '" + org.asteriskjava.pbx.ListenerPriority.REALTIME + "'", listenerPriority26.equals(org.asteriskjava.pbx.ListenerPriority.REALTIME));
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-92) + "'", int28 == (-92));
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority30 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority30.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-4) + "'", int33 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority34 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority34.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority35 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority35.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority37 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority37.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority38 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority38.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority40 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority40.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-4) + "'", int41 == (-4));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority44 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority44.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority45 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority45.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority46 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority46.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority48 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority48.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-4) + "'", int49 == (-4));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-90) + "'", int52 == (-90));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 96 + "'", int53 == 96);
        org.junit.Assert.assertTrue("'" + listenerPriority54 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority54.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority55 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority55.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority57 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority57.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-4) + "'", int58 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority59 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority59.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-6) + "'", int60 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority61 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority61.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-4) + "'", int62 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority63 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority63.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority64 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority64.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority65 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority65.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority67 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority67.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority68 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority68.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority70 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority70.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-4) + "'", int71 == (-4));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority73 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority73.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority74 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority74.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-2) + "'", int76 == (-2));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority79 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority79.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority80 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority80.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority82 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority82.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-4) + "'", int83 == (-4));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-2) + "'", int86 == (-2));
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean6 = asteriskVersion0.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int10 = asteriskVersion8.compareTo(asteriskVersion9);
        boolean boolean11 = asteriskVersion7.isAtLeast(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int16 = asteriskVersion13.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean18 = asteriskVersion15.isAtLeast(asteriskVersion17);
        int int19 = asteriskVersion7.compareTo(asteriskVersion15);
        int int20 = asteriskVersion0.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int23 = asteriskVersion21.compareTo(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str25 = asteriskVersion24.toString();
        boolean boolean26 = asteriskVersion22.isAtLeast(asteriskVersion24);
        boolean boolean28 = asteriskVersion22.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean31 = asteriskVersion29.isAtLeast(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int33 = asteriskVersion30.compareTo(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean35 = asteriskVersion32.isAtLeast(asteriskVersion34);
        boolean boolean36 = asteriskVersion22.isAtLeast(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int39 = asteriskVersion37.compareTo(asteriskVersion38);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int43 = asteriskVersion41.compareTo(asteriskVersion42);
        boolean boolean44 = asteriskVersion40.isAtLeast(asteriskVersion42);
        int int45 = asteriskVersion37.compareTo(asteriskVersion40);
        java.lang.String str46 = asteriskVersion37.toString();
        java.lang.String str47 = asteriskVersion37.toString();
        int int48 = asteriskVersion22.compareTo(asteriskVersion37);
        int int49 = asteriskVersion7.compareTo(asteriskVersion22);
        java.lang.String str50 = asteriskVersion7.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        java.lang.String str52 = asteriskVersion51.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum54 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str55 = activityStatusEnum54.getDefaultMessage();
        boolean boolean56 = asteriskVersion53.equals((java.lang.Object) str55);
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean59 = asteriskVersion57.isAtLeast(asteriskVersion58);
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean62 = asteriskVersion60.isAtLeast(asteriskVersion61);
        int int63 = asteriskVersion57.compareTo(asteriskVersion61);
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean66 = asteriskVersion64.isAtLeast(asteriskVersion65);
        boolean boolean67 = asteriskVersion61.isAtLeast(asteriskVersion65);
        org.asteriskjava.pbx.ListenerPriority listenerPriority68 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean69 = asteriskVersion61.equals((java.lang.Object) listenerPriority68);
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int71 = asteriskVersion61.compareTo(asteriskVersion70);
        boolean boolean72 = asteriskVersion53.equals((java.lang.Object) asteriskVersion61);
        java.lang.String str73 = asteriskVersion53.toString();
        boolean boolean74 = asteriskVersion51.isAtLeast(asteriskVersion53);
        boolean boolean75 = asteriskVersion7.isAtLeast(asteriskVersion51);
        java.lang.Class<?> wildcardClass76 = asteriskVersion7.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Asterisk 1.0" + "'", str25, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Asterisk 17" + "'", str46, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Asterisk 17" + "'", str47, "Asterisk 17");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Asterisk 12" + "'", str50, "Asterisk 12");
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Asterisk 10" + "'", str52, "Asterisk 10");
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + activityStatusEnum54 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum54.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Progress" + "'", str55, "Progress");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority68 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority68.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Asterisk 1.0" + "'", str73, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean8 = asteriskVersion6.isAtLeast(asteriskVersion7);
        int int9 = asteriskVersion3.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        boolean boolean13 = asteriskVersion7.isAtLeast(asteriskVersion11);
        boolean boolean14 = asteriskVersion0.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean17 = asteriskVersion15.isAtLeast(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int19 = asteriskVersion16.compareTo(asteriskVersion18);
        boolean boolean20 = asteriskVersion11.equals((java.lang.Object) asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = asteriskVersion16.isAtLeast(asteriskVersion21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent2 = null;
        htmlEventTracer0.onManagerEvent(managerEvent2);
        org.asteriskjava.manager.event.ManagerEvent managerEvent4 = null;
        htmlEventTracer0.onManagerEvent(managerEvent4);
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer0.onManagerEvent(managerEvent10);
        org.asteriskjava.manager.event.ManagerEvent managerEvent12 = null;
        htmlEventTracer0.onManagerEvent(managerEvent12);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int6 = listenerPriority1.compare(listenerPriority5);
        org.asteriskjava.pbx.ListenerPriority listenerPriority7 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int8 = listenerPriority1.compare(listenerPriority7);
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int12 = listenerPriority10.compare(listenerPriority11);
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int15 = listenerPriority13.compare(listenerPriority14);
        org.asteriskjava.pbx.ListenerPriority listenerPriority16 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int17 = listenerPriority14.compare(listenerPriority16);
        int int18 = listenerPriority11.compare(listenerPriority14);
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int21 = listenerPriority19.compare(listenerPriority20);
        int int22 = listenerPriority11.compare(listenerPriority19);
        int int23 = listenerPriority9.compare(listenerPriority11);
        int int24 = listenerPriority7.compare(listenerPriority11);
        org.asteriskjava.pbx.ListenerPriority listenerPriority25 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority26 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int27 = listenerPriority25.compare(listenerPriority26);
        org.asteriskjava.pbx.ListenerPriority listenerPriority28 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int29 = listenerPriority26.compare(listenerPriority28);
        int int30 = listenerPriority7.compare(listenerPriority26);
        java.lang.Class<?> wildcardClass31 = listenerPriority26.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-6) + "'", int6 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority7 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority7.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-4) + "'", int8 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority16 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority16.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-4) + "'", int17 == (-4));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-2) + "'", int22 == (-2));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority25 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority25.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority26 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority26.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority28 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority28.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-4) + "'", int29 == (-4));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int4 = asteriskVersion1.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str7 = asteriskVersion6.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean9 = asteriskVersion6.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str11 = asteriskVersion10.toString();
        int int12 = asteriskVersion6.compareTo(asteriskVersion10);
        boolean boolean13 = asteriskVersion5.isAtLeast(asteriskVersion10);
        boolean boolean14 = asteriskVersion1.equals((java.lang.Object) asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int18 = asteriskVersion16.compareTo(asteriskVersion17);
        boolean boolean19 = asteriskVersion15.isAtLeast(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int22 = asteriskVersion20.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int24 = asteriskVersion20.compareTo(asteriskVersion23);
        org.asteriskjava.pbx.TechType techType25 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean26 = asteriskVersion20.equals((java.lang.Object) techType25);
        boolean boolean27 = asteriskVersion17.isAtLeast(asteriskVersion20);
        int int28 = asteriskVersion1.compareTo(asteriskVersion20);
        java.lang.Class<?> wildcardClass29 = asteriskVersion20.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Asterisk 11" + "'", str7, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Asterisk 14" + "'", str11, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + techType25 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType25.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasValidTech("Asterisk 19");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int7 = listenerPriority5.compare(listenerPriority6);
        org.asteriskjava.pbx.ListenerPriority listenerPriority8 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int9 = listenerPriority6.compare(listenerPriority8);
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int11 = listenerPriority6.compare(listenerPriority10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean17 = asteriskVersion15.isAtLeast(asteriskVersion16);
        int int18 = asteriskVersion12.compareTo(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean21 = asteriskVersion19.isAtLeast(asteriskVersion20);
        boolean boolean22 = asteriskVersion16.isAtLeast(asteriskVersion20);
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean24 = asteriskVersion16.equals((java.lang.Object) listenerPriority23);
        int int25 = listenerPriority10.compare(listenerPriority23);
        boolean boolean26 = asteriskVersion2.equals((java.lang.Object) listenerPriority10);
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority28 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int29 = listenerPriority27.compare(listenerPriority28);
        int int30 = listenerPriority10.compare(listenerPriority28);
        java.lang.Class<?> wildcardClass31 = listenerPriority28.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority8 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority8.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-4) + "'", int9 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-6) + "'", int11 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority28 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority28.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean3 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int5 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum7 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str8 = activityStatusEnum7.getDefaultMessage();
        boolean boolean9 = asteriskVersion6.equals((java.lang.Object) str8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str12 = asteriskVersion11.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean14 = asteriskVersion11.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int18 = asteriskVersion16.compareTo(asteriskVersion17);
        boolean boolean19 = asteriskVersion15.isAtLeast(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean22 = asteriskVersion20.isAtLeast(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int24 = asteriskVersion21.compareTo(asteriskVersion23);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean26 = asteriskVersion23.isAtLeast(asteriskVersion25);
        int int27 = asteriskVersion15.compareTo(asteriskVersion23);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int30 = asteriskVersion28.compareTo(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int32 = asteriskVersion28.compareTo(asteriskVersion31);
        boolean boolean33 = asteriskVersion23.isAtLeast(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str38 = asteriskVersion37.toString();
        boolean boolean39 = asteriskVersion35.isAtLeast(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int42 = asteriskVersion40.compareTo(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str44 = asteriskVersion43.toString();
        boolean boolean45 = asteriskVersion41.isAtLeast(asteriskVersion43);
        boolean boolean47 = asteriskVersion41.equals((java.lang.Object) "0");
        boolean boolean48 = asteriskVersion35.equals((java.lang.Object) asteriskVersion41);
        boolean boolean49 = asteriskVersion31.isAtLeast(asteriskVersion35);
        int int50 = asteriskVersion13.compareTo(asteriskVersion31);
        int int51 = asteriskVersion10.compareTo(asteriskVersion31);
        boolean boolean52 = asteriskVersion6.isAtLeast(asteriskVersion31);
        int int53 = asteriskVersion0.compareTo(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int56 = asteriskVersion54.compareTo(asteriskVersion55);
        org.asteriskjava.pbx.TechType techType57 = org.asteriskjava.pbx.TechType.DIALPLAN;
        boolean boolean58 = asteriskVersion55.equals((java.lang.Object) techType57);
        boolean boolean59 = asteriskVersion31.equals((java.lang.Object) asteriskVersion55);
        java.lang.Class<?> wildcardClass60 = asteriskVersion31.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 11" + "'", str1, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + activityStatusEnum7 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum7.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Progress" + "'", str8, "Progress");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Asterisk 11" + "'", str12, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Asterisk 1.0" + "'", str38, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Asterisk 1.0" + "'", str44, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + techType57 + "' != '" + org.asteriskjava.pbx.TechType.DIALPLAN + "'", techType57.equals(org.asteriskjava.pbx.TechType.DIALPLAN));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum0 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str1 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str2 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str3 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str4 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str5 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str6 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str7 = activityStatusEnum0.getDefaultMessage();
        java.lang.Class<?> wildcardClass8 = activityStatusEnum0.getClass();
        org.junit.Assert.assertTrue("'" + activityStatusEnum0 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum0.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Progress" + "'", str1, "Progress");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Progress" + "'", str2, "Progress");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Progress" + "'", str3, "Progress");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Progress" + "'", str4, "Progress");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Progress" + "'", str5, "Progress");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Progress" + "'", str6, "Progress");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Progress" + "'", str7, "Progress");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int6 = asteriskVersion2.compareTo(asteriskVersion5);
        org.asteriskjava.pbx.TechType techType7 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean8 = asteriskVersion2.equals((java.lang.Object) techType7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        boolean boolean10 = asteriskVersion2.equals((java.lang.Object) asteriskVersion9);
        int int11 = asteriskVersion0.compareTo(asteriskVersion2);
        org.asteriskjava.pbx.DTMFTone dTMFTone12 = org.asteriskjava.pbx.DTMFTone.STAR;
        java.lang.String str13 = dTMFTone12.toString();
        java.lang.String str14 = dTMFTone12.toString();
        boolean boolean15 = asteriskVersion2.equals((java.lang.Object) dTMFTone12);
        java.lang.String str16 = dTMFTone12.toString();
        java.lang.String str17 = dTMFTone12.toString();
        java.lang.String str18 = dTMFTone12.toString();
        java.lang.String str19 = dTMFTone12.toString();
        java.lang.Class<?> wildcardClass20 = dTMFTone12.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 1.0" + "'", str1, "Asterisk 1.0");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + techType7 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType7.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + dTMFTone12 + "' != '" + org.asteriskjava.pbx.DTMFTone.STAR + "'", dTMFTone12.equals(org.asteriskjava.pbx.DTMFTone.STAR));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "*" + "'", str13, "*");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "*" + "'", str14, "*");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "*" + "'", str16, "*");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "*" + "'", str17, "*");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "*" + "'", str18, "*");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "*" + "'", str19, "*");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent3 = null;
        htmlEventTracer0.onManagerEvent(managerEvent3);
        org.asteriskjava.manager.event.ManagerEvent managerEvent5 = null;
        htmlEventTracer0.onManagerEvent(managerEvent5);
        org.asteriskjava.manager.event.ManagerEvent managerEvent7 = null;
        htmlEventTracer0.onManagerEvent(managerEvent7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent9 = null;
        htmlEventTracer0.onManagerEvent(managerEvent9);
        org.asteriskjava.manager.event.ManagerEvent managerEvent11 = null;
        htmlEventTracer0.onManagerEvent(managerEvent11);
        org.asteriskjava.manager.event.ManagerEvent managerEvent13 = null;
        htmlEventTracer0.onManagerEvent(managerEvent13);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int6 = listenerPriority1.compare(listenerPriority5);
        org.asteriskjava.pbx.ListenerPriority listenerPriority7 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int8 = listenerPriority1.compare(listenerPriority7);
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int12 = listenerPriority10.compare(listenerPriority11);
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int15 = listenerPriority13.compare(listenerPriority14);
        org.asteriskjava.pbx.ListenerPriority listenerPriority16 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int17 = listenerPriority14.compare(listenerPriority16);
        int int18 = listenerPriority11.compare(listenerPriority14);
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int21 = listenerPriority19.compare(listenerPriority20);
        int int22 = listenerPriority11.compare(listenerPriority19);
        int int23 = listenerPriority9.compare(listenerPriority11);
        int int24 = listenerPriority7.compare(listenerPriority11);
        org.asteriskjava.pbx.ListenerPriority listenerPriority25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int26 = listenerPriority7.compare(listenerPriority25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-6) + "'", int6 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority7 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority7.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-4) + "'", int8 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority16 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority16.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-4) + "'", int17 == (-4));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-2) + "'", int22 == (-2));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean3 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int6 = asteriskVersion4.compareTo(asteriskVersion5);
        boolean boolean7 = asteriskVersion0.isAtLeast(asteriskVersion4);
        boolean boolean9 = asteriskVersion4.equals((java.lang.Object) "Failure");
        java.lang.Class<?> wildcardClass10 = asteriskVersion4.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 11" + "'", str1, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean8 = asteriskVersion6.isAtLeast(asteriskVersion7);
        int int9 = asteriskVersion3.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        boolean boolean13 = asteriskVersion7.isAtLeast(asteriskVersion11);
        boolean boolean14 = asteriskVersion0.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = asteriskVersion0.isAtLeast(asteriskVersion15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str6 = asteriskVersion5.toString();
        int int7 = asteriskVersion1.compareTo(asteriskVersion5);
        boolean boolean8 = asteriskVersion0.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int12 = asteriskVersion10.compareTo(asteriskVersion11);
        boolean boolean13 = asteriskVersion9.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int18 = asteriskVersion15.compareTo(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean20 = asteriskVersion17.isAtLeast(asteriskVersion19);
        int int21 = asteriskVersion9.compareTo(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        boolean boolean26 = asteriskVersion22.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean29 = asteriskVersion27.isAtLeast(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int31 = asteriskVersion28.compareTo(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean33 = asteriskVersion30.isAtLeast(asteriskVersion32);
        int int34 = asteriskVersion22.compareTo(asteriskVersion30);
        boolean boolean35 = asteriskVersion9.isAtLeast(asteriskVersion30);
        boolean boolean37 = asteriskVersion9.equals((java.lang.Object) 0);
        int int38 = asteriskVersion5.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str40 = asteriskVersion39.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int43 = asteriskVersion41.compareTo(asteriskVersion42);
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int45 = asteriskVersion41.compareTo(asteriskVersion44);
        org.asteriskjava.pbx.TechType techType46 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean47 = asteriskVersion41.equals((java.lang.Object) techType46);
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        boolean boolean49 = asteriskVersion41.equals((java.lang.Object) asteriskVersion48);
        int int50 = asteriskVersion39.compareTo(asteriskVersion41);
        boolean boolean51 = asteriskVersion5.isAtLeast(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        java.lang.String str53 = asteriskVersion52.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        int int55 = asteriskVersion52.compareTo(asteriskVersion54);
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean58 = asteriskVersion56.isAtLeast(asteriskVersion57);
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean61 = asteriskVersion59.isAtLeast(asteriskVersion60);
        int int62 = asteriskVersion56.compareTo(asteriskVersion60);
        org.asteriskjava.AsteriskVersion asteriskVersion63 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean65 = asteriskVersion63.isAtLeast(asteriskVersion64);
        boolean boolean66 = asteriskVersion60.isAtLeast(asteriskVersion64);
        org.asteriskjava.pbx.ListenerPriority listenerPriority67 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean68 = asteriskVersion60.equals((java.lang.Object) listenerPriority67);
        boolean boolean69 = asteriskVersion54.equals((java.lang.Object) asteriskVersion60);
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion71 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int72 = asteriskVersion70.compareTo(asteriskVersion71);
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str74 = asteriskVersion73.toString();
        boolean boolean75 = asteriskVersion71.isAtLeast(asteriskVersion73);
        boolean boolean77 = asteriskVersion71.equals((java.lang.Object) "0");
        boolean boolean78 = asteriskVersion54.isAtLeast(asteriskVersion71);
        java.lang.String str79 = asteriskVersion71.toString();
        boolean boolean80 = asteriskVersion41.isAtLeast(asteriskVersion71);
        java.lang.String str81 = asteriskVersion71.toString();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Asterisk 14" + "'", str6, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 1.0" + "'", str40, "Asterisk 1.0");
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + techType46 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType46.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Asterisk 10" + "'", str53, "Asterisk 10");
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion63);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority67 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority67.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertNotNull(asteriskVersion71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Asterisk 1.0" + "'", str74, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Asterisk 16" + "'", str79, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Asterisk 16" + "'", str81, "Asterisk 16");
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent4 = null;
        htmlEventTracer0.onManagerEvent(managerEvent4);
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer0.onManagerEvent(managerEvent10);
        org.asteriskjava.manager.event.ManagerEvent managerEvent12 = null;
        htmlEventTracer0.onManagerEvent(managerEvent12);
        org.asteriskjava.manager.event.ManagerEvent managerEvent14 = null;
        htmlEventTracer0.onManagerEvent(managerEvent14);
        org.asteriskjava.manager.event.ManagerEvent managerEvent16 = null;
        htmlEventTracer0.onManagerEvent(managerEvent16);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int4 = asteriskVersion1.compareTo(asteriskVersion3);
        java.lang.String str5 = asteriskVersion3.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str8 = asteriskVersion7.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean10 = asteriskVersion7.isAtLeast(asteriskVersion9);
        boolean boolean11 = asteriskVersion6.equals((java.lang.Object) boolean10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int16 = asteriskVersion12.compareTo(asteriskVersion15);
        int int17 = asteriskVersion6.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int21 = asteriskVersion19.compareTo(asteriskVersion20);
        boolean boolean22 = asteriskVersion18.isAtLeast(asteriskVersion20);
        boolean boolean23 = asteriskVersion6.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int26 = asteriskVersion24.compareTo(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int28 = asteriskVersion24.compareTo(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean31 = asteriskVersion29.isAtLeast(asteriskVersion30);
        boolean boolean32 = asteriskVersion27.isAtLeast(asteriskVersion30);
        int int33 = asteriskVersion18.compareTo(asteriskVersion27);
        boolean boolean34 = asteriskVersion3.isAtLeast(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int38 = asteriskVersion36.compareTo(asteriskVersion37);
        boolean boolean39 = asteriskVersion35.isAtLeast(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean42 = asteriskVersion40.isAtLeast(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int44 = asteriskVersion41.compareTo(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean46 = asteriskVersion43.isAtLeast(asteriskVersion45);
        int int47 = asteriskVersion35.compareTo(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int51 = asteriskVersion49.compareTo(asteriskVersion50);
        boolean boolean52 = asteriskVersion48.isAtLeast(asteriskVersion50);
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean55 = asteriskVersion53.isAtLeast(asteriskVersion54);
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int57 = asteriskVersion54.compareTo(asteriskVersion56);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean59 = asteriskVersion56.isAtLeast(asteriskVersion58);
        int int60 = asteriskVersion48.compareTo(asteriskVersion56);
        boolean boolean61 = asteriskVersion35.isAtLeast(asteriskVersion56);
        boolean boolean63 = asteriskVersion35.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean65 = asteriskVersion35.isAtLeast(asteriskVersion64);
        java.lang.String str66 = asteriskVersion64.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int69 = asteriskVersion67.compareTo(asteriskVersion68);
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int71 = asteriskVersion67.compareTo(asteriskVersion70);
        java.lang.String str72 = asteriskVersion70.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion74 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int75 = asteriskVersion73.compareTo(asteriskVersion74);
        org.asteriskjava.AsteriskVersion asteriskVersion76 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int77 = asteriskVersion73.compareTo(asteriskVersion76);
        org.asteriskjava.pbx.TechType techType78 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean79 = asteriskVersion73.equals((java.lang.Object) techType78);
        boolean boolean80 = asteriskVersion70.isAtLeast(asteriskVersion73);
        int int81 = asteriskVersion64.compareTo(asteriskVersion73);
        int int82 = asteriskVersion27.compareTo(asteriskVersion73);
        org.asteriskjava.AsteriskVersion asteriskVersion83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int84 = asteriskVersion27.compareTo(asteriskVersion83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Asterisk 20" + "'", str5, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Asterisk 11" + "'", str8, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Asterisk 20" + "'", str66, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Asterisk 1.8" + "'", str72, "Asterisk 1.8");
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertNotNull(asteriskVersion74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + techType78 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType78.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        boolean boolean1 = org.asteriskjava.pbx.TechType.hasTech("Asterisk 19");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent2 = null;
        htmlEventTracer0.onManagerEvent(managerEvent2);
        org.asteriskjava.manager.event.ManagerEvent managerEvent4 = null;
        htmlEventTracer0.onManagerEvent(managerEvent4);
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer0.onManagerEvent(managerEvent10);
        org.asteriskjava.manager.event.ManagerEvent managerEvent12 = null;
        htmlEventTracer0.onManagerEvent(managerEvent12);
        java.lang.Class<?> wildcardClass14 = htmlEventTracer0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.asteriskjava.pbx.DTMFTone dTMFTone0 = org.asteriskjava.pbx.DTMFTone.FOUR;
        java.lang.Class<?> wildcardClass1 = dTMFTone0.getClass();
        org.junit.Assert.assertTrue("'" + dTMFTone0 + "' != '" + org.asteriskjava.pbx.DTMFTone.FOUR + "'", dTMFTone0.equals(org.asteriskjava.pbx.DTMFTone.FOUR));
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean20 = asteriskVersion18.isAtLeast(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int22 = asteriskVersion19.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean24 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int25 = asteriskVersion13.compareTo(asteriskVersion21);
        boolean boolean26 = asteriskVersion0.isAtLeast(asteriskVersion21);
        boolean boolean28 = asteriskVersion0.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean30 = asteriskVersion0.isAtLeast(asteriskVersion29);
        java.lang.String str31 = asteriskVersion0.toString();
        java.lang.Class<?> wildcardClass32 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Asterisk 12" + "'", str31, "Asterisk 12");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int4 = asteriskVersion1.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean6 = asteriskVersion3.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        int int13 = asteriskVersion7.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        boolean boolean17 = asteriskVersion11.isAtLeast(asteriskVersion15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean19 = asteriskVersion11.equals((java.lang.Object) listenerPriority18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int21 = asteriskVersion11.compareTo(asteriskVersion20);
        boolean boolean22 = asteriskVersion3.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = asteriskVersion3.isAtLeast(asteriskVersion23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int6 = listenerPriority1.compare(listenerPriority5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        int int13 = asteriskVersion7.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        boolean boolean17 = asteriskVersion11.isAtLeast(asteriskVersion15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean19 = asteriskVersion11.equals((java.lang.Object) listenerPriority18);
        int int20 = listenerPriority5.compare(listenerPriority18);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int24 = asteriskVersion22.compareTo(asteriskVersion23);
        boolean boolean25 = asteriskVersion21.isAtLeast(asteriskVersion23);
        org.asteriskjava.pbx.ListenerPriority listenerPriority26 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int28 = listenerPriority26.compare(listenerPriority27);
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int30 = listenerPriority27.compare(listenerPriority29);
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int32 = listenerPriority27.compare(listenerPriority31);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean35 = asteriskVersion33.isAtLeast(asteriskVersion34);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean38 = asteriskVersion36.isAtLeast(asteriskVersion37);
        int int39 = asteriskVersion33.compareTo(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean42 = asteriskVersion40.isAtLeast(asteriskVersion41);
        boolean boolean43 = asteriskVersion37.isAtLeast(asteriskVersion41);
        org.asteriskjava.pbx.ListenerPriority listenerPriority44 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean45 = asteriskVersion37.equals((java.lang.Object) listenerPriority44);
        int int46 = listenerPriority31.compare(listenerPriority44);
        boolean boolean47 = asteriskVersion23.equals((java.lang.Object) listenerPriority31);
        int int48 = listenerPriority18.compare(listenerPriority31);
        org.asteriskjava.pbx.ListenerPriority listenerPriority49 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int50 = listenerPriority18.compare(listenerPriority49);
        org.asteriskjava.pbx.ListenerPriority listenerPriority51 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority52 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int53 = listenerPriority51.compare(listenerPriority52);
        org.asteriskjava.pbx.ListenerPriority listenerPriority54 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int55 = listenerPriority52.compare(listenerPriority54);
        org.asteriskjava.pbx.ListenerPriority listenerPriority56 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority57 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int58 = listenerPriority56.compare(listenerPriority57);
        org.asteriskjava.pbx.ListenerPriority listenerPriority59 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority60 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int61 = listenerPriority59.compare(listenerPriority60);
        org.asteriskjava.pbx.ListenerPriority listenerPriority62 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int63 = listenerPriority60.compare(listenerPriority62);
        int int64 = listenerPriority57.compare(listenerPriority60);
        org.asteriskjava.pbx.ListenerPriority listenerPriority65 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority66 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int67 = listenerPriority65.compare(listenerPriority66);
        int int68 = listenerPriority57.compare(listenerPriority65);
        int int69 = listenerPriority54.compare(listenerPriority65);
        int int70 = listenerPriority18.compare(listenerPriority65);
        java.lang.Class<?> wildcardClass71 = listenerPriority65.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-6) + "'", int6 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority26 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority26.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-4) + "'", int30 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-6) + "'", int32 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority44 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority44.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority49 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority49.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority51 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority51.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority52 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority52.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority54 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority54.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-4) + "'", int55 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority56 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority56.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority57 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority57.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority59 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority59.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority60 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority60.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority62 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority62.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-4) + "'", int63 == (-4));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority65 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority65.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority66 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority66.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-2) + "'", int68 == (-2));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int6 = asteriskVersion2.compareTo(asteriskVersion5);
        org.asteriskjava.pbx.TechType techType7 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean8 = asteriskVersion2.equals((java.lang.Object) techType7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        boolean boolean10 = asteriskVersion2.equals((java.lang.Object) asteriskVersion9);
        int int11 = asteriskVersion0.compareTo(asteriskVersion2);
        org.asteriskjava.pbx.DTMFTone dTMFTone12 = org.asteriskjava.pbx.DTMFTone.STAR;
        java.lang.String str13 = dTMFTone12.toString();
        java.lang.String str14 = dTMFTone12.toString();
        boolean boolean15 = asteriskVersion2.equals((java.lang.Object) dTMFTone12);
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str18 = asteriskVersion17.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean20 = asteriskVersion17.isAtLeast(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean23 = asteriskVersion21.isAtLeast(asteriskVersion22);
        boolean boolean24 = asteriskVersion19.equals((java.lang.Object) asteriskVersion21);
        int int25 = asteriskVersion16.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int30 = asteriskVersion28.compareTo(asteriskVersion29);
        boolean boolean31 = asteriskVersion27.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int34 = asteriskVersion32.compareTo(asteriskVersion33);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int36 = asteriskVersion32.compareTo(asteriskVersion35);
        org.asteriskjava.pbx.TechType techType37 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean38 = asteriskVersion32.equals((java.lang.Object) techType37);
        boolean boolean39 = asteriskVersion29.isAtLeast(asteriskVersion32);
        boolean boolean40 = asteriskVersion26.isAtLeast(asteriskVersion32);
        int int41 = asteriskVersion16.compareTo(asteriskVersion32);
        boolean boolean42 = asteriskVersion2.isAtLeast(asteriskVersion32);
        java.lang.Class<?> wildcardClass43 = asteriskVersion32.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 1.0" + "'", str1, "Asterisk 1.0");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + techType7 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType7.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + dTMFTone12 + "' != '" + org.asteriskjava.pbx.DTMFTone.STAR + "'", dTMFTone12.equals(org.asteriskjava.pbx.DTMFTone.STAR));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "*" + "'", str13, "*");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "*" + "'", str14, "*");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Asterisk 11" + "'", str18, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + techType37 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType37.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent5 = null;
        htmlEventTracer0.onManagerEvent(managerEvent5);
        org.asteriskjava.manager.event.ManagerEvent managerEvent7 = null;
        htmlEventTracer0.onManagerEvent(managerEvent7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent9 = null;
        htmlEventTracer0.onManagerEvent(managerEvent9);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        boolean boolean6 = asteriskVersion0.equals((java.lang.Object) asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int11 = asteriskVersion8.compareTo(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int14 = asteriskVersion12.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str16 = asteriskVersion15.toString();
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int20 = asteriskVersion18.compareTo(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str22 = asteriskVersion21.toString();
        boolean boolean23 = asteriskVersion19.isAtLeast(asteriskVersion21);
        boolean boolean25 = asteriskVersion19.equals((java.lang.Object) "0");
        boolean boolean26 = asteriskVersion13.equals((java.lang.Object) asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int31 = asteriskVersion29.compareTo(asteriskVersion30);
        boolean boolean32 = asteriskVersion28.isAtLeast(asteriskVersion30);
        int int33 = asteriskVersion27.compareTo(asteriskVersion28);
        int int34 = asteriskVersion13.compareTo(asteriskVersion27);
        int int35 = asteriskVersion8.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int38 = asteriskVersion36.compareTo(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str40 = asteriskVersion39.toString();
        boolean boolean41 = asteriskVersion37.isAtLeast(asteriskVersion39);
        boolean boolean43 = asteriskVersion37.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean46 = asteriskVersion44.isAtLeast(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int48 = asteriskVersion45.compareTo(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean50 = asteriskVersion47.isAtLeast(asteriskVersion49);
        boolean boolean51 = asteriskVersion37.isAtLeast(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int54 = asteriskVersion52.compareTo(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int58 = asteriskVersion56.compareTo(asteriskVersion57);
        boolean boolean59 = asteriskVersion55.isAtLeast(asteriskVersion57);
        int int60 = asteriskVersion52.compareTo(asteriskVersion55);
        java.lang.String str61 = asteriskVersion52.toString();
        java.lang.String str62 = asteriskVersion52.toString();
        int int63 = asteriskVersion37.compareTo(asteriskVersion52);
        boolean boolean64 = asteriskVersion8.isAtLeast(asteriskVersion37);
        boolean boolean65 = asteriskVersion0.equals((java.lang.Object) asteriskVersion37);
        java.lang.Class<?> wildcardClass66 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Asterisk 1.0" + "'", str16, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Asterisk 1.0" + "'", str22, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 1.0" + "'", str40, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Asterisk 17" + "'", str61, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Asterisk 17" + "'", str62, "Asterisk 17");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        boolean boolean6 = asteriskVersion0.equals((java.lang.Object) asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int11 = asteriskVersion8.compareTo(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int14 = asteriskVersion12.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str16 = asteriskVersion15.toString();
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int20 = asteriskVersion18.compareTo(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str22 = asteriskVersion21.toString();
        boolean boolean23 = asteriskVersion19.isAtLeast(asteriskVersion21);
        boolean boolean25 = asteriskVersion19.equals((java.lang.Object) "0");
        boolean boolean26 = asteriskVersion13.equals((java.lang.Object) asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int31 = asteriskVersion29.compareTo(asteriskVersion30);
        boolean boolean32 = asteriskVersion28.isAtLeast(asteriskVersion30);
        int int33 = asteriskVersion27.compareTo(asteriskVersion28);
        int int34 = asteriskVersion13.compareTo(asteriskVersion27);
        int int35 = asteriskVersion8.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int38 = asteriskVersion36.compareTo(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str40 = asteriskVersion39.toString();
        boolean boolean41 = asteriskVersion37.isAtLeast(asteriskVersion39);
        boolean boolean43 = asteriskVersion37.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean46 = asteriskVersion44.isAtLeast(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int48 = asteriskVersion45.compareTo(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean50 = asteriskVersion47.isAtLeast(asteriskVersion49);
        boolean boolean51 = asteriskVersion37.isAtLeast(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int54 = asteriskVersion52.compareTo(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int58 = asteriskVersion56.compareTo(asteriskVersion57);
        boolean boolean59 = asteriskVersion55.isAtLeast(asteriskVersion57);
        int int60 = asteriskVersion52.compareTo(asteriskVersion55);
        java.lang.String str61 = asteriskVersion52.toString();
        java.lang.String str62 = asteriskVersion52.toString();
        int int63 = asteriskVersion37.compareTo(asteriskVersion52);
        boolean boolean64 = asteriskVersion8.isAtLeast(asteriskVersion37);
        boolean boolean65 = asteriskVersion0.equals((java.lang.Object) asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean68 = asteriskVersion66.isAtLeast(asteriskVersion67);
        org.asteriskjava.AsteriskVersion asteriskVersion69 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean71 = asteriskVersion69.isAtLeast(asteriskVersion70);
        int int72 = asteriskVersion66.compareTo(asteriskVersion70);
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion74 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean75 = asteriskVersion73.isAtLeast(asteriskVersion74);
        boolean boolean76 = asteriskVersion70.isAtLeast(asteriskVersion74);
        org.asteriskjava.pbx.TechType techType77 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean78 = asteriskVersion70.equals((java.lang.Object) techType77);
        org.asteriskjava.AsteriskVersion asteriskVersion79 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        int int80 = asteriskVersion70.compareTo(asteriskVersion79);
        org.asteriskjava.AsteriskVersion asteriskVersion81 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion82 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int83 = asteriskVersion81.compareTo(asteriskVersion82);
        org.asteriskjava.AsteriskVersion asteriskVersion84 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int85 = asteriskVersion81.compareTo(asteriskVersion84);
        org.asteriskjava.pbx.DTMFTone dTMFTone86 = org.asteriskjava.pbx.DTMFTone.FOUR;
        java.lang.String str87 = dTMFTone86.toString();
        java.lang.String str88 = dTMFTone86.toString();
        boolean boolean89 = asteriskVersion84.equals((java.lang.Object) str88);
        int int90 = asteriskVersion70.compareTo(asteriskVersion84);
        boolean boolean91 = asteriskVersion0.isAtLeast(asteriskVersion84);
        org.asteriskjava.AsteriskVersion asteriskVersion92 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion93 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion94 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int95 = asteriskVersion93.compareTo(asteriskVersion94);
        boolean boolean96 = asteriskVersion92.isAtLeast(asteriskVersion94);
        org.asteriskjava.AsteriskVersion asteriskVersion97 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean98 = asteriskVersion92.isAtLeast(asteriskVersion97);
        int int99 = asteriskVersion84.compareTo(asteriskVersion97);
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Asterisk 1.0" + "'", str16, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Asterisk 1.0" + "'", str22, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 1.0" + "'", str40, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Asterisk 17" + "'", str61, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Asterisk 17" + "'", str62, "Asterisk 17");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(asteriskVersion69);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertNotNull(asteriskVersion74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + techType77 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType77.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(asteriskVersion79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion81);
        org.junit.Assert.assertNotNull(asteriskVersion82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + dTMFTone86 + "' != '" + org.asteriskjava.pbx.DTMFTone.FOUR + "'", dTMFTone86.equals(org.asteriskjava.pbx.DTMFTone.FOUR));
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "4" + "'", str87, "4");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "4" + "'", str88, "4");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(asteriskVersion92);
        org.junit.Assert.assertNotNull(asteriskVersion93);
        org.junit.Assert.assertNotNull(asteriskVersion94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(asteriskVersion97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer0.onManagerEvent(managerEvent10);
        org.asteriskjava.manager.event.ManagerEvent managerEvent12 = null;
        htmlEventTracer0.onManagerEvent(managerEvent12);
        org.asteriskjava.manager.event.ManagerEvent managerEvent14 = null;
        htmlEventTracer0.onManagerEvent(managerEvent14);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        java.lang.Class<?> wildcardClass4 = htmlEventTracer0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int5 = listenerPriority3.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int7 = listenerPriority4.compare(listenerPriority6);
        int int8 = listenerPriority1.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int11 = listenerPriority9.compare(listenerPriority10);
        int int12 = listenerPriority1.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int15 = listenerPriority13.compare(listenerPriority14);
        int int16 = listenerPriority1.compare(listenerPriority13);
        org.asteriskjava.pbx.ListenerPriority listenerPriority17 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int19 = listenerPriority17.compare(listenerPriority18);
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int21 = listenerPriority18.compare(listenerPriority20);
        org.asteriskjava.pbx.ListenerPriority listenerPriority22 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int23 = listenerPriority18.compare(listenerPriority22);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean26 = asteriskVersion24.isAtLeast(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean29 = asteriskVersion27.isAtLeast(asteriskVersion28);
        int int30 = asteriskVersion24.compareTo(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean33 = asteriskVersion31.isAtLeast(asteriskVersion32);
        boolean boolean34 = asteriskVersion28.isAtLeast(asteriskVersion32);
        org.asteriskjava.pbx.ListenerPriority listenerPriority35 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean36 = asteriskVersion28.equals((java.lang.Object) listenerPriority35);
        int int37 = listenerPriority22.compare(listenerPriority35);
        org.asteriskjava.pbx.ListenerPriority listenerPriority38 = org.asteriskjava.pbx.ListenerPriority.REALTIME;
        org.asteriskjava.pbx.ListenerPriority listenerPriority39 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int40 = listenerPriority38.compare(listenerPriority39);
        org.asteriskjava.pbx.ListenerPriority listenerPriority41 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority42 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int43 = listenerPriority41.compare(listenerPriority42);
        org.asteriskjava.pbx.ListenerPriority listenerPriority44 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int45 = listenerPriority42.compare(listenerPriority44);
        org.asteriskjava.pbx.ListenerPriority listenerPriority46 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority47 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int48 = listenerPriority46.compare(listenerPriority47);
        org.asteriskjava.pbx.ListenerPriority listenerPriority49 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority50 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int51 = listenerPriority49.compare(listenerPriority50);
        org.asteriskjava.pbx.ListenerPriority listenerPriority52 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int53 = listenerPriority50.compare(listenerPriority52);
        int int54 = listenerPriority47.compare(listenerPriority50);
        org.asteriskjava.pbx.ListenerPriority listenerPriority55 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority56 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int57 = listenerPriority55.compare(listenerPriority56);
        int int58 = listenerPriority47.compare(listenerPriority55);
        int int59 = listenerPriority44.compare(listenerPriority55);
        org.asteriskjava.pbx.ListenerPriority listenerPriority60 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority61 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority62 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int63 = listenerPriority61.compare(listenerPriority62);
        org.asteriskjava.pbx.ListenerPriority listenerPriority64 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority65 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int66 = listenerPriority64.compare(listenerPriority65);
        org.asteriskjava.pbx.ListenerPriority listenerPriority67 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int68 = listenerPriority65.compare(listenerPriority67);
        int int69 = listenerPriority62.compare(listenerPriority65);
        org.asteriskjava.pbx.ListenerPriority listenerPriority70 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority71 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int72 = listenerPriority70.compare(listenerPriority71);
        int int73 = listenerPriority62.compare(listenerPriority70);
        int int74 = listenerPriority60.compare(listenerPriority62);
        int int75 = listenerPriority44.compare(listenerPriority62);
        int int76 = listenerPriority38.compare(listenerPriority44);
        int int77 = listenerPriority35.compare(listenerPriority38);
        int int78 = listenerPriority13.compare(listenerPriority38);
        java.lang.Class<?> wildcardClass79 = listenerPriority38.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-4) + "'", int7 == (-4));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-2) + "'", int12 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority17 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority17.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-4) + "'", int21 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority22 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority22.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-6) + "'", int23 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority35 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority35.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority38 + "' != '" + org.asteriskjava.pbx.ListenerPriority.REALTIME + "'", listenerPriority38.equals(org.asteriskjava.pbx.ListenerPriority.REALTIME));
        org.junit.Assert.assertTrue("'" + listenerPriority39 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority39.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-92) + "'", int40 == (-92));
        org.junit.Assert.assertTrue("'" + listenerPriority41 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority41.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority42 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority42.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority44 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority44.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-4) + "'", int45 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority46 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority46.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority47 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority47.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority49 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority49.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority50 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority50.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority52 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority52.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-4) + "'", int53 == (-4));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority55 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority55.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority56 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority56.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-2) + "'", int58 == (-2));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority60 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority60.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority61 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority61.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority62 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority62.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority64 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority64.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority65 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority65.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority67 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority67.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-4) + "'", int68 == (-4));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority70 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority70.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority71 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority71.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-2) + "'", int73 == (-2));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-94) + "'", int76 == (-94));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 96 + "'", int77 == 96);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 92 + "'", int78 == 92);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        boolean boolean10 = asteriskVersion4.isAtLeast(asteriskVersion8);
        java.lang.String str11 = asteriskVersion8.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str14 = asteriskVersion13.toString();
        boolean boolean15 = asteriskVersion12.isAtLeast(asteriskVersion13);
        java.lang.String str16 = asteriskVersion13.toString();
        boolean boolean17 = asteriskVersion8.equals((java.lang.Object) str16);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        boolean boolean20 = asteriskVersion18.equals((java.lang.Object) "Asterisk 18");
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int23 = asteriskVersion21.compareTo(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str25 = asteriskVersion24.toString();
        boolean boolean26 = asteriskVersion22.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int29 = asteriskVersion27.compareTo(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str31 = asteriskVersion30.toString();
        boolean boolean32 = asteriskVersion28.isAtLeast(asteriskVersion30);
        boolean boolean34 = asteriskVersion28.equals((java.lang.Object) "0");
        boolean boolean35 = asteriskVersion22.equals((java.lang.Object) asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int40 = asteriskVersion38.compareTo(asteriskVersion39);
        boolean boolean41 = asteriskVersion37.isAtLeast(asteriskVersion39);
        int int42 = asteriskVersion36.compareTo(asteriskVersion37);
        int int43 = asteriskVersion22.compareTo(asteriskVersion36);
        java.lang.String str44 = asteriskVersion22.toString();
        boolean boolean45 = asteriskVersion18.isAtLeast(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int49 = asteriskVersion47.compareTo(asteriskVersion48);
        boolean boolean50 = asteriskVersion46.isAtLeast(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean53 = asteriskVersion51.isAtLeast(asteriskVersion52);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int55 = asteriskVersion52.compareTo(asteriskVersion54);
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean57 = asteriskVersion54.isAtLeast(asteriskVersion56);
        int int58 = asteriskVersion46.compareTo(asteriskVersion54);
        int int59 = asteriskVersion18.compareTo(asteriskVersion46);
        boolean boolean60 = asteriskVersion8.isAtLeast(asteriskVersion46);
        org.asteriskjava.AsteriskVersion asteriskVersion61 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int62 = asteriskVersion46.compareTo(asteriskVersion61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Asterisk 20" + "'", str11, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Asterisk 1.0" + "'", str14, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Asterisk 1.0" + "'", str16, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Asterisk 1.0" + "'", str25, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Asterisk 1.0" + "'", str31, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Asterisk 16" + "'", str44, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        boolean boolean2 = asteriskVersion0.equals((java.lang.Object) "Asterisk 18");
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_18;
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int6 = listenerPriority4.compare(listenerPriority5);
        org.asteriskjava.pbx.ListenerPriority listenerPriority7 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int8 = listenerPriority5.compare(listenerPriority7);
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int11 = listenerPriority9.compare(listenerPriority10);
        org.asteriskjava.pbx.ListenerPriority listenerPriority12 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int14 = listenerPriority12.compare(listenerPriority13);
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int16 = listenerPriority13.compare(listenerPriority15);
        int int17 = listenerPriority10.compare(listenerPriority13);
        int int18 = listenerPriority7.compare(listenerPriority13);
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority21 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int22 = listenerPriority20.compare(listenerPriority21);
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int24 = listenerPriority21.compare(listenerPriority23);
        int int25 = listenerPriority19.compare(listenerPriority21);
        int int26 = listenerPriority13.compare(listenerPriority21);
        boolean boolean27 = asteriskVersion3.equals((java.lang.Object) int26);
        boolean boolean28 = asteriskVersion0.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int31 = asteriskVersion29.compareTo(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int35 = asteriskVersion33.compareTo(asteriskVersion34);
        boolean boolean36 = asteriskVersion32.isAtLeast(asteriskVersion34);
        int int37 = asteriskVersion29.compareTo(asteriskVersion32);
        java.lang.String str38 = asteriskVersion29.toString();
        java.lang.String str39 = asteriskVersion29.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean42 = asteriskVersion40.isAtLeast(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int44 = asteriskVersion40.compareTo(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str46 = asteriskVersion45.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int49 = asteriskVersion47.compareTo(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int51 = asteriskVersion47.compareTo(asteriskVersion50);
        org.asteriskjava.pbx.TechType techType52 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean53 = asteriskVersion47.equals((java.lang.Object) techType52);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        boolean boolean55 = asteriskVersion47.equals((java.lang.Object) asteriskVersion54);
        int int56 = asteriskVersion45.compareTo(asteriskVersion47);
        boolean boolean57 = asteriskVersion40.isAtLeast(asteriskVersion45);
        boolean boolean58 = asteriskVersion29.isAtLeast(asteriskVersion45);
        java.lang.String str59 = asteriskVersion45.toString();
        boolean boolean60 = asteriskVersion0.isAtLeast(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion61 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int62 = asteriskVersion45.compareTo(asteriskVersion61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority7 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority7.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-4) + "'", int8 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority12 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority12.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-4) + "'", int16 == (-4));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority21 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority21.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-4) + "'", int24 == (-4));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Asterisk 17" + "'", str38, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Asterisk 17" + "'", str39, "Asterisk 17");
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Asterisk 1.0" + "'", str46, "Asterisk 1.0");
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + techType52 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType52.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Asterisk 1.0" + "'", str59, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        boolean boolean10 = asteriskVersion4.isAtLeast(asteriskVersion8);
        org.asteriskjava.pbx.TechType techType11 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean12 = asteriskVersion4.equals((java.lang.Object) techType11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        int int14 = asteriskVersion4.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str16 = asteriskVersion15.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str19 = asteriskVersion18.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean21 = asteriskVersion18.isAtLeast(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean24 = asteriskVersion22.isAtLeast(asteriskVersion23);
        boolean boolean25 = asteriskVersion20.equals((java.lang.Object) asteriskVersion22);
        int int26 = asteriskVersion17.compareTo(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str29 = asteriskVersion28.toString();
        org.asteriskjava.pbx.TechType techType30 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass31 = techType30.getClass();
        boolean boolean32 = asteriskVersion28.equals((java.lang.Object) wildcardClass31);
        int int33 = asteriskVersion27.compareTo(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str38 = asteriskVersion37.toString();
        boolean boolean39 = asteriskVersion35.isAtLeast(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int42 = asteriskVersion40.compareTo(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str44 = asteriskVersion43.toString();
        boolean boolean45 = asteriskVersion41.isAtLeast(asteriskVersion43);
        boolean boolean47 = asteriskVersion41.equals((java.lang.Object) "0");
        boolean boolean48 = asteriskVersion35.equals((java.lang.Object) asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int53 = asteriskVersion51.compareTo(asteriskVersion52);
        boolean boolean54 = asteriskVersion50.isAtLeast(asteriskVersion52);
        int int55 = asteriskVersion49.compareTo(asteriskVersion50);
        int int56 = asteriskVersion35.compareTo(asteriskVersion49);
        java.lang.String str57 = asteriskVersion35.toString();
        boolean boolean58 = asteriskVersion27.equals((java.lang.Object) asteriskVersion35);
        boolean boolean59 = asteriskVersion22.isAtLeast(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion62 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean63 = asteriskVersion61.isAtLeast(asteriskVersion62);
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean66 = asteriskVersion64.isAtLeast(asteriskVersion65);
        int int67 = asteriskVersion61.compareTo(asteriskVersion65);
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion69 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean70 = asteriskVersion68.isAtLeast(asteriskVersion69);
        org.asteriskjava.AsteriskVersion asteriskVersion71 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion72 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean73 = asteriskVersion71.isAtLeast(asteriskVersion72);
        int int74 = asteriskVersion68.compareTo(asteriskVersion72);
        org.asteriskjava.AsteriskVersion asteriskVersion75 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion76 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean77 = asteriskVersion75.isAtLeast(asteriskVersion76);
        boolean boolean78 = asteriskVersion72.isAtLeast(asteriskVersion76);
        boolean boolean79 = asteriskVersion61.isAtLeast(asteriskVersion76);
        int int80 = asteriskVersion60.compareTo(asteriskVersion61);
        int int81 = asteriskVersion35.compareTo(asteriskVersion61);
        boolean boolean82 = asteriskVersion15.isAtLeast(asteriskVersion35);
        int int83 = asteriskVersion4.compareTo(asteriskVersion35);
        java.lang.Class<?> wildcardClass84 = asteriskVersion4.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + techType11 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType11.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Asterisk 11" + "'", str16, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Asterisk 11" + "'", str19, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Asterisk 1.0" + "'", str29, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType30 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType30.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Asterisk 1.0" + "'", str38, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Asterisk 1.0" + "'", str44, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Asterisk 16" + "'", str57, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertNotNull(asteriskVersion62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertNotNull(asteriskVersion69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(asteriskVersion71);
        org.junit.Assert.assertNotNull(asteriskVersion72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion75);
        org.junit.Assert.assertNotNull(asteriskVersion76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.equals((java.lang.Object) asteriskVersion5);
        int int9 = asteriskVersion0.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str12 = asteriskVersion11.toString();
        org.asteriskjava.pbx.TechType techType13 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass14 = techType13.getClass();
        boolean boolean15 = asteriskVersion11.equals((java.lang.Object) wildcardClass14);
        int int16 = asteriskVersion10.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int19 = asteriskVersion17.compareTo(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str21 = asteriskVersion20.toString();
        boolean boolean22 = asteriskVersion18.isAtLeast(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str27 = asteriskVersion26.toString();
        boolean boolean28 = asteriskVersion24.isAtLeast(asteriskVersion26);
        boolean boolean30 = asteriskVersion24.equals((java.lang.Object) "0");
        boolean boolean31 = asteriskVersion18.equals((java.lang.Object) asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        boolean boolean37 = asteriskVersion33.isAtLeast(asteriskVersion35);
        int int38 = asteriskVersion32.compareTo(asteriskVersion33);
        int int39 = asteriskVersion18.compareTo(asteriskVersion32);
        java.lang.String str40 = asteriskVersion18.toString();
        boolean boolean41 = asteriskVersion10.equals((java.lang.Object) asteriskVersion18);
        boolean boolean42 = asteriskVersion5.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean46 = asteriskVersion44.isAtLeast(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean49 = asteriskVersion47.isAtLeast(asteriskVersion48);
        int int50 = asteriskVersion44.compareTo(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean53 = asteriskVersion51.isAtLeast(asteriskVersion52);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean56 = asteriskVersion54.isAtLeast(asteriskVersion55);
        int int57 = asteriskVersion51.compareTo(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean60 = asteriskVersion58.isAtLeast(asteriskVersion59);
        boolean boolean61 = asteriskVersion55.isAtLeast(asteriskVersion59);
        boolean boolean62 = asteriskVersion44.isAtLeast(asteriskVersion59);
        int int63 = asteriskVersion43.compareTo(asteriskVersion44);
        int int64 = asteriskVersion18.compareTo(asteriskVersion44);
        java.lang.String str65 = asteriskVersion44.toString();
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer66 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer66.write();
        htmlEventTracer66.write();
        htmlEventTracer66.write();
        htmlEventTracer66.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent71 = null;
        htmlEventTracer66.onManagerEvent(managerEvent71);
        boolean boolean73 = asteriskVersion44.equals((java.lang.Object) htmlEventTracer66);
        org.asteriskjava.pbx.ListenerPriority listenerPriority74 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority75 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int76 = listenerPriority74.compare(listenerPriority75);
        org.asteriskjava.pbx.ListenerPriority listenerPriority77 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority78 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int79 = listenerPriority77.compare(listenerPriority78);
        org.asteriskjava.pbx.ListenerPriority listenerPriority80 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int81 = listenerPriority78.compare(listenerPriority80);
        int int82 = listenerPriority75.compare(listenerPriority78);
        boolean boolean83 = asteriskVersion44.equals((java.lang.Object) listenerPriority78);
        org.asteriskjava.AsteriskVersion asteriskVersion84 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str85 = asteriskVersion84.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion86 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean87 = asteriskVersion84.isAtLeast(asteriskVersion86);
        org.asteriskjava.AsteriskVersion asteriskVersion88 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion89 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int90 = asteriskVersion88.compareTo(asteriskVersion89);
        boolean boolean91 = asteriskVersion84.isAtLeast(asteriskVersion88);
        java.lang.String str92 = asteriskVersion88.toString();
        boolean boolean93 = asteriskVersion44.equals((java.lang.Object) asteriskVersion88);
        java.lang.Class<?> wildcardClass94 = asteriskVersion88.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Asterisk 1.0" + "'", str12, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType13 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType13.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 1.0" + "'", str21, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Asterisk 1.0" + "'", str27, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 16" + "'", str40, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Asterisk 20" + "'", str65, "Asterisk 20");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority74 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority74.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority75 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority75.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority77 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority77.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority78 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority78.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority80 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority80.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-4) + "'", int81 == (-4));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(asteriskVersion84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Asterisk 11" + "'", str85, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(asteriskVersion88);
        org.junit.Assert.assertNotNull(asteriskVersion89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Asterisk 13" + "'", str92, "Asterisk 13");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        java.lang.Class<?> wildcardClass5 = listenerPriority1.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent1 = null;
        htmlEventTracer0.onManagerEvent(managerEvent1);
        org.asteriskjava.manager.event.ManagerEvent managerEvent3 = null;
        htmlEventTracer0.onManagerEvent(managerEvent3);
        org.asteriskjava.manager.event.ManagerEvent managerEvent5 = null;
        htmlEventTracer0.onManagerEvent(managerEvent5);
        org.asteriskjava.manager.event.ManagerEvent managerEvent7 = null;
        htmlEventTracer0.onManagerEvent(managerEvent7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent9 = null;
        htmlEventTracer0.onManagerEvent(managerEvent9);
        org.asteriskjava.manager.event.ManagerEvent managerEvent11 = null;
        htmlEventTracer0.onManagerEvent(managerEvent11);
        org.asteriskjava.manager.event.ManagerEvent managerEvent13 = null;
        htmlEventTracer0.onManagerEvent(managerEvent13);
        org.asteriskjava.manager.event.ManagerEvent managerEvent15 = null;
        htmlEventTracer0.onManagerEvent(managerEvent15);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer7.write();
        boolean boolean9 = asteriskVersion4.equals((java.lang.Object) htmlEventTracer7);
        htmlEventTracer7.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent11 = null;
        htmlEventTracer7.onManagerEvent(managerEvent11);
        org.asteriskjava.manager.event.ManagerEvent managerEvent13 = null;
        htmlEventTracer7.onManagerEvent(managerEvent13);
        org.asteriskjava.manager.event.ManagerEvent managerEvent15 = null;
        htmlEventTracer7.onManagerEvent(managerEvent15);
        org.asteriskjava.manager.event.ManagerEvent managerEvent17 = null;
        htmlEventTracer7.onManagerEvent(managerEvent17);
        org.asteriskjava.manager.event.ManagerEvent managerEvent19 = null;
        htmlEventTracer7.onManagerEvent(managerEvent19);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.equals((java.lang.Object) asteriskVersion5);
        int int9 = asteriskVersion0.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str12 = asteriskVersion11.toString();
        org.asteriskjava.pbx.TechType techType13 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass14 = techType13.getClass();
        boolean boolean15 = asteriskVersion11.equals((java.lang.Object) wildcardClass14);
        int int16 = asteriskVersion10.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int19 = asteriskVersion17.compareTo(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str21 = asteriskVersion20.toString();
        boolean boolean22 = asteriskVersion18.isAtLeast(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str27 = asteriskVersion26.toString();
        boolean boolean28 = asteriskVersion24.isAtLeast(asteriskVersion26);
        boolean boolean30 = asteriskVersion24.equals((java.lang.Object) "0");
        boolean boolean31 = asteriskVersion18.equals((java.lang.Object) asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        boolean boolean37 = asteriskVersion33.isAtLeast(asteriskVersion35);
        int int38 = asteriskVersion32.compareTo(asteriskVersion33);
        int int39 = asteriskVersion18.compareTo(asteriskVersion32);
        java.lang.String str40 = asteriskVersion18.toString();
        boolean boolean41 = asteriskVersion10.equals((java.lang.Object) asteriskVersion18);
        boolean boolean42 = asteriskVersion5.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int44 = asteriskVersion18.compareTo(asteriskVersion43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Asterisk 1.0" + "'", str12, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType13 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType13.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 1.0" + "'", str21, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Asterisk 1.0" + "'", str27, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 16" + "'", str40, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.REALTIME;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int2 = listenerPriority0.compare(listenerPriority1);
        java.lang.Class<?> wildcardClass3 = listenerPriority0.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.REALTIME + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.REALTIME));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-92) + "'", int2 == (-92));
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean6 = asteriskVersion0.isAtLeast(asteriskVersion5);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer7.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer7.onManagerEvent(managerEvent10);
        boolean boolean12 = asteriskVersion0.equals((java.lang.Object) htmlEventTracer7);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        boolean boolean6 = asteriskVersion0.equals((java.lang.Object) asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int11 = asteriskVersion8.compareTo(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int14 = asteriskVersion12.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str16 = asteriskVersion15.toString();
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int20 = asteriskVersion18.compareTo(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str22 = asteriskVersion21.toString();
        boolean boolean23 = asteriskVersion19.isAtLeast(asteriskVersion21);
        boolean boolean25 = asteriskVersion19.equals((java.lang.Object) "0");
        boolean boolean26 = asteriskVersion13.equals((java.lang.Object) asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int31 = asteriskVersion29.compareTo(asteriskVersion30);
        boolean boolean32 = asteriskVersion28.isAtLeast(asteriskVersion30);
        int int33 = asteriskVersion27.compareTo(asteriskVersion28);
        int int34 = asteriskVersion13.compareTo(asteriskVersion27);
        int int35 = asteriskVersion8.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int38 = asteriskVersion36.compareTo(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str40 = asteriskVersion39.toString();
        boolean boolean41 = asteriskVersion37.isAtLeast(asteriskVersion39);
        boolean boolean43 = asteriskVersion37.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean46 = asteriskVersion44.isAtLeast(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int48 = asteriskVersion45.compareTo(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean50 = asteriskVersion47.isAtLeast(asteriskVersion49);
        boolean boolean51 = asteriskVersion37.isAtLeast(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int54 = asteriskVersion52.compareTo(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int58 = asteriskVersion56.compareTo(asteriskVersion57);
        boolean boolean59 = asteriskVersion55.isAtLeast(asteriskVersion57);
        int int60 = asteriskVersion52.compareTo(asteriskVersion55);
        java.lang.String str61 = asteriskVersion52.toString();
        java.lang.String str62 = asteriskVersion52.toString();
        int int63 = asteriskVersion37.compareTo(asteriskVersion52);
        boolean boolean64 = asteriskVersion8.isAtLeast(asteriskVersion37);
        boolean boolean65 = asteriskVersion0.equals((java.lang.Object) asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        java.lang.String str67 = asteriskVersion66.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        int int69 = asteriskVersion66.compareTo(asteriskVersion68);
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion71 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean72 = asteriskVersion70.isAtLeast(asteriskVersion71);
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion74 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean75 = asteriskVersion73.isAtLeast(asteriskVersion74);
        int int76 = asteriskVersion70.compareTo(asteriskVersion74);
        org.asteriskjava.AsteriskVersion asteriskVersion77 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion78 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean79 = asteriskVersion77.isAtLeast(asteriskVersion78);
        boolean boolean80 = asteriskVersion74.isAtLeast(asteriskVersion78);
        org.asteriskjava.pbx.ListenerPriority listenerPriority81 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean82 = asteriskVersion74.equals((java.lang.Object) listenerPriority81);
        boolean boolean83 = asteriskVersion68.equals((java.lang.Object) asteriskVersion74);
        org.asteriskjava.AsteriskVersion asteriskVersion84 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion85 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int86 = asteriskVersion84.compareTo(asteriskVersion85);
        org.asteriskjava.AsteriskVersion asteriskVersion87 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str88 = asteriskVersion87.toString();
        boolean boolean89 = asteriskVersion85.isAtLeast(asteriskVersion87);
        boolean boolean91 = asteriskVersion85.equals((java.lang.Object) "0");
        boolean boolean92 = asteriskVersion68.isAtLeast(asteriskVersion85);
        boolean boolean93 = asteriskVersion37.isAtLeast(asteriskVersion85);
        java.lang.Class<?> wildcardClass94 = asteriskVersion85.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Asterisk 1.0" + "'", str16, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Asterisk 1.0" + "'", str22, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 1.0" + "'", str40, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Asterisk 17" + "'", str61, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Asterisk 17" + "'", str62, "Asterisk 17");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Asterisk 10" + "'", str67, "Asterisk 10");
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertNotNull(asteriskVersion71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertNotNull(asteriskVersion74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion77);
        org.junit.Assert.assertNotNull(asteriskVersion78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority81 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority81.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(asteriskVersion84);
        org.junit.Assert.assertNotNull(asteriskVersion85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Asterisk 1.0" + "'", str88, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean3 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int5 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int7 = asteriskVersion4.compareTo(asteriskVersion6);
        java.lang.Class<?> wildcardClass8 = asteriskVersion6.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 11" + "'", str1, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        int int3 = asteriskVersion0.compareTo(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean6 = asteriskVersion4.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        int int10 = asteriskVersion4.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean13 = asteriskVersion11.isAtLeast(asteriskVersion12);
        boolean boolean14 = asteriskVersion8.isAtLeast(asteriskVersion12);
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean16 = asteriskVersion8.equals((java.lang.Object) listenerPriority15);
        boolean boolean17 = asteriskVersion2.equals((java.lang.Object) asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int23 = asteriskVersion21.compareTo(asteriskVersion22);
        boolean boolean24 = asteriskVersion20.isAtLeast(asteriskVersion22);
        boolean boolean25 = asteriskVersion19.equals((java.lang.Object) asteriskVersion20);
        java.lang.Class<?> wildcardClass26 = asteriskVersion20.getClass();
        boolean boolean27 = asteriskVersion18.equals((java.lang.Object) asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean30 = asteriskVersion28.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str33 = asteriskVersion32.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean35 = asteriskVersion32.isAtLeast(asteriskVersion34);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str37 = asteriskVersion36.toString();
        int int38 = asteriskVersion32.compareTo(asteriskVersion36);
        boolean boolean39 = asteriskVersion31.isAtLeast(asteriskVersion36);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int43 = asteriskVersion41.compareTo(asteriskVersion42);
        boolean boolean44 = asteriskVersion40.isAtLeast(asteriskVersion42);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean47 = asteriskVersion45.isAtLeast(asteriskVersion46);
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int49 = asteriskVersion46.compareTo(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean51 = asteriskVersion48.isAtLeast(asteriskVersion50);
        int int52 = asteriskVersion40.compareTo(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int56 = asteriskVersion54.compareTo(asteriskVersion55);
        boolean boolean57 = asteriskVersion53.isAtLeast(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean60 = asteriskVersion58.isAtLeast(asteriskVersion59);
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int62 = asteriskVersion59.compareTo(asteriskVersion61);
        org.asteriskjava.AsteriskVersion asteriskVersion63 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean64 = asteriskVersion61.isAtLeast(asteriskVersion63);
        int int65 = asteriskVersion53.compareTo(asteriskVersion61);
        boolean boolean66 = asteriskVersion40.isAtLeast(asteriskVersion61);
        boolean boolean68 = asteriskVersion40.equals((java.lang.Object) 0);
        int int69 = asteriskVersion36.compareTo(asteriskVersion40);
        boolean boolean70 = asteriskVersion28.equals((java.lang.Object) asteriskVersion40);
        boolean boolean71 = asteriskVersion20.equals((java.lang.Object) asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion72 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int74 = asteriskVersion72.compareTo(asteriskVersion73);
        org.asteriskjava.AsteriskVersion asteriskVersion75 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int76 = asteriskVersion72.compareTo(asteriskVersion75);
        org.asteriskjava.pbx.TechType techType77 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean78 = asteriskVersion72.equals((java.lang.Object) techType77);
        boolean boolean79 = asteriskVersion28.equals((java.lang.Object) asteriskVersion72);
        boolean boolean80 = asteriskVersion8.equals((java.lang.Object) asteriskVersion72);
        java.lang.Class<?> wildcardClass81 = asteriskVersion72.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 10" + "'", str1, "Asterisk 10");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Asterisk 11" + "'", str33, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Asterisk 14" + "'", str37, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(asteriskVersion72);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + techType77 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType77.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int6 = listenerPriority1.compare(listenerPriority5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        int int13 = asteriskVersion7.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        boolean boolean17 = asteriskVersion11.isAtLeast(asteriskVersion15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean19 = asteriskVersion11.equals((java.lang.Object) listenerPriority18);
        int int20 = listenerPriority5.compare(listenerPriority18);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int24 = asteriskVersion22.compareTo(asteriskVersion23);
        boolean boolean25 = asteriskVersion21.isAtLeast(asteriskVersion23);
        org.asteriskjava.pbx.ListenerPriority listenerPriority26 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int28 = listenerPriority26.compare(listenerPriority27);
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int30 = listenerPriority27.compare(listenerPriority29);
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int32 = listenerPriority27.compare(listenerPriority31);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean35 = asteriskVersion33.isAtLeast(asteriskVersion34);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean38 = asteriskVersion36.isAtLeast(asteriskVersion37);
        int int39 = asteriskVersion33.compareTo(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean42 = asteriskVersion40.isAtLeast(asteriskVersion41);
        boolean boolean43 = asteriskVersion37.isAtLeast(asteriskVersion41);
        org.asteriskjava.pbx.ListenerPriority listenerPriority44 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean45 = asteriskVersion37.equals((java.lang.Object) listenerPriority44);
        int int46 = listenerPriority31.compare(listenerPriority44);
        boolean boolean47 = asteriskVersion23.equals((java.lang.Object) listenerPriority31);
        int int48 = listenerPriority18.compare(listenerPriority31);
        org.asteriskjava.pbx.ListenerPriority listenerPriority49 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int50 = listenerPriority18.compare(listenerPriority49);
        org.asteriskjava.pbx.ListenerPriority listenerPriority51 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority52 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int53 = listenerPriority51.compare(listenerPriority52);
        org.asteriskjava.pbx.ListenerPriority listenerPriority54 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority55 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int56 = listenerPriority54.compare(listenerPriority55);
        org.asteriskjava.pbx.ListenerPriority listenerPriority57 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int58 = listenerPriority55.compare(listenerPriority57);
        int int59 = listenerPriority52.compare(listenerPriority55);
        org.asteriskjava.pbx.ListenerPriority listenerPriority60 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority61 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int62 = listenerPriority60.compare(listenerPriority61);
        int int63 = listenerPriority52.compare(listenerPriority60);
        int int64 = listenerPriority18.compare(listenerPriority60);
        java.lang.Class<?> wildcardClass65 = listenerPriority18.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-6) + "'", int6 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority26 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority26.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-4) + "'", int30 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-6) + "'", int32 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority44 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority44.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority49 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority49.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority51 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority51.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority52 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority52.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority54 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority54.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority55 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority55.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority57 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority57.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-4) + "'", int58 == (-4));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority60 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority60.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority61 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority61.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-2) + "'", int63 == (-2));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent5 = null;
        htmlEventTracer0.onManagerEvent(managerEvent5);
        org.asteriskjava.manager.event.ManagerEvent managerEvent7 = null;
        htmlEventTracer0.onManagerEvent(managerEvent7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent9 = null;
        htmlEventTracer0.onManagerEvent(managerEvent9);
        org.asteriskjava.manager.event.ManagerEvent managerEvent11 = null;
        htmlEventTracer0.onManagerEvent(managerEvent11);
        org.asteriskjava.manager.event.ManagerEvent managerEvent13 = null;
        htmlEventTracer0.onManagerEvent(managerEvent13);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int4 = asteriskVersion0.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str6 = asteriskVersion5.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int9 = asteriskVersion7.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int11 = asteriskVersion7.compareTo(asteriskVersion10);
        org.asteriskjava.pbx.TechType techType12 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean13 = asteriskVersion7.equals((java.lang.Object) techType12);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        boolean boolean15 = asteriskVersion7.equals((java.lang.Object) asteriskVersion14);
        int int16 = asteriskVersion5.compareTo(asteriskVersion7);
        boolean boolean17 = asteriskVersion0.isAtLeast(asteriskVersion5);
        java.lang.Class<?> wildcardClass18 = asteriskVersion5.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Asterisk 1.0" + "'", str6, "Asterisk 1.0");
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + techType12 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType12.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer7.write();
        boolean boolean9 = asteriskVersion4.equals((java.lang.Object) htmlEventTracer7);
        htmlEventTracer7.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent11 = null;
        htmlEventTracer7.onManagerEvent(managerEvent11);
        org.asteriskjava.manager.event.ManagerEvent managerEvent13 = null;
        htmlEventTracer7.onManagerEvent(managerEvent13);
        org.asteriskjava.manager.event.ManagerEvent managerEvent15 = null;
        htmlEventTracer7.onManagerEvent(managerEvent15);
        org.asteriskjava.manager.event.ManagerEvent managerEvent17 = null;
        htmlEventTracer7.onManagerEvent(managerEvent17);
        org.asteriskjava.manager.event.ManagerEvent managerEvent19 = null;
        htmlEventTracer7.onManagerEvent(managerEvent19);
        org.asteriskjava.manager.event.ManagerEvent managerEvent21 = null;
        htmlEventTracer7.onManagerEvent(managerEvent21);
        org.asteriskjava.manager.event.ManagerEvent managerEvent23 = null;
        htmlEventTracer7.onManagerEvent(managerEvent23);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        boolean boolean10 = asteriskVersion4.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean12 = asteriskVersion8.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        java.lang.String str14 = asteriskVersion13.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        int int16 = asteriskVersion13.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean19 = asteriskVersion17.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean22 = asteriskVersion20.isAtLeast(asteriskVersion21);
        int int23 = asteriskVersion17.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean26 = asteriskVersion24.isAtLeast(asteriskVersion25);
        boolean boolean27 = asteriskVersion21.isAtLeast(asteriskVersion25);
        org.asteriskjava.pbx.ListenerPriority listenerPriority28 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean29 = asteriskVersion21.equals((java.lang.Object) listenerPriority28);
        boolean boolean30 = asteriskVersion15.equals((java.lang.Object) asteriskVersion21);
        boolean boolean31 = asteriskVersion11.isAtLeast(asteriskVersion15);
        java.lang.String str32 = asteriskVersion11.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean35 = asteriskVersion33.isAtLeast(asteriskVersion34);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean38 = asteriskVersion36.isAtLeast(asteriskVersion37);
        int int39 = asteriskVersion33.compareTo(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean42 = asteriskVersion40.isAtLeast(asteriskVersion41);
        boolean boolean43 = asteriskVersion37.isAtLeast(asteriskVersion41);
        org.asteriskjava.pbx.TechType techType44 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean45 = asteriskVersion37.equals((java.lang.Object) techType44);
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str47 = asteriskVersion46.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean49 = asteriskVersion46.isAtLeast(asteriskVersion48);
        java.lang.String str50 = asteriskVersion46.toString();
        boolean boolean51 = asteriskVersion37.isAtLeast(asteriskVersion46);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum53 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str54 = activityStatusEnum53.getDefaultMessage();
        boolean boolean55 = asteriskVersion52.equals((java.lang.Object) str54);
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean58 = asteriskVersion56.isAtLeast(asteriskVersion57);
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean61 = asteriskVersion59.isAtLeast(asteriskVersion60);
        int int62 = asteriskVersion56.compareTo(asteriskVersion60);
        org.asteriskjava.AsteriskVersion asteriskVersion63 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean65 = asteriskVersion63.isAtLeast(asteriskVersion64);
        boolean boolean66 = asteriskVersion60.isAtLeast(asteriskVersion64);
        org.asteriskjava.pbx.ListenerPriority listenerPriority67 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean68 = asteriskVersion60.equals((java.lang.Object) listenerPriority67);
        org.asteriskjava.AsteriskVersion asteriskVersion69 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int70 = asteriskVersion60.compareTo(asteriskVersion69);
        boolean boolean71 = asteriskVersion52.equals((java.lang.Object) asteriskVersion60);
        boolean boolean72 = asteriskVersion46.equals((java.lang.Object) asteriskVersion52);
        boolean boolean73 = asteriskVersion11.isAtLeast(asteriskVersion46);
        java.lang.String str74 = asteriskVersion46.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion75 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int76 = asteriskVersion46.compareTo(asteriskVersion75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Asterisk 10" + "'", str14, "Asterisk 10");
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority28 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority28.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Asterisk 1.4" + "'", str32, "Asterisk 1.4");
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + techType44 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType44.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Asterisk 11" + "'", str47, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Asterisk 11" + "'", str50, "Asterisk 11");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + activityStatusEnum53 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum53.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Progress" + "'", str54, "Progress");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion63);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority67 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority67.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(asteriskVersion69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Asterisk 11" + "'", str74, "Asterisk 11");
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.pbx.TechType techType3 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass4 = techType3.getClass();
        boolean boolean5 = asteriskVersion1.equals((java.lang.Object) wildcardClass4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int10 = asteriskVersion8.compareTo(asteriskVersion9);
        boolean boolean11 = asteriskVersion7.isAtLeast(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int16 = asteriskVersion13.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean18 = asteriskVersion15.isAtLeast(asteriskVersion17);
        int int19 = asteriskVersion7.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int23 = asteriskVersion21.compareTo(asteriskVersion22);
        boolean boolean24 = asteriskVersion20.isAtLeast(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean27 = asteriskVersion25.isAtLeast(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int29 = asteriskVersion26.compareTo(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean31 = asteriskVersion28.isAtLeast(asteriskVersion30);
        int int32 = asteriskVersion20.compareTo(asteriskVersion28);
        boolean boolean33 = asteriskVersion7.isAtLeast(asteriskVersion28);
        boolean boolean35 = asteriskVersion7.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean37 = asteriskVersion7.isAtLeast(asteriskVersion36);
        java.lang.String str38 = asteriskVersion36.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int41 = asteriskVersion39.compareTo(asteriskVersion40);
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int43 = asteriskVersion39.compareTo(asteriskVersion42);
        java.lang.String str44 = asteriskVersion42.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int47 = asteriskVersion45.compareTo(asteriskVersion46);
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int49 = asteriskVersion45.compareTo(asteriskVersion48);
        org.asteriskjava.pbx.TechType techType50 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean51 = asteriskVersion45.equals((java.lang.Object) techType50);
        boolean boolean52 = asteriskVersion42.isAtLeast(asteriskVersion45);
        int int53 = asteriskVersion36.compareTo(asteriskVersion45);
        boolean boolean54 = asteriskVersion1.isAtLeast(asteriskVersion36);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int57 = asteriskVersion55.compareTo(asteriskVersion56);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int59 = asteriskVersion55.compareTo(asteriskVersion58);
        boolean boolean60 = asteriskVersion1.isAtLeast(asteriskVersion58);
        java.lang.Class<?> wildcardClass61 = asteriskVersion1.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 1.0" + "'", str2, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType3 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType3.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Asterisk 20" + "'", str38, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Asterisk 1.8" + "'", str44, "Asterisk 1.8");
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + techType50 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType50.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int7 = listenerPriority5.compare(listenerPriority6);
        org.asteriskjava.pbx.ListenerPriority listenerPriority8 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int10 = listenerPriority8.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int12 = listenerPriority9.compare(listenerPriority11);
        int int13 = listenerPriority6.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int16 = listenerPriority14.compare(listenerPriority15);
        int int17 = listenerPriority6.compare(listenerPriority14);
        int int18 = listenerPriority3.compare(listenerPriority14);
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority21 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int22 = listenerPriority20.compare(listenerPriority21);
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority24 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int25 = listenerPriority23.compare(listenerPriority24);
        org.asteriskjava.pbx.ListenerPriority listenerPriority26 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int27 = listenerPriority24.compare(listenerPriority26);
        int int28 = listenerPriority21.compare(listenerPriority24);
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority30 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int31 = listenerPriority29.compare(listenerPriority30);
        int int32 = listenerPriority21.compare(listenerPriority29);
        int int33 = listenerPriority19.compare(listenerPriority21);
        int int34 = listenerPriority3.compare(listenerPriority21);
        org.asteriskjava.pbx.ListenerPriority listenerPriority35 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int39 = asteriskVersion37.compareTo(asteriskVersion38);
        boolean boolean40 = asteriskVersion36.isAtLeast(asteriskVersion38);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean43 = asteriskVersion41.isAtLeast(asteriskVersion42);
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int45 = asteriskVersion42.compareTo(asteriskVersion44);
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean47 = asteriskVersion44.isAtLeast(asteriskVersion46);
        int int48 = asteriskVersion36.compareTo(asteriskVersion44);
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int52 = asteriskVersion50.compareTo(asteriskVersion51);
        boolean boolean53 = asteriskVersion49.isAtLeast(asteriskVersion51);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean56 = asteriskVersion54.isAtLeast(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int58 = asteriskVersion55.compareTo(asteriskVersion57);
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean60 = asteriskVersion57.isAtLeast(asteriskVersion59);
        int int61 = asteriskVersion49.compareTo(asteriskVersion57);
        boolean boolean62 = asteriskVersion36.isAtLeast(asteriskVersion57);
        boolean boolean64 = asteriskVersion36.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean66 = asteriskVersion36.isAtLeast(asteriskVersion65);
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean69 = asteriskVersion67.isAtLeast(asteriskVersion68);
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion71 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean72 = asteriskVersion70.isAtLeast(asteriskVersion71);
        int int73 = asteriskVersion67.compareTo(asteriskVersion71);
        org.asteriskjava.AsteriskVersion asteriskVersion74 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion75 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean76 = asteriskVersion74.isAtLeast(asteriskVersion75);
        boolean boolean77 = asteriskVersion71.isAtLeast(asteriskVersion75);
        org.asteriskjava.pbx.ListenerPriority listenerPriority78 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean79 = asteriskVersion71.equals((java.lang.Object) listenerPriority78);
        boolean boolean80 = asteriskVersion36.equals((java.lang.Object) listenerPriority78);
        int int81 = listenerPriority35.compare(listenerPriority78);
        int int82 = listenerPriority3.compare(listenerPriority78);
        org.asteriskjava.pbx.ListenerPriority listenerPriority83 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int84 = listenerPriority3.compare(listenerPriority83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority8 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority8.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-2) + "'", int17 == (-2));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority21 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority21.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority24 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority24.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority26 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority26.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-4) + "'", int27 == (-4));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority30 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority30.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-2) + "'", int32 == (-2));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority35 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority35.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertNotNull(asteriskVersion71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion74);
        org.junit.Assert.assertNotNull(asteriskVersion75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority78 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority78.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-6) + "'", int81 == (-6));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-2) + "'", int82 == (-2));
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent4 = null;
        htmlEventTracer0.onManagerEvent(managerEvent4);
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer0.onManagerEvent(managerEvent10);
        org.asteriskjava.manager.event.ManagerEvent managerEvent12 = null;
        htmlEventTracer0.onManagerEvent(managerEvent12);
        org.asteriskjava.manager.event.ManagerEvent managerEvent14 = null;
        htmlEventTracer0.onManagerEvent(managerEvent14);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean3 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int5 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_15;
        boolean boolean7 = asteriskVersion0.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int10 = asteriskVersion8.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int12 = asteriskVersion8.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean15 = asteriskVersion13.isAtLeast(asteriskVersion14);
        boolean boolean16 = asteriskVersion11.isAtLeast(asteriskVersion14);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        boolean boolean18 = asteriskVersion11.equals((java.lang.Object) asteriskVersion17);
        int int19 = asteriskVersion0.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int23 = asteriskVersion21.compareTo(asteriskVersion22);
        boolean boolean24 = asteriskVersion20.isAtLeast(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean26 = asteriskVersion20.isAtLeast(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int30 = asteriskVersion28.compareTo(asteriskVersion29);
        boolean boolean31 = asteriskVersion27.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean34 = asteriskVersion32.isAtLeast(asteriskVersion33);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int36 = asteriskVersion33.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean38 = asteriskVersion35.isAtLeast(asteriskVersion37);
        int int39 = asteriskVersion27.compareTo(asteriskVersion35);
        int int40 = asteriskVersion20.compareTo(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum42 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str43 = activityStatusEnum42.getDefaultMessage();
        boolean boolean44 = asteriskVersion41.equals((java.lang.Object) str43);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean47 = asteriskVersion45.isAtLeast(asteriskVersion46);
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean50 = asteriskVersion48.isAtLeast(asteriskVersion49);
        int int51 = asteriskVersion45.compareTo(asteriskVersion49);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean54 = asteriskVersion52.isAtLeast(asteriskVersion53);
        boolean boolean55 = asteriskVersion49.isAtLeast(asteriskVersion53);
        org.asteriskjava.pbx.ListenerPriority listenerPriority56 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean57 = asteriskVersion49.equals((java.lang.Object) listenerPriority56);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int59 = asteriskVersion49.compareTo(asteriskVersion58);
        boolean boolean60 = asteriskVersion41.equals((java.lang.Object) asteriskVersion49);
        int int61 = asteriskVersion27.compareTo(asteriskVersion49);
        boolean boolean62 = asteriskVersion11.equals((java.lang.Object) asteriskVersion49);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer63 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer63.write();
        htmlEventTracer63.write();
        htmlEventTracer63.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent67 = null;
        htmlEventTracer63.onManagerEvent(managerEvent67);
        org.asteriskjava.manager.event.ManagerEvent managerEvent69 = null;
        htmlEventTracer63.onManagerEvent(managerEvent69);
        org.asteriskjava.manager.event.ManagerEvent managerEvent71 = null;
        htmlEventTracer63.onManagerEvent(managerEvent71);
        org.asteriskjava.manager.event.ManagerEvent managerEvent73 = null;
        htmlEventTracer63.onManagerEvent(managerEvent73);
        boolean boolean75 = asteriskVersion49.equals((java.lang.Object) htmlEventTracer63);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer63.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 11" + "'", str1, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + activityStatusEnum42 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum42.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Progress" + "'", str43, "Progress");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority56 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority56.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum0 = org.asteriskjava.pbx.ActivityStatusEnum.FAILURE;
        java.lang.String str1 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str2 = activityStatusEnum0.getDefaultMessage();
        java.lang.Class<?> wildcardClass3 = activityStatusEnum0.getClass();
        org.junit.Assert.assertTrue("'" + activityStatusEnum0 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.FAILURE + "'", activityStatusEnum0.equals(org.asteriskjava.pbx.ActivityStatusEnum.FAILURE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Failure" + "'", str1, "Failure");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Failure" + "'", str2, "Failure");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean20 = asteriskVersion18.isAtLeast(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int22 = asteriskVersion19.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean24 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int25 = asteriskVersion13.compareTo(asteriskVersion21);
        boolean boolean26 = asteriskVersion0.isAtLeast(asteriskVersion21);
        java.lang.String str27 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean30 = asteriskVersion28.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean33 = asteriskVersion31.isAtLeast(asteriskVersion32);
        int int34 = asteriskVersion28.compareTo(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean37 = asteriskVersion35.isAtLeast(asteriskVersion36);
        boolean boolean38 = asteriskVersion32.isAtLeast(asteriskVersion36);
        org.asteriskjava.pbx.ListenerPriority listenerPriority39 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean40 = asteriskVersion32.equals((java.lang.Object) listenerPriority39);
        java.lang.String str41 = asteriskVersion32.toString();
        boolean boolean42 = asteriskVersion0.isAtLeast(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int46 = asteriskVersion44.compareTo(asteriskVersion45);
        boolean boolean47 = asteriskVersion43.isAtLeast(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int50 = asteriskVersion48.compareTo(asteriskVersion49);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int52 = asteriskVersion48.compareTo(asteriskVersion51);
        org.asteriskjava.pbx.TechType techType53 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean54 = asteriskVersion48.equals((java.lang.Object) techType53);
        boolean boolean55 = asteriskVersion45.isAtLeast(asteriskVersion48);
        java.lang.Class<?> wildcardClass56 = asteriskVersion45.getClass();
        boolean boolean57 = asteriskVersion32.equals((java.lang.Object) asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Asterisk 12" + "'", str27, "Asterisk 12");
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority39 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority39.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Asterisk 20" + "'", str41, "Asterisk 20");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + techType53 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType53.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        boolean boolean10 = asteriskVersion4.isAtLeast(asteriskVersion8);
        org.asteriskjava.pbx.TechType techType11 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean12 = asteriskVersion4.equals((java.lang.Object) techType11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int15 = asteriskVersion13.compareTo(asteriskVersion14);
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str17 = asteriskVersion16.toString();
        boolean boolean18 = asteriskVersion14.isAtLeast(asteriskVersion16);
        boolean boolean20 = asteriskVersion14.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean23 = asteriskVersion21.isAtLeast(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int25 = asteriskVersion22.compareTo(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean27 = asteriskVersion24.isAtLeast(asteriskVersion26);
        boolean boolean28 = asteriskVersion14.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean31 = asteriskVersion29.isAtLeast(asteriskVersion30);
        boolean boolean32 = asteriskVersion14.isAtLeast(asteriskVersion30);
        boolean boolean33 = asteriskVersion4.equals((java.lang.Object) asteriskVersion14);
        java.lang.Class<?> wildcardClass34 = asteriskVersion14.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + techType11 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType11.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Asterisk 1.0" + "'", str17, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int6 = asteriskVersion4.compareTo(asteriskVersion5);
        boolean boolean7 = asteriskVersion3.isAtLeast(asteriskVersion5);
        int int8 = asteriskVersion0.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int11 = asteriskVersion9.compareTo(asteriskVersion10);
        java.lang.String str12 = asteriskVersion9.toString();
        int int13 = asteriskVersion3.compareTo(asteriskVersion9);
        java.lang.Class<?> wildcardClass14 = asteriskVersion9.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Asterisk 17" + "'", str12, "Asterisk 17");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        boolean boolean6 = asteriskVersion0.equals((java.lang.Object) asteriskVersion1);
        java.lang.String str7 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int10 = asteriskVersion8.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int12 = asteriskVersion8.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean15 = asteriskVersion13.isAtLeast(asteriskVersion14);
        boolean boolean16 = asteriskVersion11.isAtLeast(asteriskVersion14);
        java.lang.String str17 = asteriskVersion11.toString();
        boolean boolean18 = asteriskVersion1.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int21 = asteriskVersion19.compareTo(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str23 = asteriskVersion22.toString();
        boolean boolean24 = asteriskVersion20.isAtLeast(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int27 = asteriskVersion25.compareTo(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str29 = asteriskVersion28.toString();
        boolean boolean30 = asteriskVersion26.isAtLeast(asteriskVersion28);
        boolean boolean32 = asteriskVersion26.equals((java.lang.Object) "0");
        boolean boolean33 = asteriskVersion20.equals((java.lang.Object) asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int38 = asteriskVersion36.compareTo(asteriskVersion37);
        boolean boolean39 = asteriskVersion35.isAtLeast(asteriskVersion37);
        int int40 = asteriskVersion34.compareTo(asteriskVersion35);
        int int41 = asteriskVersion20.compareTo(asteriskVersion34);
        java.lang.String str42 = asteriskVersion20.toString();
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum43 = org.asteriskjava.pbx.ActivityStatusEnum.FAILURE;
        java.lang.String str44 = activityStatusEnum43.getDefaultMessage();
        boolean boolean45 = asteriskVersion20.equals((java.lang.Object) activityStatusEnum43);
        boolean boolean46 = asteriskVersion1.equals((java.lang.Object) boolean45);
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Asterisk 12" + "'", str7, "Asterisk 12");
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Asterisk 1.8" + "'", str17, "Asterisk 1.8");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Asterisk 1.0" + "'", str23, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Asterisk 1.0" + "'", str29, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Asterisk 16" + "'", str42, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + activityStatusEnum43 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.FAILURE + "'", activityStatusEnum43.equals(org.asteriskjava.pbx.ActivityStatusEnum.FAILURE));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Failure" + "'", str44, "Failure");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.pbx.DTMFTone dTMFTone13 = org.asteriskjava.pbx.DTMFTone.ZERO;
        java.lang.String str14 = dTMFTone13.toString();
        boolean boolean15 = asteriskVersion0.equals((java.lang.Object) dTMFTone13);
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean18 = asteriskVersion16.isAtLeast(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean21 = asteriskVersion19.isAtLeast(asteriskVersion20);
        int int22 = asteriskVersion16.compareTo(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean25 = asteriskVersion23.isAtLeast(asteriskVersion24);
        boolean boolean26 = asteriskVersion20.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int30 = asteriskVersion28.compareTo(asteriskVersion29);
        boolean boolean31 = asteriskVersion27.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean34 = asteriskVersion32.isAtLeast(asteriskVersion33);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int36 = asteriskVersion33.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean38 = asteriskVersion35.isAtLeast(asteriskVersion37);
        int int39 = asteriskVersion27.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int42 = asteriskVersion40.compareTo(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int44 = asteriskVersion40.compareTo(asteriskVersion43);
        boolean boolean45 = asteriskVersion35.isAtLeast(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int48 = asteriskVersion46.compareTo(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str50 = asteriskVersion49.toString();
        boolean boolean51 = asteriskVersion47.isAtLeast(asteriskVersion49);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int54 = asteriskVersion52.compareTo(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str56 = asteriskVersion55.toString();
        boolean boolean57 = asteriskVersion53.isAtLeast(asteriskVersion55);
        boolean boolean59 = asteriskVersion53.equals((java.lang.Object) "0");
        boolean boolean60 = asteriskVersion47.equals((java.lang.Object) asteriskVersion53);
        boolean boolean61 = asteriskVersion43.isAtLeast(asteriskVersion47);
        int int62 = asteriskVersion20.compareTo(asteriskVersion47);
        java.lang.Object obj63 = null;
        boolean boolean64 = asteriskVersion20.equals(obj63);
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum66 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str67 = activityStatusEnum66.getDefaultMessage();
        boolean boolean68 = asteriskVersion65.equals((java.lang.Object) str67);
        org.asteriskjava.AsteriskVersion asteriskVersion69 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean71 = asteriskVersion69.isAtLeast(asteriskVersion70);
        org.asteriskjava.AsteriskVersion asteriskVersion72 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean74 = asteriskVersion72.isAtLeast(asteriskVersion73);
        int int75 = asteriskVersion69.compareTo(asteriskVersion73);
        org.asteriskjava.AsteriskVersion asteriskVersion76 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion77 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean78 = asteriskVersion76.isAtLeast(asteriskVersion77);
        boolean boolean79 = asteriskVersion73.isAtLeast(asteriskVersion77);
        org.asteriskjava.pbx.ListenerPriority listenerPriority80 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean81 = asteriskVersion73.equals((java.lang.Object) listenerPriority80);
        org.asteriskjava.AsteriskVersion asteriskVersion82 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int83 = asteriskVersion73.compareTo(asteriskVersion82);
        boolean boolean84 = asteriskVersion65.equals((java.lang.Object) asteriskVersion73);
        int int85 = asteriskVersion20.compareTo(asteriskVersion73);
        int int86 = asteriskVersion0.compareTo(asteriskVersion73);
        java.lang.Class<?> wildcardClass87 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + dTMFTone13 + "' != '" + org.asteriskjava.pbx.DTMFTone.ZERO + "'", dTMFTone13.equals(org.asteriskjava.pbx.DTMFTone.ZERO));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Asterisk 1.0" + "'", str50, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Asterisk 1.0" + "'", str56, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertTrue("'" + activityStatusEnum66 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum66.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Progress" + "'", str67, "Progress");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(asteriskVersion69);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(asteriskVersion72);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion76);
        org.junit.Assert.assertNotNull(asteriskVersion77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority80 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority80.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(asteriskVersion82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        boolean boolean10 = asteriskVersion4.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int14 = asteriskVersion12.compareTo(asteriskVersion13);
        boolean boolean15 = asteriskVersion11.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean18 = asteriskVersion16.isAtLeast(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int20 = asteriskVersion17.compareTo(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean22 = asteriskVersion19.isAtLeast(asteriskVersion21);
        int int23 = asteriskVersion11.compareTo(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int26 = asteriskVersion24.compareTo(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int28 = asteriskVersion24.compareTo(asteriskVersion27);
        boolean boolean29 = asteriskVersion19.isAtLeast(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int32 = asteriskVersion30.compareTo(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str34 = asteriskVersion33.toString();
        boolean boolean35 = asteriskVersion31.isAtLeast(asteriskVersion33);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int38 = asteriskVersion36.compareTo(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str40 = asteriskVersion39.toString();
        boolean boolean41 = asteriskVersion37.isAtLeast(asteriskVersion39);
        boolean boolean43 = asteriskVersion37.equals((java.lang.Object) "0");
        boolean boolean44 = asteriskVersion31.equals((java.lang.Object) asteriskVersion37);
        boolean boolean45 = asteriskVersion27.isAtLeast(asteriskVersion31);
        int int46 = asteriskVersion4.compareTo(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum49 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str50 = activityStatusEnum49.getDefaultMessage();
        boolean boolean51 = asteriskVersion48.equals((java.lang.Object) str50);
        int int52 = asteriskVersion47.compareTo(asteriskVersion48);
        boolean boolean53 = asteriskVersion4.isAtLeast(asteriskVersion47);
        java.lang.String str54 = asteriskVersion47.toString();
        java.lang.Class<?> wildcardClass55 = asteriskVersion47.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Asterisk 1.0" + "'", str34, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 1.0" + "'", str40, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + activityStatusEnum49 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum49.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Progress" + "'", str50, "Progress");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Asterisk 10" + "'", str54, "Asterisk 10");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.REALTIME;
        java.lang.Class<?> wildcardClass1 = listenerPriority0.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.REALTIME + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.REALTIME));
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean8 = asteriskVersion6.isAtLeast(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int10 = asteriskVersion7.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean12 = asteriskVersion9.isAtLeast(asteriskVersion11);
        int int13 = asteriskVersion1.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int18 = asteriskVersion14.compareTo(asteriskVersion17);
        boolean boolean19 = asteriskVersion9.isAtLeast(asteriskVersion17);
        org.asteriskjava.pbx.PBXFactory pBXFactory20 = new org.asteriskjava.pbx.PBXFactory();
        java.lang.Class<?> wildcardClass21 = pBXFactory20.getClass();
        boolean boolean22 = asteriskVersion9.equals((java.lang.Object) wildcardClass21);
        int int23 = asteriskVersion0.compareTo(asteriskVersion9);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer24 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer24.write();
        htmlEventTracer24.write();
        htmlEventTracer24.write();
        htmlEventTracer24.write();
        htmlEventTracer24.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent30 = null;
        htmlEventTracer24.onManagerEvent(managerEvent30);
        org.asteriskjava.manager.event.ManagerEvent managerEvent32 = null;
        htmlEventTracer24.onManagerEvent(managerEvent32);
        org.asteriskjava.manager.event.ManagerEvent managerEvent34 = null;
        htmlEventTracer24.onManagerEvent(managerEvent34);
        org.asteriskjava.manager.event.ManagerEvent managerEvent36 = null;
        htmlEventTracer24.onManagerEvent(managerEvent36);
        org.asteriskjava.manager.event.ManagerEvent managerEvent38 = null;
        htmlEventTracer24.onManagerEvent(managerEvent38);
        boolean boolean40 = asteriskVersion9.equals((java.lang.Object) htmlEventTracer24);
        org.asteriskjava.manager.event.ManagerEvent managerEvent41 = null;
        htmlEventTracer24.onManagerEvent(managerEvent41);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer24.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean8 = asteriskVersion6.isAtLeast(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int10 = asteriskVersion7.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean12 = asteriskVersion9.isAtLeast(asteriskVersion11);
        int int13 = asteriskVersion1.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int18 = asteriskVersion14.compareTo(asteriskVersion17);
        boolean boolean19 = asteriskVersion9.isAtLeast(asteriskVersion17);
        org.asteriskjava.pbx.PBXFactory pBXFactory20 = new org.asteriskjava.pbx.PBXFactory();
        java.lang.Class<?> wildcardClass21 = pBXFactory20.getClass();
        boolean boolean22 = asteriskVersion9.equals((java.lang.Object) wildcardClass21);
        int int23 = asteriskVersion0.compareTo(asteriskVersion9);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer24 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer24.write();
        htmlEventTracer24.write();
        htmlEventTracer24.write();
        htmlEventTracer24.write();
        htmlEventTracer24.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent30 = null;
        htmlEventTracer24.onManagerEvent(managerEvent30);
        org.asteriskjava.manager.event.ManagerEvent managerEvent32 = null;
        htmlEventTracer24.onManagerEvent(managerEvent32);
        org.asteriskjava.manager.event.ManagerEvent managerEvent34 = null;
        htmlEventTracer24.onManagerEvent(managerEvent34);
        org.asteriskjava.manager.event.ManagerEvent managerEvent36 = null;
        htmlEventTracer24.onManagerEvent(managerEvent36);
        org.asteriskjava.manager.event.ManagerEvent managerEvent38 = null;
        htmlEventTracer24.onManagerEvent(managerEvent38);
        boolean boolean40 = asteriskVersion9.equals((java.lang.Object) htmlEventTracer24);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer24.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        int int3 = asteriskVersion0.compareTo(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        java.lang.String str5 = asteriskVersion4.toString();
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority7 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int8 = listenerPriority6.compare(listenerPriority7);
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int10 = listenerPriority7.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int12 = listenerPriority7.compare(listenerPriority11);
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int14 = listenerPriority7.compare(listenerPriority13);
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority16 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority17 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int18 = listenerPriority16.compare(listenerPriority17);
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int21 = listenerPriority19.compare(listenerPriority20);
        org.asteriskjava.pbx.ListenerPriority listenerPriority22 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int23 = listenerPriority20.compare(listenerPriority22);
        int int24 = listenerPriority17.compare(listenerPriority20);
        org.asteriskjava.pbx.ListenerPriority listenerPriority25 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority26 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int27 = listenerPriority25.compare(listenerPriority26);
        int int28 = listenerPriority17.compare(listenerPriority25);
        int int29 = listenerPriority15.compare(listenerPriority17);
        int int30 = listenerPriority13.compare(listenerPriority17);
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int33 = listenerPriority31.compare(listenerPriority32);
        org.asteriskjava.pbx.ListenerPriority listenerPriority34 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int35 = listenerPriority32.compare(listenerPriority34);
        int int36 = listenerPriority13.compare(listenerPriority32);
        boolean boolean37 = asteriskVersion4.equals((java.lang.Object) listenerPriority32);
        int int38 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = asteriskVersion0.isAtLeast(asteriskVersion39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 10" + "'", str1, "Asterisk 10");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Asterisk 12" + "'", str5, "Asterisk 12");
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority7 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority7.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-4) + "'", int10 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-6) + "'", int12 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-4) + "'", int14 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority16 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority16.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority17 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority17.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority22 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority22.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-4) + "'", int23 == (-4));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority25 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority25.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority26 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority26.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-2) + "'", int28 == (-2));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority34 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority34.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-4) + "'", int35 == (-4));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent2 = null;
        htmlEventTracer0.onManagerEvent(managerEvent2);
        org.asteriskjava.manager.event.ManagerEvent managerEvent4 = null;
        htmlEventTracer0.onManagerEvent(managerEvent4);
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer0.onManagerEvent(managerEvent10);
        org.asteriskjava.manager.event.ManagerEvent managerEvent12 = null;
        htmlEventTracer0.onManagerEvent(managerEvent12);
        org.asteriskjava.manager.event.ManagerEvent managerEvent14 = null;
        htmlEventTracer0.onManagerEvent(managerEvent14);
        org.asteriskjava.manager.event.ManagerEvent managerEvent16 = null;
        htmlEventTracer0.onManagerEvent(managerEvent16);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent4 = null;
        htmlEventTracer0.onManagerEvent(managerEvent4);
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int4 = asteriskVersion0.compareTo(asteriskVersion3);
        java.lang.String str5 = asteriskVersion3.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int10 = asteriskVersion6.compareTo(asteriskVersion9);
        org.asteriskjava.pbx.TechType techType11 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean12 = asteriskVersion6.equals((java.lang.Object) techType11);
        boolean boolean13 = asteriskVersion3.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str15 = asteriskVersion14.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean17 = asteriskVersion14.isAtLeast(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int21 = asteriskVersion19.compareTo(asteriskVersion20);
        boolean boolean22 = asteriskVersion18.isAtLeast(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean25 = asteriskVersion23.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int27 = asteriskVersion24.compareTo(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean29 = asteriskVersion26.isAtLeast(asteriskVersion28);
        int int30 = asteriskVersion18.compareTo(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int33 = asteriskVersion31.compareTo(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int35 = asteriskVersion31.compareTo(asteriskVersion34);
        boolean boolean36 = asteriskVersion26.isAtLeast(asteriskVersion34);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int39 = asteriskVersion37.compareTo(asteriskVersion38);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str41 = asteriskVersion40.toString();
        boolean boolean42 = asteriskVersion38.isAtLeast(asteriskVersion40);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int45 = asteriskVersion43.compareTo(asteriskVersion44);
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str47 = asteriskVersion46.toString();
        boolean boolean48 = asteriskVersion44.isAtLeast(asteriskVersion46);
        boolean boolean50 = asteriskVersion44.equals((java.lang.Object) "0");
        boolean boolean51 = asteriskVersion38.equals((java.lang.Object) asteriskVersion44);
        boolean boolean52 = asteriskVersion34.isAtLeast(asteriskVersion38);
        int int53 = asteriskVersion16.compareTo(asteriskVersion34);
        boolean boolean54 = asteriskVersion6.isAtLeast(asteriskVersion16);
        java.lang.String str55 = asteriskVersion6.toString();
        java.lang.Class<?> wildcardClass56 = asteriskVersion6.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Asterisk 1.8" + "'", str5, "Asterisk 1.8");
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + techType11 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType11.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Asterisk 11" + "'", str15, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Asterisk 1.0" + "'", str41, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Asterisk 1.0" + "'", str47, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Asterisk 13" + "'", str55, "Asterisk 13");
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.asteriskjava.pbx.DTMFTone dTMFTone0 = org.asteriskjava.pbx.DTMFTone.FOUR;
        java.lang.String str1 = dTMFTone0.toString();
        java.lang.String str2 = dTMFTone0.toString();
        java.lang.String str3 = dTMFTone0.toString();
        java.lang.String str4 = dTMFTone0.toString();
        java.lang.String str5 = dTMFTone0.toString();
        java.lang.Class<?> wildcardClass6 = dTMFTone0.getClass();
        org.junit.Assert.assertTrue("'" + dTMFTone0 + "' != '" + org.asteriskjava.pbx.DTMFTone.FOUR + "'", dTMFTone0.equals(org.asteriskjava.pbx.DTMFTone.FOUR));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "4" + "'", str1, "4");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "4" + "'", str2, "4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "4" + "'", str3, "4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "4" + "'", str4, "4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "4" + "'", str5, "4");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int6 = asteriskVersion2.compareTo(asteriskVersion5);
        org.asteriskjava.pbx.TechType techType7 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean8 = asteriskVersion2.equals((java.lang.Object) techType7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        boolean boolean10 = asteriskVersion2.equals((java.lang.Object) asteriskVersion9);
        int int11 = asteriskVersion0.compareTo(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int14 = asteriskVersion12.compareTo(asteriskVersion13);
        boolean boolean15 = asteriskVersion2.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int18 = asteriskVersion16.compareTo(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int20 = asteriskVersion16.compareTo(asteriskVersion19);
        java.lang.String str21 = asteriskVersion19.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int24 = asteriskVersion22.compareTo(asteriskVersion23);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int26 = asteriskVersion22.compareTo(asteriskVersion25);
        org.asteriskjava.pbx.TechType techType27 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean28 = asteriskVersion22.equals((java.lang.Object) techType27);
        boolean boolean29 = asteriskVersion19.isAtLeast(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int33 = asteriskVersion31.compareTo(asteriskVersion32);
        boolean boolean34 = asteriskVersion30.isAtLeast(asteriskVersion32);
        int int35 = asteriskVersion22.compareTo(asteriskVersion30);
        java.lang.Object obj36 = null;
        boolean boolean37 = asteriskVersion22.equals(obj36);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int41 = asteriskVersion39.compareTo(asteriskVersion40);
        boolean boolean42 = asteriskVersion38.isAtLeast(asteriskVersion40);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int45 = asteriskVersion43.compareTo(asteriskVersion44);
        boolean boolean46 = asteriskVersion38.isAtLeast(asteriskVersion43);
        int int47 = asteriskVersion22.compareTo(asteriskVersion38);
        boolean boolean48 = asteriskVersion13.isAtLeast(asteriskVersion38);
        java.lang.String str49 = asteriskVersion13.toString();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 1.0" + "'", str1, "Asterisk 1.0");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + techType7 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType7.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 1.8" + "'", str21, "Asterisk 1.8");
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + techType27 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType27.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Asterisk 16" + "'", str49, "Asterisk 16");
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean8 = asteriskVersion6.isAtLeast(asteriskVersion7);
        int int9 = asteriskVersion3.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        boolean boolean13 = asteriskVersion7.isAtLeast(asteriskVersion11);
        boolean boolean14 = asteriskVersion0.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean17 = asteriskVersion15.isAtLeast(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int19 = asteriskVersion16.compareTo(asteriskVersion18);
        boolean boolean20 = asteriskVersion11.equals((java.lang.Object) asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int23 = asteriskVersion21.compareTo(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str25 = asteriskVersion24.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean27 = asteriskVersion24.isAtLeast(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int31 = asteriskVersion29.compareTo(asteriskVersion30);
        boolean boolean32 = asteriskVersion28.isAtLeast(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean35 = asteriskVersion33.isAtLeast(asteriskVersion34);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int37 = asteriskVersion34.compareTo(asteriskVersion36);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean39 = asteriskVersion36.isAtLeast(asteriskVersion38);
        int int40 = asteriskVersion28.compareTo(asteriskVersion36);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int43 = asteriskVersion41.compareTo(asteriskVersion42);
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int45 = asteriskVersion41.compareTo(asteriskVersion44);
        boolean boolean46 = asteriskVersion36.isAtLeast(asteriskVersion44);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int49 = asteriskVersion47.compareTo(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str51 = asteriskVersion50.toString();
        boolean boolean52 = asteriskVersion48.isAtLeast(asteriskVersion50);
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int55 = asteriskVersion53.compareTo(asteriskVersion54);
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str57 = asteriskVersion56.toString();
        boolean boolean58 = asteriskVersion54.isAtLeast(asteriskVersion56);
        boolean boolean60 = asteriskVersion54.equals((java.lang.Object) "0");
        boolean boolean61 = asteriskVersion48.equals((java.lang.Object) asteriskVersion54);
        boolean boolean62 = asteriskVersion44.isAtLeast(asteriskVersion48);
        int int63 = asteriskVersion26.compareTo(asteriskVersion44);
        boolean boolean64 = asteriskVersion21.isAtLeast(asteriskVersion44);
        int int65 = asteriskVersion16.compareTo(asteriskVersion44);
        java.lang.String str66 = asteriskVersion44.toString();
        java.lang.Class<?> wildcardClass67 = asteriskVersion44.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Asterisk 11" + "'", str25, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Asterisk 1.0" + "'", str51, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Asterisk 1.0" + "'", str57, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Asterisk 1.6" + "'", str66, "Asterisk 1.6");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean20 = asteriskVersion18.isAtLeast(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int22 = asteriskVersion19.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean24 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int25 = asteriskVersion13.compareTo(asteriskVersion21);
        boolean boolean26 = asteriskVersion0.isAtLeast(asteriskVersion21);
        boolean boolean28 = asteriskVersion0.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean30 = asteriskVersion0.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean33 = asteriskVersion31.isAtLeast(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean36 = asteriskVersion34.isAtLeast(asteriskVersion35);
        int int37 = asteriskVersion31.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean40 = asteriskVersion38.isAtLeast(asteriskVersion39);
        boolean boolean41 = asteriskVersion35.isAtLeast(asteriskVersion39);
        org.asteriskjava.pbx.ListenerPriority listenerPriority42 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean43 = asteriskVersion35.equals((java.lang.Object) listenerPriority42);
        boolean boolean44 = asteriskVersion0.equals((java.lang.Object) listenerPriority42);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int48 = asteriskVersion46.compareTo(asteriskVersion47);
        boolean boolean49 = asteriskVersion45.isAtLeast(asteriskVersion47);
        org.asteriskjava.pbx.ListenerPriority listenerPriority50 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority51 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int52 = listenerPriority50.compare(listenerPriority51);
        org.asteriskjava.pbx.ListenerPriority listenerPriority53 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int54 = listenerPriority51.compare(listenerPriority53);
        org.asteriskjava.pbx.ListenerPriority listenerPriority55 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int56 = listenerPriority51.compare(listenerPriority55);
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean59 = asteriskVersion57.isAtLeast(asteriskVersion58);
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean62 = asteriskVersion60.isAtLeast(asteriskVersion61);
        int int63 = asteriskVersion57.compareTo(asteriskVersion61);
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean66 = asteriskVersion64.isAtLeast(asteriskVersion65);
        boolean boolean67 = asteriskVersion61.isAtLeast(asteriskVersion65);
        org.asteriskjava.pbx.ListenerPriority listenerPriority68 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean69 = asteriskVersion61.equals((java.lang.Object) listenerPriority68);
        int int70 = listenerPriority55.compare(listenerPriority68);
        boolean boolean71 = asteriskVersion47.equals((java.lang.Object) listenerPriority55);
        org.asteriskjava.pbx.ListenerPriority listenerPriority72 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority73 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int74 = listenerPriority72.compare(listenerPriority73);
        int int75 = listenerPriority55.compare(listenerPriority73);
        int int76 = listenerPriority42.compare(listenerPriority55);
        java.lang.Class<?> wildcardClass77 = listenerPriority55.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority42 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority42.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority50 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority50.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority51 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority51.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority53 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority53.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-4) + "'", int54 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority55 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority55.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-6) + "'", int56 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority68 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority68.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority72 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority72.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority73 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority73.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        boolean boolean9 = asteriskVersion5.isAtLeast(asteriskVersion7);
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int12 = listenerPriority10.compare(listenerPriority11);
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int14 = listenerPriority11.compare(listenerPriority13);
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int16 = listenerPriority11.compare(listenerPriority15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean19 = asteriskVersion17.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean22 = asteriskVersion20.isAtLeast(asteriskVersion21);
        int int23 = asteriskVersion17.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean26 = asteriskVersion24.isAtLeast(asteriskVersion25);
        boolean boolean27 = asteriskVersion21.isAtLeast(asteriskVersion25);
        org.asteriskjava.pbx.ListenerPriority listenerPriority28 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean29 = asteriskVersion21.equals((java.lang.Object) listenerPriority28);
        int int30 = listenerPriority15.compare(listenerPriority28);
        boolean boolean31 = asteriskVersion7.equals((java.lang.Object) listenerPriority15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority33 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int34 = listenerPriority32.compare(listenerPriority33);
        int int35 = listenerPriority15.compare(listenerPriority33);
        int int36 = listenerPriority3.compare(listenerPriority15);
        java.lang.Class<?> wildcardClass37 = listenerPriority3.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-4) + "'", int14 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-6) + "'", int16 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority28 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority28.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority33 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority33.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-2) + "'", int36 == (-2));
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int7 = listenerPriority5.compare(listenerPriority6);
        org.asteriskjava.pbx.ListenerPriority listenerPriority8 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int9 = listenerPriority6.compare(listenerPriority8);
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int11 = listenerPriority6.compare(listenerPriority10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean17 = asteriskVersion15.isAtLeast(asteriskVersion16);
        int int18 = asteriskVersion12.compareTo(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean21 = asteriskVersion19.isAtLeast(asteriskVersion20);
        boolean boolean22 = asteriskVersion16.isAtLeast(asteriskVersion20);
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean24 = asteriskVersion16.equals((java.lang.Object) listenerPriority23);
        int int25 = listenerPriority10.compare(listenerPriority23);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int29 = asteriskVersion27.compareTo(asteriskVersion28);
        boolean boolean30 = asteriskVersion26.isAtLeast(asteriskVersion28);
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int33 = listenerPriority31.compare(listenerPriority32);
        org.asteriskjava.pbx.ListenerPriority listenerPriority34 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int35 = listenerPriority32.compare(listenerPriority34);
        org.asteriskjava.pbx.ListenerPriority listenerPriority36 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int37 = listenerPriority32.compare(listenerPriority36);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean40 = asteriskVersion38.isAtLeast(asteriskVersion39);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean43 = asteriskVersion41.isAtLeast(asteriskVersion42);
        int int44 = asteriskVersion38.compareTo(asteriskVersion42);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean47 = asteriskVersion45.isAtLeast(asteriskVersion46);
        boolean boolean48 = asteriskVersion42.isAtLeast(asteriskVersion46);
        org.asteriskjava.pbx.ListenerPriority listenerPriority49 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean50 = asteriskVersion42.equals((java.lang.Object) listenerPriority49);
        int int51 = listenerPriority36.compare(listenerPriority49);
        boolean boolean52 = asteriskVersion28.equals((java.lang.Object) listenerPriority36);
        int int53 = listenerPriority23.compare(listenerPriority36);
        org.asteriskjava.pbx.ListenerPriority listenerPriority54 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int55 = listenerPriority23.compare(listenerPriority54);
        int int56 = listenerPriority1.compare(listenerPriority54);
        java.lang.Class<?> wildcardClass57 = listenerPriority54.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority8 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority8.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-4) + "'", int9 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-6) + "'", int11 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority34 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority34.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-4) + "'", int35 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority36 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority36.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-6) + "'", int37 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority49 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority49.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority54 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority54.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-2) + "'", int56 == (-2));
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean6 = asteriskVersion0.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int10 = asteriskVersion8.compareTo(asteriskVersion9);
        boolean boolean11 = asteriskVersion7.isAtLeast(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int16 = asteriskVersion13.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean18 = asteriskVersion15.isAtLeast(asteriskVersion17);
        int int19 = asteriskVersion7.compareTo(asteriskVersion15);
        int int20 = asteriskVersion0.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int23 = asteriskVersion21.compareTo(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str25 = asteriskVersion24.toString();
        boolean boolean26 = asteriskVersion22.isAtLeast(asteriskVersion24);
        boolean boolean28 = asteriskVersion22.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean31 = asteriskVersion29.isAtLeast(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int33 = asteriskVersion30.compareTo(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean35 = asteriskVersion32.isAtLeast(asteriskVersion34);
        boolean boolean36 = asteriskVersion22.isAtLeast(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int39 = asteriskVersion37.compareTo(asteriskVersion38);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int43 = asteriskVersion41.compareTo(asteriskVersion42);
        boolean boolean44 = asteriskVersion40.isAtLeast(asteriskVersion42);
        int int45 = asteriskVersion37.compareTo(asteriskVersion40);
        java.lang.String str46 = asteriskVersion37.toString();
        java.lang.String str47 = asteriskVersion37.toString();
        int int48 = asteriskVersion22.compareTo(asteriskVersion37);
        int int49 = asteriskVersion7.compareTo(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int54 = asteriskVersion52.compareTo(asteriskVersion53);
        boolean boolean55 = asteriskVersion51.isAtLeast(asteriskVersion53);
        boolean boolean56 = asteriskVersion50.equals((java.lang.Object) asteriskVersion51);
        java.lang.String str57 = asteriskVersion51.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int60 = asteriskVersion58.compareTo(asteriskVersion59);
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int62 = asteriskVersion58.compareTo(asteriskVersion61);
        org.asteriskjava.AsteriskVersion asteriskVersion63 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean65 = asteriskVersion63.isAtLeast(asteriskVersion64);
        boolean boolean66 = asteriskVersion61.isAtLeast(asteriskVersion64);
        java.lang.String str67 = asteriskVersion61.toString();
        boolean boolean68 = asteriskVersion51.isAtLeast(asteriskVersion61);
        int int69 = asteriskVersion22.compareTo(asteriskVersion51);
        java.lang.String str70 = asteriskVersion22.toString();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Asterisk 1.0" + "'", str25, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Asterisk 17" + "'", str46, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Asterisk 17" + "'", str47, "Asterisk 17");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Asterisk 12" + "'", str57, "Asterisk 12");
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion63);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Asterisk 1.8" + "'", str67, "Asterisk 1.8");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Asterisk 16" + "'", str70, "Asterisk 16");
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        boolean boolean10 = asteriskVersion4.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean12 = asteriskVersion8.isAtLeast(asteriskVersion11);
        java.lang.String str13 = asteriskVersion11.toString();
        boolean boolean15 = asteriskVersion11.equals((java.lang.Object) 0L);
        java.lang.Class<?> wildcardClass16 = asteriskVersion11.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Asterisk 1.4" + "'", str13, "Asterisk 1.4");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int4 = asteriskVersion1.compareTo(asteriskVersion3);
        java.lang.String str5 = asteriskVersion3.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str8 = asteriskVersion7.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean10 = asteriskVersion7.isAtLeast(asteriskVersion9);
        boolean boolean11 = asteriskVersion6.equals((java.lang.Object) boolean10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int16 = asteriskVersion12.compareTo(asteriskVersion15);
        int int17 = asteriskVersion6.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int21 = asteriskVersion19.compareTo(asteriskVersion20);
        boolean boolean22 = asteriskVersion18.isAtLeast(asteriskVersion20);
        boolean boolean23 = asteriskVersion6.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int26 = asteriskVersion24.compareTo(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int28 = asteriskVersion24.compareTo(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean31 = asteriskVersion29.isAtLeast(asteriskVersion30);
        boolean boolean32 = asteriskVersion27.isAtLeast(asteriskVersion30);
        int int33 = asteriskVersion18.compareTo(asteriskVersion27);
        boolean boolean34 = asteriskVersion3.isAtLeast(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        java.lang.String str36 = asteriskVersion35.toString();
        boolean boolean37 = asteriskVersion27.isAtLeast(asteriskVersion35);
        java.lang.Class<?> wildcardClass38 = asteriskVersion35.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Asterisk 20" + "'", str5, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Asterisk 11" + "'", str8, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Asterisk 12" + "'", str36, "Asterisk 12");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        boolean boolean5 = asteriskVersion0.equals((java.lang.Object) boolean4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean8 = asteriskVersion6.isAtLeast(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int10 = asteriskVersion6.compareTo(asteriskVersion9);
        int int11 = asteriskVersion0.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int14 = asteriskVersion12.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str16 = asteriskVersion15.toString();
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        boolean boolean19 = asteriskVersion13.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int22 = asteriskVersion20.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str24 = asteriskVersion23.toString();
        boolean boolean25 = asteriskVersion21.isAtLeast(asteriskVersion23);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int28 = asteriskVersion26.compareTo(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str30 = asteriskVersion29.toString();
        boolean boolean31 = asteriskVersion27.isAtLeast(asteriskVersion29);
        boolean boolean33 = asteriskVersion27.equals((java.lang.Object) "0");
        boolean boolean34 = asteriskVersion21.equals((java.lang.Object) asteriskVersion27);
        boolean boolean35 = asteriskVersion13.isAtLeast(asteriskVersion27);
        boolean boolean36 = asteriskVersion0.isAtLeast(asteriskVersion27);
        org.asteriskjava.pbx.ListenerPriority listenerPriority37 = org.asteriskjava.pbx.ListenerPriority.REALTIME;
        org.asteriskjava.pbx.ListenerPriority listenerPriority38 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int39 = listenerPriority37.compare(listenerPriority38);
        org.asteriskjava.pbx.ListenerPriority listenerPriority40 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority41 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int42 = listenerPriority40.compare(listenerPriority41);
        org.asteriskjava.pbx.ListenerPriority listenerPriority43 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int44 = listenerPriority41.compare(listenerPriority43);
        org.asteriskjava.pbx.ListenerPriority listenerPriority45 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority46 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int47 = listenerPriority45.compare(listenerPriority46);
        org.asteriskjava.pbx.ListenerPriority listenerPriority48 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority49 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int50 = listenerPriority48.compare(listenerPriority49);
        org.asteriskjava.pbx.ListenerPriority listenerPriority51 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int52 = listenerPriority49.compare(listenerPriority51);
        int int53 = listenerPriority46.compare(listenerPriority49);
        org.asteriskjava.pbx.ListenerPriority listenerPriority54 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority55 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int56 = listenerPriority54.compare(listenerPriority55);
        int int57 = listenerPriority46.compare(listenerPriority54);
        int int58 = listenerPriority43.compare(listenerPriority54);
        org.asteriskjava.pbx.ListenerPriority listenerPriority59 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority60 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority61 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int62 = listenerPriority60.compare(listenerPriority61);
        org.asteriskjava.pbx.ListenerPriority listenerPriority63 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority64 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int65 = listenerPriority63.compare(listenerPriority64);
        org.asteriskjava.pbx.ListenerPriority listenerPriority66 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int67 = listenerPriority64.compare(listenerPriority66);
        int int68 = listenerPriority61.compare(listenerPriority64);
        org.asteriskjava.pbx.ListenerPriority listenerPriority69 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority70 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int71 = listenerPriority69.compare(listenerPriority70);
        int int72 = listenerPriority61.compare(listenerPriority69);
        int int73 = listenerPriority59.compare(listenerPriority61);
        int int74 = listenerPriority43.compare(listenerPriority61);
        int int75 = listenerPriority37.compare(listenerPriority43);
        boolean boolean76 = asteriskVersion0.equals((java.lang.Object) listenerPriority37);
        java.lang.Class<?> wildcardClass77 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Asterisk 1.0" + "'", str16, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Asterisk 1.0" + "'", str24, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Asterisk 1.0" + "'", str30, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority37 + "' != '" + org.asteriskjava.pbx.ListenerPriority.REALTIME + "'", listenerPriority37.equals(org.asteriskjava.pbx.ListenerPriority.REALTIME));
        org.junit.Assert.assertTrue("'" + listenerPriority38 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority38.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-92) + "'", int39 == (-92));
        org.junit.Assert.assertTrue("'" + listenerPriority40 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority40.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority41 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority41.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority43 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority43.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-4) + "'", int44 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority45 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority45.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority46 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority46.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority48 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority48.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority49 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority49.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority51 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority51.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-4) + "'", int52 == (-4));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority54 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority54.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority55 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority55.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-2) + "'", int57 == (-2));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority59 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority59.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority60 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority60.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority61 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority61.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority63 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority63.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority64 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority64.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority66 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority66.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-4) + "'", int67 == (-4));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority69 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority69.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority70 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority70.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-2) + "'", int72 == (-2));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-94) + "'", int75 == (-94));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        boolean boolean6 = asteriskVersion0.equals((java.lang.Object) asteriskVersion1);
        java.lang.String str7 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str10 = asteriskVersion9.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean12 = asteriskVersion9.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean15 = asteriskVersion13.isAtLeast(asteriskVersion14);
        boolean boolean16 = asteriskVersion11.equals((java.lang.Object) asteriskVersion13);
        int int17 = asteriskVersion8.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str20 = asteriskVersion19.toString();
        org.asteriskjava.pbx.TechType techType21 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass22 = techType21.getClass();
        boolean boolean23 = asteriskVersion19.equals((java.lang.Object) wildcardClass22);
        int int24 = asteriskVersion18.compareTo(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int27 = asteriskVersion25.compareTo(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str29 = asteriskVersion28.toString();
        boolean boolean30 = asteriskVersion26.isAtLeast(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int33 = asteriskVersion31.compareTo(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str35 = asteriskVersion34.toString();
        boolean boolean36 = asteriskVersion32.isAtLeast(asteriskVersion34);
        boolean boolean38 = asteriskVersion32.equals((java.lang.Object) "0");
        boolean boolean39 = asteriskVersion26.equals((java.lang.Object) asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int44 = asteriskVersion42.compareTo(asteriskVersion43);
        boolean boolean45 = asteriskVersion41.isAtLeast(asteriskVersion43);
        int int46 = asteriskVersion40.compareTo(asteriskVersion41);
        int int47 = asteriskVersion26.compareTo(asteriskVersion40);
        java.lang.String str48 = asteriskVersion26.toString();
        boolean boolean49 = asteriskVersion18.equals((java.lang.Object) asteriskVersion26);
        boolean boolean50 = asteriskVersion13.isAtLeast(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean54 = asteriskVersion52.isAtLeast(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean57 = asteriskVersion55.isAtLeast(asteriskVersion56);
        int int58 = asteriskVersion52.compareTo(asteriskVersion56);
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean61 = asteriskVersion59.isAtLeast(asteriskVersion60);
        org.asteriskjava.AsteriskVersion asteriskVersion62 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion63 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean64 = asteriskVersion62.isAtLeast(asteriskVersion63);
        int int65 = asteriskVersion59.compareTo(asteriskVersion63);
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean68 = asteriskVersion66.isAtLeast(asteriskVersion67);
        boolean boolean69 = asteriskVersion63.isAtLeast(asteriskVersion67);
        boolean boolean70 = asteriskVersion52.isAtLeast(asteriskVersion67);
        int int71 = asteriskVersion51.compareTo(asteriskVersion52);
        int int72 = asteriskVersion26.compareTo(asteriskVersion52);
        java.lang.String str73 = asteriskVersion52.toString();
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer74 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer74.write();
        htmlEventTracer74.write();
        htmlEventTracer74.write();
        htmlEventTracer74.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent79 = null;
        htmlEventTracer74.onManagerEvent(managerEvent79);
        boolean boolean81 = asteriskVersion52.equals((java.lang.Object) htmlEventTracer74);
        org.asteriskjava.manager.event.ManagerEvent managerEvent82 = null;
        htmlEventTracer74.onManagerEvent(managerEvent82);
        org.asteriskjava.manager.event.ManagerEvent managerEvent84 = null;
        htmlEventTracer74.onManagerEvent(managerEvent84);
        org.asteriskjava.manager.event.ManagerEvent managerEvent86 = null;
        htmlEventTracer74.onManagerEvent(managerEvent86);
        boolean boolean88 = asteriskVersion1.equals((java.lang.Object) htmlEventTracer74);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer74.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Asterisk 12" + "'", str7, "Asterisk 12");
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Asterisk 11" + "'", str10, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Asterisk 1.0" + "'", str20, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType21 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType21.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Asterisk 1.0" + "'", str29, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Asterisk 1.0" + "'", str35, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Asterisk 16" + "'", str48, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(asteriskVersion62);
        org.junit.Assert.assertNotNull(asteriskVersion63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Asterisk 20" + "'", str73, "Asterisk 20");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.equals((java.lang.Object) asteriskVersion5);
        int int9 = asteriskVersion0.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str12 = asteriskVersion11.toString();
        org.asteriskjava.pbx.TechType techType13 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass14 = techType13.getClass();
        boolean boolean15 = asteriskVersion11.equals((java.lang.Object) wildcardClass14);
        int int16 = asteriskVersion10.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int19 = asteriskVersion17.compareTo(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str21 = asteriskVersion20.toString();
        boolean boolean22 = asteriskVersion18.isAtLeast(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str27 = asteriskVersion26.toString();
        boolean boolean28 = asteriskVersion24.isAtLeast(asteriskVersion26);
        boolean boolean30 = asteriskVersion24.equals((java.lang.Object) "0");
        boolean boolean31 = asteriskVersion18.equals((java.lang.Object) asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        boolean boolean37 = asteriskVersion33.isAtLeast(asteriskVersion35);
        int int38 = asteriskVersion32.compareTo(asteriskVersion33);
        int int39 = asteriskVersion18.compareTo(asteriskVersion32);
        java.lang.String str40 = asteriskVersion18.toString();
        boolean boolean41 = asteriskVersion10.equals((java.lang.Object) asteriskVersion18);
        boolean boolean42 = asteriskVersion5.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean46 = asteriskVersion44.isAtLeast(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean49 = asteriskVersion47.isAtLeast(asteriskVersion48);
        int int50 = asteriskVersion44.compareTo(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean53 = asteriskVersion51.isAtLeast(asteriskVersion52);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean56 = asteriskVersion54.isAtLeast(asteriskVersion55);
        int int57 = asteriskVersion51.compareTo(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean60 = asteriskVersion58.isAtLeast(asteriskVersion59);
        boolean boolean61 = asteriskVersion55.isAtLeast(asteriskVersion59);
        boolean boolean62 = asteriskVersion44.isAtLeast(asteriskVersion59);
        int int63 = asteriskVersion43.compareTo(asteriskVersion44);
        int int64 = asteriskVersion18.compareTo(asteriskVersion44);
        java.lang.String str65 = asteriskVersion44.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str68 = asteriskVersion67.toString();
        org.asteriskjava.pbx.TechType techType69 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass70 = techType69.getClass();
        boolean boolean71 = asteriskVersion67.equals((java.lang.Object) wildcardClass70);
        int int72 = asteriskVersion66.compareTo(asteriskVersion67);
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion74 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int75 = asteriskVersion73.compareTo(asteriskVersion74);
        org.asteriskjava.AsteriskVersion asteriskVersion76 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str77 = asteriskVersion76.toString();
        boolean boolean78 = asteriskVersion74.isAtLeast(asteriskVersion76);
        org.asteriskjava.AsteriskVersion asteriskVersion79 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion80 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int81 = asteriskVersion79.compareTo(asteriskVersion80);
        org.asteriskjava.AsteriskVersion asteriskVersion82 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str83 = asteriskVersion82.toString();
        boolean boolean84 = asteriskVersion80.isAtLeast(asteriskVersion82);
        boolean boolean86 = asteriskVersion80.equals((java.lang.Object) "0");
        boolean boolean87 = asteriskVersion74.equals((java.lang.Object) asteriskVersion80);
        org.asteriskjava.AsteriskVersion asteriskVersion88 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion89 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion90 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion91 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int92 = asteriskVersion90.compareTo(asteriskVersion91);
        boolean boolean93 = asteriskVersion89.isAtLeast(asteriskVersion91);
        int int94 = asteriskVersion88.compareTo(asteriskVersion89);
        int int95 = asteriskVersion74.compareTo(asteriskVersion88);
        java.lang.String str96 = asteriskVersion74.toString();
        boolean boolean97 = asteriskVersion66.equals((java.lang.Object) asteriskVersion74);
        boolean boolean98 = asteriskVersion44.isAtLeast(asteriskVersion66);
        java.lang.Class<?> wildcardClass99 = asteriskVersion66.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Asterisk 1.0" + "'", str12, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType13 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType13.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 1.0" + "'", str21, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Asterisk 1.0" + "'", str27, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 16" + "'", str40, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Asterisk 20" + "'", str65, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Asterisk 1.0" + "'", str68, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType69 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType69.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertNotNull(asteriskVersion74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Asterisk 1.0" + "'", str77, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(asteriskVersion79);
        org.junit.Assert.assertNotNull(asteriskVersion80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Asterisk 1.0" + "'", str83, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(asteriskVersion88);
        org.junit.Assert.assertNotNull(asteriskVersion89);
        org.junit.Assert.assertNotNull(asteriskVersion90);
        org.junit.Assert.assertNotNull(asteriskVersion91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Asterisk 16" + "'", str96, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        boolean boolean10 = asteriskVersion4.isAtLeast(asteriskVersion8);
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean12 = asteriskVersion4.equals((java.lang.Object) listenerPriority11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int14 = asteriskVersion4.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int17 = asteriskVersion15.compareTo(asteriskVersion16);
        java.lang.String str18 = asteriskVersion15.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        java.lang.String str20 = asteriskVersion19.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        int int22 = asteriskVersion19.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean25 = asteriskVersion23.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean28 = asteriskVersion26.isAtLeast(asteriskVersion27);
        int int29 = asteriskVersion23.compareTo(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean32 = asteriskVersion30.isAtLeast(asteriskVersion31);
        boolean boolean33 = asteriskVersion27.isAtLeast(asteriskVersion31);
        org.asteriskjava.pbx.ListenerPriority listenerPriority34 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean35 = asteriskVersion27.equals((java.lang.Object) listenerPriority34);
        boolean boolean36 = asteriskVersion21.equals((java.lang.Object) asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int39 = asteriskVersion37.compareTo(asteriskVersion38);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str41 = asteriskVersion40.toString();
        boolean boolean42 = asteriskVersion38.isAtLeast(asteriskVersion40);
        boolean boolean44 = asteriskVersion38.equals((java.lang.Object) "0");
        boolean boolean45 = asteriskVersion21.isAtLeast(asteriskVersion38);
        int int46 = asteriskVersion15.compareTo(asteriskVersion38);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean49 = asteriskVersion47.isAtLeast(asteriskVersion48);
        boolean boolean50 = asteriskVersion15.equals((java.lang.Object) boolean49);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        java.lang.String str52 = asteriskVersion51.toString();
        java.lang.String str53 = asteriskVersion51.toString();
        java.lang.String str54 = asteriskVersion51.toString();
        int int55 = asteriskVersion15.compareTo(asteriskVersion51);
        java.lang.String str56 = asteriskVersion51.toString();
        boolean boolean57 = asteriskVersion13.isAtLeast(asteriskVersion51);
        java.lang.Class<?> wildcardClass58 = asteriskVersion13.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Asterisk 17" + "'", str18, "Asterisk 17");
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Asterisk 10" + "'", str20, "Asterisk 10");
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority34 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority34.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Asterisk 1.0" + "'", str41, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Asterisk 12" + "'", str52, "Asterisk 12");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Asterisk 12" + "'", str53, "Asterisk 12");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Asterisk 12" + "'", str54, "Asterisk 12");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Asterisk 12" + "'", str56, "Asterisk 12");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.asteriskjava.pbx.DTMFTone dTMFTone0 = org.asteriskjava.pbx.DTMFTone.HASH;
        java.lang.String str1 = dTMFTone0.toString();
        java.lang.String str2 = dTMFTone0.toString();
        java.lang.String str3 = dTMFTone0.toString();
        java.lang.String str4 = dTMFTone0.toString();
        java.lang.String str5 = dTMFTone0.toString();
        java.lang.String str6 = dTMFTone0.toString();
        java.lang.String str7 = dTMFTone0.toString();
        java.lang.String str8 = dTMFTone0.toString();
        java.lang.Class<?> wildcardClass9 = dTMFTone0.getClass();
        org.junit.Assert.assertTrue("'" + dTMFTone0 + "' != '" + org.asteriskjava.pbx.DTMFTone.HASH + "'", dTMFTone0.equals(org.asteriskjava.pbx.DTMFTone.HASH));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "#" + "'", str1, "#");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "#" + "'", str2, "#");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#" + "'", str3, "#");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "#" + "'", str4, "#");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "#" + "'", str5, "#");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "#" + "'", str6, "#");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "#" + "'", str7, "#");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "#" + "'", str8, "#");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        int int3 = asteriskVersion0.compareTo(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean6 = asteriskVersion4.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        int int10 = asteriskVersion4.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean13 = asteriskVersion11.isAtLeast(asteriskVersion12);
        boolean boolean14 = asteriskVersion8.isAtLeast(asteriskVersion12);
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean16 = asteriskVersion8.equals((java.lang.Object) listenerPriority15);
        boolean boolean17 = asteriskVersion2.equals((java.lang.Object) asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int20 = asteriskVersion18.compareTo(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str22 = asteriskVersion21.toString();
        boolean boolean23 = asteriskVersion19.isAtLeast(asteriskVersion21);
        boolean boolean25 = asteriskVersion19.equals((java.lang.Object) "0");
        boolean boolean26 = asteriskVersion2.isAtLeast(asteriskVersion19);
        java.lang.Class<?> wildcardClass27 = asteriskVersion2.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 10" + "'", str1, "Asterisk 10");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Asterisk 1.0" + "'", str22, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int5 = listenerPriority3.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int7 = listenerPriority4.compare(listenerPriority6);
        int int8 = listenerPriority1.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int11 = listenerPriority9.compare(listenerPriority10);
        org.asteriskjava.pbx.ListenerPriority listenerPriority12 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int13 = listenerPriority10.compare(listenerPriority12);
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int15 = listenerPriority10.compare(listenerPriority14);
        org.asteriskjava.pbx.ListenerPriority listenerPriority16 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int17 = listenerPriority10.compare(listenerPriority16);
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int21 = listenerPriority19.compare(listenerPriority20);
        org.asteriskjava.pbx.ListenerPriority listenerPriority22 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int24 = listenerPriority22.compare(listenerPriority23);
        org.asteriskjava.pbx.ListenerPriority listenerPriority25 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int26 = listenerPriority23.compare(listenerPriority25);
        int int27 = listenerPriority20.compare(listenerPriority23);
        org.asteriskjava.pbx.ListenerPriority listenerPriority28 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int30 = listenerPriority28.compare(listenerPriority29);
        int int31 = listenerPriority20.compare(listenerPriority28);
        int int32 = listenerPriority18.compare(listenerPriority20);
        int int33 = listenerPriority16.compare(listenerPriority20);
        org.asteriskjava.pbx.ListenerPriority listenerPriority34 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority35 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int36 = listenerPriority34.compare(listenerPriority35);
        org.asteriskjava.pbx.ListenerPriority listenerPriority37 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int38 = listenerPriority35.compare(listenerPriority37);
        int int39 = listenerPriority16.compare(listenerPriority35);
        int int40 = listenerPriority1.compare(listenerPriority16);
        java.lang.Class<?> wildcardClass41 = listenerPriority16.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-4) + "'", int7 == (-4));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority12 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority12.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-4) + "'", int13 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-6) + "'", int15 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority16 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority16.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-4) + "'", int17 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority22 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority22.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority25 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority25.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-4) + "'", int26 == (-4));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority28 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority28.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-2) + "'", int31 == (-2));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority34 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority34.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority35 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority35.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority37 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority37.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-4) + "'", int38 == (-4));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-4) + "'", int40 == (-4));
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int10 = asteriskVersion6.compareTo(asteriskVersion9);
        org.asteriskjava.pbx.TechType techType11 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean12 = asteriskVersion6.equals((java.lang.Object) techType11);
        boolean boolean13 = asteriskVersion3.isAtLeast(asteriskVersion6);
        boolean boolean14 = asteriskVersion0.isAtLeast(asteriskVersion3);
        java.lang.String str15 = asteriskVersion3.toString();
        java.lang.String str16 = asteriskVersion3.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str19 = asteriskVersion18.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean21 = asteriskVersion18.isAtLeast(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean24 = asteriskVersion22.isAtLeast(asteriskVersion23);
        boolean boolean25 = asteriskVersion20.equals((java.lang.Object) asteriskVersion22);
        int int26 = asteriskVersion17.compareTo(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str29 = asteriskVersion28.toString();
        org.asteriskjava.pbx.TechType techType30 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass31 = techType30.getClass();
        boolean boolean32 = asteriskVersion28.equals((java.lang.Object) wildcardClass31);
        int int33 = asteriskVersion27.compareTo(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str38 = asteriskVersion37.toString();
        boolean boolean39 = asteriskVersion35.isAtLeast(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int42 = asteriskVersion40.compareTo(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str44 = asteriskVersion43.toString();
        boolean boolean45 = asteriskVersion41.isAtLeast(asteriskVersion43);
        boolean boolean47 = asteriskVersion41.equals((java.lang.Object) "0");
        boolean boolean48 = asteriskVersion35.equals((java.lang.Object) asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int53 = asteriskVersion51.compareTo(asteriskVersion52);
        boolean boolean54 = asteriskVersion50.isAtLeast(asteriskVersion52);
        int int55 = asteriskVersion49.compareTo(asteriskVersion50);
        int int56 = asteriskVersion35.compareTo(asteriskVersion49);
        java.lang.String str57 = asteriskVersion35.toString();
        boolean boolean58 = asteriskVersion27.equals((java.lang.Object) asteriskVersion35);
        boolean boolean59 = asteriskVersion22.isAtLeast(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion62 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean63 = asteriskVersion61.isAtLeast(asteriskVersion62);
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean66 = asteriskVersion64.isAtLeast(asteriskVersion65);
        int int67 = asteriskVersion61.compareTo(asteriskVersion65);
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion69 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean70 = asteriskVersion68.isAtLeast(asteriskVersion69);
        org.asteriskjava.AsteriskVersion asteriskVersion71 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion72 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean73 = asteriskVersion71.isAtLeast(asteriskVersion72);
        int int74 = asteriskVersion68.compareTo(asteriskVersion72);
        org.asteriskjava.AsteriskVersion asteriskVersion75 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion76 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean77 = asteriskVersion75.isAtLeast(asteriskVersion76);
        boolean boolean78 = asteriskVersion72.isAtLeast(asteriskVersion76);
        boolean boolean79 = asteriskVersion61.isAtLeast(asteriskVersion76);
        int int80 = asteriskVersion60.compareTo(asteriskVersion61);
        int int81 = asteriskVersion35.compareTo(asteriskVersion61);
        java.lang.String str82 = asteriskVersion61.toString();
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer83 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer83.write();
        htmlEventTracer83.write();
        htmlEventTracer83.write();
        htmlEventTracer83.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent88 = null;
        htmlEventTracer83.onManagerEvent(managerEvent88);
        boolean boolean90 = asteriskVersion61.equals((java.lang.Object) htmlEventTracer83);
        java.lang.Class<?> wildcardClass91 = asteriskVersion61.getClass();
        boolean boolean92 = asteriskVersion3.equals((java.lang.Object) wildcardClass91);
        java.lang.Class<?> wildcardClass93 = asteriskVersion3.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + techType11 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType11.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Asterisk 16" + "'", str15, "Asterisk 16");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Asterisk 16" + "'", str16, "Asterisk 16");
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Asterisk 11" + "'", str19, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Asterisk 1.0" + "'", str29, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType30 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType30.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Asterisk 1.0" + "'", str38, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Asterisk 1.0" + "'", str44, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Asterisk 16" + "'", str57, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertNotNull(asteriskVersion62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertNotNull(asteriskVersion69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(asteriskVersion71);
        org.junit.Assert.assertNotNull(asteriskVersion72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion75);
        org.junit.Assert.assertNotNull(asteriskVersion76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Asterisk 20" + "'", str82, "Asterisk 20");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        boolean boolean6 = asteriskVersion0.equals((java.lang.Object) asteriskVersion1);
        java.lang.String str7 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str10 = asteriskVersion9.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean12 = asteriskVersion9.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean15 = asteriskVersion13.isAtLeast(asteriskVersion14);
        boolean boolean16 = asteriskVersion11.equals((java.lang.Object) asteriskVersion13);
        int int17 = asteriskVersion8.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str20 = asteriskVersion19.toString();
        org.asteriskjava.pbx.TechType techType21 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass22 = techType21.getClass();
        boolean boolean23 = asteriskVersion19.equals((java.lang.Object) wildcardClass22);
        int int24 = asteriskVersion18.compareTo(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int27 = asteriskVersion25.compareTo(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str29 = asteriskVersion28.toString();
        boolean boolean30 = asteriskVersion26.isAtLeast(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int33 = asteriskVersion31.compareTo(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str35 = asteriskVersion34.toString();
        boolean boolean36 = asteriskVersion32.isAtLeast(asteriskVersion34);
        boolean boolean38 = asteriskVersion32.equals((java.lang.Object) "0");
        boolean boolean39 = asteriskVersion26.equals((java.lang.Object) asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int44 = asteriskVersion42.compareTo(asteriskVersion43);
        boolean boolean45 = asteriskVersion41.isAtLeast(asteriskVersion43);
        int int46 = asteriskVersion40.compareTo(asteriskVersion41);
        int int47 = asteriskVersion26.compareTo(asteriskVersion40);
        java.lang.String str48 = asteriskVersion26.toString();
        boolean boolean49 = asteriskVersion18.equals((java.lang.Object) asteriskVersion26);
        boolean boolean50 = asteriskVersion13.isAtLeast(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean54 = asteriskVersion52.isAtLeast(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean57 = asteriskVersion55.isAtLeast(asteriskVersion56);
        int int58 = asteriskVersion52.compareTo(asteriskVersion56);
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean61 = asteriskVersion59.isAtLeast(asteriskVersion60);
        org.asteriskjava.AsteriskVersion asteriskVersion62 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion63 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean64 = asteriskVersion62.isAtLeast(asteriskVersion63);
        int int65 = asteriskVersion59.compareTo(asteriskVersion63);
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean68 = asteriskVersion66.isAtLeast(asteriskVersion67);
        boolean boolean69 = asteriskVersion63.isAtLeast(asteriskVersion67);
        boolean boolean70 = asteriskVersion52.isAtLeast(asteriskVersion67);
        int int71 = asteriskVersion51.compareTo(asteriskVersion52);
        int int72 = asteriskVersion26.compareTo(asteriskVersion52);
        java.lang.String str73 = asteriskVersion52.toString();
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer74 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer74.write();
        htmlEventTracer74.write();
        htmlEventTracer74.write();
        htmlEventTracer74.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent79 = null;
        htmlEventTracer74.onManagerEvent(managerEvent79);
        boolean boolean81 = asteriskVersion52.equals((java.lang.Object) htmlEventTracer74);
        org.asteriskjava.manager.event.ManagerEvent managerEvent82 = null;
        htmlEventTracer74.onManagerEvent(managerEvent82);
        org.asteriskjava.manager.event.ManagerEvent managerEvent84 = null;
        htmlEventTracer74.onManagerEvent(managerEvent84);
        org.asteriskjava.manager.event.ManagerEvent managerEvent86 = null;
        htmlEventTracer74.onManagerEvent(managerEvent86);
        boolean boolean88 = asteriskVersion1.equals((java.lang.Object) htmlEventTracer74);
        org.asteriskjava.manager.event.ManagerEvent managerEvent89 = null;
        htmlEventTracer74.onManagerEvent(managerEvent89);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer74.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Asterisk 12" + "'", str7, "Asterisk 12");
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Asterisk 11" + "'", str10, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Asterisk 1.0" + "'", str20, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType21 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType21.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Asterisk 1.0" + "'", str29, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Asterisk 1.0" + "'", str35, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Asterisk 16" + "'", str48, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(asteriskVersion62);
        org.junit.Assert.assertNotNull(asteriskVersion63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Asterisk 20" + "'", str73, "Asterisk 20");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int4 = asteriskVersion0.compareTo(asteriskVersion3);
        java.lang.String str5 = asteriskVersion3.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int10 = asteriskVersion6.compareTo(asteriskVersion9);
        org.asteriskjava.pbx.TechType techType11 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean12 = asteriskVersion6.equals((java.lang.Object) techType11);
        boolean boolean13 = asteriskVersion3.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int17 = asteriskVersion15.compareTo(asteriskVersion16);
        boolean boolean18 = asteriskVersion14.isAtLeast(asteriskVersion16);
        int int19 = asteriskVersion6.compareTo(asteriskVersion14);
        java.lang.Class<?> wildcardClass20 = asteriskVersion14.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Asterisk 1.8" + "'", str5, "Asterisk 1.8");
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + techType11 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType11.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int4 = asteriskVersion0.compareTo(asteriskVersion3);
        java.lang.String str5 = asteriskVersion3.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int10 = asteriskVersion6.compareTo(asteriskVersion9);
        org.asteriskjava.pbx.TechType techType11 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean12 = asteriskVersion6.equals((java.lang.Object) techType11);
        boolean boolean13 = asteriskVersion3.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int17 = asteriskVersion15.compareTo(asteriskVersion16);
        boolean boolean18 = asteriskVersion14.isAtLeast(asteriskVersion16);
        int int19 = asteriskVersion6.compareTo(asteriskVersion14);
        java.lang.Object obj20 = null;
        boolean boolean21 = asteriskVersion6.equals(obj20);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        boolean boolean26 = asteriskVersion22.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int29 = asteriskVersion27.compareTo(asteriskVersion28);
        boolean boolean30 = asteriskVersion22.isAtLeast(asteriskVersion27);
        int int31 = asteriskVersion6.compareTo(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean34 = asteriskVersion32.isAtLeast(asteriskVersion33);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int36 = asteriskVersion33.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str39 = asteriskVersion38.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean41 = asteriskVersion38.isAtLeast(asteriskVersion40);
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str43 = asteriskVersion42.toString();
        int int44 = asteriskVersion38.compareTo(asteriskVersion42);
        boolean boolean45 = asteriskVersion37.isAtLeast(asteriskVersion42);
        boolean boolean46 = asteriskVersion33.equals((java.lang.Object) asteriskVersion42);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int50 = asteriskVersion48.compareTo(asteriskVersion49);
        boolean boolean51 = asteriskVersion47.isAtLeast(asteriskVersion49);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int54 = asteriskVersion52.compareTo(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int56 = asteriskVersion52.compareTo(asteriskVersion55);
        org.asteriskjava.pbx.TechType techType57 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean58 = asteriskVersion52.equals((java.lang.Object) techType57);
        boolean boolean59 = asteriskVersion49.isAtLeast(asteriskVersion52);
        int int60 = asteriskVersion33.compareTo(asteriskVersion52);
        int int61 = asteriskVersion22.compareTo(asteriskVersion33);
        java.lang.Class<?> wildcardClass62 = asteriskVersion33.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Asterisk 1.8" + "'", str5, "Asterisk 1.8");
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + techType11 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType11.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Asterisk 11" + "'", str39, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Asterisk 14" + "'", str43, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + techType57 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType57.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int4 = asteriskVersion0.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        int int6 = asteriskVersion3.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str9 = asteriskVersion8.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        boolean boolean15 = asteriskVersion10.equals((java.lang.Object) asteriskVersion12);
        int int16 = asteriskVersion7.compareTo(asteriskVersion12);
        int int17 = asteriskVersion5.compareTo(asteriskVersion7);
        java.lang.String str18 = asteriskVersion5.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int23 = asteriskVersion21.compareTo(asteriskVersion22);
        boolean boolean24 = asteriskVersion20.isAtLeast(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int27 = asteriskVersion25.compareTo(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int29 = asteriskVersion25.compareTo(asteriskVersion28);
        org.asteriskjava.pbx.TechType techType30 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean31 = asteriskVersion25.equals((java.lang.Object) techType30);
        boolean boolean32 = asteriskVersion22.isAtLeast(asteriskVersion25);
        boolean boolean33 = asteriskVersion19.isAtLeast(asteriskVersion22);
        java.lang.String str34 = asteriskVersion22.toString();
        java.lang.String str35 = asteriskVersion22.toString();
        boolean boolean36 = asteriskVersion5.equals((java.lang.Object) str35);
        java.lang.Class<?> wildcardClass37 = asteriskVersion5.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Asterisk 11" + "'", str9, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Asterisk 12" + "'", str18, "Asterisk 12");
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + techType30 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType30.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Asterisk 16" + "'", str34, "Asterisk 16");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Asterisk 16" + "'", str35, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer2 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer2.write();
        htmlEventTracer2.write();
        htmlEventTracer2.write();
        htmlEventTracer2.write();
        htmlEventTracer2.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer2.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer2.onManagerEvent(managerEvent10);
        org.asteriskjava.manager.event.ManagerEvent managerEvent12 = null;
        htmlEventTracer2.onManagerEvent(managerEvent12);
        org.asteriskjava.manager.event.ManagerEvent managerEvent14 = null;
        htmlEventTracer2.onManagerEvent(managerEvent14);
        org.asteriskjava.manager.event.ManagerEvent managerEvent16 = null;
        htmlEventTracer2.onManagerEvent(managerEvent16);
        org.asteriskjava.manager.event.ManagerEvent managerEvent18 = null;
        htmlEventTracer2.onManagerEvent(managerEvent18);
        boolean boolean20 = asteriskVersion0.equals((java.lang.Object) htmlEventTracer2);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer2.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 1.0" + "'", str1, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str1 = asteriskVersion0.toString();
        java.lang.String str2 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int5 = asteriskVersion3.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int7 = asteriskVersion3.compareTo(asteriskVersion6);
        org.asteriskjava.pbx.TechType techType8 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean9 = asteriskVersion3.equals((java.lang.Object) techType8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        boolean boolean11 = asteriskVersion3.equals((java.lang.Object) asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int16 = asteriskVersion12.compareTo(asteriskVersion15);
        int int17 = asteriskVersion10.compareTo(asteriskVersion15);
        boolean boolean18 = asteriskVersion0.isAtLeast(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int21 = asteriskVersion19.compareTo(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        boolean boolean26 = asteriskVersion22.isAtLeast(asteriskVersion24);
        int int27 = asteriskVersion19.compareTo(asteriskVersion22);
        java.lang.String str28 = asteriskVersion19.toString();
        java.lang.String str29 = asteriskVersion19.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean32 = asteriskVersion30.isAtLeast(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int34 = asteriskVersion30.compareTo(asteriskVersion33);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str36 = asteriskVersion35.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int39 = asteriskVersion37.compareTo(asteriskVersion38);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int41 = asteriskVersion37.compareTo(asteriskVersion40);
        org.asteriskjava.pbx.TechType techType42 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean43 = asteriskVersion37.equals((java.lang.Object) techType42);
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        boolean boolean45 = asteriskVersion37.equals((java.lang.Object) asteriskVersion44);
        int int46 = asteriskVersion35.compareTo(asteriskVersion37);
        boolean boolean47 = asteriskVersion30.isAtLeast(asteriskVersion35);
        boolean boolean48 = asteriskVersion19.isAtLeast(asteriskVersion35);
        int int49 = asteriskVersion10.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int52 = asteriskVersion50.compareTo(asteriskVersion51);
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int54 = asteriskVersion50.compareTo(asteriskVersion53);
        boolean boolean55 = asteriskVersion35.isAtLeast(asteriskVersion50);
        java.lang.Class<?> wildcardClass56 = asteriskVersion50.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 14" + "'", str1, "Asterisk 14");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 14" + "'", str2, "Asterisk 14");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + techType8 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType8.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Asterisk 17" + "'", str28, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Asterisk 17" + "'", str29, "Asterisk 17");
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Asterisk 1.0" + "'", str36, "Asterisk 1.0");
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + techType42 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType42.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        boolean boolean5 = asteriskVersion0.equals((java.lang.Object) boolean4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean8 = asteriskVersion6.isAtLeast(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int10 = asteriskVersion6.compareTo(asteriskVersion9);
        int int11 = asteriskVersion0.compareTo(asteriskVersion9);
        java.lang.Class<?> wildcardClass12 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean3 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int5 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_15;
        boolean boolean7 = asteriskVersion0.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int10 = asteriskVersion8.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int12 = asteriskVersion8.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean15 = asteriskVersion13.isAtLeast(asteriskVersion14);
        boolean boolean16 = asteriskVersion11.isAtLeast(asteriskVersion14);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        boolean boolean18 = asteriskVersion11.equals((java.lang.Object) asteriskVersion17);
        int int19 = asteriskVersion0.compareTo(asteriskVersion11);
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        java.lang.Class<?> wildcardClass21 = listenerPriority20.getClass();
        boolean boolean22 = asteriskVersion0.equals((java.lang.Object) wildcardClass21);
        java.lang.Class<?> wildcardClass23 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 11" + "'", str1, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.equals((java.lang.Object) asteriskVersion5);
        int int9 = asteriskVersion0.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str12 = asteriskVersion11.toString();
        org.asteriskjava.pbx.TechType techType13 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass14 = techType13.getClass();
        boolean boolean15 = asteriskVersion11.equals((java.lang.Object) wildcardClass14);
        int int16 = asteriskVersion10.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int19 = asteriskVersion17.compareTo(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str21 = asteriskVersion20.toString();
        boolean boolean22 = asteriskVersion18.isAtLeast(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str27 = asteriskVersion26.toString();
        boolean boolean28 = asteriskVersion24.isAtLeast(asteriskVersion26);
        boolean boolean30 = asteriskVersion24.equals((java.lang.Object) "0");
        boolean boolean31 = asteriskVersion18.equals((java.lang.Object) asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        boolean boolean37 = asteriskVersion33.isAtLeast(asteriskVersion35);
        int int38 = asteriskVersion32.compareTo(asteriskVersion33);
        int int39 = asteriskVersion18.compareTo(asteriskVersion32);
        java.lang.String str40 = asteriskVersion18.toString();
        boolean boolean41 = asteriskVersion10.equals((java.lang.Object) asteriskVersion18);
        boolean boolean42 = asteriskVersion5.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean46 = asteriskVersion44.isAtLeast(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean49 = asteriskVersion47.isAtLeast(asteriskVersion48);
        int int50 = asteriskVersion44.compareTo(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean53 = asteriskVersion51.isAtLeast(asteriskVersion52);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean56 = asteriskVersion54.isAtLeast(asteriskVersion55);
        int int57 = asteriskVersion51.compareTo(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean60 = asteriskVersion58.isAtLeast(asteriskVersion59);
        boolean boolean61 = asteriskVersion55.isAtLeast(asteriskVersion59);
        boolean boolean62 = asteriskVersion44.isAtLeast(asteriskVersion59);
        int int63 = asteriskVersion43.compareTo(asteriskVersion44);
        int int64 = asteriskVersion18.compareTo(asteriskVersion44);
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean67 = asteriskVersion65.isAtLeast(asteriskVersion66);
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion69 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean70 = asteriskVersion68.isAtLeast(asteriskVersion69);
        int int71 = asteriskVersion65.compareTo(asteriskVersion69);
        org.asteriskjava.AsteriskVersion asteriskVersion72 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean74 = asteriskVersion72.isAtLeast(asteriskVersion73);
        boolean boolean75 = asteriskVersion69.isAtLeast(asteriskVersion73);
        org.asteriskjava.AsteriskVersion asteriskVersion76 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean77 = asteriskVersion73.isAtLeast(asteriskVersion76);
        java.lang.String str78 = asteriskVersion73.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion79 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion80 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean81 = asteriskVersion79.isAtLeast(asteriskVersion80);
        org.asteriskjava.AsteriskVersion asteriskVersion82 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion83 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean84 = asteriskVersion82.isAtLeast(asteriskVersion83);
        int int85 = asteriskVersion79.compareTo(asteriskVersion83);
        org.asteriskjava.AsteriskVersion asteriskVersion86 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion87 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean88 = asteriskVersion86.isAtLeast(asteriskVersion87);
        boolean boolean89 = asteriskVersion83.isAtLeast(asteriskVersion87);
        org.asteriskjava.pbx.ListenerPriority listenerPriority90 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean91 = asteriskVersion83.equals((java.lang.Object) listenerPriority90);
        org.asteriskjava.AsteriskVersion asteriskVersion92 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int93 = asteriskVersion83.compareTo(asteriskVersion92);
        boolean boolean94 = asteriskVersion73.isAtLeast(asteriskVersion92);
        int int95 = asteriskVersion18.compareTo(asteriskVersion92);
        java.lang.Object obj96 = null;
        boolean boolean97 = asteriskVersion92.equals(obj96);
        java.lang.Class<?> wildcardClass98 = asteriskVersion92.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Asterisk 1.0" + "'", str12, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType13 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType13.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 1.0" + "'", str21, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Asterisk 1.0" + "'", str27, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 16" + "'", str40, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertNotNull(asteriskVersion69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion72);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(asteriskVersion76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Asterisk 20" + "'", str78, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion79);
        org.junit.Assert.assertNotNull(asteriskVersion80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(asteriskVersion82);
        org.junit.Assert.assertNotNull(asteriskVersion83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion86);
        org.junit.Assert.assertNotNull(asteriskVersion87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority90 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority90.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(asteriskVersion92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean8 = asteriskVersion6.isAtLeast(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int10 = asteriskVersion7.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean12 = asteriskVersion9.isAtLeast(asteriskVersion11);
        int int13 = asteriskVersion1.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int18 = asteriskVersion14.compareTo(asteriskVersion17);
        boolean boolean19 = asteriskVersion9.isAtLeast(asteriskVersion17);
        org.asteriskjava.pbx.PBXFactory pBXFactory20 = new org.asteriskjava.pbx.PBXFactory();
        java.lang.Class<?> wildcardClass21 = pBXFactory20.getClass();
        boolean boolean22 = asteriskVersion9.equals((java.lang.Object) wildcardClass21);
        int int23 = asteriskVersion0.compareTo(asteriskVersion9);
        java.lang.String str24 = asteriskVersion9.toString();
        java.lang.Class<?> wildcardClass25 = asteriskVersion9.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Asterisk 20" + "'", str24, "Asterisk 20");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int4 = asteriskVersion0.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean10 = asteriskVersion8.isAtLeast(asteriskVersion9);
        int int11 = asteriskVersion5.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean17 = asteriskVersion15.isAtLeast(asteriskVersion16);
        int int18 = asteriskVersion12.compareTo(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean21 = asteriskVersion19.isAtLeast(asteriskVersion20);
        boolean boolean22 = asteriskVersion16.isAtLeast(asteriskVersion20);
        boolean boolean23 = asteriskVersion5.isAtLeast(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum25 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str26 = activityStatusEnum25.getDefaultMessage();
        boolean boolean27 = asteriskVersion24.equals((java.lang.Object) str26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean30 = asteriskVersion28.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean33 = asteriskVersion31.isAtLeast(asteriskVersion32);
        int int34 = asteriskVersion28.compareTo(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean37 = asteriskVersion35.isAtLeast(asteriskVersion36);
        boolean boolean38 = asteriskVersion32.isAtLeast(asteriskVersion36);
        org.asteriskjava.pbx.ListenerPriority listenerPriority39 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean40 = asteriskVersion32.equals((java.lang.Object) listenerPriority39);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int42 = asteriskVersion32.compareTo(asteriskVersion41);
        boolean boolean43 = asteriskVersion24.equals((java.lang.Object) asteriskVersion32);
        boolean boolean44 = asteriskVersion20.isAtLeast(asteriskVersion24);
        boolean boolean45 = asteriskVersion0.equals((java.lang.Object) asteriskVersion24);
        java.lang.Class<?> wildcardClass46 = asteriskVersion24.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + activityStatusEnum25 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum25.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Progress" + "'", str26, "Progress");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority39 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority39.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int4 = asteriskVersion1.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean6 = asteriskVersion3.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        int int13 = asteriskVersion7.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        boolean boolean17 = asteriskVersion11.isAtLeast(asteriskVersion15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean19 = asteriskVersion11.equals((java.lang.Object) listenerPriority18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int21 = asteriskVersion11.compareTo(asteriskVersion20);
        boolean boolean22 = asteriskVersion3.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str25 = asteriskVersion24.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean27 = asteriskVersion24.isAtLeast(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean30 = asteriskVersion28.isAtLeast(asteriskVersion29);
        boolean boolean31 = asteriskVersion26.equals((java.lang.Object) asteriskVersion28);
        int int32 = asteriskVersion23.compareTo(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str34 = asteriskVersion33.toString();
        boolean boolean35 = asteriskVersion28.isAtLeast(asteriskVersion33);
        int int36 = asteriskVersion3.compareTo(asteriskVersion28);
        java.lang.Class<?> wildcardClass37 = asteriskVersion3.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Asterisk 11" + "'", str25, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Asterisk 14" + "'", str34, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.equals((java.lang.Object) asteriskVersion5);
        int int9 = asteriskVersion0.compareTo(asteriskVersion5);
        java.lang.String str10 = asteriskVersion5.toString();
        java.lang.String str11 = asteriskVersion5.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int14 = asteriskVersion12.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int16 = asteriskVersion12.compareTo(asteriskVersion15);
        java.lang.String str17 = asteriskVersion15.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int20 = asteriskVersion18.compareTo(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int22 = asteriskVersion18.compareTo(asteriskVersion21);
        org.asteriskjava.pbx.TechType techType23 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean24 = asteriskVersion18.equals((java.lang.Object) techType23);
        boolean boolean25 = asteriskVersion15.isAtLeast(asteriskVersion18);
        int int26 = asteriskVersion5.compareTo(asteriskVersion18);
        java.lang.Class<?> wildcardClass27 = asteriskVersion5.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Asterisk 20" + "'", str10, "Asterisk 20");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Asterisk 20" + "'", str11, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Asterisk 1.8" + "'", str17, "Asterisk 1.8");
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + techType23 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType23.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        boolean boolean10 = asteriskVersion4.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean12 = asteriskVersion8.isAtLeast(asteriskVersion11);
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int15 = listenerPriority13.compare(listenerPriority14);
        org.asteriskjava.pbx.ListenerPriority listenerPriority16 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority17 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int18 = listenerPriority16.compare(listenerPriority17);
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int20 = listenerPriority17.compare(listenerPriority19);
        int int21 = listenerPriority14.compare(listenerPriority17);
        org.asteriskjava.pbx.ListenerPriority listenerPriority22 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int24 = listenerPriority22.compare(listenerPriority23);
        int int25 = listenerPriority14.compare(listenerPriority22);
        boolean boolean26 = asteriskVersion8.equals((java.lang.Object) listenerPriority14);
        java.lang.Class<?> wildcardClass27 = listenerPriority14.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority16 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority16.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority17 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority17.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-4) + "'", int20 == (-4));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority22 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority22.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-2) + "'", int25 == (-2));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int4 = asteriskVersion0.compareTo(asteriskVersion3);
        org.asteriskjava.pbx.DTMFTone dTMFTone5 = org.asteriskjava.pbx.DTMFTone.STAR;
        java.lang.String str6 = dTMFTone5.toString();
        java.lang.String str7 = dTMFTone5.toString();
        java.lang.String str8 = dTMFTone5.toString();
        java.lang.String str9 = dTMFTone5.toString();
        boolean boolean10 = asteriskVersion0.equals((java.lang.Object) str9);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer11 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent12 = null;
        htmlEventTracer11.onManagerEvent(managerEvent12);
        java.lang.Class<?> wildcardClass14 = htmlEventTracer11.getClass();
        boolean boolean15 = asteriskVersion0.equals((java.lang.Object) htmlEventTracer11);
        java.lang.Class<?> wildcardClass16 = htmlEventTracer11.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + dTMFTone5 + "' != '" + org.asteriskjava.pbx.DTMFTone.STAR + "'", dTMFTone5.equals(org.asteriskjava.pbx.DTMFTone.STAR));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "*" + "'", str6, "*");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "*" + "'", str7, "*");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "*" + "'", str8, "*");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "*" + "'", str9, "*");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer7.write();
        boolean boolean9 = asteriskVersion4.equals((java.lang.Object) htmlEventTracer7);
        htmlEventTracer7.write();
        htmlEventTracer7.write();
        htmlEventTracer7.write();
        htmlEventTracer7.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent14 = null;
        htmlEventTracer7.onManagerEvent(managerEvent14);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int10 = asteriskVersion6.compareTo(asteriskVersion9);
        org.asteriskjava.pbx.TechType techType11 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean12 = asteriskVersion6.equals((java.lang.Object) techType11);
        boolean boolean13 = asteriskVersion3.isAtLeast(asteriskVersion6);
        boolean boolean14 = asteriskVersion0.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int17 = asteriskVersion15.compareTo(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str19 = asteriskVersion18.toString();
        boolean boolean20 = asteriskVersion16.isAtLeast(asteriskVersion18);
        boolean boolean22 = asteriskVersion16.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean25 = asteriskVersion23.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int27 = asteriskVersion24.compareTo(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean29 = asteriskVersion26.isAtLeast(asteriskVersion28);
        boolean boolean30 = asteriskVersion16.isAtLeast(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int33 = asteriskVersion31.compareTo(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int37 = asteriskVersion35.compareTo(asteriskVersion36);
        boolean boolean38 = asteriskVersion34.isAtLeast(asteriskVersion36);
        int int39 = asteriskVersion31.compareTo(asteriskVersion34);
        java.lang.String str40 = asteriskVersion31.toString();
        java.lang.String str41 = asteriskVersion31.toString();
        int int42 = asteriskVersion16.compareTo(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer44 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer44.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent46 = null;
        htmlEventTracer44.onManagerEvent(managerEvent46);
        boolean boolean48 = asteriskVersion43.equals((java.lang.Object) managerEvent46);
        int int49 = asteriskVersion31.compareTo(asteriskVersion43);
        boolean boolean50 = asteriskVersion0.equals((java.lang.Object) asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int54 = asteriskVersion52.compareTo(asteriskVersion53);
        boolean boolean55 = asteriskVersion51.isAtLeast(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean57 = asteriskVersion51.isAtLeast(asteriskVersion56);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer58 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent59 = null;
        htmlEventTracer58.onManagerEvent(managerEvent59);
        org.asteriskjava.manager.event.ManagerEvent managerEvent61 = null;
        htmlEventTracer58.onManagerEvent(managerEvent61);
        boolean boolean63 = asteriskVersion51.equals((java.lang.Object) htmlEventTracer58);
        boolean boolean64 = asteriskVersion31.equals((java.lang.Object) htmlEventTracer58);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer58.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + techType11 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType11.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Asterisk 1.0" + "'", str19, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 17" + "'", str40, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Asterisk 17" + "'", str41, "Asterisk 17");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer0.onManagerEvent(managerEvent10);
        org.asteriskjava.manager.event.ManagerEvent managerEvent12 = null;
        htmlEventTracer0.onManagerEvent(managerEvent12);
        org.asteriskjava.manager.event.ManagerEvent managerEvent14 = null;
        htmlEventTracer0.onManagerEvent(managerEvent14);
        org.asteriskjava.manager.event.ManagerEvent managerEvent16 = null;
        htmlEventTracer0.onManagerEvent(managerEvent16);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent5 = null;
        htmlEventTracer0.onManagerEvent(managerEvent5);
        org.asteriskjava.manager.event.ManagerEvent managerEvent7 = null;
        htmlEventTracer0.onManagerEvent(managerEvent7);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.pbx.DTMFTone dTMFTone13 = org.asteriskjava.pbx.DTMFTone.ZERO;
        java.lang.String str14 = dTMFTone13.toString();
        boolean boolean15 = asteriskVersion0.equals((java.lang.Object) dTMFTone13);
        java.lang.Object obj16 = null;
        boolean boolean17 = asteriskVersion0.equals(obj16);
        java.lang.Class<?> wildcardClass18 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + dTMFTone13 + "' != '" + org.asteriskjava.pbx.DTMFTone.ZERO + "'", dTMFTone13.equals(org.asteriskjava.pbx.DTMFTone.ZERO));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        boolean boolean2 = asteriskVersion0.equals((java.lang.Object) "Asterisk 18");
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int5 = asteriskVersion3.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str7 = asteriskVersion6.toString();
        boolean boolean8 = asteriskVersion4.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int11 = asteriskVersion9.compareTo(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str13 = asteriskVersion12.toString();
        boolean boolean14 = asteriskVersion10.isAtLeast(asteriskVersion12);
        boolean boolean16 = asteriskVersion10.equals((java.lang.Object) "0");
        boolean boolean17 = asteriskVersion4.equals((java.lang.Object) asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int22 = asteriskVersion20.compareTo(asteriskVersion21);
        boolean boolean23 = asteriskVersion19.isAtLeast(asteriskVersion21);
        int int24 = asteriskVersion18.compareTo(asteriskVersion19);
        int int25 = asteriskVersion4.compareTo(asteriskVersion18);
        java.lang.String str26 = asteriskVersion4.toString();
        boolean boolean27 = asteriskVersion0.isAtLeast(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int30 = asteriskVersion28.compareTo(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int32 = asteriskVersion28.compareTo(asteriskVersion31);
        org.asteriskjava.pbx.TechType techType33 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean34 = asteriskVersion28.equals((java.lang.Object) techType33);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        boolean boolean36 = asteriskVersion28.equals((java.lang.Object) asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str38 = asteriskVersion37.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean40 = asteriskVersion37.isAtLeast(asteriskVersion39);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean43 = asteriskVersion41.isAtLeast(asteriskVersion42);
        boolean boolean44 = asteriskVersion39.equals((java.lang.Object) asteriskVersion41);
        boolean boolean45 = asteriskVersion28.isAtLeast(asteriskVersion41);
        boolean boolean46 = asteriskVersion4.isAtLeast(asteriskVersion41);
        java.lang.Class<?> wildcardClass47 = asteriskVersion41.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Asterisk 1.0" + "'", str7, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Asterisk 1.0" + "'", str13, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Asterisk 16" + "'", str26, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + techType33 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType33.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Asterisk 11" + "'", str38, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum1 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str2 = activityStatusEnum1.getDefaultMessage();
        boolean boolean3 = asteriskVersion0.equals((java.lang.Object) str2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str6 = asteriskVersion5.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean8 = asteriskVersion5.isAtLeast(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int12 = asteriskVersion10.compareTo(asteriskVersion11);
        boolean boolean13 = asteriskVersion9.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int18 = asteriskVersion15.compareTo(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean20 = asteriskVersion17.isAtLeast(asteriskVersion19);
        int int21 = asteriskVersion9.compareTo(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int24 = asteriskVersion22.compareTo(asteriskVersion23);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int26 = asteriskVersion22.compareTo(asteriskVersion25);
        boolean boolean27 = asteriskVersion17.isAtLeast(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int30 = asteriskVersion28.compareTo(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str32 = asteriskVersion31.toString();
        boolean boolean33 = asteriskVersion29.isAtLeast(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str38 = asteriskVersion37.toString();
        boolean boolean39 = asteriskVersion35.isAtLeast(asteriskVersion37);
        boolean boolean41 = asteriskVersion35.equals((java.lang.Object) "0");
        boolean boolean42 = asteriskVersion29.equals((java.lang.Object) asteriskVersion35);
        boolean boolean43 = asteriskVersion25.isAtLeast(asteriskVersion29);
        int int44 = asteriskVersion7.compareTo(asteriskVersion25);
        int int45 = asteriskVersion4.compareTo(asteriskVersion25);
        boolean boolean46 = asteriskVersion0.isAtLeast(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str48 = asteriskVersion47.toString();
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer49 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer49.write();
        htmlEventTracer49.write();
        htmlEventTracer49.write();
        htmlEventTracer49.write();
        htmlEventTracer49.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent55 = null;
        htmlEventTracer49.onManagerEvent(managerEvent55);
        org.asteriskjava.manager.event.ManagerEvent managerEvent57 = null;
        htmlEventTracer49.onManagerEvent(managerEvent57);
        org.asteriskjava.manager.event.ManagerEvent managerEvent59 = null;
        htmlEventTracer49.onManagerEvent(managerEvent59);
        org.asteriskjava.manager.event.ManagerEvent managerEvent61 = null;
        htmlEventTracer49.onManagerEvent(managerEvent61);
        org.asteriskjava.manager.event.ManagerEvent managerEvent63 = null;
        htmlEventTracer49.onManagerEvent(managerEvent63);
        org.asteriskjava.manager.event.ManagerEvent managerEvent65 = null;
        htmlEventTracer49.onManagerEvent(managerEvent65);
        boolean boolean67 = asteriskVersion47.equals((java.lang.Object) htmlEventTracer49);
        boolean boolean68 = asteriskVersion25.equals((java.lang.Object) htmlEventTracer49);
        org.asteriskjava.manager.event.ManagerEvent managerEvent69 = null;
        htmlEventTracer49.onManagerEvent(managerEvent69);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer49.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertTrue("'" + activityStatusEnum1 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum1.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Progress" + "'", str2, "Progress");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Asterisk 11" + "'", str6, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Asterisk 1.0" + "'", str32, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Asterisk 1.0" + "'", str38, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Asterisk 1.0" + "'", str48, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        java.lang.Class<?> wildcardClass1 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int4 = asteriskVersion0.compareTo(asteriskVersion3);
        java.lang.String str5 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        java.lang.String str9 = asteriskVersion7.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str12 = asteriskVersion11.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean14 = asteriskVersion11.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int18 = asteriskVersion16.compareTo(asteriskVersion17);
        boolean boolean19 = asteriskVersion15.isAtLeast(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean22 = asteriskVersion20.isAtLeast(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int24 = asteriskVersion21.compareTo(asteriskVersion23);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean26 = asteriskVersion23.isAtLeast(asteriskVersion25);
        int int27 = asteriskVersion15.compareTo(asteriskVersion23);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int30 = asteriskVersion28.compareTo(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int32 = asteriskVersion28.compareTo(asteriskVersion31);
        boolean boolean33 = asteriskVersion23.isAtLeast(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str38 = asteriskVersion37.toString();
        boolean boolean39 = asteriskVersion35.isAtLeast(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int42 = asteriskVersion40.compareTo(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str44 = asteriskVersion43.toString();
        boolean boolean45 = asteriskVersion41.isAtLeast(asteriskVersion43);
        boolean boolean47 = asteriskVersion41.equals((java.lang.Object) "0");
        boolean boolean48 = asteriskVersion35.equals((java.lang.Object) asteriskVersion41);
        boolean boolean49 = asteriskVersion31.isAtLeast(asteriskVersion35);
        int int50 = asteriskVersion13.compareTo(asteriskVersion31);
        int int51 = asteriskVersion10.compareTo(asteriskVersion31);
        int int52 = asteriskVersion7.compareTo(asteriskVersion31);
        boolean boolean53 = asteriskVersion0.isAtLeast(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean55 = asteriskVersion7.isAtLeast(asteriskVersion54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Asterisk 13" + "'", str5, "Asterisk 13");
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Asterisk 16" + "'", str9, "Asterisk 16");
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Asterisk 11" + "'", str12, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Asterisk 1.0" + "'", str38, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Asterisk 1.0" + "'", str44, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int4 = asteriskVersion0.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        boolean boolean9 = asteriskVersion5.isAtLeast(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int14 = asteriskVersion11.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean16 = asteriskVersion13.isAtLeast(asteriskVersion15);
        int int17 = asteriskVersion5.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str19 = asteriskVersion18.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean21 = asteriskVersion18.isAtLeast(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean24 = asteriskVersion22.isAtLeast(asteriskVersion23);
        boolean boolean25 = asteriskVersion20.equals((java.lang.Object) asteriskVersion22);
        boolean boolean26 = asteriskVersion5.isAtLeast(asteriskVersion20);
        boolean boolean27 = asteriskVersion0.isAtLeast(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        java.lang.String str29 = asteriskVersion28.toString();
        java.lang.String str30 = asteriskVersion28.toString();
        java.lang.String str31 = asteriskVersion28.toString();
        boolean boolean32 = asteriskVersion20.equals((java.lang.Object) str31);
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Asterisk 11" + "'", str19, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Asterisk 12" + "'", str29, "Asterisk 12");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Asterisk 12" + "'", str30, "Asterisk 12");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Asterisk 12" + "'", str31, "Asterisk 12");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer7.write();
        boolean boolean9 = asteriskVersion4.equals((java.lang.Object) htmlEventTracer7);
        htmlEventTracer7.write();
        htmlEventTracer7.write();
        htmlEventTracer7.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent13 = null;
        htmlEventTracer7.onManagerEvent(managerEvent13);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer7.write();
        boolean boolean9 = asteriskVersion4.equals((java.lang.Object) htmlEventTracer7);
        htmlEventTracer7.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent11 = null;
        htmlEventTracer7.onManagerEvent(managerEvent11);
        org.asteriskjava.manager.event.ManagerEvent managerEvent13 = null;
        htmlEventTracer7.onManagerEvent(managerEvent13);
        org.asteriskjava.manager.event.ManagerEvent managerEvent15 = null;
        htmlEventTracer7.onManagerEvent(managerEvent15);
        org.asteriskjava.manager.event.ManagerEvent managerEvent17 = null;
        htmlEventTracer7.onManagerEvent(managerEvent17);
        org.asteriskjava.manager.event.ManagerEvent managerEvent19 = null;
        htmlEventTracer7.onManagerEvent(managerEvent19);
        org.asteriskjava.manager.event.ManagerEvent managerEvent21 = null;
        htmlEventTracer7.onManagerEvent(managerEvent21);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.LOW;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority2 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int3 = listenerPriority1.compare(listenerPriority2);
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int5 = listenerPriority2.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int7 = listenerPriority2.compare(listenerPriority6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean10 = asteriskVersion8.isAtLeast(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean13 = asteriskVersion11.isAtLeast(asteriskVersion12);
        int int14 = asteriskVersion8.compareTo(asteriskVersion12);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean17 = asteriskVersion15.isAtLeast(asteriskVersion16);
        boolean boolean18 = asteriskVersion12.isAtLeast(asteriskVersion16);
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean20 = asteriskVersion12.equals((java.lang.Object) listenerPriority19);
        int int21 = listenerPriority6.compare(listenerPriority19);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        boolean boolean26 = asteriskVersion22.isAtLeast(asteriskVersion24);
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority28 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int29 = listenerPriority27.compare(listenerPriority28);
        org.asteriskjava.pbx.ListenerPriority listenerPriority30 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int31 = listenerPriority28.compare(listenerPriority30);
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int33 = listenerPriority28.compare(listenerPriority32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean36 = asteriskVersion34.isAtLeast(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean39 = asteriskVersion37.isAtLeast(asteriskVersion38);
        int int40 = asteriskVersion34.compareTo(asteriskVersion38);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean43 = asteriskVersion41.isAtLeast(asteriskVersion42);
        boolean boolean44 = asteriskVersion38.isAtLeast(asteriskVersion42);
        org.asteriskjava.pbx.ListenerPriority listenerPriority45 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean46 = asteriskVersion38.equals((java.lang.Object) listenerPriority45);
        int int47 = listenerPriority32.compare(listenerPriority45);
        boolean boolean48 = asteriskVersion24.equals((java.lang.Object) listenerPriority32);
        int int49 = listenerPriority19.compare(listenerPriority32);
        org.asteriskjava.pbx.ListenerPriority listenerPriority50 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int51 = listenerPriority19.compare(listenerPriority50);
        org.asteriskjava.pbx.ListenerPriority listenerPriority52 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority53 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int54 = listenerPriority52.compare(listenerPriority53);
        org.asteriskjava.pbx.ListenerPriority listenerPriority55 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int56 = listenerPriority53.compare(listenerPriority55);
        org.asteriskjava.pbx.ListenerPriority listenerPriority57 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority58 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int59 = listenerPriority57.compare(listenerPriority58);
        org.asteriskjava.pbx.ListenerPriority listenerPriority60 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority61 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int62 = listenerPriority60.compare(listenerPriority61);
        org.asteriskjava.pbx.ListenerPriority listenerPriority63 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int64 = listenerPriority61.compare(listenerPriority63);
        int int65 = listenerPriority58.compare(listenerPriority61);
        org.asteriskjava.pbx.ListenerPriority listenerPriority66 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority67 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int68 = listenerPriority66.compare(listenerPriority67);
        int int69 = listenerPriority58.compare(listenerPriority66);
        int int70 = listenerPriority55.compare(listenerPriority66);
        int int71 = listenerPriority19.compare(listenerPriority66);
        org.asteriskjava.pbx.ListenerPriority listenerPriority72 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority73 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int74 = listenerPriority72.compare(listenerPriority73);
        int int75 = listenerPriority66.compare(listenerPriority72);
        int int76 = listenerPriority0.compare(listenerPriority72);
        java.lang.Class<?> wildcardClass77 = listenerPriority0.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority2 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority2.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-4) + "'", int5 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-6) + "'", int7 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority28 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority28.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority30 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority30.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-4) + "'", int31 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-6) + "'", int33 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority45 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority45.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority50 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority50.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority52 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority52.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority53 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority53.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority55 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority55.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-4) + "'", int56 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority57 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority57.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority58 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority58.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority60 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority60.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority61 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority61.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority63 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority63.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-4) + "'", int64 == (-4));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority66 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority66.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority67 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority67.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-2) + "'", int69 == (-2));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority72 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority72.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority73 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority73.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.REALTIME;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int6 = listenerPriority4.compare(listenerPriority5);
        org.asteriskjava.pbx.ListenerPriority listenerPriority7 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority8 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int9 = listenerPriority7.compare(listenerPriority8);
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int11 = listenerPriority8.compare(listenerPriority10);
        int int12 = listenerPriority5.compare(listenerPriority8);
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int15 = listenerPriority13.compare(listenerPriority14);
        int int16 = listenerPriority5.compare(listenerPriority13);
        int int17 = listenerPriority3.compare(listenerPriority5);
        int int18 = listenerPriority1.compare(listenerPriority5);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int22 = asteriskVersion20.compareTo(asteriskVersion21);
        boolean boolean23 = asteriskVersion19.isAtLeast(asteriskVersion21);
        org.asteriskjava.pbx.ListenerPriority listenerPriority24 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority25 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int26 = listenerPriority24.compare(listenerPriority25);
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int28 = listenerPriority25.compare(listenerPriority27);
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int30 = listenerPriority25.compare(listenerPriority29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean33 = asteriskVersion31.isAtLeast(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean36 = asteriskVersion34.isAtLeast(asteriskVersion35);
        int int37 = asteriskVersion31.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean40 = asteriskVersion38.isAtLeast(asteriskVersion39);
        boolean boolean41 = asteriskVersion35.isAtLeast(asteriskVersion39);
        org.asteriskjava.pbx.ListenerPriority listenerPriority42 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean43 = asteriskVersion35.equals((java.lang.Object) listenerPriority42);
        int int44 = listenerPriority29.compare(listenerPriority42);
        boolean boolean45 = asteriskVersion21.equals((java.lang.Object) listenerPriority29);
        int int46 = listenerPriority1.compare(listenerPriority29);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int50 = asteriskVersion48.compareTo(asteriskVersion49);
        boolean boolean51 = asteriskVersion47.isAtLeast(asteriskVersion49);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean54 = asteriskVersion52.isAtLeast(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int56 = asteriskVersion53.compareTo(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean58 = asteriskVersion55.isAtLeast(asteriskVersion57);
        int int59 = asteriskVersion47.compareTo(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion62 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int63 = asteriskVersion61.compareTo(asteriskVersion62);
        boolean boolean64 = asteriskVersion60.isAtLeast(asteriskVersion62);
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean67 = asteriskVersion65.isAtLeast(asteriskVersion66);
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int69 = asteriskVersion66.compareTo(asteriskVersion68);
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean71 = asteriskVersion68.isAtLeast(asteriskVersion70);
        int int72 = asteriskVersion60.compareTo(asteriskVersion68);
        boolean boolean73 = asteriskVersion47.isAtLeast(asteriskVersion68);
        boolean boolean75 = asteriskVersion47.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion76 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean77 = asteriskVersion47.isAtLeast(asteriskVersion76);
        org.asteriskjava.AsteriskVersion asteriskVersion78 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion79 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean80 = asteriskVersion78.isAtLeast(asteriskVersion79);
        org.asteriskjava.AsteriskVersion asteriskVersion81 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion82 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean83 = asteriskVersion81.isAtLeast(asteriskVersion82);
        int int84 = asteriskVersion78.compareTo(asteriskVersion82);
        org.asteriskjava.AsteriskVersion asteriskVersion85 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion86 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean87 = asteriskVersion85.isAtLeast(asteriskVersion86);
        boolean boolean88 = asteriskVersion82.isAtLeast(asteriskVersion86);
        org.asteriskjava.pbx.ListenerPriority listenerPriority89 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean90 = asteriskVersion82.equals((java.lang.Object) listenerPriority89);
        boolean boolean91 = asteriskVersion47.equals((java.lang.Object) listenerPriority89);
        int int92 = listenerPriority29.compare(listenerPriority89);
        java.lang.Class<?> wildcardClass93 = listenerPriority89.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.REALTIME + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.REALTIME));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-92) + "'", int2 == (-92));
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority7 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority7.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority8 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority8.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-4) + "'", int11 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority24 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority24.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority25 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority25.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-4) + "'", int28 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-6) + "'", int30 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority42 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority42.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-4) + "'", int46 == (-4));
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertNotNull(asteriskVersion62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(asteriskVersion76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(asteriskVersion78);
        org.junit.Assert.assertNotNull(asteriskVersion79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(asteriskVersion81);
        org.junit.Assert.assertNotNull(asteriskVersion82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion85);
        org.junit.Assert.assertNotNull(asteriskVersion86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority89 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority89.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int6 = listenerPriority1.compare(listenerPriority5);
        org.asteriskjava.pbx.ListenerPriority listenerPriority7 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int8 = listenerPriority1.compare(listenerPriority7);
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int11 = listenerPriority9.compare(listenerPriority10);
        int int12 = listenerPriority7.compare(listenerPriority10);
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.LOW;
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int16 = listenerPriority14.compare(listenerPriority15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority17 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int19 = listenerPriority17.compare(listenerPriority18);
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int21 = listenerPriority18.compare(listenerPriority20);
        int int22 = listenerPriority15.compare(listenerPriority18);
        int int23 = listenerPriority13.compare(listenerPriority15);
        int int24 = listenerPriority10.compare(listenerPriority15);
        java.lang.Class<?> wildcardClass25 = listenerPriority15.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-6) + "'", int6 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority7 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority7.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-4) + "'", int8 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority17 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority17.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-4) + "'", int21 == (-4));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int6 = asteriskVersion4.compareTo(asteriskVersion5);
        boolean boolean7 = asteriskVersion3.isAtLeast(asteriskVersion5);
        int int8 = asteriskVersion0.compareTo(asteriskVersion3);
        java.lang.String str9 = asteriskVersion0.toString();
        java.lang.String str10 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean13 = asteriskVersion11.isAtLeast(asteriskVersion12);
        int int14 = asteriskVersion0.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str17 = asteriskVersion16.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean19 = asteriskVersion16.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean22 = asteriskVersion20.isAtLeast(asteriskVersion21);
        boolean boolean23 = asteriskVersion18.equals((java.lang.Object) asteriskVersion20);
        int int24 = asteriskVersion15.compareTo(asteriskVersion20);
        java.lang.String str25 = asteriskVersion20.toString();
        boolean boolean26 = asteriskVersion11.isAtLeast(asteriskVersion20);
        java.lang.Class<?> wildcardClass27 = asteriskVersion11.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Asterisk 17" + "'", str9, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Asterisk 17" + "'", str10, "Asterisk 17");
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Asterisk 11" + "'", str17, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Asterisk 20" + "'", str25, "Asterisk 20");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.equals((java.lang.Object) asteriskVersion5);
        int int9 = asteriskVersion0.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str12 = asteriskVersion11.toString();
        org.asteriskjava.pbx.TechType techType13 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass14 = techType13.getClass();
        boolean boolean15 = asteriskVersion11.equals((java.lang.Object) wildcardClass14);
        int int16 = asteriskVersion10.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int19 = asteriskVersion17.compareTo(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str21 = asteriskVersion20.toString();
        boolean boolean22 = asteriskVersion18.isAtLeast(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str27 = asteriskVersion26.toString();
        boolean boolean28 = asteriskVersion24.isAtLeast(asteriskVersion26);
        boolean boolean30 = asteriskVersion24.equals((java.lang.Object) "0");
        boolean boolean31 = asteriskVersion18.equals((java.lang.Object) asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        boolean boolean37 = asteriskVersion33.isAtLeast(asteriskVersion35);
        int int38 = asteriskVersion32.compareTo(asteriskVersion33);
        int int39 = asteriskVersion18.compareTo(asteriskVersion32);
        java.lang.String str40 = asteriskVersion18.toString();
        boolean boolean41 = asteriskVersion10.equals((java.lang.Object) asteriskVersion18);
        boolean boolean42 = asteriskVersion5.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean46 = asteriskVersion44.isAtLeast(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean49 = asteriskVersion47.isAtLeast(asteriskVersion48);
        int int50 = asteriskVersion44.compareTo(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean53 = asteriskVersion51.isAtLeast(asteriskVersion52);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean56 = asteriskVersion54.isAtLeast(asteriskVersion55);
        int int57 = asteriskVersion51.compareTo(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean60 = asteriskVersion58.isAtLeast(asteriskVersion59);
        boolean boolean61 = asteriskVersion55.isAtLeast(asteriskVersion59);
        boolean boolean62 = asteriskVersion44.isAtLeast(asteriskVersion59);
        int int63 = asteriskVersion43.compareTo(asteriskVersion44);
        int int64 = asteriskVersion18.compareTo(asteriskVersion44);
        java.lang.String str65 = asteriskVersion44.toString();
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer66 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer66.write();
        htmlEventTracer66.write();
        htmlEventTracer66.write();
        htmlEventTracer66.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent71 = null;
        htmlEventTracer66.onManagerEvent(managerEvent71);
        boolean boolean73 = asteriskVersion44.equals((java.lang.Object) htmlEventTracer66);
        org.asteriskjava.manager.event.ManagerEvent managerEvent74 = null;
        htmlEventTracer66.onManagerEvent(managerEvent74);
        org.asteriskjava.manager.event.ManagerEvent managerEvent76 = null;
        htmlEventTracer66.onManagerEvent(managerEvent76);
        org.asteriskjava.manager.event.ManagerEvent managerEvent78 = null;
        htmlEventTracer66.onManagerEvent(managerEvent78);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer66.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Asterisk 1.0" + "'", str12, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType13 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType13.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 1.0" + "'", str21, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Asterisk 1.0" + "'", str27, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 16" + "'", str40, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Asterisk 20" + "'", str65, "Asterisk 20");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean3 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int5 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_15;
        boolean boolean7 = asteriskVersion0.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int10 = asteriskVersion8.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int12 = asteriskVersion8.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean15 = asteriskVersion13.isAtLeast(asteriskVersion14);
        boolean boolean16 = asteriskVersion11.isAtLeast(asteriskVersion14);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        boolean boolean18 = asteriskVersion11.equals((java.lang.Object) asteriskVersion17);
        int int19 = asteriskVersion0.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int23 = asteriskVersion21.compareTo(asteriskVersion22);
        boolean boolean24 = asteriskVersion20.isAtLeast(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean26 = asteriskVersion20.isAtLeast(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int30 = asteriskVersion28.compareTo(asteriskVersion29);
        boolean boolean31 = asteriskVersion27.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean34 = asteriskVersion32.isAtLeast(asteriskVersion33);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int36 = asteriskVersion33.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean38 = asteriskVersion35.isAtLeast(asteriskVersion37);
        int int39 = asteriskVersion27.compareTo(asteriskVersion35);
        int int40 = asteriskVersion20.compareTo(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum42 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str43 = activityStatusEnum42.getDefaultMessage();
        boolean boolean44 = asteriskVersion41.equals((java.lang.Object) str43);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean47 = asteriskVersion45.isAtLeast(asteriskVersion46);
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean50 = asteriskVersion48.isAtLeast(asteriskVersion49);
        int int51 = asteriskVersion45.compareTo(asteriskVersion49);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean54 = asteriskVersion52.isAtLeast(asteriskVersion53);
        boolean boolean55 = asteriskVersion49.isAtLeast(asteriskVersion53);
        org.asteriskjava.pbx.ListenerPriority listenerPriority56 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean57 = asteriskVersion49.equals((java.lang.Object) listenerPriority56);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int59 = asteriskVersion49.compareTo(asteriskVersion58);
        boolean boolean60 = asteriskVersion41.equals((java.lang.Object) asteriskVersion49);
        int int61 = asteriskVersion27.compareTo(asteriskVersion49);
        boolean boolean62 = asteriskVersion11.equals((java.lang.Object) asteriskVersion49);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer63 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer63.write();
        htmlEventTracer63.write();
        htmlEventTracer63.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent67 = null;
        htmlEventTracer63.onManagerEvent(managerEvent67);
        org.asteriskjava.manager.event.ManagerEvent managerEvent69 = null;
        htmlEventTracer63.onManagerEvent(managerEvent69);
        org.asteriskjava.manager.event.ManagerEvent managerEvent71 = null;
        htmlEventTracer63.onManagerEvent(managerEvent71);
        org.asteriskjava.manager.event.ManagerEvent managerEvent73 = null;
        htmlEventTracer63.onManagerEvent(managerEvent73);
        boolean boolean75 = asteriskVersion49.equals((java.lang.Object) htmlEventTracer63);
        org.asteriskjava.manager.event.ManagerEvent managerEvent76 = null;
        htmlEventTracer63.onManagerEvent(managerEvent76);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer63.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 11" + "'", str1, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + activityStatusEnum42 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum42.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Progress" + "'", str43, "Progress");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority56 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority56.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int6 = listenerPriority1.compare(listenerPriority5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        int int13 = asteriskVersion7.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        boolean boolean17 = asteriskVersion11.isAtLeast(asteriskVersion15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean19 = asteriskVersion11.equals((java.lang.Object) listenerPriority18);
        int int20 = listenerPriority5.compare(listenerPriority18);
        org.asteriskjava.pbx.ListenerPriority listenerPriority21 = org.asteriskjava.pbx.ListenerPriority.REALTIME;
        org.asteriskjava.pbx.ListenerPriority listenerPriority22 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int23 = listenerPriority21.compare(listenerPriority22);
        org.asteriskjava.pbx.ListenerPriority listenerPriority24 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority25 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int26 = listenerPriority24.compare(listenerPriority25);
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int28 = listenerPriority25.compare(listenerPriority27);
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority30 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int31 = listenerPriority29.compare(listenerPriority30);
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority33 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int34 = listenerPriority32.compare(listenerPriority33);
        org.asteriskjava.pbx.ListenerPriority listenerPriority35 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int36 = listenerPriority33.compare(listenerPriority35);
        int int37 = listenerPriority30.compare(listenerPriority33);
        org.asteriskjava.pbx.ListenerPriority listenerPriority38 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority39 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int40 = listenerPriority38.compare(listenerPriority39);
        int int41 = listenerPriority30.compare(listenerPriority38);
        int int42 = listenerPriority27.compare(listenerPriority38);
        org.asteriskjava.pbx.ListenerPriority listenerPriority43 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority44 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority45 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int46 = listenerPriority44.compare(listenerPriority45);
        org.asteriskjava.pbx.ListenerPriority listenerPriority47 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority48 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int49 = listenerPriority47.compare(listenerPriority48);
        org.asteriskjava.pbx.ListenerPriority listenerPriority50 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int51 = listenerPriority48.compare(listenerPriority50);
        int int52 = listenerPriority45.compare(listenerPriority48);
        org.asteriskjava.pbx.ListenerPriority listenerPriority53 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority54 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int55 = listenerPriority53.compare(listenerPriority54);
        int int56 = listenerPriority45.compare(listenerPriority53);
        int int57 = listenerPriority43.compare(listenerPriority45);
        int int58 = listenerPriority27.compare(listenerPriority45);
        int int59 = listenerPriority21.compare(listenerPriority27);
        int int60 = listenerPriority18.compare(listenerPriority21);
        org.asteriskjava.pbx.ListenerPriority listenerPriority61 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int62 = listenerPriority18.compare(listenerPriority61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-6) + "'", int6 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority21 + "' != '" + org.asteriskjava.pbx.ListenerPriority.REALTIME + "'", listenerPriority21.equals(org.asteriskjava.pbx.ListenerPriority.REALTIME));
        org.junit.Assert.assertTrue("'" + listenerPriority22 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority22.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-92) + "'", int23 == (-92));
        org.junit.Assert.assertTrue("'" + listenerPriority24 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority24.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority25 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority25.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-4) + "'", int28 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority30 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority30.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority33 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority33.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority35 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority35.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-4) + "'", int36 == (-4));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority38 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority38.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority39 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority39.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-2) + "'", int41 == (-2));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority43 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority43.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority44 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority44.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority45 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority45.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority47 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority47.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority48 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority48.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority50 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority50.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-4) + "'", int51 == (-4));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority53 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority53.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority54 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority54.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-2) + "'", int56 == (-2));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-94) + "'", int59 == (-94));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 96 + "'", int60 == 96);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int4 = asteriskVersion1.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str7 = asteriskVersion6.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean9 = asteriskVersion6.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str11 = asteriskVersion10.toString();
        int int12 = asteriskVersion6.compareTo(asteriskVersion10);
        boolean boolean13 = asteriskVersion5.isAtLeast(asteriskVersion10);
        boolean boolean14 = asteriskVersion1.equals((java.lang.Object) asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int18 = asteriskVersion16.compareTo(asteriskVersion17);
        boolean boolean19 = asteriskVersion15.isAtLeast(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int22 = asteriskVersion20.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int24 = asteriskVersion20.compareTo(asteriskVersion23);
        org.asteriskjava.pbx.TechType techType25 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean26 = asteriskVersion20.equals((java.lang.Object) techType25);
        boolean boolean27 = asteriskVersion17.isAtLeast(asteriskVersion20);
        int int28 = asteriskVersion1.compareTo(asteriskVersion20);
        java.lang.String str29 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean32 = asteriskVersion30.isAtLeast(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean35 = asteriskVersion33.isAtLeast(asteriskVersion34);
        int int36 = asteriskVersion30.compareTo(asteriskVersion34);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean39 = asteriskVersion37.isAtLeast(asteriskVersion38);
        boolean boolean40 = asteriskVersion34.isAtLeast(asteriskVersion38);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean42 = asteriskVersion38.isAtLeast(asteriskVersion41);
        org.asteriskjava.pbx.ListenerPriority listenerPriority43 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority44 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int45 = listenerPriority43.compare(listenerPriority44);
        org.asteriskjava.pbx.ListenerPriority listenerPriority46 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority47 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int48 = listenerPriority46.compare(listenerPriority47);
        org.asteriskjava.pbx.ListenerPriority listenerPriority49 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int50 = listenerPriority47.compare(listenerPriority49);
        int int51 = listenerPriority44.compare(listenerPriority47);
        org.asteriskjava.pbx.ListenerPriority listenerPriority52 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority53 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int54 = listenerPriority52.compare(listenerPriority53);
        int int55 = listenerPriority44.compare(listenerPriority52);
        boolean boolean56 = asteriskVersion38.equals((java.lang.Object) listenerPriority44);
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str59 = asteriskVersion58.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean61 = asteriskVersion58.isAtLeast(asteriskVersion60);
        org.asteriskjava.AsteriskVersion asteriskVersion62 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str63 = asteriskVersion62.toString();
        int int64 = asteriskVersion58.compareTo(asteriskVersion62);
        boolean boolean65 = asteriskVersion57.isAtLeast(asteriskVersion62);
        boolean boolean66 = asteriskVersion38.isAtLeast(asteriskVersion57);
        int int67 = asteriskVersion1.compareTo(asteriskVersion38);
        java.lang.Class<?> wildcardClass68 = asteriskVersion38.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Asterisk 11" + "'", str7, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Asterisk 14" + "'", str11, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + techType25 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType25.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Asterisk 20" + "'", str29, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority43 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority43.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority44 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority44.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority46 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority46.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority47 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority47.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority49 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority49.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-4) + "'", int50 == (-4));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority52 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority52.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority53 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority53.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-2) + "'", int55 == (-2));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Asterisk 11" + "'", str59, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(asteriskVersion62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Asterisk 14" + "'", str63, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer7.write();
        boolean boolean9 = asteriskVersion4.equals((java.lang.Object) htmlEventTracer7);
        htmlEventTracer7.write();
        htmlEventTracer7.write();
        htmlEventTracer7.write();
        htmlEventTracer7.write();
        htmlEventTracer7.write();
        htmlEventTracer7.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent16 = null;
        htmlEventTracer7.onManagerEvent(managerEvent16);
        org.asteriskjava.manager.event.ManagerEvent managerEvent18 = null;
        htmlEventTracer7.onManagerEvent(managerEvent18);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean8 = asteriskVersion6.isAtLeast(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int10 = asteriskVersion7.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean12 = asteriskVersion9.isAtLeast(asteriskVersion11);
        int int13 = asteriskVersion1.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int18 = asteriskVersion14.compareTo(asteriskVersion17);
        boolean boolean19 = asteriskVersion9.isAtLeast(asteriskVersion17);
        org.asteriskjava.pbx.PBXFactory pBXFactory20 = new org.asteriskjava.pbx.PBXFactory();
        java.lang.Class<?> wildcardClass21 = pBXFactory20.getClass();
        boolean boolean22 = asteriskVersion9.equals((java.lang.Object) wildcardClass21);
        int int23 = asteriskVersion0.compareTo(asteriskVersion9);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer24 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer24.write();
        htmlEventTracer24.write();
        htmlEventTracer24.write();
        htmlEventTracer24.write();
        htmlEventTracer24.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent30 = null;
        htmlEventTracer24.onManagerEvent(managerEvent30);
        org.asteriskjava.manager.event.ManagerEvent managerEvent32 = null;
        htmlEventTracer24.onManagerEvent(managerEvent32);
        org.asteriskjava.manager.event.ManagerEvent managerEvent34 = null;
        htmlEventTracer24.onManagerEvent(managerEvent34);
        org.asteriskjava.manager.event.ManagerEvent managerEvent36 = null;
        htmlEventTracer24.onManagerEvent(managerEvent36);
        org.asteriskjava.manager.event.ManagerEvent managerEvent38 = null;
        htmlEventTracer24.onManagerEvent(managerEvent38);
        boolean boolean40 = asteriskVersion9.equals((java.lang.Object) htmlEventTracer24);
        org.asteriskjava.manager.event.ManagerEvent managerEvent41 = null;
        htmlEventTracer24.onManagerEvent(managerEvent41);
        org.asteriskjava.manager.event.ManagerEvent managerEvent43 = null;
        htmlEventTracer24.onManagerEvent(managerEvent43);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer24.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent7 = null;
        htmlEventTracer0.onManagerEvent(managerEvent7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent9 = null;
        htmlEventTracer0.onManagerEvent(managerEvent9);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean6 = asteriskVersion0.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = asteriskVersion5.isAtLeast(asteriskVersion7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean3 = asteriskVersion1.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean6 = asteriskVersion4.isAtLeast(asteriskVersion5);
        int int7 = asteriskVersion1.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean10 = asteriskVersion8.isAtLeast(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean13 = asteriskVersion11.isAtLeast(asteriskVersion12);
        int int14 = asteriskVersion8.compareTo(asteriskVersion12);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean17 = asteriskVersion15.isAtLeast(asteriskVersion16);
        boolean boolean18 = asteriskVersion12.isAtLeast(asteriskVersion16);
        boolean boolean19 = asteriskVersion1.isAtLeast(asteriskVersion16);
        int int20 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int23 = asteriskVersion21.compareTo(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str25 = asteriskVersion24.toString();
        boolean boolean26 = asteriskVersion22.isAtLeast(asteriskVersion24);
        boolean boolean28 = asteriskVersion22.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int33 = asteriskVersion31.compareTo(asteriskVersion32);
        boolean boolean34 = asteriskVersion30.isAtLeast(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int37 = asteriskVersion35.compareTo(asteriskVersion36);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int39 = asteriskVersion35.compareTo(asteriskVersion38);
        org.asteriskjava.pbx.TechType techType40 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean41 = asteriskVersion35.equals((java.lang.Object) techType40);
        boolean boolean42 = asteriskVersion32.isAtLeast(asteriskVersion35);
        boolean boolean43 = asteriskVersion29.isAtLeast(asteriskVersion35);
        boolean boolean44 = asteriskVersion22.isAtLeast(asteriskVersion35);
        boolean boolean45 = asteriskVersion0.isAtLeast(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion46 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = asteriskVersion22.isAtLeast(asteriskVersion46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Asterisk 1.0" + "'", str25, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + techType40 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType40.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int6 = asteriskVersion4.compareTo(asteriskVersion5);
        boolean boolean7 = asteriskVersion3.isAtLeast(asteriskVersion5);
        int int8 = asteriskVersion0.compareTo(asteriskVersion3);
        java.lang.String str9 = asteriskVersion0.toString();
        java.lang.String str10 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean13 = asteriskVersion11.isAtLeast(asteriskVersion12);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int15 = asteriskVersion11.compareTo(asteriskVersion14);
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str17 = asteriskVersion16.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int20 = asteriskVersion18.compareTo(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int22 = asteriskVersion18.compareTo(asteriskVersion21);
        org.asteriskjava.pbx.TechType techType23 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean24 = asteriskVersion18.equals((java.lang.Object) techType23);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        boolean boolean26 = asteriskVersion18.equals((java.lang.Object) asteriskVersion25);
        int int27 = asteriskVersion16.compareTo(asteriskVersion18);
        boolean boolean28 = asteriskVersion11.isAtLeast(asteriskVersion16);
        boolean boolean29 = asteriskVersion0.isAtLeast(asteriskVersion16);
        java.lang.String str30 = asteriskVersion0.toString();
        java.lang.Class<?> wildcardClass31 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Asterisk 17" + "'", str9, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Asterisk 17" + "'", str10, "Asterisk 17");
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Asterisk 1.0" + "'", str17, "Asterisk 1.0");
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + techType23 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType23.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Asterisk 17" + "'", str30, "Asterisk 17");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int4 = asteriskVersion0.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        int int6 = asteriskVersion3.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str9 = asteriskVersion8.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        boolean boolean15 = asteriskVersion10.equals((java.lang.Object) asteriskVersion12);
        int int16 = asteriskVersion7.compareTo(asteriskVersion12);
        int int17 = asteriskVersion5.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean20 = asteriskVersion18.isAtLeast(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int22 = asteriskVersion19.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str25 = asteriskVersion24.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean27 = asteriskVersion24.isAtLeast(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str29 = asteriskVersion28.toString();
        int int30 = asteriskVersion24.compareTo(asteriskVersion28);
        boolean boolean31 = asteriskVersion23.isAtLeast(asteriskVersion28);
        boolean boolean32 = asteriskVersion19.equals((java.lang.Object) asteriskVersion28);
        int int33 = asteriskVersion5.compareTo(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int38 = asteriskVersion34.compareTo(asteriskVersion37);
        java.lang.String str39 = asteriskVersion37.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int42 = asteriskVersion40.compareTo(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int44 = asteriskVersion40.compareTo(asteriskVersion43);
        org.asteriskjava.pbx.TechType techType45 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean46 = asteriskVersion40.equals((java.lang.Object) techType45);
        boolean boolean47 = asteriskVersion37.isAtLeast(asteriskVersion40);
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str49 = asteriskVersion48.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean51 = asteriskVersion48.isAtLeast(asteriskVersion50);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int55 = asteriskVersion53.compareTo(asteriskVersion54);
        boolean boolean56 = asteriskVersion52.isAtLeast(asteriskVersion54);
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean59 = asteriskVersion57.isAtLeast(asteriskVersion58);
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int61 = asteriskVersion58.compareTo(asteriskVersion60);
        org.asteriskjava.AsteriskVersion asteriskVersion62 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean63 = asteriskVersion60.isAtLeast(asteriskVersion62);
        int int64 = asteriskVersion52.compareTo(asteriskVersion60);
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int67 = asteriskVersion65.compareTo(asteriskVersion66);
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int69 = asteriskVersion65.compareTo(asteriskVersion68);
        boolean boolean70 = asteriskVersion60.isAtLeast(asteriskVersion68);
        org.asteriskjava.AsteriskVersion asteriskVersion71 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion72 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int73 = asteriskVersion71.compareTo(asteriskVersion72);
        org.asteriskjava.AsteriskVersion asteriskVersion74 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str75 = asteriskVersion74.toString();
        boolean boolean76 = asteriskVersion72.isAtLeast(asteriskVersion74);
        org.asteriskjava.AsteriskVersion asteriskVersion77 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion78 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int79 = asteriskVersion77.compareTo(asteriskVersion78);
        org.asteriskjava.AsteriskVersion asteriskVersion80 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str81 = asteriskVersion80.toString();
        boolean boolean82 = asteriskVersion78.isAtLeast(asteriskVersion80);
        boolean boolean84 = asteriskVersion78.equals((java.lang.Object) "0");
        boolean boolean85 = asteriskVersion72.equals((java.lang.Object) asteriskVersion78);
        boolean boolean86 = asteriskVersion68.isAtLeast(asteriskVersion72);
        int int87 = asteriskVersion50.compareTo(asteriskVersion68);
        boolean boolean88 = asteriskVersion40.isAtLeast(asteriskVersion50);
        boolean boolean89 = asteriskVersion5.equals((java.lang.Object) asteriskVersion50);
        java.lang.Class<?> wildcardClass90 = asteriskVersion50.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Asterisk 11" + "'", str9, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Asterisk 11" + "'", str25, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Asterisk 14" + "'", str29, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Asterisk 1.8" + "'", str39, "Asterisk 1.8");
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + techType45 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType45.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Asterisk 11" + "'", str49, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(asteriskVersion71);
        org.junit.Assert.assertNotNull(asteriskVersion72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Asterisk 1.0" + "'", str75, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(asteriskVersion77);
        org.junit.Assert.assertNotNull(asteriskVersion78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Asterisk 1.0" + "'", str81, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int4 = asteriskVersion1.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int7 = asteriskVersion5.compareTo(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str9 = asteriskVersion8.toString();
        boolean boolean10 = asteriskVersion6.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int13 = asteriskVersion11.compareTo(asteriskVersion12);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str15 = asteriskVersion14.toString();
        boolean boolean16 = asteriskVersion12.isAtLeast(asteriskVersion14);
        boolean boolean18 = asteriskVersion12.equals((java.lang.Object) "0");
        boolean boolean19 = asteriskVersion6.equals((java.lang.Object) asteriskVersion12);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int24 = asteriskVersion22.compareTo(asteriskVersion23);
        boolean boolean25 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int26 = asteriskVersion20.compareTo(asteriskVersion21);
        int int27 = asteriskVersion6.compareTo(asteriskVersion20);
        int int28 = asteriskVersion1.compareTo(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int32 = asteriskVersion30.compareTo(asteriskVersion31);
        boolean boolean33 = asteriskVersion29.isAtLeast(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean36 = asteriskVersion34.isAtLeast(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int38 = asteriskVersion35.compareTo(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean40 = asteriskVersion37.isAtLeast(asteriskVersion39);
        int int41 = asteriskVersion29.compareTo(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int45 = asteriskVersion43.compareTo(asteriskVersion44);
        boolean boolean46 = asteriskVersion42.isAtLeast(asteriskVersion44);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean49 = asteriskVersion47.isAtLeast(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int51 = asteriskVersion48.compareTo(asteriskVersion50);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean53 = asteriskVersion50.isAtLeast(asteriskVersion52);
        int int54 = asteriskVersion42.compareTo(asteriskVersion50);
        boolean boolean55 = asteriskVersion29.isAtLeast(asteriskVersion50);
        boolean boolean57 = asteriskVersion29.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean59 = asteriskVersion29.isAtLeast(asteriskVersion58);
        int int60 = asteriskVersion6.compareTo(asteriskVersion29);
        java.lang.Class<?> wildcardClass61 = asteriskVersion29.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Asterisk 1.0" + "'", str9, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Asterisk 1.0" + "'", str15, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        boolean boolean10 = asteriskVersion4.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean12 = asteriskVersion8.isAtLeast(asteriskVersion11);
        java.lang.String str13 = asteriskVersion8.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean19 = asteriskVersion17.isAtLeast(asteriskVersion18);
        int int20 = asteriskVersion14.compareTo(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean23 = asteriskVersion21.isAtLeast(asteriskVersion22);
        boolean boolean24 = asteriskVersion18.isAtLeast(asteriskVersion22);
        org.asteriskjava.pbx.ListenerPriority listenerPriority25 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean26 = asteriskVersion18.equals((java.lang.Object) listenerPriority25);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int28 = asteriskVersion18.compareTo(asteriskVersion27);
        boolean boolean29 = asteriskVersion8.isAtLeast(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean32 = asteriskVersion30.isAtLeast(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int34 = asteriskVersion31.compareTo(asteriskVersion33);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int37 = asteriskVersion35.compareTo(asteriskVersion36);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str39 = asteriskVersion38.toString();
        boolean boolean40 = asteriskVersion36.isAtLeast(asteriskVersion38);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int43 = asteriskVersion41.compareTo(asteriskVersion42);
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str45 = asteriskVersion44.toString();
        boolean boolean46 = asteriskVersion42.isAtLeast(asteriskVersion44);
        boolean boolean48 = asteriskVersion42.equals((java.lang.Object) "0");
        boolean boolean49 = asteriskVersion36.equals((java.lang.Object) asteriskVersion42);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int54 = asteriskVersion52.compareTo(asteriskVersion53);
        boolean boolean55 = asteriskVersion51.isAtLeast(asteriskVersion53);
        int int56 = asteriskVersion50.compareTo(asteriskVersion51);
        int int57 = asteriskVersion36.compareTo(asteriskVersion50);
        int int58 = asteriskVersion31.compareTo(asteriskVersion36);
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int61 = asteriskVersion59.compareTo(asteriskVersion60);
        org.asteriskjava.AsteriskVersion asteriskVersion62 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str63 = asteriskVersion62.toString();
        boolean boolean64 = asteriskVersion60.isAtLeast(asteriskVersion62);
        boolean boolean66 = asteriskVersion60.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean69 = asteriskVersion67.isAtLeast(asteriskVersion68);
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int71 = asteriskVersion68.compareTo(asteriskVersion70);
        org.asteriskjava.AsteriskVersion asteriskVersion72 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean73 = asteriskVersion70.isAtLeast(asteriskVersion72);
        boolean boolean74 = asteriskVersion60.isAtLeast(asteriskVersion70);
        org.asteriskjava.AsteriskVersion asteriskVersion75 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion76 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int77 = asteriskVersion75.compareTo(asteriskVersion76);
        org.asteriskjava.AsteriskVersion asteriskVersion78 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion79 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion80 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int81 = asteriskVersion79.compareTo(asteriskVersion80);
        boolean boolean82 = asteriskVersion78.isAtLeast(asteriskVersion80);
        int int83 = asteriskVersion75.compareTo(asteriskVersion78);
        java.lang.String str84 = asteriskVersion75.toString();
        java.lang.String str85 = asteriskVersion75.toString();
        int int86 = asteriskVersion60.compareTo(asteriskVersion75);
        boolean boolean87 = asteriskVersion31.isAtLeast(asteriskVersion60);
        int int88 = asteriskVersion8.compareTo(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int90 = asteriskVersion8.compareTo(asteriskVersion89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Asterisk 20" + "'", str13, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority25 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority25.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Asterisk 1.0" + "'", str39, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Asterisk 1.0" + "'", str45, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Asterisk 1.0" + "'", str63, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(asteriskVersion75);
        org.junit.Assert.assertNotNull(asteriskVersion76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion78);
        org.junit.Assert.assertNotNull(asteriskVersion79);
        org.junit.Assert.assertNotNull(asteriskVersion80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Asterisk 17" + "'", str84, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Asterisk 17" + "'", str85, "Asterisk 17");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.equals((java.lang.Object) asteriskVersion5);
        int int9 = asteriskVersion0.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        java.lang.Object obj11 = null;
        boolean boolean12 = asteriskVersion10.equals(obj11);
        boolean boolean13 = asteriskVersion0.isAtLeast(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str15 = asteriskVersion14.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int18 = asteriskVersion16.compareTo(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int20 = asteriskVersion16.compareTo(asteriskVersion19);
        org.asteriskjava.pbx.TechType techType21 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean22 = asteriskVersion16.equals((java.lang.Object) techType21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        boolean boolean24 = asteriskVersion16.equals((java.lang.Object) asteriskVersion23);
        int int25 = asteriskVersion14.compareTo(asteriskVersion16);
        org.asteriskjava.pbx.DTMFTone dTMFTone26 = org.asteriskjava.pbx.DTMFTone.STAR;
        java.lang.String str27 = dTMFTone26.toString();
        java.lang.String str28 = dTMFTone26.toString();
        boolean boolean29 = asteriskVersion16.equals((java.lang.Object) dTMFTone26);
        java.lang.String str30 = dTMFTone26.toString();
        java.lang.String str31 = dTMFTone26.toString();
        java.lang.String str32 = dTMFTone26.toString();
        java.lang.String str33 = dTMFTone26.toString();
        java.lang.String str34 = dTMFTone26.toString();
        java.lang.String str35 = dTMFTone26.toString();
        boolean boolean36 = asteriskVersion10.equals((java.lang.Object) str35);
        java.lang.Class<?> wildcardClass37 = asteriskVersion10.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Asterisk 1.0" + "'", str15, "Asterisk 1.0");
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + techType21 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType21.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + dTMFTone26 + "' != '" + org.asteriskjava.pbx.DTMFTone.STAR + "'", dTMFTone26.equals(org.asteriskjava.pbx.DTMFTone.STAR));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "*" + "'", str27, "*");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "*" + "'", str28, "*");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "*" + "'", str30, "*");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "*" + "'", str31, "*");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "*" + "'", str32, "*");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "*" + "'", str33, "*");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "*" + "'", str34, "*");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "*" + "'", str35, "*");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int15 = asteriskVersion13.compareTo(asteriskVersion14);
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int17 = asteriskVersion13.compareTo(asteriskVersion16);
        boolean boolean18 = asteriskVersion8.isAtLeast(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str21 = asteriskVersion20.toString();
        org.asteriskjava.pbx.TechType techType22 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass23 = techType22.getClass();
        boolean boolean24 = asteriskVersion20.equals((java.lang.Object) wildcardClass23);
        int int25 = asteriskVersion19.compareTo(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int29 = asteriskVersion27.compareTo(asteriskVersion28);
        boolean boolean30 = asteriskVersion26.isAtLeast(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean33 = asteriskVersion31.isAtLeast(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int35 = asteriskVersion32.compareTo(asteriskVersion34);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean37 = asteriskVersion34.isAtLeast(asteriskVersion36);
        int int38 = asteriskVersion26.compareTo(asteriskVersion34);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int42 = asteriskVersion40.compareTo(asteriskVersion41);
        boolean boolean43 = asteriskVersion39.isAtLeast(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean46 = asteriskVersion44.isAtLeast(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int48 = asteriskVersion45.compareTo(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean50 = asteriskVersion47.isAtLeast(asteriskVersion49);
        int int51 = asteriskVersion39.compareTo(asteriskVersion47);
        boolean boolean52 = asteriskVersion26.isAtLeast(asteriskVersion47);
        boolean boolean54 = asteriskVersion26.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean56 = asteriskVersion26.isAtLeast(asteriskVersion55);
        java.lang.String str57 = asteriskVersion55.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int60 = asteriskVersion58.compareTo(asteriskVersion59);
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int62 = asteriskVersion58.compareTo(asteriskVersion61);
        java.lang.String str63 = asteriskVersion61.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int66 = asteriskVersion64.compareTo(asteriskVersion65);
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int68 = asteriskVersion64.compareTo(asteriskVersion67);
        org.asteriskjava.pbx.TechType techType69 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean70 = asteriskVersion64.equals((java.lang.Object) techType69);
        boolean boolean71 = asteriskVersion61.isAtLeast(asteriskVersion64);
        int int72 = asteriskVersion55.compareTo(asteriskVersion64);
        boolean boolean73 = asteriskVersion20.isAtLeast(asteriskVersion55);
        boolean boolean75 = asteriskVersion20.equals((java.lang.Object) 100);
        boolean boolean76 = asteriskVersion16.isAtLeast(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion77 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str78 = asteriskVersion77.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion79 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean80 = asteriskVersion77.isAtLeast(asteriskVersion79);
        org.asteriskjava.AsteriskVersion asteriskVersion81 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str82 = asteriskVersion81.toString();
        int int83 = asteriskVersion77.compareTo(asteriskVersion81);
        org.asteriskjava.AsteriskVersion asteriskVersion84 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str85 = asteriskVersion84.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion86 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean87 = asteriskVersion84.isAtLeast(asteriskVersion86);
        org.asteriskjava.AsteriskVersion asteriskVersion88 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int89 = asteriskVersion84.compareTo(asteriskVersion88);
        boolean boolean90 = asteriskVersion81.isAtLeast(asteriskVersion88);
        int int91 = asteriskVersion16.compareTo(asteriskVersion88);
        java.lang.Class<?> wildcardClass92 = asteriskVersion88.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 1.0" + "'", str21, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType22 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType22.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Asterisk 20" + "'", str57, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Asterisk 1.8" + "'", str63, "Asterisk 1.8");
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + techType69 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType69.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(asteriskVersion77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Asterisk 11" + "'", str78, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(asteriskVersion81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Asterisk 14" + "'", str82, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Asterisk 11" + "'", str85, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(asteriskVersion88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        int int3 = asteriskVersion0.compareTo(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean6 = asteriskVersion4.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        int int10 = asteriskVersion4.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean13 = asteriskVersion11.isAtLeast(asteriskVersion12);
        boolean boolean14 = asteriskVersion8.isAtLeast(asteriskVersion12);
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean16 = asteriskVersion8.equals((java.lang.Object) listenerPriority15);
        boolean boolean17 = asteriskVersion2.equals((java.lang.Object) asteriskVersion8);
        java.lang.Class<?> wildcardClass18 = asteriskVersion8.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 10" + "'", str1, "Asterisk 10");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int10 = asteriskVersion6.compareTo(asteriskVersion9);
        org.asteriskjava.pbx.TechType techType11 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean12 = asteriskVersion6.equals((java.lang.Object) techType11);
        boolean boolean13 = asteriskVersion3.isAtLeast(asteriskVersion6);
        boolean boolean14 = asteriskVersion0.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int17 = asteriskVersion15.compareTo(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str19 = asteriskVersion18.toString();
        boolean boolean20 = asteriskVersion16.isAtLeast(asteriskVersion18);
        boolean boolean22 = asteriskVersion16.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean25 = asteriskVersion23.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int27 = asteriskVersion24.compareTo(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean29 = asteriskVersion26.isAtLeast(asteriskVersion28);
        boolean boolean30 = asteriskVersion16.isAtLeast(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int33 = asteriskVersion31.compareTo(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int37 = asteriskVersion35.compareTo(asteriskVersion36);
        boolean boolean38 = asteriskVersion34.isAtLeast(asteriskVersion36);
        int int39 = asteriskVersion31.compareTo(asteriskVersion34);
        java.lang.String str40 = asteriskVersion31.toString();
        java.lang.String str41 = asteriskVersion31.toString();
        int int42 = asteriskVersion16.compareTo(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer44 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer44.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent46 = null;
        htmlEventTracer44.onManagerEvent(managerEvent46);
        boolean boolean48 = asteriskVersion43.equals((java.lang.Object) managerEvent46);
        int int49 = asteriskVersion31.compareTo(asteriskVersion43);
        boolean boolean50 = asteriskVersion0.equals((java.lang.Object) asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int54 = asteriskVersion52.compareTo(asteriskVersion53);
        boolean boolean55 = asteriskVersion51.isAtLeast(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean57 = asteriskVersion51.isAtLeast(asteriskVersion56);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer58 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent59 = null;
        htmlEventTracer58.onManagerEvent(managerEvent59);
        org.asteriskjava.manager.event.ManagerEvent managerEvent61 = null;
        htmlEventTracer58.onManagerEvent(managerEvent61);
        boolean boolean63 = asteriskVersion51.equals((java.lang.Object) htmlEventTracer58);
        boolean boolean64 = asteriskVersion31.equals((java.lang.Object) htmlEventTracer58);
        org.asteriskjava.manager.event.ManagerEvent managerEvent65 = null;
        htmlEventTracer58.onManagerEvent(managerEvent65);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer58.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + techType11 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType11.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Asterisk 1.0" + "'", str19, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 17" + "'", str40, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Asterisk 17" + "'", str41, "Asterisk 17");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean6 = asteriskVersion0.isAtLeast(asteriskVersion5);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer7.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer7.onManagerEvent(managerEvent10);
        boolean boolean12 = asteriskVersion0.equals((java.lang.Object) htmlEventTracer7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent13 = null;
        htmlEventTracer7.onManagerEvent(managerEvent13);
        org.asteriskjava.manager.event.ManagerEvent managerEvent15 = null;
        htmlEventTracer7.onManagerEvent(managerEvent15);
        org.asteriskjava.manager.event.ManagerEvent managerEvent17 = null;
        htmlEventTracer7.onManagerEvent(managerEvent17);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean3 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int5 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_15;
        boolean boolean7 = asteriskVersion0.isAtLeast(asteriskVersion6);
        org.asteriskjava.pbx.ListenerPriority listenerPriority8 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int10 = listenerPriority8.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int12 = listenerPriority9.compare(listenerPriority11);
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int14 = listenerPriority9.compare(listenerPriority13);
        boolean boolean15 = asteriskVersion0.equals((java.lang.Object) listenerPriority13);
        org.asteriskjava.pbx.ListenerPriority listenerPriority16 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority17 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int18 = listenerPriority16.compare(listenerPriority17);
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int20 = listenerPriority17.compare(listenerPriority19);
        org.asteriskjava.pbx.ListenerPriority listenerPriority21 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority22 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int23 = listenerPriority21.compare(listenerPriority22);
        org.asteriskjava.pbx.ListenerPriority listenerPriority24 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority25 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int26 = listenerPriority24.compare(listenerPriority25);
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int28 = listenerPriority25.compare(listenerPriority27);
        int int29 = listenerPriority22.compare(listenerPriority25);
        org.asteriskjava.pbx.ListenerPriority listenerPriority30 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int32 = listenerPriority30.compare(listenerPriority31);
        int int33 = listenerPriority22.compare(listenerPriority30);
        int int34 = listenerPriority19.compare(listenerPriority30);
        int int35 = listenerPriority13.compare(listenerPriority19);
        java.lang.Class<?> wildcardClass36 = listenerPriority13.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 11" + "'", str1, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority8 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority8.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-6) + "'", int14 == (-6));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority16 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority16.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority17 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority17.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-4) + "'", int20 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority21 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority21.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority22 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority22.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority24 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority24.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority25 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority25.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-4) + "'", int28 == (-4));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority30 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority30.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-2) + "'", int33 == (-2));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean20 = asteriskVersion18.isAtLeast(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int22 = asteriskVersion19.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean24 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int25 = asteriskVersion13.compareTo(asteriskVersion21);
        boolean boolean26 = asteriskVersion0.isAtLeast(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean29 = asteriskVersion27.isAtLeast(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean32 = asteriskVersion30.isAtLeast(asteriskVersion31);
        int int33 = asteriskVersion27.compareTo(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean36 = asteriskVersion34.isAtLeast(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean39 = asteriskVersion37.isAtLeast(asteriskVersion38);
        int int40 = asteriskVersion34.compareTo(asteriskVersion38);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean43 = asteriskVersion41.isAtLeast(asteriskVersion42);
        boolean boolean44 = asteriskVersion38.isAtLeast(asteriskVersion42);
        boolean boolean45 = asteriskVersion27.isAtLeast(asteriskVersion42);
        int int46 = asteriskVersion21.compareTo(asteriskVersion27);
        java.lang.Class<?> wildcardClass47 = asteriskVersion21.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent9 = null;
        htmlEventTracer0.onManagerEvent(managerEvent9);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean6 = asteriskVersion0.isAtLeast(asteriskVersion5);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer7.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer7.onManagerEvent(managerEvent10);
        boolean boolean12 = asteriskVersion0.equals((java.lang.Object) htmlEventTracer7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent13 = null;
        htmlEventTracer7.onManagerEvent(managerEvent13);
        org.asteriskjava.manager.event.ManagerEvent managerEvent15 = null;
        htmlEventTracer7.onManagerEvent(managerEvent15);
        org.asteriskjava.manager.event.ManagerEvent managerEvent17 = null;
        htmlEventTracer7.onManagerEvent(managerEvent17);
        org.asteriskjava.manager.event.ManagerEvent managerEvent19 = null;
        htmlEventTracer7.onManagerEvent(managerEvent19);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int6 = listenerPriority1.compare(listenerPriority5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        int int13 = asteriskVersion7.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        boolean boolean17 = asteriskVersion11.isAtLeast(asteriskVersion15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean19 = asteriskVersion11.equals((java.lang.Object) listenerPriority18);
        int int20 = listenerPriority5.compare(listenerPriority18);
        java.lang.Class<?> wildcardClass21 = listenerPriority5.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-6) + "'", int6 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.REALTIME;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int6 = listenerPriority4.compare(listenerPriority5);
        org.asteriskjava.pbx.ListenerPriority listenerPriority7 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority8 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int9 = listenerPriority7.compare(listenerPriority8);
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int11 = listenerPriority8.compare(listenerPriority10);
        int int12 = listenerPriority5.compare(listenerPriority8);
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int15 = listenerPriority13.compare(listenerPriority14);
        int int16 = listenerPriority5.compare(listenerPriority13);
        int int17 = listenerPriority3.compare(listenerPriority5);
        int int18 = listenerPriority1.compare(listenerPriority5);
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int21 = listenerPriority19.compare(listenerPriority20);
        org.asteriskjava.pbx.ListenerPriority listenerPriority22 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int23 = listenerPriority20.compare(listenerPriority22);
        org.asteriskjava.pbx.ListenerPriority listenerPriority24 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority25 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int26 = listenerPriority24.compare(listenerPriority25);
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority28 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int29 = listenerPriority27.compare(listenerPriority28);
        org.asteriskjava.pbx.ListenerPriority listenerPriority30 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int31 = listenerPriority28.compare(listenerPriority30);
        int int32 = listenerPriority25.compare(listenerPriority28);
        org.asteriskjava.pbx.ListenerPriority listenerPriority33 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority34 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int35 = listenerPriority33.compare(listenerPriority34);
        int int36 = listenerPriority25.compare(listenerPriority33);
        int int37 = listenerPriority22.compare(listenerPriority33);
        org.asteriskjava.pbx.ListenerPriority listenerPriority38 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority39 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority40 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int41 = listenerPriority39.compare(listenerPriority40);
        org.asteriskjava.pbx.ListenerPriority listenerPriority42 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority43 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int44 = listenerPriority42.compare(listenerPriority43);
        org.asteriskjava.pbx.ListenerPriority listenerPriority45 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int46 = listenerPriority43.compare(listenerPriority45);
        int int47 = listenerPriority40.compare(listenerPriority43);
        org.asteriskjava.pbx.ListenerPriority listenerPriority48 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority49 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int50 = listenerPriority48.compare(listenerPriority49);
        int int51 = listenerPriority40.compare(listenerPriority48);
        int int52 = listenerPriority38.compare(listenerPriority40);
        int int53 = listenerPriority22.compare(listenerPriority40);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int57 = asteriskVersion55.compareTo(asteriskVersion56);
        boolean boolean58 = asteriskVersion54.isAtLeast(asteriskVersion56);
        org.asteriskjava.pbx.ListenerPriority listenerPriority59 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority60 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int61 = listenerPriority59.compare(listenerPriority60);
        org.asteriskjava.pbx.ListenerPriority listenerPriority62 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int63 = listenerPriority60.compare(listenerPriority62);
        org.asteriskjava.pbx.ListenerPriority listenerPriority64 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int65 = listenerPriority60.compare(listenerPriority64);
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean68 = asteriskVersion66.isAtLeast(asteriskVersion67);
        org.asteriskjava.AsteriskVersion asteriskVersion69 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean71 = asteriskVersion69.isAtLeast(asteriskVersion70);
        int int72 = asteriskVersion66.compareTo(asteriskVersion70);
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion74 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean75 = asteriskVersion73.isAtLeast(asteriskVersion74);
        boolean boolean76 = asteriskVersion70.isAtLeast(asteriskVersion74);
        org.asteriskjava.pbx.ListenerPriority listenerPriority77 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean78 = asteriskVersion70.equals((java.lang.Object) listenerPriority77);
        int int79 = listenerPriority64.compare(listenerPriority77);
        boolean boolean80 = asteriskVersion56.equals((java.lang.Object) listenerPriority64);
        int int81 = listenerPriority22.compare(listenerPriority64);
        org.asteriskjava.pbx.ListenerPriority listenerPriority82 = org.asteriskjava.pbx.ListenerPriority.REALTIME;
        org.asteriskjava.pbx.ListenerPriority listenerPriority83 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int84 = listenerPriority82.compare(listenerPriority83);
        int int85 = listenerPriority64.compare(listenerPriority82);
        int int86 = listenerPriority5.compare(listenerPriority64);
        java.lang.Class<?> wildcardClass87 = listenerPriority5.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.REALTIME + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.REALTIME));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-92) + "'", int2 == (-92));
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority7 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority7.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority8 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority8.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-4) + "'", int11 == (-4));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-2) + "'", int16 == (-2));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority22 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority22.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-4) + "'", int23 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority24 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority24.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority25 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority25.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority28 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority28.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority30 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority30.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-4) + "'", int31 == (-4));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority33 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority33.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority34 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority34.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-2) + "'", int36 == (-2));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority38 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority38.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority39 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority39.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority40 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority40.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority42 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority42.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority43 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority43.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority45 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority45.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-4) + "'", int46 == (-4));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority48 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority48.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority49 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority49.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-2) + "'", int51 == (-2));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority59 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority59.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority60 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority60.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority62 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority62.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-4) + "'", int63 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority64 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority64.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-6) + "'", int65 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(asteriskVersion69);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertNotNull(asteriskVersion74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority77 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority77.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-2) + "'", int81 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority82 + "' != '" + org.asteriskjava.pbx.ListenerPriority.REALTIME + "'", listenerPriority82.equals(org.asteriskjava.pbx.ListenerPriority.REALTIME));
        org.junit.Assert.assertTrue("'" + listenerPriority83 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority83.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-92) + "'", int84 == (-92));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 96 + "'", int85 == 96);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-6) + "'", int86 == (-6));
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int15 = asteriskVersion13.compareTo(asteriskVersion14);
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int17 = asteriskVersion13.compareTo(asteriskVersion16);
        boolean boolean18 = asteriskVersion8.isAtLeast(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int21 = asteriskVersion19.compareTo(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str23 = asteriskVersion22.toString();
        boolean boolean24 = asteriskVersion20.isAtLeast(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int27 = asteriskVersion25.compareTo(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str29 = asteriskVersion28.toString();
        boolean boolean30 = asteriskVersion26.isAtLeast(asteriskVersion28);
        boolean boolean32 = asteriskVersion26.equals((java.lang.Object) "0");
        boolean boolean33 = asteriskVersion20.equals((java.lang.Object) asteriskVersion26);
        boolean boolean34 = asteriskVersion16.isAtLeast(asteriskVersion20);
        java.lang.String str35 = asteriskVersion16.toString();
        java.lang.Class<?> wildcardClass36 = asteriskVersion16.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Asterisk 1.0" + "'", str23, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Asterisk 1.0" + "'", str29, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Asterisk 1.6" + "'", str35, "Asterisk 1.6");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str4 = asteriskVersion3.toString();
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str10 = asteriskVersion9.toString();
        boolean boolean11 = asteriskVersion7.isAtLeast(asteriskVersion9);
        boolean boolean13 = asteriskVersion7.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int18 = asteriskVersion15.compareTo(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean20 = asteriskVersion17.isAtLeast(asteriskVersion19);
        boolean boolean21 = asteriskVersion7.isAtLeast(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int24 = asteriskVersion22.compareTo(asteriskVersion23);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int28 = asteriskVersion26.compareTo(asteriskVersion27);
        boolean boolean29 = asteriskVersion25.isAtLeast(asteriskVersion27);
        int int30 = asteriskVersion22.compareTo(asteriskVersion25);
        java.lang.String str31 = asteriskVersion22.toString();
        java.lang.String str32 = asteriskVersion22.toString();
        int int33 = asteriskVersion7.compareTo(asteriskVersion22);
        int int34 = asteriskVersion3.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str36 = asteriskVersion35.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean38 = asteriskVersion35.isAtLeast(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int41 = asteriskVersion39.compareTo(asteriskVersion40);
        boolean boolean42 = asteriskVersion35.isAtLeast(asteriskVersion39);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int45 = asteriskVersion43.compareTo(asteriskVersion44);
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str47 = asteriskVersion46.toString();
        boolean boolean48 = asteriskVersion44.isAtLeast(asteriskVersion46);
        boolean boolean49 = asteriskVersion39.isAtLeast(asteriskVersion44);
        int int50 = asteriskVersion7.compareTo(asteriskVersion39);
        java.lang.Class<?> wildcardClass51 = asteriskVersion7.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Asterisk 1.0" + "'", str4, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Asterisk 1.0" + "'", str10, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Asterisk 17" + "'", str31, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Asterisk 17" + "'", str32, "Asterisk 17");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Asterisk 11" + "'", str36, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Asterisk 1.0" + "'", str47, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int6 = asteriskVersion4.compareTo(asteriskVersion5);
        boolean boolean7 = asteriskVersion3.isAtLeast(asteriskVersion5);
        int int8 = asteriskVersion0.compareTo(asteriskVersion3);
        java.lang.String str9 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int14 = asteriskVersion12.compareTo(asteriskVersion13);
        boolean boolean15 = asteriskVersion11.isAtLeast(asteriskVersion13);
        boolean boolean16 = asteriskVersion10.equals((java.lang.Object) asteriskVersion11);
        int int17 = asteriskVersion0.compareTo(asteriskVersion10);
        java.lang.Class<?> wildcardClass18 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Asterisk 17" + "'", str9, "Asterisk 17");
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int6 = asteriskVersion4.compareTo(asteriskVersion5);
        boolean boolean7 = asteriskVersion3.isAtLeast(asteriskVersion5);
        int int8 = asteriskVersion0.compareTo(asteriskVersion3);
        java.lang.String str9 = asteriskVersion0.toString();
        java.lang.String str10 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean13 = asteriskVersion11.isAtLeast(asteriskVersion12);
        int int14 = asteriskVersion0.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int19 = asteriskVersion17.compareTo(asteriskVersion18);
        boolean boolean20 = asteriskVersion16.isAtLeast(asteriskVersion18);
        boolean boolean21 = asteriskVersion15.equals((java.lang.Object) asteriskVersion16);
        java.lang.String str22 = asteriskVersion16.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int27 = asteriskVersion23.compareTo(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean30 = asteriskVersion28.isAtLeast(asteriskVersion29);
        boolean boolean31 = asteriskVersion26.isAtLeast(asteriskVersion29);
        java.lang.String str32 = asteriskVersion26.toString();
        boolean boolean33 = asteriskVersion16.isAtLeast(asteriskVersion26);
        boolean boolean34 = asteriskVersion11.isAtLeast(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean37 = asteriskVersion35.isAtLeast(asteriskVersion36);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str40 = asteriskVersion39.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean42 = asteriskVersion39.isAtLeast(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str44 = asteriskVersion43.toString();
        int int45 = asteriskVersion39.compareTo(asteriskVersion43);
        boolean boolean46 = asteriskVersion38.isAtLeast(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int50 = asteriskVersion48.compareTo(asteriskVersion49);
        boolean boolean51 = asteriskVersion47.isAtLeast(asteriskVersion49);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean54 = asteriskVersion52.isAtLeast(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int56 = asteriskVersion53.compareTo(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean58 = asteriskVersion55.isAtLeast(asteriskVersion57);
        int int59 = asteriskVersion47.compareTo(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion62 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int63 = asteriskVersion61.compareTo(asteriskVersion62);
        boolean boolean64 = asteriskVersion60.isAtLeast(asteriskVersion62);
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean67 = asteriskVersion65.isAtLeast(asteriskVersion66);
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int69 = asteriskVersion66.compareTo(asteriskVersion68);
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean71 = asteriskVersion68.isAtLeast(asteriskVersion70);
        int int72 = asteriskVersion60.compareTo(asteriskVersion68);
        boolean boolean73 = asteriskVersion47.isAtLeast(asteriskVersion68);
        boolean boolean75 = asteriskVersion47.equals((java.lang.Object) 0);
        int int76 = asteriskVersion43.compareTo(asteriskVersion47);
        boolean boolean77 = asteriskVersion35.equals((java.lang.Object) asteriskVersion47);
        boolean boolean78 = asteriskVersion11.isAtLeast(asteriskVersion47);
        java.lang.Class<?> wildcardClass79 = asteriskVersion11.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Asterisk 17" + "'", str9, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Asterisk 17" + "'", str10, "Asterisk 17");
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Asterisk 12" + "'", str22, "Asterisk 12");
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Asterisk 1.8" + "'", str32, "Asterisk 1.8");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 11" + "'", str40, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Asterisk 14" + "'", str44, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertNotNull(asteriskVersion62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int4 = asteriskVersion1.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean6 = asteriskVersion3.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        int int13 = asteriskVersion7.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        boolean boolean17 = asteriskVersion11.isAtLeast(asteriskVersion15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean19 = asteriskVersion11.equals((java.lang.Object) listenerPriority18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int21 = asteriskVersion11.compareTo(asteriskVersion20);
        boolean boolean22 = asteriskVersion3.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str25 = asteriskVersion24.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean27 = asteriskVersion24.isAtLeast(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean30 = asteriskVersion28.isAtLeast(asteriskVersion29);
        boolean boolean31 = asteriskVersion26.equals((java.lang.Object) asteriskVersion28);
        int int32 = asteriskVersion23.compareTo(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str34 = asteriskVersion33.toString();
        boolean boolean35 = asteriskVersion28.isAtLeast(asteriskVersion33);
        int int36 = asteriskVersion3.compareTo(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = asteriskVersion3.isAtLeast(asteriskVersion37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Asterisk 11" + "'", str25, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Asterisk 14" + "'", str34, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.REALTIME;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority2 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int3 = listenerPriority1.compare(listenerPriority2);
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int5 = listenerPriority2.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int7 = listenerPriority2.compare(listenerPriority6);
        org.asteriskjava.pbx.ListenerPriority listenerPriority8 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int9 = listenerPriority2.compare(listenerPriority8);
        int int10 = listenerPriority0.compare(listenerPriority2);
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.REALTIME;
        org.asteriskjava.pbx.ListenerPriority listenerPriority12 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int13 = listenerPriority11.compare(listenerPriority12);
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int16 = listenerPriority14.compare(listenerPriority15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority17 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int18 = listenerPriority15.compare(listenerPriority17);
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int21 = listenerPriority19.compare(listenerPriority20);
        org.asteriskjava.pbx.ListenerPriority listenerPriority22 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int24 = listenerPriority22.compare(listenerPriority23);
        org.asteriskjava.pbx.ListenerPriority listenerPriority25 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int26 = listenerPriority23.compare(listenerPriority25);
        int int27 = listenerPriority20.compare(listenerPriority23);
        int int28 = listenerPriority17.compare(listenerPriority23);
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority30 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int32 = listenerPriority30.compare(listenerPriority31);
        org.asteriskjava.pbx.ListenerPriority listenerPriority33 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int34 = listenerPriority31.compare(listenerPriority33);
        int int35 = listenerPriority29.compare(listenerPriority31);
        int int36 = listenerPriority23.compare(listenerPriority31);
        int int37 = listenerPriority11.compare(listenerPriority23);
        int int38 = listenerPriority2.compare(listenerPriority11);
        org.asteriskjava.pbx.ListenerPriority listenerPriority39 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int40 = listenerPriority11.compare(listenerPriority39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.REALTIME + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.REALTIME));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority2 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority2.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-4) + "'", int5 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-6) + "'", int7 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority8 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority8.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-4) + "'", int9 == (-4));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-90) + "'", int10 == (-90));
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.REALTIME + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.REALTIME));
        org.junit.Assert.assertTrue("'" + listenerPriority12 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority12.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-92) + "'", int13 == (-92));
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority17 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority17.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-4) + "'", int18 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority22 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority22.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority25 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority25.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-4) + "'", int26 == (-4));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority30 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority30.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority33 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority33.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-4) + "'", int34 == (-4));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-90) + "'", int37 == (-90));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 90 + "'", int38 == 90);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.equals((java.lang.Object) asteriskVersion5);
        int int9 = asteriskVersion0.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int14 = asteriskVersion12.compareTo(asteriskVersion13);
        boolean boolean15 = asteriskVersion11.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int18 = asteriskVersion16.compareTo(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int20 = asteriskVersion16.compareTo(asteriskVersion19);
        org.asteriskjava.pbx.TechType techType21 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean22 = asteriskVersion16.equals((java.lang.Object) techType21);
        boolean boolean23 = asteriskVersion13.isAtLeast(asteriskVersion16);
        boolean boolean24 = asteriskVersion10.isAtLeast(asteriskVersion16);
        int int25 = asteriskVersion0.compareTo(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = asteriskVersion0.isAtLeast(asteriskVersion26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + techType21 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType21.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum1 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str2 = activityStatusEnum1.getDefaultMessage();
        boolean boolean3 = asteriskVersion0.equals((java.lang.Object) str2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str6 = asteriskVersion5.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean8 = asteriskVersion5.isAtLeast(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int12 = asteriskVersion10.compareTo(asteriskVersion11);
        boolean boolean13 = asteriskVersion9.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int18 = asteriskVersion15.compareTo(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean20 = asteriskVersion17.isAtLeast(asteriskVersion19);
        int int21 = asteriskVersion9.compareTo(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int24 = asteriskVersion22.compareTo(asteriskVersion23);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int26 = asteriskVersion22.compareTo(asteriskVersion25);
        boolean boolean27 = asteriskVersion17.isAtLeast(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int30 = asteriskVersion28.compareTo(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str32 = asteriskVersion31.toString();
        boolean boolean33 = asteriskVersion29.isAtLeast(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str38 = asteriskVersion37.toString();
        boolean boolean39 = asteriskVersion35.isAtLeast(asteriskVersion37);
        boolean boolean41 = asteriskVersion35.equals((java.lang.Object) "0");
        boolean boolean42 = asteriskVersion29.equals((java.lang.Object) asteriskVersion35);
        boolean boolean43 = asteriskVersion25.isAtLeast(asteriskVersion29);
        int int44 = asteriskVersion7.compareTo(asteriskVersion25);
        int int45 = asteriskVersion4.compareTo(asteriskVersion25);
        boolean boolean46 = asteriskVersion0.isAtLeast(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str48 = asteriskVersion47.toString();
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer49 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer49.write();
        htmlEventTracer49.write();
        htmlEventTracer49.write();
        htmlEventTracer49.write();
        htmlEventTracer49.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent55 = null;
        htmlEventTracer49.onManagerEvent(managerEvent55);
        org.asteriskjava.manager.event.ManagerEvent managerEvent57 = null;
        htmlEventTracer49.onManagerEvent(managerEvent57);
        org.asteriskjava.manager.event.ManagerEvent managerEvent59 = null;
        htmlEventTracer49.onManagerEvent(managerEvent59);
        org.asteriskjava.manager.event.ManagerEvent managerEvent61 = null;
        htmlEventTracer49.onManagerEvent(managerEvent61);
        org.asteriskjava.manager.event.ManagerEvent managerEvent63 = null;
        htmlEventTracer49.onManagerEvent(managerEvent63);
        org.asteriskjava.manager.event.ManagerEvent managerEvent65 = null;
        htmlEventTracer49.onManagerEvent(managerEvent65);
        boolean boolean67 = asteriskVersion47.equals((java.lang.Object) htmlEventTracer49);
        boolean boolean68 = asteriskVersion25.equals((java.lang.Object) htmlEventTracer49);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer49.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertTrue("'" + activityStatusEnum1 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum1.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Progress" + "'", str2, "Progress");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Asterisk 11" + "'", str6, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Asterisk 1.0" + "'", str32, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Asterisk 1.0" + "'", str38, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Asterisk 1.0" + "'", str48, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        org.asteriskjava.manager.event.ManagerEvent managerEvent1 = null;
        htmlEventTracer0.onManagerEvent(managerEvent1);
        org.asteriskjava.manager.event.ManagerEvent managerEvent3 = null;
        htmlEventTracer0.onManagerEvent(managerEvent3);
        org.asteriskjava.manager.event.ManagerEvent managerEvent5 = null;
        htmlEventTracer0.onManagerEvent(managerEvent5);
        org.asteriskjava.manager.event.ManagerEvent managerEvent7 = null;
        htmlEventTracer0.onManagerEvent(managerEvent7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent9 = null;
        htmlEventTracer0.onManagerEvent(managerEvent9);
        org.asteriskjava.manager.event.ManagerEvent managerEvent11 = null;
        htmlEventTracer0.onManagerEvent(managerEvent11);
        org.asteriskjava.manager.event.ManagerEvent managerEvent13 = null;
        htmlEventTracer0.onManagerEvent(managerEvent13);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int4 = asteriskVersion1.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int7 = asteriskVersion5.compareTo(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str9 = asteriskVersion8.toString();
        boolean boolean10 = asteriskVersion6.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int13 = asteriskVersion11.compareTo(asteriskVersion12);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str15 = asteriskVersion14.toString();
        boolean boolean16 = asteriskVersion12.isAtLeast(asteriskVersion14);
        boolean boolean18 = asteriskVersion12.equals((java.lang.Object) "0");
        boolean boolean19 = asteriskVersion6.equals((java.lang.Object) asteriskVersion12);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int24 = asteriskVersion22.compareTo(asteriskVersion23);
        boolean boolean25 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int26 = asteriskVersion20.compareTo(asteriskVersion21);
        int int27 = asteriskVersion6.compareTo(asteriskVersion20);
        int int28 = asteriskVersion1.compareTo(asteriskVersion6);
        java.lang.Class<?> wildcardClass29 = asteriskVersion6.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Asterisk 1.0" + "'", str9, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Asterisk 1.0" + "'", str15, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int6 = listenerPriority1.compare(listenerPriority5);
        org.asteriskjava.pbx.ListenerPriority listenerPriority7 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int8 = listenerPriority1.compare(listenerPriority7);
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int12 = listenerPriority10.compare(listenerPriority11);
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int15 = listenerPriority13.compare(listenerPriority14);
        org.asteriskjava.pbx.ListenerPriority listenerPriority16 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int17 = listenerPriority14.compare(listenerPriority16);
        int int18 = listenerPriority11.compare(listenerPriority14);
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int21 = listenerPriority19.compare(listenerPriority20);
        int int22 = listenerPriority11.compare(listenerPriority19);
        int int23 = listenerPriority9.compare(listenerPriority11);
        int int24 = listenerPriority7.compare(listenerPriority11);
        org.asteriskjava.pbx.ListenerPriority listenerPriority25 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority26 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int27 = listenerPriority25.compare(listenerPriority26);
        org.asteriskjava.pbx.ListenerPriority listenerPriority28 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int30 = listenerPriority28.compare(listenerPriority29);
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int32 = listenerPriority29.compare(listenerPriority31);
        int int33 = listenerPriority26.compare(listenerPriority29);
        org.asteriskjava.pbx.ListenerPriority listenerPriority34 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority35 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int36 = listenerPriority34.compare(listenerPriority35);
        org.asteriskjava.pbx.ListenerPriority listenerPriority37 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority38 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int39 = listenerPriority37.compare(listenerPriority38);
        org.asteriskjava.pbx.ListenerPriority listenerPriority40 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int41 = listenerPriority38.compare(listenerPriority40);
        int int42 = listenerPriority35.compare(listenerPriority38);
        org.asteriskjava.pbx.ListenerPriority listenerPriority43 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority44 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int45 = listenerPriority43.compare(listenerPriority44);
        int int46 = listenerPriority35.compare(listenerPriority43);
        org.asteriskjava.pbx.ListenerPriority listenerPriority47 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority48 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int49 = listenerPriority47.compare(listenerPriority48);
        int int50 = listenerPriority35.compare(listenerPriority47);
        int int51 = listenerPriority26.compare(listenerPriority47);
        int int52 = listenerPriority11.compare(listenerPriority47);
        java.lang.Class<?> wildcardClass53 = listenerPriority11.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-6) + "'", int6 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority7 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority7.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-4) + "'", int8 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority16 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority16.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-4) + "'", int17 == (-4));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-2) + "'", int22 == (-2));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority25 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority25.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority26 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority26.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority28 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority28.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-4) + "'", int32 == (-4));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority34 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority34.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority35 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority35.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority37 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority37.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority38 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority38.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority40 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority40.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-4) + "'", int41 == (-4));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority43 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority43.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority44 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority44.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-2) + "'", int46 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority47 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority47.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority48 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority48.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-2) + "'", int50 == (-2));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-2) + "'", int51 == (-2));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-2) + "'", int52 == (-2));
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        int int13 = asteriskVersion7.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        boolean boolean17 = asteriskVersion11.isAtLeast(asteriskVersion15);
        boolean boolean18 = asteriskVersion0.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean21 = asteriskVersion19.isAtLeast(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int23 = asteriskVersion20.compareTo(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int26 = asteriskVersion24.compareTo(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str28 = asteriskVersion27.toString();
        boolean boolean29 = asteriskVersion25.isAtLeast(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int32 = asteriskVersion30.compareTo(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str34 = asteriskVersion33.toString();
        boolean boolean35 = asteriskVersion31.isAtLeast(asteriskVersion33);
        boolean boolean37 = asteriskVersion31.equals((java.lang.Object) "0");
        boolean boolean38 = asteriskVersion25.equals((java.lang.Object) asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int43 = asteriskVersion41.compareTo(asteriskVersion42);
        boolean boolean44 = asteriskVersion40.isAtLeast(asteriskVersion42);
        int int45 = asteriskVersion39.compareTo(asteriskVersion40);
        int int46 = asteriskVersion25.compareTo(asteriskVersion39);
        int int47 = asteriskVersion20.compareTo(asteriskVersion25);
        java.lang.String str48 = asteriskVersion25.toString();
        boolean boolean49 = asteriskVersion15.isAtLeast(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean52 = asteriskVersion50.isAtLeast(asteriskVersion51);
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean55 = asteriskVersion53.isAtLeast(asteriskVersion54);
        int int56 = asteriskVersion50.compareTo(asteriskVersion54);
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean59 = asteriskVersion57.isAtLeast(asteriskVersion58);
        boolean boolean60 = asteriskVersion54.isAtLeast(asteriskVersion58);
        org.asteriskjava.pbx.TechType techType61 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean62 = asteriskVersion54.equals((java.lang.Object) techType61);
        org.asteriskjava.AsteriskVersion asteriskVersion63 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int65 = asteriskVersion63.compareTo(asteriskVersion64);
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str67 = asteriskVersion66.toString();
        boolean boolean68 = asteriskVersion64.isAtLeast(asteriskVersion66);
        boolean boolean70 = asteriskVersion64.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion71 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion72 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean73 = asteriskVersion71.isAtLeast(asteriskVersion72);
        org.asteriskjava.AsteriskVersion asteriskVersion74 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int75 = asteriskVersion72.compareTo(asteriskVersion74);
        org.asteriskjava.AsteriskVersion asteriskVersion76 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean77 = asteriskVersion74.isAtLeast(asteriskVersion76);
        boolean boolean78 = asteriskVersion64.isAtLeast(asteriskVersion74);
        org.asteriskjava.AsteriskVersion asteriskVersion79 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion80 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean81 = asteriskVersion79.isAtLeast(asteriskVersion80);
        boolean boolean82 = asteriskVersion64.isAtLeast(asteriskVersion80);
        boolean boolean83 = asteriskVersion54.equals((java.lang.Object) asteriskVersion64);
        boolean boolean84 = asteriskVersion15.equals((java.lang.Object) boolean83);
        java.lang.Class<?> wildcardClass85 = asteriskVersion15.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Asterisk 1.0" + "'", str28, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Asterisk 1.0" + "'", str34, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Asterisk 16" + "'", str48, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + techType61 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType61.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(asteriskVersion63);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Asterisk 1.0" + "'", str67, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(asteriskVersion71);
        org.junit.Assert.assertNotNull(asteriskVersion72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(asteriskVersion74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(asteriskVersion79);
        org.junit.Assert.assertNotNull(asteriskVersion80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean3 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int5 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int7 = asteriskVersion4.compareTo(asteriskVersion6);
        boolean boolean9 = asteriskVersion6.equals((java.lang.Object) (short) -1);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        java.lang.String str11 = asteriskVersion10.toString();
        org.asteriskjava.pbx.ListenerPriority listenerPriority12 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int14 = listenerPriority12.compare(listenerPriority13);
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int16 = listenerPriority13.compare(listenerPriority15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority17 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int18 = listenerPriority13.compare(listenerPriority17);
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int20 = listenerPriority13.compare(listenerPriority19);
        org.asteriskjava.pbx.ListenerPriority listenerPriority21 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority22 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int24 = listenerPriority22.compare(listenerPriority23);
        org.asteriskjava.pbx.ListenerPriority listenerPriority25 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority26 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int27 = listenerPriority25.compare(listenerPriority26);
        org.asteriskjava.pbx.ListenerPriority listenerPriority28 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int29 = listenerPriority26.compare(listenerPriority28);
        int int30 = listenerPriority23.compare(listenerPriority26);
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int33 = listenerPriority31.compare(listenerPriority32);
        int int34 = listenerPriority23.compare(listenerPriority31);
        int int35 = listenerPriority21.compare(listenerPriority23);
        int int36 = listenerPriority19.compare(listenerPriority23);
        org.asteriskjava.pbx.ListenerPriority listenerPriority37 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority38 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int39 = listenerPriority37.compare(listenerPriority38);
        org.asteriskjava.pbx.ListenerPriority listenerPriority40 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int41 = listenerPriority38.compare(listenerPriority40);
        int int42 = listenerPriority19.compare(listenerPriority38);
        boolean boolean43 = asteriskVersion10.equals((java.lang.Object) listenerPriority38);
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int46 = asteriskVersion44.compareTo(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int48 = asteriskVersion44.compareTo(asteriskVersion47);
        java.lang.String str49 = asteriskVersion44.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int52 = asteriskVersion50.compareTo(asteriskVersion51);
        java.lang.String str53 = asteriskVersion51.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str56 = asteriskVersion55.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean58 = asteriskVersion55.isAtLeast(asteriskVersion57);
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int62 = asteriskVersion60.compareTo(asteriskVersion61);
        boolean boolean63 = asteriskVersion59.isAtLeast(asteriskVersion61);
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean66 = asteriskVersion64.isAtLeast(asteriskVersion65);
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int68 = asteriskVersion65.compareTo(asteriskVersion67);
        org.asteriskjava.AsteriskVersion asteriskVersion69 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean70 = asteriskVersion67.isAtLeast(asteriskVersion69);
        int int71 = asteriskVersion59.compareTo(asteriskVersion67);
        org.asteriskjava.AsteriskVersion asteriskVersion72 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int74 = asteriskVersion72.compareTo(asteriskVersion73);
        org.asteriskjava.AsteriskVersion asteriskVersion75 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int76 = asteriskVersion72.compareTo(asteriskVersion75);
        boolean boolean77 = asteriskVersion67.isAtLeast(asteriskVersion75);
        org.asteriskjava.AsteriskVersion asteriskVersion78 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion79 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int80 = asteriskVersion78.compareTo(asteriskVersion79);
        org.asteriskjava.AsteriskVersion asteriskVersion81 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str82 = asteriskVersion81.toString();
        boolean boolean83 = asteriskVersion79.isAtLeast(asteriskVersion81);
        org.asteriskjava.AsteriskVersion asteriskVersion84 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion85 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int86 = asteriskVersion84.compareTo(asteriskVersion85);
        org.asteriskjava.AsteriskVersion asteriskVersion87 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str88 = asteriskVersion87.toString();
        boolean boolean89 = asteriskVersion85.isAtLeast(asteriskVersion87);
        boolean boolean91 = asteriskVersion85.equals((java.lang.Object) "0");
        boolean boolean92 = asteriskVersion79.equals((java.lang.Object) asteriskVersion85);
        boolean boolean93 = asteriskVersion75.isAtLeast(asteriskVersion79);
        int int94 = asteriskVersion57.compareTo(asteriskVersion75);
        int int95 = asteriskVersion54.compareTo(asteriskVersion75);
        int int96 = asteriskVersion51.compareTo(asteriskVersion75);
        boolean boolean97 = asteriskVersion44.isAtLeast(asteriskVersion51);
        boolean boolean98 = asteriskVersion10.isAtLeast(asteriskVersion44);
        boolean boolean99 = asteriskVersion6.isAtLeast(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 11" + "'", str1, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Asterisk 12" + "'", str11, "Asterisk 12");
        org.junit.Assert.assertTrue("'" + listenerPriority12 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority12.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-4) + "'", int16 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority17 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority17.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-6) + "'", int18 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-4) + "'", int20 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority21 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority21.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority22 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority22.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority25 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority25.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority26 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority26.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority28 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority28.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-4) + "'", int29 == (-4));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-2) + "'", int34 == (-2));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority37 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority37.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority38 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority38.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority40 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority40.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-4) + "'", int41 == (-4));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Asterisk 13" + "'", str49, "Asterisk 13");
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Asterisk 16" + "'", str53, "Asterisk 16");
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Asterisk 11" + "'", str56, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion72);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(asteriskVersion78);
        org.junit.Assert.assertNotNull(asteriskVersion79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Asterisk 1.0" + "'", str82, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(asteriskVersion84);
        org.junit.Assert.assertNotNull(asteriskVersion85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Asterisk 1.0" + "'", str88, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str4 = asteriskVersion3.toString();
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        boolean boolean7 = asteriskVersion1.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int10 = asteriskVersion8.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str12 = asteriskVersion11.toString();
        boolean boolean13 = asteriskVersion9.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str18 = asteriskVersion17.toString();
        boolean boolean19 = asteriskVersion15.isAtLeast(asteriskVersion17);
        boolean boolean21 = asteriskVersion15.equals((java.lang.Object) "0");
        boolean boolean22 = asteriskVersion9.equals((java.lang.Object) asteriskVersion15);
        boolean boolean23 = asteriskVersion1.isAtLeast(asteriskVersion15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority24 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority25 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int26 = listenerPriority24.compare(listenerPriority25);
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int28 = listenerPriority25.compare(listenerPriority27);
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int30 = listenerPriority25.compare(listenerPriority29);
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int32 = listenerPriority25.compare(listenerPriority31);
        boolean boolean33 = asteriskVersion15.equals((java.lang.Object) listenerPriority25);
        org.asteriskjava.pbx.ListenerPriority listenerPriority34 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority35 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int36 = listenerPriority34.compare(listenerPriority35);
        org.asteriskjava.pbx.ListenerPriority listenerPriority37 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority38 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int39 = listenerPriority37.compare(listenerPriority38);
        org.asteriskjava.pbx.ListenerPriority listenerPriority40 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int41 = listenerPriority38.compare(listenerPriority40);
        int int42 = listenerPriority35.compare(listenerPriority38);
        int int43 = listenerPriority25.compare(listenerPriority38);
        java.lang.Class<?> wildcardClass44 = listenerPriority38.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Asterisk 1.0" + "'", str4, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Asterisk 1.0" + "'", str12, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Asterisk 1.0" + "'", str18, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority24 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority24.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority25 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority25.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-4) + "'", int28 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-6) + "'", int30 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-4) + "'", int32 == (-4));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority34 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority34.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority35 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority35.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority37 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority37.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority38 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority38.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority40 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority40.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-4) + "'", int41 == (-4));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer7.write();
        boolean boolean9 = asteriskVersion4.equals((java.lang.Object) htmlEventTracer7);
        htmlEventTracer7.write();
        htmlEventTracer7.write();
        htmlEventTracer7.write();
        htmlEventTracer7.write();
        htmlEventTracer7.write();
        htmlEventTracer7.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent16 = null;
        htmlEventTracer7.onManagerEvent(managerEvent16);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        boolean boolean6 = asteriskVersion0.equals((java.lang.Object) asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int11 = asteriskVersion8.compareTo(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int14 = asteriskVersion12.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str16 = asteriskVersion15.toString();
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int20 = asteriskVersion18.compareTo(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str22 = asteriskVersion21.toString();
        boolean boolean23 = asteriskVersion19.isAtLeast(asteriskVersion21);
        boolean boolean25 = asteriskVersion19.equals((java.lang.Object) "0");
        boolean boolean26 = asteriskVersion13.equals((java.lang.Object) asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int31 = asteriskVersion29.compareTo(asteriskVersion30);
        boolean boolean32 = asteriskVersion28.isAtLeast(asteriskVersion30);
        int int33 = asteriskVersion27.compareTo(asteriskVersion28);
        int int34 = asteriskVersion13.compareTo(asteriskVersion27);
        int int35 = asteriskVersion8.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int38 = asteriskVersion36.compareTo(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str40 = asteriskVersion39.toString();
        boolean boolean41 = asteriskVersion37.isAtLeast(asteriskVersion39);
        boolean boolean43 = asteriskVersion37.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean46 = asteriskVersion44.isAtLeast(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int48 = asteriskVersion45.compareTo(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean50 = asteriskVersion47.isAtLeast(asteriskVersion49);
        boolean boolean51 = asteriskVersion37.isAtLeast(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int54 = asteriskVersion52.compareTo(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int58 = asteriskVersion56.compareTo(asteriskVersion57);
        boolean boolean59 = asteriskVersion55.isAtLeast(asteriskVersion57);
        int int60 = asteriskVersion52.compareTo(asteriskVersion55);
        java.lang.String str61 = asteriskVersion52.toString();
        java.lang.String str62 = asteriskVersion52.toString();
        int int63 = asteriskVersion37.compareTo(asteriskVersion52);
        boolean boolean64 = asteriskVersion8.isAtLeast(asteriskVersion37);
        boolean boolean65 = asteriskVersion0.equals((java.lang.Object) asteriskVersion37);
        java.lang.String str66 = asteriskVersion0.toString();
        java.lang.Class<?> wildcardClass67 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Asterisk 1.0" + "'", str16, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Asterisk 1.0" + "'", str22, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 1.0" + "'", str40, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Asterisk 17" + "'", str61, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Asterisk 17" + "'", str62, "Asterisk 17");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Asterisk 16" + "'", str66, "Asterisk 16");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent4 = null;
        htmlEventTracer0.onManagerEvent(managerEvent4);
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer0.onManagerEvent(managerEvent10);
        org.asteriskjava.manager.event.ManagerEvent managerEvent12 = null;
        htmlEventTracer0.onManagerEvent(managerEvent12);
        org.asteriskjava.manager.event.ManagerEvent managerEvent14 = null;
        htmlEventTracer0.onManagerEvent(managerEvent14);
        org.asteriskjava.manager.event.ManagerEvent managerEvent16 = null;
        htmlEventTracer0.onManagerEvent(managerEvent16);
        org.asteriskjava.manager.event.ManagerEvent managerEvent18 = null;
        htmlEventTracer0.onManagerEvent(managerEvent18);
        java.lang.Class<?> wildcardClass20 = htmlEventTracer0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        int int3 = asteriskVersion0.compareTo(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean6 = asteriskVersion4.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        int int10 = asteriskVersion4.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean13 = asteriskVersion11.isAtLeast(asteriskVersion12);
        boolean boolean14 = asteriskVersion8.isAtLeast(asteriskVersion12);
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean16 = asteriskVersion8.equals((java.lang.Object) listenerPriority15);
        boolean boolean17 = asteriskVersion2.equals((java.lang.Object) asteriskVersion8);
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int20 = listenerPriority18.compare(listenerPriority19);
        org.asteriskjava.pbx.ListenerPriority listenerPriority21 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority22 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int23 = listenerPriority21.compare(listenerPriority22);
        org.asteriskjava.pbx.ListenerPriority listenerPriority24 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int25 = listenerPriority22.compare(listenerPriority24);
        int int26 = listenerPriority19.compare(listenerPriority22);
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority28 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int29 = listenerPriority27.compare(listenerPriority28);
        int int30 = listenerPriority19.compare(listenerPriority27);
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int33 = listenerPriority31.compare(listenerPriority32);
        int int34 = listenerPriority19.compare(listenerPriority31);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int38 = asteriskVersion36.compareTo(asteriskVersion37);
        boolean boolean39 = asteriskVersion35.isAtLeast(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean42 = asteriskVersion40.isAtLeast(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int44 = asteriskVersion41.compareTo(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean46 = asteriskVersion43.isAtLeast(asteriskVersion45);
        int int47 = asteriskVersion35.compareTo(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int51 = asteriskVersion49.compareTo(asteriskVersion50);
        boolean boolean52 = asteriskVersion48.isAtLeast(asteriskVersion50);
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean55 = asteriskVersion53.isAtLeast(asteriskVersion54);
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int57 = asteriskVersion54.compareTo(asteriskVersion56);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean59 = asteriskVersion56.isAtLeast(asteriskVersion58);
        int int60 = asteriskVersion48.compareTo(asteriskVersion56);
        boolean boolean61 = asteriskVersion35.isAtLeast(asteriskVersion56);
        boolean boolean63 = asteriskVersion35.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean65 = asteriskVersion35.isAtLeast(asteriskVersion64);
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean68 = asteriskVersion66.isAtLeast(asteriskVersion67);
        org.asteriskjava.AsteriskVersion asteriskVersion69 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean71 = asteriskVersion69.isAtLeast(asteriskVersion70);
        int int72 = asteriskVersion66.compareTo(asteriskVersion70);
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion74 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean75 = asteriskVersion73.isAtLeast(asteriskVersion74);
        boolean boolean76 = asteriskVersion70.isAtLeast(asteriskVersion74);
        org.asteriskjava.pbx.ListenerPriority listenerPriority77 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean78 = asteriskVersion70.equals((java.lang.Object) listenerPriority77);
        boolean boolean79 = asteriskVersion35.equals((java.lang.Object) listenerPriority77);
        int int80 = listenerPriority19.compare(listenerPriority77);
        boolean boolean81 = asteriskVersion8.equals((java.lang.Object) listenerPriority77);
        org.asteriskjava.AsteriskVersion asteriskVersion82 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str83 = asteriskVersion82.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion84 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean85 = asteriskVersion82.isAtLeast(asteriskVersion84);
        org.asteriskjava.AsteriskVersion asteriskVersion86 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int87 = asteriskVersion82.compareTo(asteriskVersion86);
        org.asteriskjava.AsteriskVersion asteriskVersion88 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion89 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean90 = asteriskVersion88.isAtLeast(asteriskVersion89);
        boolean boolean91 = asteriskVersion82.isAtLeast(asteriskVersion89);
        boolean boolean92 = asteriskVersion8.equals((java.lang.Object) asteriskVersion89);
        java.lang.Class<?> wildcardClass93 = asteriskVersion89.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 10" + "'", str1, "Asterisk 10");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority21 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority21.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority22 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority22.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority24 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority24.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-4) + "'", int25 == (-4));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority28 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority28.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-2) + "'", int30 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-2) + "'", int34 == (-2));
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(asteriskVersion69);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertNotNull(asteriskVersion74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority77 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority77.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-6) + "'", int80 == (-6));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(asteriskVersion82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Asterisk 11" + "'", str83, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(asteriskVersion86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion88);
        org.junit.Assert.assertNotNull(asteriskVersion89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int4 = asteriskVersion0.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        boolean boolean10 = asteriskVersion3.equals((java.lang.Object) asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str12 = asteriskVersion11.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean14 = asteriskVersion11.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int16 = asteriskVersion11.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int18 = asteriskVersion15.compareTo(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str21 = asteriskVersion20.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean23 = asteriskVersion20.isAtLeast(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean26 = asteriskVersion24.isAtLeast(asteriskVersion25);
        boolean boolean27 = asteriskVersion22.equals((java.lang.Object) asteriskVersion24);
        int int28 = asteriskVersion19.compareTo(asteriskVersion24);
        boolean boolean29 = asteriskVersion17.equals((java.lang.Object) int28);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        java.lang.String str31 = asteriskVersion30.toString();
        int int32 = asteriskVersion17.compareTo(asteriskVersion30);
        int int33 = asteriskVersion9.compareTo(asteriskVersion17);
        java.lang.Class<?> wildcardClass34 = asteriskVersion17.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Asterisk 11" + "'", str12, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 11" + "'", str21, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Asterisk 1.8" + "'", str31, "Asterisk 1.8");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        boolean boolean2 = asteriskVersion0.equals((java.lang.Object) "Asterisk 18");
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_18;
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int6 = listenerPriority4.compare(listenerPriority5);
        org.asteriskjava.pbx.ListenerPriority listenerPriority7 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int8 = listenerPriority5.compare(listenerPriority7);
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int11 = listenerPriority9.compare(listenerPriority10);
        org.asteriskjava.pbx.ListenerPriority listenerPriority12 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int14 = listenerPriority12.compare(listenerPriority13);
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int16 = listenerPriority13.compare(listenerPriority15);
        int int17 = listenerPriority10.compare(listenerPriority13);
        int int18 = listenerPriority7.compare(listenerPriority13);
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority21 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int22 = listenerPriority20.compare(listenerPriority21);
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int24 = listenerPriority21.compare(listenerPriority23);
        int int25 = listenerPriority19.compare(listenerPriority21);
        int int26 = listenerPriority13.compare(listenerPriority21);
        boolean boolean27 = asteriskVersion3.equals((java.lang.Object) int26);
        boolean boolean28 = asteriskVersion0.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int31 = asteriskVersion29.compareTo(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int35 = asteriskVersion33.compareTo(asteriskVersion34);
        boolean boolean36 = asteriskVersion32.isAtLeast(asteriskVersion34);
        int int37 = asteriskVersion29.compareTo(asteriskVersion32);
        java.lang.String str38 = asteriskVersion29.toString();
        java.lang.String str39 = asteriskVersion29.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean42 = asteriskVersion40.isAtLeast(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int44 = asteriskVersion40.compareTo(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str46 = asteriskVersion45.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int49 = asteriskVersion47.compareTo(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int51 = asteriskVersion47.compareTo(asteriskVersion50);
        org.asteriskjava.pbx.TechType techType52 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean53 = asteriskVersion47.equals((java.lang.Object) techType52);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        boolean boolean55 = asteriskVersion47.equals((java.lang.Object) asteriskVersion54);
        int int56 = asteriskVersion45.compareTo(asteriskVersion47);
        boolean boolean57 = asteriskVersion40.isAtLeast(asteriskVersion45);
        boolean boolean58 = asteriskVersion29.isAtLeast(asteriskVersion45);
        java.lang.String str59 = asteriskVersion45.toString();
        boolean boolean60 = asteriskVersion0.isAtLeast(asteriskVersion45);
        java.lang.Class<?> wildcardClass61 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority7 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority7.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-4) + "'", int8 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority12 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority12.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-4) + "'", int16 == (-4));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority21 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority21.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-4) + "'", int24 == (-4));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Asterisk 17" + "'", str38, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Asterisk 17" + "'", str39, "Asterisk 17");
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Asterisk 1.0" + "'", str46, "Asterisk 1.0");
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + techType52 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType52.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Asterisk 1.0" + "'", str59, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int5 = asteriskVersion3.compareTo(asteriskVersion4);
        boolean boolean6 = asteriskVersion2.isAtLeast(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int9 = asteriskVersion7.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int11 = asteriskVersion7.compareTo(asteriskVersion10);
        java.lang.String str12 = asteriskVersion10.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int15 = asteriskVersion13.compareTo(asteriskVersion14);
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int17 = asteriskVersion13.compareTo(asteriskVersion16);
        org.asteriskjava.pbx.TechType techType18 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean19 = asteriskVersion13.equals((java.lang.Object) techType18);
        boolean boolean20 = asteriskVersion10.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int24 = asteriskVersion22.compareTo(asteriskVersion23);
        boolean boolean25 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int26 = asteriskVersion13.compareTo(asteriskVersion21);
        java.lang.Object obj27 = null;
        boolean boolean28 = asteriskVersion13.equals(obj27);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int32 = asteriskVersion30.compareTo(asteriskVersion31);
        boolean boolean33 = asteriskVersion29.isAtLeast(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        boolean boolean37 = asteriskVersion29.isAtLeast(asteriskVersion34);
        int int38 = asteriskVersion13.compareTo(asteriskVersion29);
        boolean boolean39 = asteriskVersion4.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int43 = asteriskVersion41.compareTo(asteriskVersion42);
        boolean boolean44 = asteriskVersion40.isAtLeast(asteriskVersion42);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean46 = asteriskVersion40.isAtLeast(asteriskVersion45);
        boolean boolean47 = asteriskVersion13.equals((java.lang.Object) boolean46);
        boolean boolean48 = asteriskVersion0.isAtLeast(asteriskVersion13);
        java.lang.Class<?> wildcardClass49 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 16" + "'", str1, "Asterisk 16");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Asterisk 1.8" + "'", str12, "Asterisk 1.8");
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + techType18 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType18.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int7 = listenerPriority5.compare(listenerPriority6);
        org.asteriskjava.pbx.ListenerPriority listenerPriority8 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int9 = listenerPriority6.compare(listenerPriority8);
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int11 = listenerPriority6.compare(listenerPriority10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean17 = asteriskVersion15.isAtLeast(asteriskVersion16);
        int int18 = asteriskVersion12.compareTo(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean21 = asteriskVersion19.isAtLeast(asteriskVersion20);
        boolean boolean22 = asteriskVersion16.isAtLeast(asteriskVersion20);
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean24 = asteriskVersion16.equals((java.lang.Object) listenerPriority23);
        int int25 = listenerPriority10.compare(listenerPriority23);
        boolean boolean26 = asteriskVersion2.equals((java.lang.Object) listenerPriority10);
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int28 = listenerPriority10.compare(listenerPriority27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority8 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority8.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-4) + "'", int9 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-6) + "'", int11 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str4 = asteriskVersion3.toString();
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        boolean boolean7 = asteriskVersion1.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean10 = asteriskVersion8.isAtLeast(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int12 = asteriskVersion9.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean14 = asteriskVersion11.isAtLeast(asteriskVersion13);
        boolean boolean15 = asteriskVersion1.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int18 = asteriskVersion16.compareTo(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int22 = asteriskVersion20.compareTo(asteriskVersion21);
        boolean boolean23 = asteriskVersion19.isAtLeast(asteriskVersion21);
        int int24 = asteriskVersion16.compareTo(asteriskVersion19);
        java.lang.String str25 = asteriskVersion16.toString();
        java.lang.String str26 = asteriskVersion16.toString();
        int int27 = asteriskVersion1.compareTo(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean30 = asteriskVersion28.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int32 = asteriskVersion29.compareTo(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int35 = asteriskVersion33.compareTo(asteriskVersion34);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str37 = asteriskVersion36.toString();
        boolean boolean38 = asteriskVersion34.isAtLeast(asteriskVersion36);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int41 = asteriskVersion39.compareTo(asteriskVersion40);
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str43 = asteriskVersion42.toString();
        boolean boolean44 = asteriskVersion40.isAtLeast(asteriskVersion42);
        boolean boolean46 = asteriskVersion40.equals((java.lang.Object) "0");
        boolean boolean47 = asteriskVersion34.equals((java.lang.Object) asteriskVersion40);
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int52 = asteriskVersion50.compareTo(asteriskVersion51);
        boolean boolean53 = asteriskVersion49.isAtLeast(asteriskVersion51);
        int int54 = asteriskVersion48.compareTo(asteriskVersion49);
        int int55 = asteriskVersion34.compareTo(asteriskVersion48);
        int int56 = asteriskVersion29.compareTo(asteriskVersion34);
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int59 = asteriskVersion57.compareTo(asteriskVersion58);
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str61 = asteriskVersion60.toString();
        boolean boolean62 = asteriskVersion58.isAtLeast(asteriskVersion60);
        boolean boolean64 = asteriskVersion58.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean67 = asteriskVersion65.isAtLeast(asteriskVersion66);
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int69 = asteriskVersion66.compareTo(asteriskVersion68);
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean71 = asteriskVersion68.isAtLeast(asteriskVersion70);
        boolean boolean72 = asteriskVersion58.isAtLeast(asteriskVersion68);
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion74 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int75 = asteriskVersion73.compareTo(asteriskVersion74);
        org.asteriskjava.AsteriskVersion asteriskVersion76 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion77 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion78 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int79 = asteriskVersion77.compareTo(asteriskVersion78);
        boolean boolean80 = asteriskVersion76.isAtLeast(asteriskVersion78);
        int int81 = asteriskVersion73.compareTo(asteriskVersion76);
        java.lang.String str82 = asteriskVersion73.toString();
        java.lang.String str83 = asteriskVersion73.toString();
        int int84 = asteriskVersion58.compareTo(asteriskVersion73);
        boolean boolean85 = asteriskVersion29.isAtLeast(asteriskVersion58);
        int int86 = asteriskVersion1.compareTo(asteriskVersion29);
        java.lang.Class<?> wildcardClass87 = asteriskVersion1.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Asterisk 1.0" + "'", str4, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Asterisk 17" + "'", str25, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Asterisk 17" + "'", str26, "Asterisk 17");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Asterisk 1.0" + "'", str37, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Asterisk 1.0" + "'", str43, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Asterisk 1.0" + "'", str61, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertNotNull(asteriskVersion74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion76);
        org.junit.Assert.assertNotNull(asteriskVersion77);
        org.junit.Assert.assertNotNull(asteriskVersion78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Asterisk 17" + "'", str82, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Asterisk 17" + "'", str83, "Asterisk 17");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer0.onManagerEvent(managerEvent10);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int10 = asteriskVersion6.compareTo(asteriskVersion9);
        org.asteriskjava.pbx.TechType techType11 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean12 = asteriskVersion6.equals((java.lang.Object) techType11);
        boolean boolean13 = asteriskVersion3.isAtLeast(asteriskVersion6);
        boolean boolean14 = asteriskVersion0.isAtLeast(asteriskVersion3);
        java.lang.String str15 = asteriskVersion3.toString();
        java.lang.Class<?> wildcardClass16 = asteriskVersion3.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + techType11 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType11.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Asterisk 16" + "'", str15, "Asterisk 16");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        boolean boolean10 = asteriskVersion4.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean12 = asteriskVersion8.isAtLeast(asteriskVersion11);
        java.lang.String str13 = asteriskVersion11.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int18 = asteriskVersion14.compareTo(asteriskVersion17);
        java.lang.String str19 = asteriskVersion17.toString();
        boolean boolean20 = asteriskVersion11.isAtLeast(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str23 = asteriskVersion22.toString();
        org.asteriskjava.pbx.TechType techType24 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass25 = techType24.getClass();
        boolean boolean26 = asteriskVersion22.equals((java.lang.Object) wildcardClass25);
        int int27 = asteriskVersion21.compareTo(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int30 = asteriskVersion28.compareTo(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str32 = asteriskVersion31.toString();
        boolean boolean33 = asteriskVersion29.isAtLeast(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str38 = asteriskVersion37.toString();
        boolean boolean39 = asteriskVersion35.isAtLeast(asteriskVersion37);
        boolean boolean41 = asteriskVersion35.equals((java.lang.Object) "0");
        boolean boolean42 = asteriskVersion29.equals((java.lang.Object) asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int47 = asteriskVersion45.compareTo(asteriskVersion46);
        boolean boolean48 = asteriskVersion44.isAtLeast(asteriskVersion46);
        int int49 = asteriskVersion43.compareTo(asteriskVersion44);
        int int50 = asteriskVersion29.compareTo(asteriskVersion43);
        java.lang.String str51 = asteriskVersion29.toString();
        boolean boolean52 = asteriskVersion21.equals((java.lang.Object) asteriskVersion29);
        boolean boolean53 = asteriskVersion17.equals((java.lang.Object) asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum55 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str56 = activityStatusEnum55.getDefaultMessage();
        boolean boolean57 = asteriskVersion54.equals((java.lang.Object) str56);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean60 = asteriskVersion58.isAtLeast(asteriskVersion59);
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion62 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean63 = asteriskVersion61.isAtLeast(asteriskVersion62);
        int int64 = asteriskVersion58.compareTo(asteriskVersion62);
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean67 = asteriskVersion65.isAtLeast(asteriskVersion66);
        boolean boolean68 = asteriskVersion62.isAtLeast(asteriskVersion66);
        org.asteriskjava.pbx.ListenerPriority listenerPriority69 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean70 = asteriskVersion62.equals((java.lang.Object) listenerPriority69);
        org.asteriskjava.AsteriskVersion asteriskVersion71 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int72 = asteriskVersion62.compareTo(asteriskVersion71);
        boolean boolean73 = asteriskVersion54.equals((java.lang.Object) asteriskVersion62);
        java.lang.String str74 = asteriskVersion54.toString();
        boolean boolean75 = asteriskVersion17.equals((java.lang.Object) str74);
        java.lang.Class<?> wildcardClass76 = asteriskVersion17.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Asterisk 1.4" + "'", str13, "Asterisk 1.4");
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Asterisk 1.6" + "'", str19, "Asterisk 1.6");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Asterisk 1.0" + "'", str23, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType24 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType24.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Asterisk 1.0" + "'", str32, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Asterisk 1.0" + "'", str38, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Asterisk 16" + "'", str51, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertTrue("'" + activityStatusEnum55 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum55.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Progress" + "'", str56, "Progress");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertNotNull(asteriskVersion62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority69 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority69.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(asteriskVersion71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Asterisk 1.0" + "'", str74, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean3 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int5 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean8 = asteriskVersion6.isAtLeast(asteriskVersion7);
        boolean boolean9 = asteriskVersion0.isAtLeast(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str15 = asteriskVersion14.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean17 = asteriskVersion14.isAtLeast(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str19 = asteriskVersion18.toString();
        int int20 = asteriskVersion14.compareTo(asteriskVersion18);
        boolean boolean21 = asteriskVersion13.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        boolean boolean26 = asteriskVersion22.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean29 = asteriskVersion27.isAtLeast(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int31 = asteriskVersion28.compareTo(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean33 = asteriskVersion30.isAtLeast(asteriskVersion32);
        int int34 = asteriskVersion22.compareTo(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int38 = asteriskVersion36.compareTo(asteriskVersion37);
        boolean boolean39 = asteriskVersion35.isAtLeast(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean42 = asteriskVersion40.isAtLeast(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int44 = asteriskVersion41.compareTo(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean46 = asteriskVersion43.isAtLeast(asteriskVersion45);
        int int47 = asteriskVersion35.compareTo(asteriskVersion43);
        boolean boolean48 = asteriskVersion22.isAtLeast(asteriskVersion43);
        boolean boolean50 = asteriskVersion22.equals((java.lang.Object) 0);
        int int51 = asteriskVersion18.compareTo(asteriskVersion22);
        boolean boolean52 = asteriskVersion10.equals((java.lang.Object) asteriskVersion22);
        boolean boolean53 = asteriskVersion0.equals((java.lang.Object) asteriskVersion10);
        java.lang.Class<?> wildcardClass54 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 11" + "'", str1, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Asterisk 11" + "'", str15, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Asterisk 14" + "'", str19, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent4 = null;
        htmlEventTracer0.onManagerEvent(managerEvent4);
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer0.onManagerEvent(managerEvent10);
        org.asteriskjava.manager.event.ManagerEvent managerEvent12 = null;
        htmlEventTracer0.onManagerEvent(managerEvent12);
        org.asteriskjava.manager.event.ManagerEvent managerEvent14 = null;
        htmlEventTracer0.onManagerEvent(managerEvent14);
        org.asteriskjava.manager.event.ManagerEvent managerEvent16 = null;
        htmlEventTracer0.onManagerEvent(managerEvent16);
        java.lang.Class<?> wildcardClass18 = htmlEventTracer0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean3 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int5 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum7 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str8 = activityStatusEnum7.getDefaultMessage();
        boolean boolean9 = asteriskVersion6.equals((java.lang.Object) str8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str12 = asteriskVersion11.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean14 = asteriskVersion11.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int18 = asteriskVersion16.compareTo(asteriskVersion17);
        boolean boolean19 = asteriskVersion15.isAtLeast(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean22 = asteriskVersion20.isAtLeast(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int24 = asteriskVersion21.compareTo(asteriskVersion23);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean26 = asteriskVersion23.isAtLeast(asteriskVersion25);
        int int27 = asteriskVersion15.compareTo(asteriskVersion23);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int30 = asteriskVersion28.compareTo(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int32 = asteriskVersion28.compareTo(asteriskVersion31);
        boolean boolean33 = asteriskVersion23.isAtLeast(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str38 = asteriskVersion37.toString();
        boolean boolean39 = asteriskVersion35.isAtLeast(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int42 = asteriskVersion40.compareTo(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str44 = asteriskVersion43.toString();
        boolean boolean45 = asteriskVersion41.isAtLeast(asteriskVersion43);
        boolean boolean47 = asteriskVersion41.equals((java.lang.Object) "0");
        boolean boolean48 = asteriskVersion35.equals((java.lang.Object) asteriskVersion41);
        boolean boolean49 = asteriskVersion31.isAtLeast(asteriskVersion35);
        int int50 = asteriskVersion13.compareTo(asteriskVersion31);
        int int51 = asteriskVersion10.compareTo(asteriskVersion31);
        boolean boolean52 = asteriskVersion6.isAtLeast(asteriskVersion31);
        int int53 = asteriskVersion0.compareTo(asteriskVersion31);
        java.lang.Class<?> wildcardClass54 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 11" + "'", str1, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + activityStatusEnum7 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum7.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Progress" + "'", str8, "Progress");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Asterisk 11" + "'", str12, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Asterisk 1.0" + "'", str38, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Asterisk 1.0" + "'", str44, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int7 = listenerPriority5.compare(listenerPriority6);
        org.asteriskjava.pbx.ListenerPriority listenerPriority8 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int10 = listenerPriority8.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int12 = listenerPriority9.compare(listenerPriority11);
        int int13 = listenerPriority6.compare(listenerPriority9);
        int int14 = listenerPriority3.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority16 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority17 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int18 = listenerPriority16.compare(listenerPriority17);
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int20 = listenerPriority17.compare(listenerPriority19);
        int int21 = listenerPriority15.compare(listenerPriority17);
        int int22 = listenerPriority9.compare(listenerPriority17);
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority24 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int25 = listenerPriority23.compare(listenerPriority24);
        org.asteriskjava.pbx.ListenerPriority listenerPriority26 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int27 = listenerPriority24.compare(listenerPriority26);
        org.asteriskjava.pbx.ListenerPriority listenerPriority28 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int29 = listenerPriority24.compare(listenerPriority28);
        org.asteriskjava.pbx.ListenerPriority listenerPriority30 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int32 = listenerPriority30.compare(listenerPriority31);
        org.asteriskjava.pbx.ListenerPriority listenerPriority33 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int34 = listenerPriority31.compare(listenerPriority33);
        org.asteriskjava.pbx.ListenerPriority listenerPriority35 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority36 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int37 = listenerPriority35.compare(listenerPriority36);
        org.asteriskjava.pbx.ListenerPriority listenerPriority38 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority39 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int40 = listenerPriority38.compare(listenerPriority39);
        org.asteriskjava.pbx.ListenerPriority listenerPriority41 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int42 = listenerPriority39.compare(listenerPriority41);
        int int43 = listenerPriority36.compare(listenerPriority39);
        int int44 = listenerPriority33.compare(listenerPriority39);
        org.asteriskjava.pbx.ListenerPriority listenerPriority45 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority46 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority47 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int48 = listenerPriority46.compare(listenerPriority47);
        org.asteriskjava.pbx.ListenerPriority listenerPriority49 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int50 = listenerPriority47.compare(listenerPriority49);
        int int51 = listenerPriority45.compare(listenerPriority47);
        int int52 = listenerPriority39.compare(listenerPriority47);
        int int53 = listenerPriority28.compare(listenerPriority39);
        int int54 = listenerPriority9.compare(listenerPriority39);
        java.lang.Class<?> wildcardClass55 = listenerPriority39.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority8 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority8.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority16 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority16.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority17 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority17.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-4) + "'", int20 == (-4));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority24 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority24.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority26 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority26.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-4) + "'", int27 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority28 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority28.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-6) + "'", int29 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority30 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority30.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority33 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority33.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-4) + "'", int34 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority35 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority35.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority36 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority36.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority38 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority38.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority39 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority39.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority41 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority41.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-4) + "'", int42 == (-4));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority45 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority45.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority46 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority46.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority47 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority47.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority49 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority49.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-4) + "'", int50 == (-4));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int4 = asteriskVersion0.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        int int6 = asteriskVersion3.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str9 = asteriskVersion8.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        boolean boolean15 = asteriskVersion10.equals((java.lang.Object) asteriskVersion12);
        int int16 = asteriskVersion7.compareTo(asteriskVersion12);
        int int17 = asteriskVersion5.compareTo(asteriskVersion7);
        java.lang.String str18 = asteriskVersion5.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int23 = asteriskVersion21.compareTo(asteriskVersion22);
        boolean boolean24 = asteriskVersion20.isAtLeast(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int27 = asteriskVersion25.compareTo(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int29 = asteriskVersion25.compareTo(asteriskVersion28);
        org.asteriskjava.pbx.TechType techType30 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean31 = asteriskVersion25.equals((java.lang.Object) techType30);
        boolean boolean32 = asteriskVersion22.isAtLeast(asteriskVersion25);
        boolean boolean33 = asteriskVersion19.isAtLeast(asteriskVersion22);
        java.lang.String str34 = asteriskVersion22.toString();
        java.lang.String str35 = asteriskVersion22.toString();
        boolean boolean36 = asteriskVersion5.equals((java.lang.Object) str35);
        java.lang.String str37 = asteriskVersion5.toString();
        java.lang.Class<?> wildcardClass38 = asteriskVersion5.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Asterisk 11" + "'", str9, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Asterisk 12" + "'", str18, "Asterisk 12");
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + techType30 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType30.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Asterisk 16" + "'", str34, "Asterisk 16");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Asterisk 16" + "'", str35, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Asterisk 12" + "'", str37, "Asterisk 12");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int7 = listenerPriority5.compare(listenerPriority6);
        org.asteriskjava.pbx.ListenerPriority listenerPriority8 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int10 = listenerPriority8.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int12 = listenerPriority9.compare(listenerPriority11);
        int int13 = listenerPriority6.compare(listenerPriority9);
        org.asteriskjava.pbx.ListenerPriority listenerPriority14 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int16 = listenerPriority14.compare(listenerPriority15);
        int int17 = listenerPriority6.compare(listenerPriority14);
        int int18 = listenerPriority3.compare(listenerPriority14);
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority21 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int22 = listenerPriority20.compare(listenerPriority21);
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority24 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int25 = listenerPriority23.compare(listenerPriority24);
        org.asteriskjava.pbx.ListenerPriority listenerPriority26 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int27 = listenerPriority24.compare(listenerPriority26);
        int int28 = listenerPriority21.compare(listenerPriority24);
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority30 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int31 = listenerPriority29.compare(listenerPriority30);
        int int32 = listenerPriority21.compare(listenerPriority29);
        int int33 = listenerPriority19.compare(listenerPriority21);
        int int34 = listenerPriority3.compare(listenerPriority21);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int38 = asteriskVersion36.compareTo(asteriskVersion37);
        boolean boolean39 = asteriskVersion35.isAtLeast(asteriskVersion37);
        org.asteriskjava.pbx.ListenerPriority listenerPriority40 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority41 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int42 = listenerPriority40.compare(listenerPriority41);
        org.asteriskjava.pbx.ListenerPriority listenerPriority43 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int44 = listenerPriority41.compare(listenerPriority43);
        org.asteriskjava.pbx.ListenerPriority listenerPriority45 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int46 = listenerPriority41.compare(listenerPriority45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean49 = asteriskVersion47.isAtLeast(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean52 = asteriskVersion50.isAtLeast(asteriskVersion51);
        int int53 = asteriskVersion47.compareTo(asteriskVersion51);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean56 = asteriskVersion54.isAtLeast(asteriskVersion55);
        boolean boolean57 = asteriskVersion51.isAtLeast(asteriskVersion55);
        org.asteriskjava.pbx.ListenerPriority listenerPriority58 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean59 = asteriskVersion51.equals((java.lang.Object) listenerPriority58);
        int int60 = listenerPriority45.compare(listenerPriority58);
        boolean boolean61 = asteriskVersion37.equals((java.lang.Object) listenerPriority45);
        int int62 = listenerPriority3.compare(listenerPriority45);
        java.lang.Class<?> wildcardClass63 = listenerPriority45.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority8 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority8.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-4) + "'", int12 == (-4));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority14 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority14.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-2) + "'", int17 == (-2));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority21 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority21.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority24 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority24.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority26 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority26.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-4) + "'", int27 == (-4));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority30 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority30.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-2) + "'", int32 == (-2));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority40 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority40.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority41 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority41.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority43 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority43.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-4) + "'", int44 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority45 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority45.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-6) + "'", int46 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority58 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority58.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-2) + "'", int62 == (-2));
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        boolean boolean9 = asteriskVersion5.isAtLeast(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int14 = asteriskVersion11.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean16 = asteriskVersion13.isAtLeast(asteriskVersion15);
        int int17 = asteriskVersion5.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int20 = asteriskVersion18.compareTo(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int22 = asteriskVersion18.compareTo(asteriskVersion21);
        boolean boolean23 = asteriskVersion13.isAtLeast(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int26 = asteriskVersion24.compareTo(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str28 = asteriskVersion27.toString();
        boolean boolean29 = asteriskVersion25.isAtLeast(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int32 = asteriskVersion30.compareTo(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str34 = asteriskVersion33.toString();
        boolean boolean35 = asteriskVersion31.isAtLeast(asteriskVersion33);
        boolean boolean37 = asteriskVersion31.equals((java.lang.Object) "0");
        boolean boolean38 = asteriskVersion25.equals((java.lang.Object) asteriskVersion31);
        boolean boolean39 = asteriskVersion21.isAtLeast(asteriskVersion25);
        int int40 = asteriskVersion3.compareTo(asteriskVersion21);
        int int41 = asteriskVersion0.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str44 = asteriskVersion43.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean46 = asteriskVersion43.isAtLeast(asteriskVersion45);
        boolean boolean47 = asteriskVersion42.equals((java.lang.Object) boolean46);
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean50 = asteriskVersion48.isAtLeast(asteriskVersion49);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int52 = asteriskVersion48.compareTo(asteriskVersion51);
        int int53 = asteriskVersion42.compareTo(asteriskVersion51);
        int int54 = asteriskVersion0.compareTo(asteriskVersion42);
        java.lang.Class<?> wildcardClass55 = asteriskVersion42.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Asterisk 1.0" + "'", str28, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Asterisk 1.0" + "'", str34, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Asterisk 11" + "'", str44, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum0 = org.asteriskjava.pbx.ActivityStatusEnum.FAILURE;
        java.lang.String str1 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str2 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str3 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str4 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str5 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str6 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str7 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str8 = activityStatusEnum0.getDefaultMessage();
        java.lang.Class<?> wildcardClass9 = activityStatusEnum0.getClass();
        org.junit.Assert.assertTrue("'" + activityStatusEnum0 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.FAILURE + "'", activityStatusEnum0.equals(org.asteriskjava.pbx.ActivityStatusEnum.FAILURE));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Failure" + "'", str1, "Failure");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Failure" + "'", str2, "Failure");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Failure" + "'", str3, "Failure");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Failure" + "'", str4, "Failure");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Failure" + "'", str5, "Failure");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Failure" + "'", str6, "Failure");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Failure" + "'", str7, "Failure");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Failure" + "'", str8, "Failure");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent7 = null;
        htmlEventTracer0.onManagerEvent(managerEvent7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent9 = null;
        htmlEventTracer0.onManagerEvent(managerEvent9);
        org.asteriskjava.manager.event.ManagerEvent managerEvent11 = null;
        htmlEventTracer0.onManagerEvent(managerEvent11);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int10 = asteriskVersion6.compareTo(asteriskVersion9);
        org.asteriskjava.pbx.TechType techType11 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean12 = asteriskVersion6.equals((java.lang.Object) techType11);
        boolean boolean13 = asteriskVersion3.isAtLeast(asteriskVersion6);
        boolean boolean14 = asteriskVersion0.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int17 = asteriskVersion15.compareTo(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int19 = asteriskVersion15.compareTo(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int24 = asteriskVersion22.compareTo(asteriskVersion23);
        boolean boolean25 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int26 = asteriskVersion20.compareTo(asteriskVersion21);
        int int27 = asteriskVersion15.compareTo(asteriskVersion21);
        java.lang.String str28 = asteriskVersion21.toString();
        int int29 = asteriskVersion0.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str31 = asteriskVersion30.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean33 = asteriskVersion30.isAtLeast(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int35 = asteriskVersion30.compareTo(asteriskVersion34);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum37 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str38 = activityStatusEnum37.getDefaultMessage();
        boolean boolean39 = asteriskVersion36.equals((java.lang.Object) str38);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str42 = asteriskVersion41.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean44 = asteriskVersion41.isAtLeast(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int48 = asteriskVersion46.compareTo(asteriskVersion47);
        boolean boolean49 = asteriskVersion45.isAtLeast(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean52 = asteriskVersion50.isAtLeast(asteriskVersion51);
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int54 = asteriskVersion51.compareTo(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean56 = asteriskVersion53.isAtLeast(asteriskVersion55);
        int int57 = asteriskVersion45.compareTo(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int60 = asteriskVersion58.compareTo(asteriskVersion59);
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int62 = asteriskVersion58.compareTo(asteriskVersion61);
        boolean boolean63 = asteriskVersion53.isAtLeast(asteriskVersion61);
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int66 = asteriskVersion64.compareTo(asteriskVersion65);
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str68 = asteriskVersion67.toString();
        boolean boolean69 = asteriskVersion65.isAtLeast(asteriskVersion67);
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion71 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int72 = asteriskVersion70.compareTo(asteriskVersion71);
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str74 = asteriskVersion73.toString();
        boolean boolean75 = asteriskVersion71.isAtLeast(asteriskVersion73);
        boolean boolean77 = asteriskVersion71.equals((java.lang.Object) "0");
        boolean boolean78 = asteriskVersion65.equals((java.lang.Object) asteriskVersion71);
        boolean boolean79 = asteriskVersion61.isAtLeast(asteriskVersion65);
        int int80 = asteriskVersion43.compareTo(asteriskVersion61);
        int int81 = asteriskVersion40.compareTo(asteriskVersion61);
        boolean boolean82 = asteriskVersion36.isAtLeast(asteriskVersion61);
        int int83 = asteriskVersion30.compareTo(asteriskVersion61);
        org.asteriskjava.AsteriskVersion asteriskVersion84 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion85 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int86 = asteriskVersion84.compareTo(asteriskVersion85);
        org.asteriskjava.pbx.TechType techType87 = org.asteriskjava.pbx.TechType.DIALPLAN;
        boolean boolean88 = asteriskVersion85.equals((java.lang.Object) techType87);
        boolean boolean89 = asteriskVersion61.equals((java.lang.Object) asteriskVersion85);
        java.lang.Class<?> wildcardClass90 = asteriskVersion85.getClass();
        boolean boolean91 = asteriskVersion0.equals((java.lang.Object) wildcardClass90);
        java.lang.String str92 = asteriskVersion0.toString();
        java.lang.Class<?> wildcardClass93 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + techType11 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType11.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Asterisk 12" + "'", str28, "Asterisk 12");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Asterisk 11" + "'", str31, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + activityStatusEnum37 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum37.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Progress" + "'", str38, "Progress");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Asterisk 11" + "'", str42, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Asterisk 1.0" + "'", str68, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertNotNull(asteriskVersion71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Asterisk 1.0" + "'", str74, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion84);
        org.junit.Assert.assertNotNull(asteriskVersion85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + techType87 + "' != '" + org.asteriskjava.pbx.TechType.DIALPLAN + "'", techType87.equals(org.asteriskjava.pbx.TechType.DIALPLAN));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Asterisk 1.0" + "'", str92, "Asterisk 1.0");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        java.lang.Class<?> wildcardClass5 = asteriskVersion2.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        int int13 = asteriskVersion7.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        boolean boolean17 = asteriskVersion11.isAtLeast(asteriskVersion15);
        boolean boolean18 = asteriskVersion0.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum20 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str21 = activityStatusEnum20.getDefaultMessage();
        boolean boolean22 = asteriskVersion19.equals((java.lang.Object) str21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean25 = asteriskVersion23.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean28 = asteriskVersion26.isAtLeast(asteriskVersion27);
        int int29 = asteriskVersion23.compareTo(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean32 = asteriskVersion30.isAtLeast(asteriskVersion31);
        boolean boolean33 = asteriskVersion27.isAtLeast(asteriskVersion31);
        org.asteriskjava.pbx.ListenerPriority listenerPriority34 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean35 = asteriskVersion27.equals((java.lang.Object) listenerPriority34);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int37 = asteriskVersion27.compareTo(asteriskVersion36);
        boolean boolean38 = asteriskVersion19.equals((java.lang.Object) asteriskVersion27);
        boolean boolean39 = asteriskVersion15.isAtLeast(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        java.lang.Object obj41 = null;
        boolean boolean42 = asteriskVersion40.equals(obj41);
        boolean boolean43 = asteriskVersion19.isAtLeast(asteriskVersion40);
        org.asteriskjava.pbx.DTMFTone dTMFTone44 = org.asteriskjava.pbx.DTMFTone.HASH;
        java.lang.String str45 = dTMFTone44.toString();
        java.lang.String str46 = dTMFTone44.toString();
        java.lang.String str47 = dTMFTone44.toString();
        java.lang.String str48 = dTMFTone44.toString();
        java.lang.String str49 = dTMFTone44.toString();
        boolean boolean50 = asteriskVersion19.equals((java.lang.Object) str49);
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + activityStatusEnum20 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum20.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Progress" + "'", str21, "Progress");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority34 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority34.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + dTMFTone44 + "' != '" + org.asteriskjava.pbx.DTMFTone.HASH + "'", dTMFTone44.equals(org.asteriskjava.pbx.DTMFTone.HASH));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "#" + "'", str45, "#");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "#" + "'", str46, "#");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "#" + "'", str47, "#");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "#" + "'", str48, "#");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "#" + "'", str49, "#");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        boolean boolean2 = asteriskVersion0.equals((java.lang.Object) "Asterisk 18");
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int5 = asteriskVersion3.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str7 = asteriskVersion6.toString();
        boolean boolean8 = asteriskVersion4.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int11 = asteriskVersion9.compareTo(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str13 = asteriskVersion12.toString();
        boolean boolean14 = asteriskVersion10.isAtLeast(asteriskVersion12);
        boolean boolean16 = asteriskVersion10.equals((java.lang.Object) "0");
        boolean boolean17 = asteriskVersion4.equals((java.lang.Object) asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int22 = asteriskVersion20.compareTo(asteriskVersion21);
        boolean boolean23 = asteriskVersion19.isAtLeast(asteriskVersion21);
        int int24 = asteriskVersion18.compareTo(asteriskVersion19);
        int int25 = asteriskVersion4.compareTo(asteriskVersion18);
        java.lang.String str26 = asteriskVersion4.toString();
        boolean boolean27 = asteriskVersion0.isAtLeast(asteriskVersion4);
        boolean boolean29 = asteriskVersion4.equals((java.lang.Object) "1");
        java.lang.Class<?> wildcardClass30 = asteriskVersion4.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Asterisk 1.0" + "'", str7, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Asterisk 1.0" + "'", str13, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Asterisk 16" + "'", str26, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int6 = asteriskVersion4.compareTo(asteriskVersion5);
        boolean boolean7 = asteriskVersion3.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean10 = asteriskVersion8.isAtLeast(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int12 = asteriskVersion9.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean14 = asteriskVersion11.isAtLeast(asteriskVersion13);
        int int15 = asteriskVersion3.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int19 = asteriskVersion17.compareTo(asteriskVersion18);
        boolean boolean20 = asteriskVersion16.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean23 = asteriskVersion21.isAtLeast(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int25 = asteriskVersion22.compareTo(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean27 = asteriskVersion24.isAtLeast(asteriskVersion26);
        int int28 = asteriskVersion16.compareTo(asteriskVersion24);
        boolean boolean29 = asteriskVersion3.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str32 = asteriskVersion31.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean34 = asteriskVersion31.isAtLeast(asteriskVersion33);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str36 = asteriskVersion35.toString();
        int int37 = asteriskVersion31.compareTo(asteriskVersion35);
        boolean boolean38 = asteriskVersion30.isAtLeast(asteriskVersion35);
        int int39 = asteriskVersion24.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int43 = asteriskVersion41.compareTo(asteriskVersion42);
        boolean boolean44 = asteriskVersion40.isAtLeast(asteriskVersion42);
        org.asteriskjava.pbx.ListenerPriority listenerPriority45 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority46 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int47 = listenerPriority45.compare(listenerPriority46);
        org.asteriskjava.pbx.ListenerPriority listenerPriority48 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int49 = listenerPriority46.compare(listenerPriority48);
        org.asteriskjava.pbx.ListenerPriority listenerPriority50 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int51 = listenerPriority46.compare(listenerPriority50);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean54 = asteriskVersion52.isAtLeast(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean57 = asteriskVersion55.isAtLeast(asteriskVersion56);
        int int58 = asteriskVersion52.compareTo(asteriskVersion56);
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean61 = asteriskVersion59.isAtLeast(asteriskVersion60);
        boolean boolean62 = asteriskVersion56.isAtLeast(asteriskVersion60);
        org.asteriskjava.pbx.ListenerPriority listenerPriority63 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean64 = asteriskVersion56.equals((java.lang.Object) listenerPriority63);
        int int65 = listenerPriority50.compare(listenerPriority63);
        boolean boolean66 = asteriskVersion42.equals((java.lang.Object) listenerPriority50);
        boolean boolean67 = asteriskVersion24.isAtLeast(asteriskVersion42);
        java.lang.String str68 = asteriskVersion24.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion69 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion71 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int72 = asteriskVersion70.compareTo(asteriskVersion71);
        boolean boolean73 = asteriskVersion69.isAtLeast(asteriskVersion71);
        org.asteriskjava.pbx.ListenerPriority listenerPriority74 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority75 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int76 = listenerPriority74.compare(listenerPriority75);
        org.asteriskjava.pbx.ListenerPriority listenerPriority77 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int78 = listenerPriority75.compare(listenerPriority77);
        org.asteriskjava.pbx.ListenerPriority listenerPriority79 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int80 = listenerPriority75.compare(listenerPriority79);
        org.asteriskjava.AsteriskVersion asteriskVersion81 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion82 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean83 = asteriskVersion81.isAtLeast(asteriskVersion82);
        org.asteriskjava.AsteriskVersion asteriskVersion84 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion85 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean86 = asteriskVersion84.isAtLeast(asteriskVersion85);
        int int87 = asteriskVersion81.compareTo(asteriskVersion85);
        org.asteriskjava.AsteriskVersion asteriskVersion88 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion89 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean90 = asteriskVersion88.isAtLeast(asteriskVersion89);
        boolean boolean91 = asteriskVersion85.isAtLeast(asteriskVersion89);
        org.asteriskjava.pbx.ListenerPriority listenerPriority92 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean93 = asteriskVersion85.equals((java.lang.Object) listenerPriority92);
        int int94 = listenerPriority79.compare(listenerPriority92);
        boolean boolean95 = asteriskVersion71.equals((java.lang.Object) listenerPriority79);
        boolean boolean96 = asteriskVersion24.equals((java.lang.Object) listenerPriority79);
        int int97 = asteriskVersion0.compareTo(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion98 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int99 = asteriskVersion24.compareTo(asteriskVersion98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Asterisk 11" + "'", str32, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Asterisk 14" + "'", str36, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority45 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority45.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority46 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority46.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority48 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority48.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-4) + "'", int49 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority50 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority50.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-6) + "'", int51 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority63 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority63.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Asterisk 20" + "'", str68, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion69);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertNotNull(asteriskVersion71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority74 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority74.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority75 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority75.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority77 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority77.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-4) + "'", int78 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority79 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority79.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-6) + "'", int80 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion81);
        org.junit.Assert.assertNotNull(asteriskVersion82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(asteriskVersion84);
        org.junit.Assert.assertNotNull(asteriskVersion85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion88);
        org.junit.Assert.assertNotNull(asteriskVersion89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority92 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority92.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str4 = asteriskVersion3.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean6 = asteriskVersion3.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int10 = asteriskVersion8.compareTo(asteriskVersion9);
        boolean boolean11 = asteriskVersion7.isAtLeast(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int16 = asteriskVersion13.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean18 = asteriskVersion15.isAtLeast(asteriskVersion17);
        int int19 = asteriskVersion7.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int22 = asteriskVersion20.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int24 = asteriskVersion20.compareTo(asteriskVersion23);
        boolean boolean25 = asteriskVersion15.isAtLeast(asteriskVersion23);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int28 = asteriskVersion26.compareTo(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str30 = asteriskVersion29.toString();
        boolean boolean31 = asteriskVersion27.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int34 = asteriskVersion32.compareTo(asteriskVersion33);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str36 = asteriskVersion35.toString();
        boolean boolean37 = asteriskVersion33.isAtLeast(asteriskVersion35);
        boolean boolean39 = asteriskVersion33.equals((java.lang.Object) "0");
        boolean boolean40 = asteriskVersion27.equals((java.lang.Object) asteriskVersion33);
        boolean boolean41 = asteriskVersion23.isAtLeast(asteriskVersion27);
        int int42 = asteriskVersion5.compareTo(asteriskVersion23);
        boolean boolean43 = asteriskVersion0.isAtLeast(asteriskVersion23);
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_18;
        boolean boolean45 = asteriskVersion23.isAtLeast(asteriskVersion44);
        java.lang.Class<?> wildcardClass46 = asteriskVersion23.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Asterisk 11" + "'", str4, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Asterisk 1.0" + "'", str30, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Asterisk 1.0" + "'", str36, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int10 = asteriskVersion6.compareTo(asteriskVersion9);
        org.asteriskjava.pbx.TechType techType11 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean12 = asteriskVersion6.equals((java.lang.Object) techType11);
        boolean boolean13 = asteriskVersion3.isAtLeast(asteriskVersion6);
        boolean boolean14 = asteriskVersion0.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int18 = asteriskVersion16.compareTo(asteriskVersion17);
        boolean boolean19 = asteriskVersion15.isAtLeast(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean22 = asteriskVersion20.isAtLeast(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int24 = asteriskVersion21.compareTo(asteriskVersion23);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean26 = asteriskVersion23.isAtLeast(asteriskVersion25);
        int int27 = asteriskVersion15.compareTo(asteriskVersion23);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str29 = asteriskVersion28.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean31 = asteriskVersion28.isAtLeast(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean34 = asteriskVersion32.isAtLeast(asteriskVersion33);
        boolean boolean35 = asteriskVersion30.equals((java.lang.Object) asteriskVersion32);
        boolean boolean36 = asteriskVersion15.isAtLeast(asteriskVersion30);
        boolean boolean37 = asteriskVersion6.isAtLeast(asteriskVersion15);
        java.lang.Class<?> wildcardClass38 = asteriskVersion15.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + techType11 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType11.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Asterisk 11" + "'", str29, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int7 = listenerPriority5.compare(listenerPriority6);
        org.asteriskjava.pbx.ListenerPriority listenerPriority8 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int9 = listenerPriority6.compare(listenerPriority8);
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int11 = listenerPriority6.compare(listenerPriority10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean17 = asteriskVersion15.isAtLeast(asteriskVersion16);
        int int18 = asteriskVersion12.compareTo(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean21 = asteriskVersion19.isAtLeast(asteriskVersion20);
        boolean boolean22 = asteriskVersion16.isAtLeast(asteriskVersion20);
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean24 = asteriskVersion16.equals((java.lang.Object) listenerPriority23);
        int int25 = listenerPriority10.compare(listenerPriority23);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int29 = asteriskVersion27.compareTo(asteriskVersion28);
        boolean boolean30 = asteriskVersion26.isAtLeast(asteriskVersion28);
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int33 = listenerPriority31.compare(listenerPriority32);
        org.asteriskjava.pbx.ListenerPriority listenerPriority34 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int35 = listenerPriority32.compare(listenerPriority34);
        org.asteriskjava.pbx.ListenerPriority listenerPriority36 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int37 = listenerPriority32.compare(listenerPriority36);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean40 = asteriskVersion38.isAtLeast(asteriskVersion39);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean43 = asteriskVersion41.isAtLeast(asteriskVersion42);
        int int44 = asteriskVersion38.compareTo(asteriskVersion42);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean47 = asteriskVersion45.isAtLeast(asteriskVersion46);
        boolean boolean48 = asteriskVersion42.isAtLeast(asteriskVersion46);
        org.asteriskjava.pbx.ListenerPriority listenerPriority49 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean50 = asteriskVersion42.equals((java.lang.Object) listenerPriority49);
        int int51 = listenerPriority36.compare(listenerPriority49);
        boolean boolean52 = asteriskVersion28.equals((java.lang.Object) listenerPriority36);
        int int53 = listenerPriority23.compare(listenerPriority36);
        org.asteriskjava.pbx.ListenerPriority listenerPriority54 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int55 = listenerPriority23.compare(listenerPriority54);
        int int56 = listenerPriority1.compare(listenerPriority54);
        java.lang.Class<?> wildcardClass57 = listenerPriority1.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority8 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority8.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-4) + "'", int9 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-6) + "'", int11 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority34 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority34.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-4) + "'", int35 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority36 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority36.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-6) + "'", int37 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority49 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority49.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority54 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority54.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-2) + "'", int56 == (-2));
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        java.lang.String str1 = asteriskVersion0.toString();
        java.lang.String str2 = asteriskVersion0.toString();
        java.lang.String str3 = asteriskVersion0.toString();
        java.lang.String str4 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        java.lang.String str6 = asteriskVersion5.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        int int8 = asteriskVersion5.compareTo(asteriskVersion7);
        int int9 = asteriskVersion0.compareTo(asteriskVersion5);
        java.lang.Class<?> wildcardClass10 = asteriskVersion5.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 12" + "'", str1, "Asterisk 12");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 12" + "'", str2, "Asterisk 12");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Asterisk 12" + "'", str3, "Asterisk 12");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Asterisk 12" + "'", str4, "Asterisk 12");
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Asterisk 10" + "'", str6, "Asterisk 10");
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int4 = asteriskVersion0.compareTo(asteriskVersion3);
        java.lang.String str5 = asteriskVersion3.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int10 = asteriskVersion6.compareTo(asteriskVersion9);
        org.asteriskjava.pbx.TechType techType11 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean12 = asteriskVersion6.equals((java.lang.Object) techType11);
        boolean boolean13 = asteriskVersion3.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int17 = asteriskVersion15.compareTo(asteriskVersion16);
        boolean boolean18 = asteriskVersion14.isAtLeast(asteriskVersion16);
        int int19 = asteriskVersion6.compareTo(asteriskVersion14);
        java.lang.Object obj20 = null;
        boolean boolean21 = asteriskVersion6.equals(obj20);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        boolean boolean26 = asteriskVersion22.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int29 = asteriskVersion27.compareTo(asteriskVersion28);
        boolean boolean30 = asteriskVersion22.isAtLeast(asteriskVersion27);
        int int31 = asteriskVersion6.compareTo(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int33 = asteriskVersion22.compareTo(asteriskVersion32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Asterisk 1.8" + "'", str5, "Asterisk 1.8");
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + techType11 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType11.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_18;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority2 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int3 = listenerPriority1.compare(listenerPriority2);
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int5 = listenerPriority2.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority7 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int8 = listenerPriority6.compare(listenerPriority7);
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int11 = listenerPriority9.compare(listenerPriority10);
        org.asteriskjava.pbx.ListenerPriority listenerPriority12 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int13 = listenerPriority10.compare(listenerPriority12);
        int int14 = listenerPriority7.compare(listenerPriority10);
        int int15 = listenerPriority4.compare(listenerPriority10);
        org.asteriskjava.pbx.ListenerPriority listenerPriority16 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority17 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int19 = listenerPriority17.compare(listenerPriority18);
        org.asteriskjava.pbx.ListenerPriority listenerPriority20 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int21 = listenerPriority18.compare(listenerPriority20);
        int int22 = listenerPriority16.compare(listenerPriority18);
        int int23 = listenerPriority10.compare(listenerPriority18);
        boolean boolean24 = asteriskVersion0.equals((java.lang.Object) int23);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        boolean boolean26 = asteriskVersion0.isAtLeast(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int30 = asteriskVersion28.compareTo(asteriskVersion29);
        boolean boolean31 = asteriskVersion27.isAtLeast(asteriskVersion29);
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority33 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int34 = listenerPriority32.compare(listenerPriority33);
        org.asteriskjava.pbx.ListenerPriority listenerPriority35 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int36 = listenerPriority33.compare(listenerPriority35);
        org.asteriskjava.pbx.ListenerPriority listenerPriority37 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int38 = listenerPriority33.compare(listenerPriority37);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean41 = asteriskVersion39.isAtLeast(asteriskVersion40);
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean44 = asteriskVersion42.isAtLeast(asteriskVersion43);
        int int45 = asteriskVersion39.compareTo(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean48 = asteriskVersion46.isAtLeast(asteriskVersion47);
        boolean boolean49 = asteriskVersion43.isAtLeast(asteriskVersion47);
        org.asteriskjava.pbx.ListenerPriority listenerPriority50 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean51 = asteriskVersion43.equals((java.lang.Object) listenerPriority50);
        int int52 = listenerPriority37.compare(listenerPriority50);
        boolean boolean53 = asteriskVersion29.equals((java.lang.Object) listenerPriority37);
        java.lang.String str54 = asteriskVersion29.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int58 = asteriskVersion56.compareTo(asteriskVersion57);
        boolean boolean59 = asteriskVersion55.isAtLeast(asteriskVersion57);
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean61 = asteriskVersion55.isAtLeast(asteriskVersion60);
        org.asteriskjava.AsteriskVersion asteriskVersion62 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion63 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int65 = asteriskVersion63.compareTo(asteriskVersion64);
        boolean boolean66 = asteriskVersion62.isAtLeast(asteriskVersion64);
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean69 = asteriskVersion67.isAtLeast(asteriskVersion68);
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int71 = asteriskVersion68.compareTo(asteriskVersion70);
        org.asteriskjava.AsteriskVersion asteriskVersion72 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean73 = asteriskVersion70.isAtLeast(asteriskVersion72);
        int int74 = asteriskVersion62.compareTo(asteriskVersion70);
        int int75 = asteriskVersion55.compareTo(asteriskVersion62);
        org.asteriskjava.AsteriskVersion asteriskVersion76 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum77 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str78 = activityStatusEnum77.getDefaultMessage();
        boolean boolean79 = asteriskVersion76.equals((java.lang.Object) str78);
        org.asteriskjava.AsteriskVersion asteriskVersion80 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion81 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean82 = asteriskVersion80.isAtLeast(asteriskVersion81);
        org.asteriskjava.AsteriskVersion asteriskVersion83 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion84 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean85 = asteriskVersion83.isAtLeast(asteriskVersion84);
        int int86 = asteriskVersion80.compareTo(asteriskVersion84);
        org.asteriskjava.AsteriskVersion asteriskVersion87 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion88 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean89 = asteriskVersion87.isAtLeast(asteriskVersion88);
        boolean boolean90 = asteriskVersion84.isAtLeast(asteriskVersion88);
        org.asteriskjava.pbx.ListenerPriority listenerPriority91 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean92 = asteriskVersion84.equals((java.lang.Object) listenerPriority91);
        org.asteriskjava.AsteriskVersion asteriskVersion93 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int94 = asteriskVersion84.compareTo(asteriskVersion93);
        boolean boolean95 = asteriskVersion76.equals((java.lang.Object) asteriskVersion84);
        int int96 = asteriskVersion62.compareTo(asteriskVersion84);
        boolean boolean97 = asteriskVersion29.isAtLeast(asteriskVersion62);
        java.lang.String str98 = asteriskVersion29.toString();
        int int99 = asteriskVersion25.compareTo(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority2 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority2.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-4) + "'", int5 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority7 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority7.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority12 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority12.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-4) + "'", int13 == (-4));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority16 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority16.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority17 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority17.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority20 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority20.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-4) + "'", int21 == (-4));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority33 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority33.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority35 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority35.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-4) + "'", int36 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority37 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority37.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-6) + "'", int38 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority50 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority50.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Asterisk 16" + "'", str54, "Asterisk 16");
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(asteriskVersion62);
        org.junit.Assert.assertNotNull(asteriskVersion63);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion76);
        org.junit.Assert.assertTrue("'" + activityStatusEnum77 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum77.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Progress" + "'", str78, "Progress");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(asteriskVersion80);
        org.junit.Assert.assertNotNull(asteriskVersion81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(asteriskVersion83);
        org.junit.Assert.assertNotNull(asteriskVersion84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion87);
        org.junit.Assert.assertNotNull(asteriskVersion88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority91 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority91.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(asteriskVersion93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "Asterisk 16" + "'", str98, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent2 = null;
        htmlEventTracer0.onManagerEvent(managerEvent2);
        java.lang.Class<?> wildcardClass4 = htmlEventTracer0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer7.write();
        boolean boolean9 = asteriskVersion4.equals((java.lang.Object) htmlEventTracer7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer7.onManagerEvent(managerEvent10);
        org.asteriskjava.manager.event.ManagerEvent managerEvent12 = null;
        htmlEventTracer7.onManagerEvent(managerEvent12);
        org.asteriskjava.manager.event.ManagerEvent managerEvent14 = null;
        htmlEventTracer7.onManagerEvent(managerEvent14);
        org.asteriskjava.manager.event.ManagerEvent managerEvent16 = null;
        htmlEventTracer7.onManagerEvent(managerEvent16);
        org.asteriskjava.manager.event.ManagerEvent managerEvent18 = null;
        htmlEventTracer7.onManagerEvent(managerEvent18);
        org.asteriskjava.manager.event.ManagerEvent managerEvent20 = null;
        htmlEventTracer7.onManagerEvent(managerEvent20);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer7.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.equals((java.lang.Object) asteriskVersion5);
        int int9 = asteriskVersion0.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str12 = asteriskVersion11.toString();
        org.asteriskjava.pbx.TechType techType13 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass14 = techType13.getClass();
        boolean boolean15 = asteriskVersion11.equals((java.lang.Object) wildcardClass14);
        int int16 = asteriskVersion10.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int19 = asteriskVersion17.compareTo(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str21 = asteriskVersion20.toString();
        boolean boolean22 = asteriskVersion18.isAtLeast(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str27 = asteriskVersion26.toString();
        boolean boolean28 = asteriskVersion24.isAtLeast(asteriskVersion26);
        boolean boolean30 = asteriskVersion24.equals((java.lang.Object) "0");
        boolean boolean31 = asteriskVersion18.equals((java.lang.Object) asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int36 = asteriskVersion34.compareTo(asteriskVersion35);
        boolean boolean37 = asteriskVersion33.isAtLeast(asteriskVersion35);
        int int38 = asteriskVersion32.compareTo(asteriskVersion33);
        int int39 = asteriskVersion18.compareTo(asteriskVersion32);
        java.lang.String str40 = asteriskVersion18.toString();
        boolean boolean41 = asteriskVersion10.equals((java.lang.Object) asteriskVersion18);
        boolean boolean42 = asteriskVersion5.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        java.lang.Object obj44 = null;
        boolean boolean45 = asteriskVersion43.equals(obj44);
        boolean boolean46 = asteriskVersion5.equals(obj44);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int49 = asteriskVersion47.compareTo(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int51 = asteriskVersion47.compareTo(asteriskVersion50);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        int int53 = asteriskVersion50.compareTo(asteriskVersion52);
        boolean boolean54 = asteriskVersion5.isAtLeast(asteriskVersion50);
        org.asteriskjava.pbx.ListenerPriority listenerPriority55 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority56 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority57 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int58 = listenerPriority56.compare(listenerPriority57);
        org.asteriskjava.pbx.ListenerPriority listenerPriority59 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int60 = listenerPriority57.compare(listenerPriority59);
        int int61 = listenerPriority55.compare(listenerPriority57);
        boolean boolean62 = asteriskVersion5.equals((java.lang.Object) listenerPriority55);
        org.asteriskjava.AsteriskVersion asteriskVersion63 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int65 = asteriskVersion63.compareTo(asteriskVersion64);
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int67 = asteriskVersion63.compareTo(asteriskVersion66);
        org.asteriskjava.pbx.TechType techType68 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean69 = asteriskVersion63.equals((java.lang.Object) techType68);
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion71 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int72 = asteriskVersion70.compareTo(asteriskVersion71);
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str74 = asteriskVersion73.toString();
        boolean boolean75 = asteriskVersion71.isAtLeast(asteriskVersion73);
        boolean boolean77 = asteriskVersion71.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion78 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion79 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int80 = asteriskVersion78.compareTo(asteriskVersion79);
        org.asteriskjava.AsteriskVersion asteriskVersion81 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str82 = asteriskVersion81.toString();
        boolean boolean83 = asteriskVersion79.isAtLeast(asteriskVersion81);
        org.asteriskjava.AsteriskVersion asteriskVersion84 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion85 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int86 = asteriskVersion84.compareTo(asteriskVersion85);
        org.asteriskjava.AsteriskVersion asteriskVersion87 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str88 = asteriskVersion87.toString();
        boolean boolean89 = asteriskVersion85.isAtLeast(asteriskVersion87);
        boolean boolean91 = asteriskVersion85.equals((java.lang.Object) "0");
        boolean boolean92 = asteriskVersion79.equals((java.lang.Object) asteriskVersion85);
        boolean boolean93 = asteriskVersion71.isAtLeast(asteriskVersion85);
        boolean boolean94 = asteriskVersion63.isAtLeast(asteriskVersion85);
        int int95 = asteriskVersion5.compareTo(asteriskVersion85);
        java.lang.String str96 = asteriskVersion5.toString();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Asterisk 1.0" + "'", str12, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType13 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType13.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 1.0" + "'", str21, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Asterisk 1.0" + "'", str27, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 16" + "'", str40, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority55 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority55.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority56 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority56.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority57 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority57.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority59 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority59.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-4) + "'", int60 == (-4));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(asteriskVersion63);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + techType68 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType68.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertNotNull(asteriskVersion71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Asterisk 1.0" + "'", str74, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(asteriskVersion78);
        org.junit.Assert.assertNotNull(asteriskVersion79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Asterisk 1.0" + "'", str82, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(asteriskVersion84);
        org.junit.Assert.assertNotNull(asteriskVersion85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Asterisk 1.0" + "'", str88, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Asterisk 20" + "'", str96, "Asterisk 20");
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean8 = asteriskVersion6.isAtLeast(asteriskVersion7);
        int int9 = asteriskVersion3.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        boolean boolean13 = asteriskVersion7.isAtLeast(asteriskVersion11);
        boolean boolean14 = asteriskVersion0.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean17 = asteriskVersion15.isAtLeast(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int19 = asteriskVersion16.compareTo(asteriskVersion18);
        boolean boolean20 = asteriskVersion11.equals((java.lang.Object) asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int23 = asteriskVersion21.compareTo(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str25 = asteriskVersion24.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean27 = asteriskVersion24.isAtLeast(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int31 = asteriskVersion29.compareTo(asteriskVersion30);
        boolean boolean32 = asteriskVersion28.isAtLeast(asteriskVersion30);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean35 = asteriskVersion33.isAtLeast(asteriskVersion34);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int37 = asteriskVersion34.compareTo(asteriskVersion36);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean39 = asteriskVersion36.isAtLeast(asteriskVersion38);
        int int40 = asteriskVersion28.compareTo(asteriskVersion36);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int43 = asteriskVersion41.compareTo(asteriskVersion42);
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int45 = asteriskVersion41.compareTo(asteriskVersion44);
        boolean boolean46 = asteriskVersion36.isAtLeast(asteriskVersion44);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int49 = asteriskVersion47.compareTo(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str51 = asteriskVersion50.toString();
        boolean boolean52 = asteriskVersion48.isAtLeast(asteriskVersion50);
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int55 = asteriskVersion53.compareTo(asteriskVersion54);
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str57 = asteriskVersion56.toString();
        boolean boolean58 = asteriskVersion54.isAtLeast(asteriskVersion56);
        boolean boolean60 = asteriskVersion54.equals((java.lang.Object) "0");
        boolean boolean61 = asteriskVersion48.equals((java.lang.Object) asteriskVersion54);
        boolean boolean62 = asteriskVersion44.isAtLeast(asteriskVersion48);
        int int63 = asteriskVersion26.compareTo(asteriskVersion44);
        boolean boolean64 = asteriskVersion21.isAtLeast(asteriskVersion44);
        int int65 = asteriskVersion16.compareTo(asteriskVersion44);
        org.asteriskjava.pbx.ListenerPriority listenerPriority66 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority67 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int68 = listenerPriority66.compare(listenerPriority67);
        org.asteriskjava.pbx.ListenerPriority listenerPriority69 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int70 = listenerPriority67.compare(listenerPriority69);
        org.asteriskjava.pbx.ListenerPriority listenerPriority71 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int72 = listenerPriority67.compare(listenerPriority71);
        org.asteriskjava.pbx.ListenerPriority listenerPriority73 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int74 = listenerPriority67.compare(listenerPriority73);
        org.asteriskjava.pbx.ListenerPriority listenerPriority75 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        org.asteriskjava.pbx.ListenerPriority listenerPriority76 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority77 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int78 = listenerPriority76.compare(listenerPriority77);
        org.asteriskjava.pbx.ListenerPriority listenerPriority79 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority80 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int81 = listenerPriority79.compare(listenerPriority80);
        org.asteriskjava.pbx.ListenerPriority listenerPriority82 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int83 = listenerPriority80.compare(listenerPriority82);
        int int84 = listenerPriority77.compare(listenerPriority80);
        org.asteriskjava.pbx.ListenerPriority listenerPriority85 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority86 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int87 = listenerPriority85.compare(listenerPriority86);
        int int88 = listenerPriority77.compare(listenerPriority85);
        int int89 = listenerPriority75.compare(listenerPriority77);
        int int90 = listenerPriority73.compare(listenerPriority77);
        boolean boolean91 = asteriskVersion16.equals((java.lang.Object) int90);
        java.lang.String str92 = asteriskVersion16.toString();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Asterisk 11" + "'", str25, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Asterisk 1.0" + "'", str51, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Asterisk 1.0" + "'", str57, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + listenerPriority66 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority66.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority67 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority67.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority69 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority69.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-4) + "'", int70 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority71 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority71.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-6) + "'", int72 == (-6));
        org.junit.Assert.assertTrue("'" + listenerPriority73 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority73.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-4) + "'", int74 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority75 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority75.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + listenerPriority76 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority76.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority77 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority77.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority79 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority79.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority80 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority80.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority82 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority82.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-4) + "'", int83 == (-4));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority85 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority85.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority86 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority86.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-2) + "'", int88 == (-2));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 4 + "'", int89 == 4);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 4 + "'", int90 == 4);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Asterisk 20" + "'", str92, "Asterisk 20");
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer7 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer7.write();
        boolean boolean9 = asteriskVersion4.equals((java.lang.Object) htmlEventTracer7);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str11 = asteriskVersion10.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean13 = asteriskVersion10.isAtLeast(asteriskVersion12);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int15 = asteriskVersion10.compareTo(asteriskVersion14);
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int17 = asteriskVersion14.compareTo(asteriskVersion16);
        boolean boolean18 = asteriskVersion4.isAtLeast(asteriskVersion14);
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer19 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer19.write();
        htmlEventTracer19.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent22 = null;
        htmlEventTracer19.onManagerEvent(managerEvent22);
        org.asteriskjava.manager.event.ManagerEvent managerEvent24 = null;
        htmlEventTracer19.onManagerEvent(managerEvent24);
        org.asteriskjava.manager.event.ManagerEvent managerEvent26 = null;
        htmlEventTracer19.onManagerEvent(managerEvent26);
        boolean boolean28 = asteriskVersion14.equals((java.lang.Object) managerEvent26);
        java.lang.Class<?> wildcardClass29 = asteriskVersion14.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Asterisk 11" + "'", str11, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean20 = asteriskVersion18.isAtLeast(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int22 = asteriskVersion19.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean24 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int25 = asteriskVersion13.compareTo(asteriskVersion21);
        boolean boolean26 = asteriskVersion0.isAtLeast(asteriskVersion21);
        boolean boolean28 = asteriskVersion0.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean30 = asteriskVersion0.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean33 = asteriskVersion31.isAtLeast(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean36 = asteriskVersion34.isAtLeast(asteriskVersion35);
        int int37 = asteriskVersion31.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean40 = asteriskVersion38.isAtLeast(asteriskVersion39);
        boolean boolean41 = asteriskVersion35.isAtLeast(asteriskVersion39);
        org.asteriskjava.pbx.ListenerPriority listenerPriority42 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean43 = asteriskVersion35.equals((java.lang.Object) listenerPriority42);
        boolean boolean44 = asteriskVersion0.equals((java.lang.Object) listenerPriority42);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str46 = asteriskVersion45.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean48 = asteriskVersion45.isAtLeast(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int50 = asteriskVersion45.compareTo(asteriskVersion49);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int53 = asteriskVersion51.compareTo(asteriskVersion52);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int55 = asteriskVersion51.compareTo(asteriskVersion54);
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int60 = asteriskVersion58.compareTo(asteriskVersion59);
        boolean boolean61 = asteriskVersion57.isAtLeast(asteriskVersion59);
        int int62 = asteriskVersion56.compareTo(asteriskVersion57);
        int int63 = asteriskVersion51.compareTo(asteriskVersion57);
        boolean boolean64 = asteriskVersion49.equals((java.lang.Object) int63);
        boolean boolean65 = asteriskVersion0.isAtLeast(asteriskVersion49);
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean68 = asteriskVersion66.isAtLeast(asteriskVersion67);
        org.asteriskjava.AsteriskVersion asteriskVersion69 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int70 = asteriskVersion67.compareTo(asteriskVersion69);
        java.lang.String str71 = asteriskVersion69.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion72 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean74 = asteriskVersion72.isAtLeast(asteriskVersion73);
        org.asteriskjava.AsteriskVersion asteriskVersion75 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion76 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean77 = asteriskVersion75.isAtLeast(asteriskVersion76);
        int int78 = asteriskVersion72.compareTo(asteriskVersion76);
        org.asteriskjava.AsteriskVersion asteriskVersion79 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion80 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean81 = asteriskVersion79.isAtLeast(asteriskVersion80);
        boolean boolean82 = asteriskVersion76.isAtLeast(asteriskVersion80);
        org.asteriskjava.AsteriskVersion asteriskVersion83 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean84 = asteriskVersion80.isAtLeast(asteriskVersion83);
        java.lang.String str85 = asteriskVersion80.toString();
        boolean boolean86 = asteriskVersion69.isAtLeast(asteriskVersion80);
        boolean boolean87 = asteriskVersion49.isAtLeast(asteriskVersion80);
        org.asteriskjava.AsteriskVersion asteriskVersion88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int89 = asteriskVersion49.compareTo(asteriskVersion88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority42 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority42.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Asterisk 11" + "'", str46, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(asteriskVersion69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Asterisk 20" + "'", str71, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion72);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(asteriskVersion75);
        org.junit.Assert.assertNotNull(asteriskVersion76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion79);
        org.junit.Assert.assertNotNull(asteriskVersion80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(asteriskVersion83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Asterisk 20" + "'", str85, "Asterisk 20");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.pbx.TechType techType3 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass4 = techType3.getClass();
        boolean boolean5 = asteriskVersion1.equals((java.lang.Object) wildcardClass4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int9 = asteriskVersion7.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str11 = asteriskVersion10.toString();
        boolean boolean12 = asteriskVersion8.isAtLeast(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int15 = asteriskVersion13.compareTo(asteriskVersion14);
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str17 = asteriskVersion16.toString();
        boolean boolean18 = asteriskVersion14.isAtLeast(asteriskVersion16);
        boolean boolean20 = asteriskVersion14.equals((java.lang.Object) "0");
        boolean boolean21 = asteriskVersion8.equals((java.lang.Object) asteriskVersion14);
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int26 = asteriskVersion24.compareTo(asteriskVersion25);
        boolean boolean27 = asteriskVersion23.isAtLeast(asteriskVersion25);
        int int28 = asteriskVersion22.compareTo(asteriskVersion23);
        int int29 = asteriskVersion8.compareTo(asteriskVersion22);
        java.lang.String str30 = asteriskVersion8.toString();
        boolean boolean31 = asteriskVersion0.equals((java.lang.Object) asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str34 = asteriskVersion33.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean36 = asteriskVersion33.isAtLeast(asteriskVersion35);
        boolean boolean37 = asteriskVersion32.equals((java.lang.Object) boolean36);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean40 = asteriskVersion38.isAtLeast(asteriskVersion39);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int42 = asteriskVersion38.compareTo(asteriskVersion41);
        int int43 = asteriskVersion32.compareTo(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int47 = asteriskVersion45.compareTo(asteriskVersion46);
        boolean boolean48 = asteriskVersion44.isAtLeast(asteriskVersion46);
        boolean boolean49 = asteriskVersion32.isAtLeast(asteriskVersion44);
        boolean boolean50 = asteriskVersion8.equals((java.lang.Object) asteriskVersion44);
        java.lang.Class<?> wildcardClass51 = asteriskVersion44.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 1.0" + "'", str2, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType3 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType3.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Asterisk 1.0" + "'", str11, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Asterisk 1.0" + "'", str17, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Asterisk 16" + "'", str30, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Asterisk 11" + "'", str34, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        int int3 = asteriskVersion0.compareTo(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean6 = asteriskVersion4.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        int int10 = asteriskVersion4.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean13 = asteriskVersion11.isAtLeast(asteriskVersion12);
        boolean boolean14 = asteriskVersion8.isAtLeast(asteriskVersion12);
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean16 = asteriskVersion8.equals((java.lang.Object) listenerPriority15);
        boolean boolean17 = asteriskVersion2.equals((java.lang.Object) asteriskVersion8);
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int20 = listenerPriority18.compare(listenerPriority19);
        org.asteriskjava.pbx.ListenerPriority listenerPriority21 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority22 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int23 = listenerPriority21.compare(listenerPriority22);
        org.asteriskjava.pbx.ListenerPriority listenerPriority24 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int25 = listenerPriority22.compare(listenerPriority24);
        int int26 = listenerPriority19.compare(listenerPriority22);
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority28 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int29 = listenerPriority27.compare(listenerPriority28);
        int int30 = listenerPriority19.compare(listenerPriority27);
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int33 = listenerPriority31.compare(listenerPriority32);
        int int34 = listenerPriority19.compare(listenerPriority31);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int38 = asteriskVersion36.compareTo(asteriskVersion37);
        boolean boolean39 = asteriskVersion35.isAtLeast(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean42 = asteriskVersion40.isAtLeast(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int44 = asteriskVersion41.compareTo(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean46 = asteriskVersion43.isAtLeast(asteriskVersion45);
        int int47 = asteriskVersion35.compareTo(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int51 = asteriskVersion49.compareTo(asteriskVersion50);
        boolean boolean52 = asteriskVersion48.isAtLeast(asteriskVersion50);
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean55 = asteriskVersion53.isAtLeast(asteriskVersion54);
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int57 = asteriskVersion54.compareTo(asteriskVersion56);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean59 = asteriskVersion56.isAtLeast(asteriskVersion58);
        int int60 = asteriskVersion48.compareTo(asteriskVersion56);
        boolean boolean61 = asteriskVersion35.isAtLeast(asteriskVersion56);
        boolean boolean63 = asteriskVersion35.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean65 = asteriskVersion35.isAtLeast(asteriskVersion64);
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean68 = asteriskVersion66.isAtLeast(asteriskVersion67);
        org.asteriskjava.AsteriskVersion asteriskVersion69 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean71 = asteriskVersion69.isAtLeast(asteriskVersion70);
        int int72 = asteriskVersion66.compareTo(asteriskVersion70);
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion74 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean75 = asteriskVersion73.isAtLeast(asteriskVersion74);
        boolean boolean76 = asteriskVersion70.isAtLeast(asteriskVersion74);
        org.asteriskjava.pbx.ListenerPriority listenerPriority77 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean78 = asteriskVersion70.equals((java.lang.Object) listenerPriority77);
        boolean boolean79 = asteriskVersion35.equals((java.lang.Object) listenerPriority77);
        int int80 = listenerPriority19.compare(listenerPriority77);
        boolean boolean81 = asteriskVersion8.equals((java.lang.Object) listenerPriority77);
        org.asteriskjava.AsteriskVersion asteriskVersion82 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str83 = asteriskVersion82.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion84 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean85 = asteriskVersion82.isAtLeast(asteriskVersion84);
        org.asteriskjava.AsteriskVersion asteriskVersion86 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int87 = asteriskVersion82.compareTo(asteriskVersion86);
        org.asteriskjava.AsteriskVersion asteriskVersion88 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion89 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean90 = asteriskVersion88.isAtLeast(asteriskVersion89);
        boolean boolean91 = asteriskVersion82.isAtLeast(asteriskVersion89);
        boolean boolean92 = asteriskVersion8.equals((java.lang.Object) asteriskVersion89);
        org.asteriskjava.AsteriskVersion asteriskVersion93 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion94 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int95 = asteriskVersion93.compareTo(asteriskVersion94);
        boolean boolean96 = asteriskVersion8.equals((java.lang.Object) asteriskVersion93);
        java.lang.Class<?> wildcardClass97 = asteriskVersion93.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 10" + "'", str1, "Asterisk 10");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority21 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority21.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority22 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority22.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority24 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority24.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-4) + "'", int25 == (-4));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority28 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority28.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-2) + "'", int30 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-2) + "'", int34 == (-2));
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(asteriskVersion69);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertNotNull(asteriskVersion74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority77 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority77.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-6) + "'", int80 == (-6));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(asteriskVersion82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Asterisk 11" + "'", str83, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(asteriskVersion86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion88);
        org.junit.Assert.assertNotNull(asteriskVersion89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(asteriskVersion93);
        org.junit.Assert.assertNotNull(asteriskVersion94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str1 = asteriskVersion0.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean3 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int5 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_15;
        boolean boolean7 = asteriskVersion0.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean10 = asteriskVersion8.isAtLeast(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean13 = asteriskVersion11.isAtLeast(asteriskVersion12);
        int int14 = asteriskVersion8.compareTo(asteriskVersion12);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean17 = asteriskVersion15.isAtLeast(asteriskVersion16);
        boolean boolean18 = asteriskVersion12.isAtLeast(asteriskVersion16);
        org.asteriskjava.pbx.TechType techType19 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean20 = asteriskVersion12.equals((java.lang.Object) techType19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str22 = asteriskVersion21.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean24 = asteriskVersion21.isAtLeast(asteriskVersion23);
        java.lang.String str25 = asteriskVersion21.toString();
        boolean boolean26 = asteriskVersion12.isAtLeast(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int30 = asteriskVersion28.compareTo(asteriskVersion29);
        boolean boolean31 = asteriskVersion27.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean34 = asteriskVersion32.isAtLeast(asteriskVersion33);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean37 = asteriskVersion35.isAtLeast(asteriskVersion36);
        int int38 = asteriskVersion32.compareTo(asteriskVersion36);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean41 = asteriskVersion39.isAtLeast(asteriskVersion40);
        boolean boolean42 = asteriskVersion36.isAtLeast(asteriskVersion40);
        org.asteriskjava.pbx.TechType techType43 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean44 = asteriskVersion36.equals((java.lang.Object) techType43);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int47 = asteriskVersion45.compareTo(asteriskVersion46);
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str49 = asteriskVersion48.toString();
        boolean boolean50 = asteriskVersion46.isAtLeast(asteriskVersion48);
        boolean boolean52 = asteriskVersion46.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean55 = asteriskVersion53.isAtLeast(asteriskVersion54);
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int57 = asteriskVersion54.compareTo(asteriskVersion56);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean59 = asteriskVersion56.isAtLeast(asteriskVersion58);
        boolean boolean60 = asteriskVersion46.isAtLeast(asteriskVersion56);
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion62 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean63 = asteriskVersion61.isAtLeast(asteriskVersion62);
        boolean boolean64 = asteriskVersion46.isAtLeast(asteriskVersion62);
        boolean boolean65 = asteriskVersion36.equals((java.lang.Object) asteriskVersion46);
        boolean boolean66 = asteriskVersion27.isAtLeast(asteriskVersion36);
        int int67 = asteriskVersion12.compareTo(asteriskVersion36);
        boolean boolean68 = asteriskVersion6.isAtLeast(asteriskVersion36);
        java.lang.Class<?> wildcardClass69 = asteriskVersion6.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Asterisk 11" + "'", str1, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + techType19 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType19.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Asterisk 11" + "'", str22, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Asterisk 11" + "'", str25, "Asterisk 11");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + techType43 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType43.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Asterisk 1.0" + "'", str49, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertNotNull(asteriskVersion62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent5 = null;
        htmlEventTracer0.onManagerEvent(managerEvent5);
        org.asteriskjava.manager.event.ManagerEvent managerEvent7 = null;
        htmlEventTracer0.onManagerEvent(managerEvent7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent9 = null;
        htmlEventTracer0.onManagerEvent(managerEvent9);
        org.asteriskjava.manager.event.ManagerEvent managerEvent11 = null;
        htmlEventTracer0.onManagerEvent(managerEvent11);
        org.asteriskjava.manager.event.ManagerEvent managerEvent13 = null;
        htmlEventTracer0.onManagerEvent(managerEvent13);
        org.asteriskjava.manager.event.ManagerEvent managerEvent15 = null;
        htmlEventTracer0.onManagerEvent(managerEvent15);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent4 = null;
        htmlEventTracer0.onManagerEvent(managerEvent4);
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer0.onManagerEvent(managerEvent10);
        org.asteriskjava.manager.event.ManagerEvent managerEvent12 = null;
        htmlEventTracer0.onManagerEvent(managerEvent12);
        org.asteriskjava.manager.event.ManagerEvent managerEvent14 = null;
        htmlEventTracer0.onManagerEvent(managerEvent14);
        org.asteriskjava.manager.event.ManagerEvent managerEvent16 = null;
        htmlEventTracer0.onManagerEvent(managerEvent16);
        org.asteriskjava.manager.event.ManagerEvent managerEvent18 = null;
        htmlEventTracer0.onManagerEvent(managerEvent18);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int4 = asteriskVersion1.compareTo(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str7 = asteriskVersion6.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean9 = asteriskVersion6.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str11 = asteriskVersion10.toString();
        int int12 = asteriskVersion6.compareTo(asteriskVersion10);
        boolean boolean13 = asteriskVersion5.isAtLeast(asteriskVersion10);
        boolean boolean14 = asteriskVersion1.equals((java.lang.Object) asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int18 = asteriskVersion16.compareTo(asteriskVersion17);
        boolean boolean19 = asteriskVersion15.isAtLeast(asteriskVersion17);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int22 = asteriskVersion20.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int24 = asteriskVersion20.compareTo(asteriskVersion23);
        org.asteriskjava.pbx.TechType techType25 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean26 = asteriskVersion20.equals((java.lang.Object) techType25);
        boolean boolean27 = asteriskVersion17.isAtLeast(asteriskVersion20);
        int int28 = asteriskVersion1.compareTo(asteriskVersion20);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int32 = asteriskVersion30.compareTo(asteriskVersion31);
        boolean boolean33 = asteriskVersion29.isAtLeast(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean36 = asteriskVersion34.isAtLeast(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int38 = asteriskVersion35.compareTo(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean40 = asteriskVersion37.isAtLeast(asteriskVersion39);
        int int41 = asteriskVersion29.compareTo(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int45 = asteriskVersion43.compareTo(asteriskVersion44);
        boolean boolean46 = asteriskVersion42.isAtLeast(asteriskVersion44);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean49 = asteriskVersion47.isAtLeast(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int51 = asteriskVersion48.compareTo(asteriskVersion50);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean53 = asteriskVersion50.isAtLeast(asteriskVersion52);
        int int54 = asteriskVersion42.compareTo(asteriskVersion50);
        boolean boolean55 = asteriskVersion29.isAtLeast(asteriskVersion50);
        boolean boolean57 = asteriskVersion29.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean59 = asteriskVersion29.isAtLeast(asteriskVersion58);
        java.lang.String str60 = asteriskVersion58.toString();
        java.lang.String str61 = asteriskVersion58.toString();
        int int62 = asteriskVersion1.compareTo(asteriskVersion58);
        org.asteriskjava.AsteriskVersion asteriskVersion63 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = asteriskVersion1.isAtLeast(asteriskVersion63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Asterisk 11" + "'", str7, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Asterisk 14" + "'", str11, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + techType25 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType25.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Asterisk 20" + "'", str60, "Asterisk 20");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Asterisk 20" + "'", str61, "Asterisk 20");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        boolean boolean6 = asteriskVersion0.equals((java.lang.Object) asteriskVersion1);
        java.lang.String str7 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str10 = asteriskVersion9.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean12 = asteriskVersion9.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean15 = asteriskVersion13.isAtLeast(asteriskVersion14);
        boolean boolean16 = asteriskVersion11.equals((java.lang.Object) asteriskVersion13);
        int int17 = asteriskVersion8.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str20 = asteriskVersion19.toString();
        org.asteriskjava.pbx.TechType techType21 = org.asteriskjava.pbx.TechType.UNKNOWN;
        java.lang.Class<?> wildcardClass22 = techType21.getClass();
        boolean boolean23 = asteriskVersion19.equals((java.lang.Object) wildcardClass22);
        int int24 = asteriskVersion18.compareTo(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int27 = asteriskVersion25.compareTo(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str29 = asteriskVersion28.toString();
        boolean boolean30 = asteriskVersion26.isAtLeast(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int33 = asteriskVersion31.compareTo(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str35 = asteriskVersion34.toString();
        boolean boolean36 = asteriskVersion32.isAtLeast(asteriskVersion34);
        boolean boolean38 = asteriskVersion32.equals((java.lang.Object) "0");
        boolean boolean39 = asteriskVersion26.equals((java.lang.Object) asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int44 = asteriskVersion42.compareTo(asteriskVersion43);
        boolean boolean45 = asteriskVersion41.isAtLeast(asteriskVersion43);
        int int46 = asteriskVersion40.compareTo(asteriskVersion41);
        int int47 = asteriskVersion26.compareTo(asteriskVersion40);
        java.lang.String str48 = asteriskVersion26.toString();
        boolean boolean49 = asteriskVersion18.equals((java.lang.Object) asteriskVersion26);
        boolean boolean50 = asteriskVersion13.isAtLeast(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean54 = asteriskVersion52.isAtLeast(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean57 = asteriskVersion55.isAtLeast(asteriskVersion56);
        int int58 = asteriskVersion52.compareTo(asteriskVersion56);
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean61 = asteriskVersion59.isAtLeast(asteriskVersion60);
        org.asteriskjava.AsteriskVersion asteriskVersion62 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion63 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean64 = asteriskVersion62.isAtLeast(asteriskVersion63);
        int int65 = asteriskVersion59.compareTo(asteriskVersion63);
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean68 = asteriskVersion66.isAtLeast(asteriskVersion67);
        boolean boolean69 = asteriskVersion63.isAtLeast(asteriskVersion67);
        boolean boolean70 = asteriskVersion52.isAtLeast(asteriskVersion67);
        int int71 = asteriskVersion51.compareTo(asteriskVersion52);
        int int72 = asteriskVersion26.compareTo(asteriskVersion52);
        java.lang.String str73 = asteriskVersion52.toString();
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer74 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer74.write();
        htmlEventTracer74.write();
        htmlEventTracer74.write();
        htmlEventTracer74.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent79 = null;
        htmlEventTracer74.onManagerEvent(managerEvent79);
        boolean boolean81 = asteriskVersion52.equals((java.lang.Object) htmlEventTracer74);
        org.asteriskjava.manager.event.ManagerEvent managerEvent82 = null;
        htmlEventTracer74.onManagerEvent(managerEvent82);
        org.asteriskjava.manager.event.ManagerEvent managerEvent84 = null;
        htmlEventTracer74.onManagerEvent(managerEvent84);
        org.asteriskjava.manager.event.ManagerEvent managerEvent86 = null;
        htmlEventTracer74.onManagerEvent(managerEvent86);
        boolean boolean88 = asteriskVersion1.equals((java.lang.Object) htmlEventTracer74);
        org.asteriskjava.manager.event.ManagerEvent managerEvent89 = null;
        htmlEventTracer74.onManagerEvent(managerEvent89);
        org.asteriskjava.manager.event.ManagerEvent managerEvent91 = null;
        htmlEventTracer74.onManagerEvent(managerEvent91);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer74.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Asterisk 12" + "'", str7, "Asterisk 12");
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Asterisk 11" + "'", str10, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Asterisk 1.0" + "'", str20, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + techType21 + "' != '" + org.asteriskjava.pbx.TechType.UNKNOWN + "'", techType21.equals(org.asteriskjava.pbx.TechType.UNKNOWN));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Asterisk 1.0" + "'", str29, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Asterisk 1.0" + "'", str35, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Asterisk 16" + "'", str48, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(asteriskVersion62);
        org.junit.Assert.assertNotNull(asteriskVersion63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Asterisk 20" + "'", str73, "Asterisk 20");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int6 = listenerPriority1.compare(listenerPriority5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        int int13 = asteriskVersion7.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        boolean boolean17 = asteriskVersion11.isAtLeast(asteriskVersion15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean19 = asteriskVersion11.equals((java.lang.Object) listenerPriority18);
        int int20 = listenerPriority5.compare(listenerPriority18);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int24 = asteriskVersion22.compareTo(asteriskVersion23);
        boolean boolean25 = asteriskVersion21.isAtLeast(asteriskVersion23);
        org.asteriskjava.pbx.ListenerPriority listenerPriority26 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority27 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int28 = listenerPriority26.compare(listenerPriority27);
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int30 = listenerPriority27.compare(listenerPriority29);
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int32 = listenerPriority27.compare(listenerPriority31);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean35 = asteriskVersion33.isAtLeast(asteriskVersion34);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean38 = asteriskVersion36.isAtLeast(asteriskVersion37);
        int int39 = asteriskVersion33.compareTo(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean42 = asteriskVersion40.isAtLeast(asteriskVersion41);
        boolean boolean43 = asteriskVersion37.isAtLeast(asteriskVersion41);
        org.asteriskjava.pbx.ListenerPriority listenerPriority44 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean45 = asteriskVersion37.equals((java.lang.Object) listenerPriority44);
        int int46 = listenerPriority31.compare(listenerPriority44);
        boolean boolean47 = asteriskVersion23.equals((java.lang.Object) listenerPriority31);
        int int48 = listenerPriority18.compare(listenerPriority31);
        org.asteriskjava.pbx.ListenerPriority listenerPriority49 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        int int50 = listenerPriority18.compare(listenerPriority49);
        org.asteriskjava.pbx.ListenerPriority listenerPriority51 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority52 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int53 = listenerPriority51.compare(listenerPriority52);
        org.asteriskjava.pbx.ListenerPriority listenerPriority54 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int55 = listenerPriority52.compare(listenerPriority54);
        org.asteriskjava.pbx.ListenerPriority listenerPriority56 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority57 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int58 = listenerPriority56.compare(listenerPriority57);
        org.asteriskjava.pbx.ListenerPriority listenerPriority59 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority60 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int61 = listenerPriority59.compare(listenerPriority60);
        org.asteriskjava.pbx.ListenerPriority listenerPriority62 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int63 = listenerPriority60.compare(listenerPriority62);
        int int64 = listenerPriority57.compare(listenerPriority60);
        org.asteriskjava.pbx.ListenerPriority listenerPriority65 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority66 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int67 = listenerPriority65.compare(listenerPriority66);
        int int68 = listenerPriority57.compare(listenerPriority65);
        int int69 = listenerPriority54.compare(listenerPriority65);
        int int70 = listenerPriority18.compare(listenerPriority65);
        org.asteriskjava.pbx.ListenerPriority listenerPriority71 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority72 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int73 = listenerPriority71.compare(listenerPriority72);
        int int74 = listenerPriority65.compare(listenerPriority71);
        java.lang.Class<?> wildcardClass75 = listenerPriority71.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-6) + "'", int6 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority26 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority26.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority27 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority27.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-4) + "'", int30 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-6) + "'", int32 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority44 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority44.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority49 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority49.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority51 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority51.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority52 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority52.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority54 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority54.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-4) + "'", int55 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority56 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority56.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority57 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority57.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority59 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority59.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority60 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority60.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority62 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority62.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-4) + "'", int63 == (-4));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority65 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority65.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority66 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority66.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-2) + "'", int68 == (-2));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority71 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority71.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority72 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority72.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        boolean boolean6 = asteriskVersion0.equals((java.lang.Object) asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int11 = asteriskVersion8.compareTo(asteriskVersion10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int14 = asteriskVersion12.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str16 = asteriskVersion15.toString();
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int20 = asteriskVersion18.compareTo(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str22 = asteriskVersion21.toString();
        boolean boolean23 = asteriskVersion19.isAtLeast(asteriskVersion21);
        boolean boolean25 = asteriskVersion19.equals((java.lang.Object) "0");
        boolean boolean26 = asteriskVersion13.equals((java.lang.Object) asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int31 = asteriskVersion29.compareTo(asteriskVersion30);
        boolean boolean32 = asteriskVersion28.isAtLeast(asteriskVersion30);
        int int33 = asteriskVersion27.compareTo(asteriskVersion28);
        int int34 = asteriskVersion13.compareTo(asteriskVersion27);
        int int35 = asteriskVersion8.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int38 = asteriskVersion36.compareTo(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str40 = asteriskVersion39.toString();
        boolean boolean41 = asteriskVersion37.isAtLeast(asteriskVersion39);
        boolean boolean43 = asteriskVersion37.equals((java.lang.Object) "0");
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean46 = asteriskVersion44.isAtLeast(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int48 = asteriskVersion45.compareTo(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean50 = asteriskVersion47.isAtLeast(asteriskVersion49);
        boolean boolean51 = asteriskVersion37.isAtLeast(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int54 = asteriskVersion52.compareTo(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int58 = asteriskVersion56.compareTo(asteriskVersion57);
        boolean boolean59 = asteriskVersion55.isAtLeast(asteriskVersion57);
        int int60 = asteriskVersion52.compareTo(asteriskVersion55);
        java.lang.String str61 = asteriskVersion52.toString();
        java.lang.String str62 = asteriskVersion52.toString();
        int int63 = asteriskVersion37.compareTo(asteriskVersion52);
        boolean boolean64 = asteriskVersion8.isAtLeast(asteriskVersion37);
        boolean boolean65 = asteriskVersion0.equals((java.lang.Object) asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        java.lang.String str67 = asteriskVersion66.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        int int69 = asteriskVersion66.compareTo(asteriskVersion68);
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion71 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean72 = asteriskVersion70.isAtLeast(asteriskVersion71);
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion74 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean75 = asteriskVersion73.isAtLeast(asteriskVersion74);
        int int76 = asteriskVersion70.compareTo(asteriskVersion74);
        org.asteriskjava.AsteriskVersion asteriskVersion77 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion78 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean79 = asteriskVersion77.isAtLeast(asteriskVersion78);
        boolean boolean80 = asteriskVersion74.isAtLeast(asteriskVersion78);
        org.asteriskjava.pbx.ListenerPriority listenerPriority81 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean82 = asteriskVersion74.equals((java.lang.Object) listenerPriority81);
        boolean boolean83 = asteriskVersion68.equals((java.lang.Object) asteriskVersion74);
        org.asteriskjava.AsteriskVersion asteriskVersion84 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion85 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int86 = asteriskVersion84.compareTo(asteriskVersion85);
        org.asteriskjava.AsteriskVersion asteriskVersion87 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str88 = asteriskVersion87.toString();
        boolean boolean89 = asteriskVersion85.isAtLeast(asteriskVersion87);
        boolean boolean91 = asteriskVersion85.equals((java.lang.Object) "0");
        boolean boolean92 = asteriskVersion68.isAtLeast(asteriskVersion85);
        boolean boolean93 = asteriskVersion37.isAtLeast(asteriskVersion85);
        java.lang.String str94 = asteriskVersion85.toString();
        java.lang.String str95 = asteriskVersion85.toString();
        java.lang.String str96 = asteriskVersion85.toString();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Asterisk 1.0" + "'", str16, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Asterisk 1.0" + "'", str22, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Asterisk 1.0" + "'", str40, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Asterisk 17" + "'", str61, "Asterisk 17");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Asterisk 17" + "'", str62, "Asterisk 17");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Asterisk 10" + "'", str67, "Asterisk 10");
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertNotNull(asteriskVersion71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertNotNull(asteriskVersion74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion77);
        org.junit.Assert.assertNotNull(asteriskVersion78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority81 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority81.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(asteriskVersion84);
        org.junit.Assert.assertNotNull(asteriskVersion85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Asterisk 1.0" + "'", str88, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Asterisk 16" + "'", str94, "Asterisk 16");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Asterisk 16" + "'", str95, "Asterisk 16");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Asterisk 16" + "'", str96, "Asterisk 16");
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean20 = asteriskVersion18.isAtLeast(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int22 = asteriskVersion19.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean24 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int25 = asteriskVersion13.compareTo(asteriskVersion21);
        boolean boolean26 = asteriskVersion0.isAtLeast(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean29 = asteriskVersion27.isAtLeast(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean32 = asteriskVersion30.isAtLeast(asteriskVersion31);
        int int33 = asteriskVersion27.compareTo(asteriskVersion31);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean36 = asteriskVersion34.isAtLeast(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean39 = asteriskVersion37.isAtLeast(asteriskVersion38);
        int int40 = asteriskVersion34.compareTo(asteriskVersion38);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean43 = asteriskVersion41.isAtLeast(asteriskVersion42);
        boolean boolean44 = asteriskVersion38.isAtLeast(asteriskVersion42);
        boolean boolean45 = asteriskVersion27.isAtLeast(asteriskVersion42);
        int int46 = asteriskVersion21.compareTo(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean49 = asteriskVersion47.isAtLeast(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean52 = asteriskVersion50.isAtLeast(asteriskVersion51);
        int int53 = asteriskVersion47.compareTo(asteriskVersion51);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean56 = asteriskVersion54.isAtLeast(asteriskVersion55);
        boolean boolean57 = asteriskVersion51.isAtLeast(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean59 = asteriskVersion55.isAtLeast(asteriskVersion58);
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        java.lang.String str61 = asteriskVersion60.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion62 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        int int63 = asteriskVersion60.compareTo(asteriskVersion62);
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean66 = asteriskVersion64.isAtLeast(asteriskVersion65);
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean69 = asteriskVersion67.isAtLeast(asteriskVersion68);
        int int70 = asteriskVersion64.compareTo(asteriskVersion68);
        org.asteriskjava.AsteriskVersion asteriskVersion71 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion72 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean73 = asteriskVersion71.isAtLeast(asteriskVersion72);
        boolean boolean74 = asteriskVersion68.isAtLeast(asteriskVersion72);
        org.asteriskjava.pbx.ListenerPriority listenerPriority75 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean76 = asteriskVersion68.equals((java.lang.Object) listenerPriority75);
        boolean boolean77 = asteriskVersion62.equals((java.lang.Object) asteriskVersion68);
        boolean boolean78 = asteriskVersion58.isAtLeast(asteriskVersion62);
        org.asteriskjava.AsteriskVersion asteriskVersion79 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion80 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int81 = asteriskVersion79.compareTo(asteriskVersion80);
        org.asteriskjava.AsteriskVersion asteriskVersion82 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int83 = asteriskVersion79.compareTo(asteriskVersion82);
        java.lang.String str84 = asteriskVersion82.toString();
        java.lang.String str85 = asteriskVersion82.toString();
        int int86 = asteriskVersion62.compareTo(asteriskVersion82);
        boolean boolean87 = asteriskVersion27.isAtLeast(asteriskVersion62);
        org.asteriskjava.AsteriskVersion asteriskVersion88 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion89 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int90 = asteriskVersion88.compareTo(asteriskVersion89);
        org.asteriskjava.AsteriskVersion asteriskVersion91 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int92 = asteriskVersion88.compareTo(asteriskVersion91);
        org.asteriskjava.AsteriskVersion asteriskVersion93 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion94 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int95 = asteriskVersion93.compareTo(asteriskVersion94);
        org.asteriskjava.AsteriskVersion asteriskVersion96 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int97 = asteriskVersion93.compareTo(asteriskVersion96);
        boolean boolean98 = asteriskVersion91.isAtLeast(asteriskVersion96);
        boolean boolean99 = asteriskVersion62.equals((java.lang.Object) asteriskVersion91);
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Asterisk 10" + "'", str61, "Asterisk 10");
        org.junit.Assert.assertNotNull(asteriskVersion62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion71);
        org.junit.Assert.assertNotNull(asteriskVersion72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority75 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority75.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(asteriskVersion79);
        org.junit.Assert.assertNotNull(asteriskVersion80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Asterisk 1.6" + "'", str84, "Asterisk 1.6");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Asterisk 1.6" + "'", str85, "Asterisk 1.6");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(asteriskVersion88);
        org.junit.Assert.assertNotNull(asteriskVersion89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion93);
        org.junit.Assert.assertNotNull(asteriskVersion94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        boolean boolean10 = asteriskVersion4.isAtLeast(asteriskVersion8);
        org.asteriskjava.pbx.TechType techType11 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean12 = asteriskVersion4.equals((java.lang.Object) techType11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str14 = asteriskVersion13.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean16 = asteriskVersion13.isAtLeast(asteriskVersion15);
        java.lang.String str17 = asteriskVersion13.toString();
        boolean boolean18 = asteriskVersion4.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum20 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str21 = activityStatusEnum20.getDefaultMessage();
        boolean boolean22 = asteriskVersion19.equals((java.lang.Object) str21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean25 = asteriskVersion23.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean28 = asteriskVersion26.isAtLeast(asteriskVersion27);
        int int29 = asteriskVersion23.compareTo(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean32 = asteriskVersion30.isAtLeast(asteriskVersion31);
        boolean boolean33 = asteriskVersion27.isAtLeast(asteriskVersion31);
        org.asteriskjava.pbx.ListenerPriority listenerPriority34 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean35 = asteriskVersion27.equals((java.lang.Object) listenerPriority34);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int37 = asteriskVersion27.compareTo(asteriskVersion36);
        boolean boolean38 = asteriskVersion19.equals((java.lang.Object) asteriskVersion27);
        boolean boolean39 = asteriskVersion13.equals((java.lang.Object) asteriskVersion19);
        java.lang.Class<?> wildcardClass40 = asteriskVersion19.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + techType11 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType11.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Asterisk 11" + "'", str14, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Asterisk 11" + "'", str17, "Asterisk 11");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + activityStatusEnum20 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum20.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Progress" + "'", str21, "Progress");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority34 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority34.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean8 = asteriskVersion6.isAtLeast(asteriskVersion7);
        int int9 = asteriskVersion3.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        boolean boolean13 = asteriskVersion7.isAtLeast(asteriskVersion11);
        boolean boolean14 = asteriskVersion0.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean17 = asteriskVersion15.isAtLeast(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int19 = asteriskVersion16.compareTo(asteriskVersion18);
        boolean boolean20 = asteriskVersion11.equals((java.lang.Object) asteriskVersion16);
        java.lang.Class<?> wildcardClass21 = asteriskVersion16.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum0 = org.asteriskjava.pbx.ActivityStatusEnum.SUCCESS;
        java.lang.String str1 = activityStatusEnum0.getDefaultMessage();
        java.lang.String str2 = activityStatusEnum0.getDefaultMessage();
        java.lang.Class<?> wildcardClass3 = activityStatusEnum0.getClass();
        org.junit.Assert.assertTrue("'" + activityStatusEnum0 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.SUCCESS + "'", activityStatusEnum0.equals(org.asteriskjava.pbx.ActivityStatusEnum.SUCCESS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Success" + "'", str1, "Success");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Success" + "'", str2, "Success");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int2 = asteriskVersion0.compareTo(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str4 = asteriskVersion3.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean6 = asteriskVersion3.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int10 = asteriskVersion8.compareTo(asteriskVersion9);
        boolean boolean11 = asteriskVersion7.isAtLeast(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int16 = asteriskVersion13.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean18 = asteriskVersion15.isAtLeast(asteriskVersion17);
        int int19 = asteriskVersion7.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int22 = asteriskVersion20.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int24 = asteriskVersion20.compareTo(asteriskVersion23);
        boolean boolean25 = asteriskVersion15.isAtLeast(asteriskVersion23);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int28 = asteriskVersion26.compareTo(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str30 = asteriskVersion29.toString();
        boolean boolean31 = asteriskVersion27.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int34 = asteriskVersion32.compareTo(asteriskVersion33);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str36 = asteriskVersion35.toString();
        boolean boolean37 = asteriskVersion33.isAtLeast(asteriskVersion35);
        boolean boolean39 = asteriskVersion33.equals((java.lang.Object) "0");
        boolean boolean40 = asteriskVersion27.equals((java.lang.Object) asteriskVersion33);
        boolean boolean41 = asteriskVersion23.isAtLeast(asteriskVersion27);
        int int42 = asteriskVersion5.compareTo(asteriskVersion23);
        boolean boolean43 = asteriskVersion0.isAtLeast(asteriskVersion23);
        java.lang.String str44 = asteriskVersion23.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int48 = asteriskVersion46.compareTo(asteriskVersion47);
        boolean boolean49 = asteriskVersion45.isAtLeast(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean51 = asteriskVersion45.isAtLeast(asteriskVersion50);
        java.lang.String str52 = asteriskVersion45.toString();
        boolean boolean53 = asteriskVersion23.equals((java.lang.Object) str52);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str56 = asteriskVersion55.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean58 = asteriskVersion55.isAtLeast(asteriskVersion57);
        boolean boolean59 = asteriskVersion54.equals((java.lang.Object) boolean58);
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean62 = asteriskVersion60.isAtLeast(asteriskVersion61);
        org.asteriskjava.AsteriskVersion asteriskVersion63 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int64 = asteriskVersion60.compareTo(asteriskVersion63);
        int int65 = asteriskVersion54.compareTo(asteriskVersion63);
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int69 = asteriskVersion67.compareTo(asteriskVersion68);
        boolean boolean70 = asteriskVersion66.isAtLeast(asteriskVersion68);
        boolean boolean71 = asteriskVersion54.isAtLeast(asteriskVersion66);
        java.lang.String str72 = asteriskVersion54.toString();
        boolean boolean73 = asteriskVersion23.isAtLeast(asteriskVersion54);
        org.asteriskjava.AsteriskVersion asteriskVersion74 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean75 = asteriskVersion54.isAtLeast(asteriskVersion74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Asterisk 11" + "'", str4, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Asterisk 1.0" + "'", str30, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Asterisk 1.0" + "'", str36, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Asterisk 1.6" + "'", str44, "Asterisk 1.6");
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Asterisk 12" + "'", str52, "Asterisk 12");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Asterisk 11" + "'", str56, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(asteriskVersion63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Asterisk 12" + "'", str72, "Asterisk 12");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int7 = asteriskVersion5.compareTo(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int9 = asteriskVersion5.compareTo(asteriskVersion8);
        java.lang.String str10 = asteriskVersion8.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int13 = asteriskVersion11.compareTo(asteriskVersion12);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int15 = asteriskVersion11.compareTo(asteriskVersion14);
        org.asteriskjava.pbx.TechType techType16 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean17 = asteriskVersion11.equals((java.lang.Object) techType16);
        boolean boolean18 = asteriskVersion8.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int22 = asteriskVersion20.compareTo(asteriskVersion21);
        boolean boolean23 = asteriskVersion19.isAtLeast(asteriskVersion21);
        int int24 = asteriskVersion11.compareTo(asteriskVersion19);
        java.lang.Object obj25 = null;
        boolean boolean26 = asteriskVersion11.equals(obj25);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int30 = asteriskVersion28.compareTo(asteriskVersion29);
        boolean boolean31 = asteriskVersion27.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int34 = asteriskVersion32.compareTo(asteriskVersion33);
        boolean boolean35 = asteriskVersion27.isAtLeast(asteriskVersion32);
        int int36 = asteriskVersion11.compareTo(asteriskVersion27);
        boolean boolean37 = asteriskVersion2.isAtLeast(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int41 = asteriskVersion39.compareTo(asteriskVersion40);
        boolean boolean42 = asteriskVersion38.isAtLeast(asteriskVersion40);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean44 = asteriskVersion38.isAtLeast(asteriskVersion43);
        boolean boolean45 = asteriskVersion11.equals((java.lang.Object) boolean44);
        java.lang.Class<?> wildcardClass46 = asteriskVersion11.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Asterisk 1.8" + "'", str10, "Asterisk 1.8");
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + techType16 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType16.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent3 = null;
        htmlEventTracer0.onManagerEvent(managerEvent3);
        org.asteriskjava.manager.event.ManagerEvent managerEvent5 = null;
        htmlEventTracer0.onManagerEvent(managerEvent5);
        org.asteriskjava.manager.event.ManagerEvent managerEvent7 = null;
        htmlEventTracer0.onManagerEvent(managerEvent7);
        org.asteriskjava.manager.event.ManagerEvent managerEvent9 = null;
        htmlEventTracer0.onManagerEvent(managerEvent9);
        org.asteriskjava.manager.event.ManagerEvent managerEvent11 = null;
        htmlEventTracer0.onManagerEvent(managerEvent11);
        org.asteriskjava.manager.event.ManagerEvent managerEvent13 = null;
        htmlEventTracer0.onManagerEvent(managerEvent13);
        org.asteriskjava.manager.event.ManagerEvent managerEvent15 = null;
        htmlEventTracer0.onManagerEvent(managerEvent15);
        org.asteriskjava.manager.event.ManagerEvent managerEvent17 = null;
        htmlEventTracer0.onManagerEvent(managerEvent17);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean20 = asteriskVersion18.isAtLeast(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int22 = asteriskVersion19.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean24 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int25 = asteriskVersion13.compareTo(asteriskVersion21);
        boolean boolean26 = asteriskVersion0.isAtLeast(asteriskVersion21);
        boolean boolean28 = asteriskVersion0.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean30 = asteriskVersion0.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean33 = asteriskVersion31.isAtLeast(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean36 = asteriskVersion34.isAtLeast(asteriskVersion35);
        int int37 = asteriskVersion31.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean40 = asteriskVersion38.isAtLeast(asteriskVersion39);
        boolean boolean41 = asteriskVersion35.isAtLeast(asteriskVersion39);
        org.asteriskjava.pbx.ListenerPriority listenerPriority42 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean43 = asteriskVersion35.equals((java.lang.Object) listenerPriority42);
        boolean boolean44 = asteriskVersion0.equals((java.lang.Object) listenerPriority42);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int48 = asteriskVersion46.compareTo(asteriskVersion47);
        boolean boolean49 = asteriskVersion45.isAtLeast(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean52 = asteriskVersion50.isAtLeast(asteriskVersion51);
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int54 = asteriskVersion51.compareTo(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean56 = asteriskVersion53.isAtLeast(asteriskVersion55);
        int int57 = asteriskVersion45.compareTo(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int60 = asteriskVersion58.compareTo(asteriskVersion59);
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int62 = asteriskVersion58.compareTo(asteriskVersion61);
        boolean boolean63 = asteriskVersion53.isAtLeast(asteriskVersion61);
        java.lang.String str64 = asteriskVersion61.toString();
        int int65 = asteriskVersion0.compareTo(asteriskVersion61);
        org.asteriskjava.AsteriskVersion asteriskVersion66 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int67 = asteriskVersion61.compareTo(asteriskVersion66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority42 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority42.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Asterisk 1.6" + "'", str64, "Asterisk 1.6");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer0 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        htmlEventTracer0.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent4 = null;
        htmlEventTracer0.onManagerEvent(managerEvent4);
        org.asteriskjava.manager.event.ManagerEvent managerEvent6 = null;
        htmlEventTracer0.onManagerEvent(managerEvent6);
        org.asteriskjava.manager.event.ManagerEvent managerEvent8 = null;
        htmlEventTracer0.onManagerEvent(managerEvent8);
        org.asteriskjava.manager.event.ManagerEvent managerEvent10 = null;
        htmlEventTracer0.onManagerEvent(managerEvent10);
        org.asteriskjava.manager.event.ManagerEvent managerEvent12 = null;
        htmlEventTracer0.onManagerEvent(managerEvent12);
        // The following exception was thrown during execution in test generation
        try {
            htmlEventTracer0.write();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean20 = asteriskVersion18.isAtLeast(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int22 = asteriskVersion19.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean24 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int25 = asteriskVersion13.compareTo(asteriskVersion21);
        boolean boolean26 = asteriskVersion0.isAtLeast(asteriskVersion21);
        boolean boolean28 = asteriskVersion0.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean30 = asteriskVersion0.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean33 = asteriskVersion31.isAtLeast(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean36 = asteriskVersion34.isAtLeast(asteriskVersion35);
        int int37 = asteriskVersion31.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean40 = asteriskVersion38.isAtLeast(asteriskVersion39);
        boolean boolean41 = asteriskVersion35.isAtLeast(asteriskVersion39);
        org.asteriskjava.pbx.ListenerPriority listenerPriority42 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean43 = asteriskVersion35.equals((java.lang.Object) listenerPriority42);
        boolean boolean44 = asteriskVersion0.equals((java.lang.Object) listenerPriority42);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int48 = asteriskVersion46.compareTo(asteriskVersion47);
        boolean boolean49 = asteriskVersion45.isAtLeast(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean52 = asteriskVersion50.isAtLeast(asteriskVersion51);
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int54 = asteriskVersion51.compareTo(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean56 = asteriskVersion53.isAtLeast(asteriskVersion55);
        int int57 = asteriskVersion45.compareTo(asteriskVersion53);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int60 = asteriskVersion58.compareTo(asteriskVersion59);
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int62 = asteriskVersion58.compareTo(asteriskVersion61);
        boolean boolean63 = asteriskVersion53.isAtLeast(asteriskVersion61);
        java.lang.String str64 = asteriskVersion61.toString();
        int int65 = asteriskVersion0.compareTo(asteriskVersion61);
        org.asteriskjava.AsteriskVersion asteriskVersion66 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = asteriskVersion61.isAtLeast(asteriskVersion66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority42 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority42.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Asterisk 1.6" + "'", str64, "Asterisk 1.6");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.pbx.ListenerPriority listenerPriority5 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int6 = listenerPriority1.compare(listenerPriority5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean12 = asteriskVersion10.isAtLeast(asteriskVersion11);
        int int13 = asteriskVersion7.compareTo(asteriskVersion11);
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean16 = asteriskVersion14.isAtLeast(asteriskVersion15);
        boolean boolean17 = asteriskVersion11.isAtLeast(asteriskVersion15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean19 = asteriskVersion11.equals((java.lang.Object) listenerPriority18);
        int int20 = listenerPriority5.compare(listenerPriority18);
        org.asteriskjava.pbx.ListenerPriority listenerPriority21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = listenerPriority18.compare(listenerPriority21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority5 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority5.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-6) + "'", int6 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int4 = listenerPriority1.compare(listenerPriority3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int8 = asteriskVersion6.compareTo(asteriskVersion7);
        boolean boolean9 = asteriskVersion5.isAtLeast(asteriskVersion7);
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority11 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int12 = listenerPriority10.compare(listenerPriority11);
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int14 = listenerPriority11.compare(listenerPriority13);
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int16 = listenerPriority11.compare(listenerPriority15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean19 = asteriskVersion17.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean22 = asteriskVersion20.isAtLeast(asteriskVersion21);
        int int23 = asteriskVersion17.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean26 = asteriskVersion24.isAtLeast(asteriskVersion25);
        boolean boolean27 = asteriskVersion21.isAtLeast(asteriskVersion25);
        org.asteriskjava.pbx.ListenerPriority listenerPriority28 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean29 = asteriskVersion21.equals((java.lang.Object) listenerPriority28);
        int int30 = listenerPriority15.compare(listenerPriority28);
        boolean boolean31 = asteriskVersion7.equals((java.lang.Object) listenerPriority15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority33 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int34 = listenerPriority32.compare(listenerPriority33);
        int int35 = listenerPriority15.compare(listenerPriority33);
        int int36 = listenerPriority3.compare(listenerPriority15);
        org.asteriskjava.pbx.ListenerPriority listenerPriority37 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority38 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int39 = listenerPriority37.compare(listenerPriority38);
        org.asteriskjava.pbx.ListenerPriority listenerPriority40 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int41 = listenerPriority38.compare(listenerPriority40);
        org.asteriskjava.pbx.ListenerPriority listenerPriority42 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int43 = listenerPriority38.compare(listenerPriority42);
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean46 = asteriskVersion44.isAtLeast(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean49 = asteriskVersion47.isAtLeast(asteriskVersion48);
        int int50 = asteriskVersion44.compareTo(asteriskVersion48);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean53 = asteriskVersion51.isAtLeast(asteriskVersion52);
        boolean boolean54 = asteriskVersion48.isAtLeast(asteriskVersion52);
        org.asteriskjava.pbx.ListenerPriority listenerPriority55 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean56 = asteriskVersion48.equals((java.lang.Object) listenerPriority55);
        int int57 = listenerPriority42.compare(listenerPriority55);
        int int58 = listenerPriority15.compare(listenerPriority55);
        java.lang.Class<?> wildcardClass59 = listenerPriority15.getClass();
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-4) + "'", int4 == (-4));
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority11 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority11.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-4) + "'", int14 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-6) + "'", int16 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority28 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority28.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority33 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority33.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-2) + "'", int36 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority37 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority37.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority38 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority38.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority40 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority40.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-4) + "'", int41 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority42 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority42.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-6) + "'", int43 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority55 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority55.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean5 = asteriskVersion3.isAtLeast(asteriskVersion4);
        int int6 = asteriskVersion0.compareTo(asteriskVersion4);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        boolean boolean10 = asteriskVersion4.isAtLeast(asteriskVersion8);
        org.asteriskjava.pbx.TechType techType11 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean12 = asteriskVersion4.equals((java.lang.Object) techType11);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_10;
        int int14 = asteriskVersion4.compareTo(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int17 = asteriskVersion15.compareTo(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int19 = asteriskVersion15.compareTo(asteriskVersion18);
        org.asteriskjava.pbx.DTMFTone dTMFTone20 = org.asteriskjava.pbx.DTMFTone.FOUR;
        java.lang.String str21 = dTMFTone20.toString();
        java.lang.String str22 = dTMFTone20.toString();
        boolean boolean23 = asteriskVersion18.equals((java.lang.Object) str22);
        int int24 = asteriskVersion4.compareTo(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean27 = asteriskVersion25.isAtLeast(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean30 = asteriskVersion28.isAtLeast(asteriskVersion29);
        int int31 = asteriskVersion25.compareTo(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean34 = asteriskVersion32.isAtLeast(asteriskVersion33);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean37 = asteriskVersion35.isAtLeast(asteriskVersion36);
        int int38 = asteriskVersion32.compareTo(asteriskVersion36);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean41 = asteriskVersion39.isAtLeast(asteriskVersion40);
        boolean boolean42 = asteriskVersion36.isAtLeast(asteriskVersion40);
        boolean boolean43 = asteriskVersion25.isAtLeast(asteriskVersion40);
        org.asteriskjava.AsteriskVersion asteriskVersion44 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean46 = asteriskVersion44.isAtLeast(asteriskVersion45);
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int48 = asteriskVersion45.compareTo(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int51 = asteriskVersion49.compareTo(asteriskVersion50);
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str53 = asteriskVersion52.toString();
        boolean boolean54 = asteriskVersion50.isAtLeast(asteriskVersion52);
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int57 = asteriskVersion55.compareTo(asteriskVersion56);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str59 = asteriskVersion58.toString();
        boolean boolean60 = asteriskVersion56.isAtLeast(asteriskVersion58);
        boolean boolean62 = asteriskVersion56.equals((java.lang.Object) "0");
        boolean boolean63 = asteriskVersion50.equals((java.lang.Object) asteriskVersion56);
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int68 = asteriskVersion66.compareTo(asteriskVersion67);
        boolean boolean69 = asteriskVersion65.isAtLeast(asteriskVersion67);
        int int70 = asteriskVersion64.compareTo(asteriskVersion65);
        int int71 = asteriskVersion50.compareTo(asteriskVersion64);
        int int72 = asteriskVersion45.compareTo(asteriskVersion50);
        java.lang.String str73 = asteriskVersion50.toString();
        boolean boolean74 = asteriskVersion40.isAtLeast(asteriskVersion50);
        boolean boolean75 = asteriskVersion18.isAtLeast(asteriskVersion50);
        java.lang.Class<?> wildcardClass76 = asteriskVersion50.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + techType11 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType11.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + dTMFTone20 + "' != '" + org.asteriskjava.pbx.DTMFTone.FOUR + "'", dTMFTone20.equals(org.asteriskjava.pbx.DTMFTone.FOUR));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "4" + "'", str21, "4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "4" + "'", str22, "4");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(asteriskVersion44);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Asterisk 1.0" + "'", str53, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Asterisk 1.0" + "'", str59, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Asterisk 16" + "'", str73, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum1 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str2 = activityStatusEnum1.getDefaultMessage();
        boolean boolean3 = asteriskVersion0.equals((java.lang.Object) str2);
        org.asteriskjava.AsteriskVersion asteriskVersion4 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean6 = asteriskVersion4.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean9 = asteriskVersion7.isAtLeast(asteriskVersion8);
        int int10 = asteriskVersion4.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean13 = asteriskVersion11.isAtLeast(asteriskVersion12);
        boolean boolean14 = asteriskVersion8.isAtLeast(asteriskVersion12);
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean16 = asteriskVersion8.equals((java.lang.Object) listenerPriority15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int18 = asteriskVersion8.compareTo(asteriskVersion17);
        boolean boolean19 = asteriskVersion0.equals((java.lang.Object) asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        java.lang.String str21 = asteriskVersion20.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int25 = asteriskVersion23.compareTo(asteriskVersion24);
        boolean boolean26 = asteriskVersion22.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int29 = asteriskVersion27.compareTo(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int31 = asteriskVersion27.compareTo(asteriskVersion30);
        java.lang.String str32 = asteriskVersion30.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int35 = asteriskVersion33.compareTo(asteriskVersion34);
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int37 = asteriskVersion33.compareTo(asteriskVersion36);
        org.asteriskjava.pbx.TechType techType38 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean39 = asteriskVersion33.equals((java.lang.Object) techType38);
        boolean boolean40 = asteriskVersion30.isAtLeast(asteriskVersion33);
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int44 = asteriskVersion42.compareTo(asteriskVersion43);
        boolean boolean45 = asteriskVersion41.isAtLeast(asteriskVersion43);
        int int46 = asteriskVersion33.compareTo(asteriskVersion41);
        java.lang.Object obj47 = null;
        boolean boolean48 = asteriskVersion33.equals(obj47);
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int52 = asteriskVersion50.compareTo(asteriskVersion51);
        boolean boolean53 = asteriskVersion49.isAtLeast(asteriskVersion51);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int56 = asteriskVersion54.compareTo(asteriskVersion55);
        boolean boolean57 = asteriskVersion49.isAtLeast(asteriskVersion54);
        int int58 = asteriskVersion33.compareTo(asteriskVersion49);
        boolean boolean59 = asteriskVersion24.isAtLeast(asteriskVersion33);
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion61 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion62 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int63 = asteriskVersion61.compareTo(asteriskVersion62);
        boolean boolean64 = asteriskVersion60.isAtLeast(asteriskVersion62);
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean66 = asteriskVersion60.isAtLeast(asteriskVersion65);
        boolean boolean67 = asteriskVersion33.equals((java.lang.Object) boolean66);
        boolean boolean68 = asteriskVersion20.isAtLeast(asteriskVersion33);
        boolean boolean69 = asteriskVersion0.equals((java.lang.Object) asteriskVersion20);
        java.lang.Class<?> wildcardClass70 = asteriskVersion0.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertTrue("'" + activityStatusEnum1 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum1.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Progress" + "'", str2, "Progress");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(asteriskVersion4);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 16" + "'", str21, "Asterisk 16");
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Asterisk 1.8" + "'", str32, "Asterisk 1.8");
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + techType38 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType38.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertNotNull(asteriskVersion61);
        org.junit.Assert.assertNotNull(asteriskVersion62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = asteriskVersion0.compareTo(asteriskVersion1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean2 = asteriskVersion0.isAtLeast(asteriskVersion1);
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int4 = asteriskVersion1.compareTo(asteriskVersion3);
        java.lang.String str5 = asteriskVersion3.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str8 = asteriskVersion7.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean10 = asteriskVersion7.isAtLeast(asteriskVersion9);
        boolean boolean11 = asteriskVersion6.equals((java.lang.Object) boolean10);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int16 = asteriskVersion12.compareTo(asteriskVersion15);
        int int17 = asteriskVersion6.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int21 = asteriskVersion19.compareTo(asteriskVersion20);
        boolean boolean22 = asteriskVersion18.isAtLeast(asteriskVersion20);
        boolean boolean23 = asteriskVersion6.isAtLeast(asteriskVersion18);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int26 = asteriskVersion24.compareTo(asteriskVersion25);
        org.asteriskjava.AsteriskVersion asteriskVersion27 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int28 = asteriskVersion24.compareTo(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion30 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean31 = asteriskVersion29.isAtLeast(asteriskVersion30);
        boolean boolean32 = asteriskVersion27.isAtLeast(asteriskVersion30);
        int int33 = asteriskVersion18.compareTo(asteriskVersion27);
        boolean boolean34 = asteriskVersion3.isAtLeast(asteriskVersion27);
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion37 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int38 = asteriskVersion36.compareTo(asteriskVersion37);
        boolean boolean39 = asteriskVersion35.isAtLeast(asteriskVersion37);
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean42 = asteriskVersion40.isAtLeast(asteriskVersion41);
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int44 = asteriskVersion41.compareTo(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean46 = asteriskVersion43.isAtLeast(asteriskVersion45);
        int int47 = asteriskVersion35.compareTo(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion48 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int51 = asteriskVersion49.compareTo(asteriskVersion50);
        boolean boolean52 = asteriskVersion48.isAtLeast(asteriskVersion50);
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean55 = asteriskVersion53.isAtLeast(asteriskVersion54);
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int57 = asteriskVersion54.compareTo(asteriskVersion56);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean59 = asteriskVersion56.isAtLeast(asteriskVersion58);
        int int60 = asteriskVersion48.compareTo(asteriskVersion56);
        boolean boolean61 = asteriskVersion35.isAtLeast(asteriskVersion56);
        boolean boolean63 = asteriskVersion35.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean65 = asteriskVersion35.isAtLeast(asteriskVersion64);
        java.lang.String str66 = asteriskVersion64.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion68 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int69 = asteriskVersion67.compareTo(asteriskVersion68);
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int71 = asteriskVersion67.compareTo(asteriskVersion70);
        java.lang.String str72 = asteriskVersion70.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion74 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int75 = asteriskVersion73.compareTo(asteriskVersion74);
        org.asteriskjava.AsteriskVersion asteriskVersion76 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int77 = asteriskVersion73.compareTo(asteriskVersion76);
        org.asteriskjava.pbx.TechType techType78 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean79 = asteriskVersion73.equals((java.lang.Object) techType78);
        boolean boolean80 = asteriskVersion70.isAtLeast(asteriskVersion73);
        int int81 = asteriskVersion64.compareTo(asteriskVersion73);
        int int82 = asteriskVersion27.compareTo(asteriskVersion73);
        org.asteriskjava.AsteriskVersion asteriskVersion83 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = asteriskVersion73.isAtLeast(asteriskVersion83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Asterisk 20" + "'", str5, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Asterisk 11" + "'", str8, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertNotNull(asteriskVersion30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertNotNull(asteriskVersion37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion48);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Asterisk 20" + "'", str66, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertNotNull(asteriskVersion68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Asterisk 1.8" + "'", str72, "Asterisk 1.8");
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertNotNull(asteriskVersion74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + techType78 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType78.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        boolean boolean8 = asteriskVersion3.equals((java.lang.Object) asteriskVersion5);
        int int9 = asteriskVersion0.compareTo(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str11 = asteriskVersion10.toString();
        boolean boolean12 = asteriskVersion5.isAtLeast(asteriskVersion10);
        java.lang.String str13 = asteriskVersion5.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str15 = asteriskVersion14.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean17 = asteriskVersion14.isAtLeast(asteriskVersion16);
        java.lang.String str18 = asteriskVersion14.toString();
        boolean boolean19 = asteriskVersion5.equals((java.lang.Object) asteriskVersion14);
        org.asteriskjava.AsteriskVersion asteriskVersion20 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str21 = asteriskVersion20.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean23 = asteriskVersion20.isAtLeast(asteriskVersion22);
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int25 = asteriskVersion20.compareTo(asteriskVersion24);
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum26 = org.asteriskjava.pbx.ActivityStatusEnum.FAILURE;
        java.lang.String str27 = activityStatusEnum26.getDefaultMessage();
        java.lang.String str28 = activityStatusEnum26.getDefaultMessage();
        java.lang.String str29 = activityStatusEnum26.getDefaultMessage();
        java.lang.String str30 = activityStatusEnum26.getDefaultMessage();
        java.lang.String str31 = activityStatusEnum26.getDefaultMessage();
        boolean boolean32 = asteriskVersion24.equals((java.lang.Object) str31);
        boolean boolean33 = asteriskVersion5.isAtLeast(asteriskVersion24);
        java.lang.Class<?> wildcardClass34 = asteriskVersion24.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Asterisk 14" + "'", str11, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Asterisk 20" + "'", str13, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Asterisk 11" + "'", str15, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Asterisk 11" + "'", str18, "Asterisk 11");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(asteriskVersion20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 11" + "'", str21, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + activityStatusEnum26 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.FAILURE + "'", activityStatusEnum26.equals(org.asteriskjava.pbx.ActivityStatusEnum.FAILURE));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Failure" + "'", str27, "Failure");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Failure" + "'", str28, "Failure");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Failure" + "'", str29, "Failure");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Failure" + "'", str30, "Failure");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Failure" + "'", str31, "Failure");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str2 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean4 = asteriskVersion1.isAtLeast(asteriskVersion3);
        boolean boolean5 = asteriskVersion0.equals((java.lang.Object) boolean4);
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean8 = asteriskVersion6.isAtLeast(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        int int10 = asteriskVersion6.compareTo(asteriskVersion9);
        int int11 = asteriskVersion0.compareTo(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int15 = asteriskVersion13.compareTo(asteriskVersion14);
        boolean boolean16 = asteriskVersion12.isAtLeast(asteriskVersion14);
        boolean boolean17 = asteriskVersion0.isAtLeast(asteriskVersion12);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int20 = asteriskVersion18.compareTo(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int22 = asteriskVersion18.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean25 = asteriskVersion23.isAtLeast(asteriskVersion24);
        boolean boolean26 = asteriskVersion21.isAtLeast(asteriskVersion24);
        int int27 = asteriskVersion12.compareTo(asteriskVersion21);
        java.lang.Class<?> wildcardClass28 = asteriskVersion21.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Asterisk 11" + "'", str2, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion6 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean7 = asteriskVersion5.isAtLeast(asteriskVersion6);
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int9 = asteriskVersion6.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion10 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean11 = asteriskVersion8.isAtLeast(asteriskVersion10);
        int int12 = asteriskVersion0.compareTo(asteriskVersion8);
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion14 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int16 = asteriskVersion14.compareTo(asteriskVersion15);
        boolean boolean17 = asteriskVersion13.isAtLeast(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion18 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean20 = asteriskVersion18.isAtLeast(asteriskVersion19);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int22 = asteriskVersion19.compareTo(asteriskVersion21);
        org.asteriskjava.AsteriskVersion asteriskVersion23 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean24 = asteriskVersion21.isAtLeast(asteriskVersion23);
        int int25 = asteriskVersion13.compareTo(asteriskVersion21);
        boolean boolean26 = asteriskVersion0.isAtLeast(asteriskVersion21);
        boolean boolean28 = asteriskVersion0.equals((java.lang.Object) 0);
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean30 = asteriskVersion0.isAtLeast(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion31 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean33 = asteriskVersion31.isAtLeast(asteriskVersion32);
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean36 = asteriskVersion34.isAtLeast(asteriskVersion35);
        int int37 = asteriskVersion31.compareTo(asteriskVersion35);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean40 = asteriskVersion38.isAtLeast(asteriskVersion39);
        boolean boolean41 = asteriskVersion35.isAtLeast(asteriskVersion39);
        org.asteriskjava.pbx.ListenerPriority listenerPriority42 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean43 = asteriskVersion35.equals((java.lang.Object) listenerPriority42);
        boolean boolean44 = asteriskVersion0.equals((java.lang.Object) listenerPriority42);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion47 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int48 = asteriskVersion46.compareTo(asteriskVersion47);
        boolean boolean49 = asteriskVersion45.isAtLeast(asteriskVersion47);
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int52 = asteriskVersion50.compareTo(asteriskVersion51);
        org.asteriskjava.AsteriskVersion asteriskVersion53 = org.asteriskjava.AsteriskVersion.ASTERISK_1_8;
        int int54 = asteriskVersion50.compareTo(asteriskVersion53);
        java.lang.String str55 = asteriskVersion53.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int58 = asteriskVersion56.compareTo(asteriskVersion57);
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int60 = asteriskVersion56.compareTo(asteriskVersion59);
        org.asteriskjava.pbx.TechType techType61 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean62 = asteriskVersion56.equals((java.lang.Object) techType61);
        boolean boolean63 = asteriskVersion53.isAtLeast(asteriskVersion56);
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion65 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int67 = asteriskVersion65.compareTo(asteriskVersion66);
        boolean boolean68 = asteriskVersion64.isAtLeast(asteriskVersion66);
        int int69 = asteriskVersion56.compareTo(asteriskVersion64);
        java.lang.Object obj70 = null;
        boolean boolean71 = asteriskVersion56.equals(obj70);
        org.asteriskjava.AsteriskVersion asteriskVersion72 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion73 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion74 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int75 = asteriskVersion73.compareTo(asteriskVersion74);
        boolean boolean76 = asteriskVersion72.isAtLeast(asteriskVersion74);
        org.asteriskjava.AsteriskVersion asteriskVersion77 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion78 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int79 = asteriskVersion77.compareTo(asteriskVersion78);
        boolean boolean80 = asteriskVersion72.isAtLeast(asteriskVersion77);
        int int81 = asteriskVersion56.compareTo(asteriskVersion72);
        boolean boolean82 = asteriskVersion47.isAtLeast(asteriskVersion56);
        boolean boolean83 = asteriskVersion0.equals((java.lang.Object) asteriskVersion56);
        java.lang.Class<?> wildcardClass84 = asteriskVersion56.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertNotNull(asteriskVersion6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertNotNull(asteriskVersion14);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(asteriskVersion18);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(asteriskVersion31);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority42 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority42.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertNotNull(asteriskVersion47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Asterisk 1.8" + "'", str55, "Asterisk 1.8");
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + techType61 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType61.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertNotNull(asteriskVersion65);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(asteriskVersion72);
        org.junit.Assert.assertNotNull(asteriskVersion73);
        org.junit.Assert.assertNotNull(asteriskVersion74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(asteriskVersion77);
        org.junit.Assert.assertNotNull(asteriskVersion78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.asteriskjava.pbx.ListenerPriority listenerPriority0 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority1 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int2 = listenerPriority0.compare(listenerPriority1);
        org.asteriskjava.pbx.ListenerPriority listenerPriority3 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority4 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int5 = listenerPriority3.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority6 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int7 = listenerPriority4.compare(listenerPriority6);
        int int8 = listenerPriority1.compare(listenerPriority4);
        org.asteriskjava.pbx.ListenerPriority listenerPriority9 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority10 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int11 = listenerPriority9.compare(listenerPriority10);
        org.asteriskjava.pbx.ListenerPriority listenerPriority12 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority13 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int14 = listenerPriority12.compare(listenerPriority13);
        org.asteriskjava.pbx.ListenerPriority listenerPriority15 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int16 = listenerPriority13.compare(listenerPriority15);
        int int17 = listenerPriority10.compare(listenerPriority13);
        org.asteriskjava.pbx.ListenerPriority listenerPriority18 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority19 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int20 = listenerPriority18.compare(listenerPriority19);
        int int21 = listenerPriority10.compare(listenerPriority18);
        int int22 = listenerPriority4.compare(listenerPriority18);
        org.asteriskjava.pbx.ListenerPriority listenerPriority23 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority24 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int25 = listenerPriority23.compare(listenerPriority24);
        org.asteriskjava.pbx.ListenerPriority listenerPriority26 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int27 = listenerPriority24.compare(listenerPriority26);
        org.asteriskjava.pbx.ListenerPriority listenerPriority28 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority29 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int30 = listenerPriority28.compare(listenerPriority29);
        org.asteriskjava.pbx.ListenerPriority listenerPriority31 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority32 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int33 = listenerPriority31.compare(listenerPriority32);
        org.asteriskjava.pbx.ListenerPriority listenerPriority34 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int35 = listenerPriority32.compare(listenerPriority34);
        int int36 = listenerPriority29.compare(listenerPriority32);
        int int37 = listenerPriority26.compare(listenerPriority32);
        org.asteriskjava.pbx.ListenerPriority listenerPriority38 = org.asteriskjava.pbx.ListenerPriority.LOW;
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion41 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int42 = asteriskVersion40.compareTo(asteriskVersion41);
        boolean boolean43 = asteriskVersion39.isAtLeast(asteriskVersion41);
        org.asteriskjava.pbx.ListenerPriority listenerPriority44 = org.asteriskjava.pbx.ListenerPriority.HIGH;
        org.asteriskjava.pbx.ListenerPriority listenerPriority45 = org.asteriskjava.pbx.ListenerPriority.CRITICAL;
        int int46 = listenerPriority44.compare(listenerPriority45);
        org.asteriskjava.pbx.ListenerPriority listenerPriority47 = org.asteriskjava.pbx.ListenerPriority.NORMAL;
        int int48 = listenerPriority45.compare(listenerPriority47);
        org.asteriskjava.pbx.ListenerPriority listenerPriority49 = org.asteriskjava.pbx.ListenerPriority.LOW;
        int int50 = listenerPriority45.compare(listenerPriority49);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean53 = asteriskVersion51.isAtLeast(asteriskVersion52);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean56 = asteriskVersion54.isAtLeast(asteriskVersion55);
        int int57 = asteriskVersion51.compareTo(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean60 = asteriskVersion58.isAtLeast(asteriskVersion59);
        boolean boolean61 = asteriskVersion55.isAtLeast(asteriskVersion59);
        org.asteriskjava.pbx.ListenerPriority listenerPriority62 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean63 = asteriskVersion55.equals((java.lang.Object) listenerPriority62);
        int int64 = listenerPriority49.compare(listenerPriority62);
        boolean boolean65 = asteriskVersion41.equals((java.lang.Object) listenerPriority49);
        int int66 = listenerPriority38.compare(listenerPriority49);
        int int67 = listenerPriority26.compare(listenerPriority38);
        int int68 = listenerPriority4.compare(listenerPriority26);
        org.junit.Assert.assertTrue("'" + listenerPriority0 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority0.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority1 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority1.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority3 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority3.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority4 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority4.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority6 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority6.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-4) + "'", int7 == (-4));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority9 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority9.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority10 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority10.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority12 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority12.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority13 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority13.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority15 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority15.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-4) + "'", int16 == (-4));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + listenerPriority18 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority18.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority19 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority19.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-2) + "'", int21 == (-2));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-2) + "'", int22 == (-2));
        org.junit.Assert.assertTrue("'" + listenerPriority23 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority23.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority24 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority24.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority26 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority26.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-4) + "'", int27 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority28 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority28.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority29 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority29.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority31 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority31.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority32 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority32.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority34 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority34.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-4) + "'", int35 == (-4));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + listenerPriority38 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority38.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertNotNull(asteriskVersion41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + listenerPriority44 + "' != '" + org.asteriskjava.pbx.ListenerPriority.HIGH + "'", listenerPriority44.equals(org.asteriskjava.pbx.ListenerPriority.HIGH));
        org.junit.Assert.assertTrue("'" + listenerPriority45 + "' != '" + org.asteriskjava.pbx.ListenerPriority.CRITICAL + "'", listenerPriority45.equals(org.asteriskjava.pbx.ListenerPriority.CRITICAL));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + listenerPriority47 + "' != '" + org.asteriskjava.pbx.ListenerPriority.NORMAL + "'", listenerPriority47.equals(org.asteriskjava.pbx.ListenerPriority.NORMAL));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-4) + "'", int48 == (-4));
        org.junit.Assert.assertTrue("'" + listenerPriority49 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority49.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-6) + "'", int50 == (-6));
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority62 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority62.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-2) + "'", int67 == (-2));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-4) + "'", int68 == (-4));
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean6 = asteriskVersion0.isAtLeast(asteriskVersion5);
        java.lang.Class<?> wildcardClass7 = asteriskVersion5.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        boolean boolean6 = asteriskVersion0.equals((java.lang.Object) asteriskVersion1);
        java.lang.String str7 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean10 = asteriskVersion8.isAtLeast(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean13 = asteriskVersion11.isAtLeast(asteriskVersion12);
        int int14 = asteriskVersion8.compareTo(asteriskVersion12);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean17 = asteriskVersion15.isAtLeast(asteriskVersion16);
        boolean boolean18 = asteriskVersion12.isAtLeast(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean20 = asteriskVersion16.isAtLeast(asteriskVersion19);
        java.lang.String str21 = asteriskVersion16.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str23 = asteriskVersion22.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean25 = asteriskVersion22.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int27 = asteriskVersion22.compareTo(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int29 = asteriskVersion26.compareTo(asteriskVersion28);
        java.lang.String str30 = asteriskVersion28.toString();
        int int31 = asteriskVersion16.compareTo(asteriskVersion28);
        boolean boolean32 = asteriskVersion1.isAtLeast(asteriskVersion28);
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion34 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion35 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion36 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int37 = asteriskVersion35.compareTo(asteriskVersion36);
        boolean boolean38 = asteriskVersion34.isAtLeast(asteriskVersion36);
        org.asteriskjava.AsteriskVersion asteriskVersion39 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion40 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int41 = asteriskVersion39.compareTo(asteriskVersion40);
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_1_6;
        int int43 = asteriskVersion39.compareTo(asteriskVersion42);
        org.asteriskjava.pbx.TechType techType44 = org.asteriskjava.pbx.TechType.IAX;
        boolean boolean45 = asteriskVersion39.equals((java.lang.Object) techType44);
        boolean boolean46 = asteriskVersion36.isAtLeast(asteriskVersion39);
        boolean boolean47 = asteriskVersion33.isAtLeast(asteriskVersion36);
        java.lang.String str48 = asteriskVersion36.toString();
        java.lang.String str49 = asteriskVersion36.toString();
        boolean boolean50 = asteriskVersion1.isAtLeast(asteriskVersion36);
        org.asteriskjava.AsteriskVersion asteriskVersion51 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion52 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean53 = asteriskVersion51.isAtLeast(asteriskVersion52);
        org.asteriskjava.AsteriskVersion asteriskVersion54 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion55 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean56 = asteriskVersion54.isAtLeast(asteriskVersion55);
        int int57 = asteriskVersion51.compareTo(asteriskVersion55);
        org.asteriskjava.AsteriskVersion asteriskVersion58 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean60 = asteriskVersion58.isAtLeast(asteriskVersion59);
        boolean boolean61 = asteriskVersion55.isAtLeast(asteriskVersion59);
        java.lang.String str62 = asteriskVersion59.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion63 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        java.lang.String str65 = asteriskVersion64.toString();
        boolean boolean66 = asteriskVersion63.isAtLeast(asteriskVersion64);
        java.lang.String str67 = asteriskVersion64.toString();
        boolean boolean68 = asteriskVersion59.equals((java.lang.Object) str67);
        org.asteriskjava.AsteriskVersion asteriskVersion69 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int71 = asteriskVersion69.compareTo(asteriskVersion70);
        org.asteriskjava.pbx.DTMFTone dTMFTone72 = org.asteriskjava.pbx.DTMFTone.FOUR;
        boolean boolean73 = asteriskVersion69.equals((java.lang.Object) dTMFTone72);
        boolean boolean75 = asteriskVersion69.equals((java.lang.Object) 'a');
        org.asteriskjava.AsteriskVersion asteriskVersion76 = org.asteriskjava.AsteriskVersion.ASTERISK_17;
        org.asteriskjava.AsteriskVersion asteriskVersion77 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int78 = asteriskVersion76.compareTo(asteriskVersion77);
        boolean boolean79 = asteriskVersion69.equals((java.lang.Object) int78);
        int int80 = asteriskVersion59.compareTo(asteriskVersion69);
        boolean boolean81 = asteriskVersion36.equals((java.lang.Object) int80);
        java.lang.Class<?> wildcardClass82 = asteriskVersion36.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Asterisk 12" + "'", str7, "Asterisk 12");
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 20" + "'", str21, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Asterisk 11" + "'", str23, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Asterisk 20" + "'", str30, "Asterisk 20");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertNotNull(asteriskVersion34);
        org.junit.Assert.assertNotNull(asteriskVersion35);
        org.junit.Assert.assertNotNull(asteriskVersion36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(asteriskVersion39);
        org.junit.Assert.assertNotNull(asteriskVersion40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + techType44 + "' != '" + org.asteriskjava.pbx.TechType.IAX + "'", techType44.equals(org.asteriskjava.pbx.TechType.IAX));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Asterisk 16" + "'", str48, "Asterisk 16");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Asterisk 16" + "'", str49, "Asterisk 16");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(asteriskVersion51);
        org.junit.Assert.assertNotNull(asteriskVersion52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(asteriskVersion54);
        org.junit.Assert.assertNotNull(asteriskVersion55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion58);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Asterisk 20" + "'", str62, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion63);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Asterisk 1.0" + "'", str65, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Asterisk 1.0" + "'", str67, "Asterisk 1.0");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(asteriskVersion69);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + dTMFTone72 + "' != '" + org.asteriskjava.pbx.DTMFTone.FOUR + "'", dTMFTone72.equals(org.asteriskjava.pbx.DTMFTone.FOUR));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(asteriskVersion76);
        org.junit.Assert.assertNotNull(asteriskVersion77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion3 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int4 = asteriskVersion2.compareTo(asteriskVersion3);
        boolean boolean5 = asteriskVersion1.isAtLeast(asteriskVersion3);
        boolean boolean6 = asteriskVersion0.equals((java.lang.Object) asteriskVersion1);
        java.lang.String str7 = asteriskVersion1.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean10 = asteriskVersion8.isAtLeast(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion11 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean13 = asteriskVersion11.isAtLeast(asteriskVersion12);
        int int14 = asteriskVersion8.compareTo(asteriskVersion12);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion16 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean17 = asteriskVersion15.isAtLeast(asteriskVersion16);
        boolean boolean18 = asteriskVersion12.isAtLeast(asteriskVersion16);
        org.asteriskjava.AsteriskVersion asteriskVersion19 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean20 = asteriskVersion16.isAtLeast(asteriskVersion19);
        java.lang.String str21 = asteriskVersion16.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion22 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str23 = asteriskVersion22.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion24 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean25 = asteriskVersion22.isAtLeast(asteriskVersion24);
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        int int27 = asteriskVersion22.compareTo(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int29 = asteriskVersion26.compareTo(asteriskVersion28);
        java.lang.String str30 = asteriskVersion28.toString();
        int int31 = asteriskVersion16.compareTo(asteriskVersion28);
        boolean boolean32 = asteriskVersion1.isAtLeast(asteriskVersion28);
        java.lang.Class<?> wildcardClass33 = asteriskVersion28.getClass();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertNotNull(asteriskVersion3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Asterisk 12" + "'", str7, "Asterisk 12");
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(asteriskVersion11);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertNotNull(asteriskVersion16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(asteriskVersion19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Asterisk 20" + "'", str21, "Asterisk 20");
        org.junit.Assert.assertNotNull(asteriskVersion22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Asterisk 11" + "'", str23, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Asterisk 20" + "'", str30, "Asterisk 20");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.asteriskjava.AsteriskVersion asteriskVersion0 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion1 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion2 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int3 = asteriskVersion1.compareTo(asteriskVersion2);
        boolean boolean4 = asteriskVersion0.isAtLeast(asteriskVersion2);
        org.asteriskjava.AsteriskVersion asteriskVersion5 = org.asteriskjava.AsteriskVersion.DEFAULT_VERSION;
        boolean boolean6 = asteriskVersion0.isAtLeast(asteriskVersion5);
        org.asteriskjava.AsteriskVersion asteriskVersion7 = org.asteriskjava.AsteriskVersion.ASTERISK_12;
        org.asteriskjava.AsteriskVersion asteriskVersion8 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.AsteriskVersion asteriskVersion9 = org.asteriskjava.AsteriskVersion.ASTERISK_16;
        int int10 = asteriskVersion8.compareTo(asteriskVersion9);
        boolean boolean11 = asteriskVersion7.isAtLeast(asteriskVersion9);
        org.asteriskjava.AsteriskVersion asteriskVersion12 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion13 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean14 = asteriskVersion12.isAtLeast(asteriskVersion13);
        org.asteriskjava.AsteriskVersion asteriskVersion15 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        int int16 = asteriskVersion13.compareTo(asteriskVersion15);
        org.asteriskjava.AsteriskVersion asteriskVersion17 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        boolean boolean18 = asteriskVersion15.isAtLeast(asteriskVersion17);
        int int19 = asteriskVersion7.compareTo(asteriskVersion15);
        int int20 = asteriskVersion0.compareTo(asteriskVersion7);
        org.asteriskjava.AsteriskVersion asteriskVersion21 = org.asteriskjava.AsteriskVersion.ASTERISK_1_0;
        org.asteriskjava.pbx.ActivityStatusEnum activityStatusEnum22 = org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS;
        java.lang.String str23 = activityStatusEnum22.getDefaultMessage();
        boolean boolean24 = asteriskVersion21.equals((java.lang.Object) str23);
        org.asteriskjava.AsteriskVersion asteriskVersion25 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion26 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean27 = asteriskVersion25.isAtLeast(asteriskVersion26);
        org.asteriskjava.AsteriskVersion asteriskVersion28 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion29 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean30 = asteriskVersion28.isAtLeast(asteriskVersion29);
        int int31 = asteriskVersion25.compareTo(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion32 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion33 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean34 = asteriskVersion32.isAtLeast(asteriskVersion33);
        boolean boolean35 = asteriskVersion29.isAtLeast(asteriskVersion33);
        org.asteriskjava.pbx.ListenerPriority listenerPriority36 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean37 = asteriskVersion29.equals((java.lang.Object) listenerPriority36);
        org.asteriskjava.AsteriskVersion asteriskVersion38 = org.asteriskjava.AsteriskVersion.ASTERISK_1_4;
        int int39 = asteriskVersion29.compareTo(asteriskVersion38);
        boolean boolean40 = asteriskVersion21.equals((java.lang.Object) asteriskVersion29);
        int int41 = asteriskVersion7.compareTo(asteriskVersion29);
        org.asteriskjava.AsteriskVersion asteriskVersion42 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion43 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean44 = asteriskVersion42.isAtLeast(asteriskVersion43);
        org.asteriskjava.AsteriskVersion asteriskVersion45 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion46 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean47 = asteriskVersion45.isAtLeast(asteriskVersion46);
        int int48 = asteriskVersion42.compareTo(asteriskVersion46);
        org.asteriskjava.AsteriskVersion asteriskVersion49 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion50 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean51 = asteriskVersion49.isAtLeast(asteriskVersion50);
        boolean boolean52 = asteriskVersion46.isAtLeast(asteriskVersion50);
        org.asteriskjava.pbx.ListenerPriority listenerPriority53 = org.asteriskjava.pbx.ListenerPriority.LOW;
        boolean boolean54 = asteriskVersion46.equals((java.lang.Object) listenerPriority53);
        boolean boolean55 = asteriskVersion7.isAtLeast(asteriskVersion46);
        org.asteriskjava.AsteriskVersion asteriskVersion56 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion57 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean58 = asteriskVersion56.isAtLeast(asteriskVersion57);
        org.asteriskjava.AsteriskVersion asteriskVersion59 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion60 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean61 = asteriskVersion59.isAtLeast(asteriskVersion60);
        int int62 = asteriskVersion56.compareTo(asteriskVersion60);
        org.asteriskjava.AsteriskVersion asteriskVersion63 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion64 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean65 = asteriskVersion63.isAtLeast(asteriskVersion64);
        org.asteriskjava.AsteriskVersion asteriskVersion66 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion67 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean68 = asteriskVersion66.isAtLeast(asteriskVersion67);
        int int69 = asteriskVersion63.compareTo(asteriskVersion67);
        org.asteriskjava.AsteriskVersion asteriskVersion70 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        org.asteriskjava.AsteriskVersion asteriskVersion71 = org.asteriskjava.AsteriskVersion.ASTERISK_20;
        boolean boolean72 = asteriskVersion70.isAtLeast(asteriskVersion71);
        boolean boolean73 = asteriskVersion67.isAtLeast(asteriskVersion71);
        boolean boolean74 = asteriskVersion56.isAtLeast(asteriskVersion71);
        boolean boolean75 = asteriskVersion7.equals((java.lang.Object) asteriskVersion71);
        org.asteriskjava.AsteriskVersion asteriskVersion76 = org.asteriskjava.AsteriskVersion.ASTERISK_11;
        java.lang.String str77 = asteriskVersion76.toString();
        org.asteriskjava.AsteriskVersion asteriskVersion78 = org.asteriskjava.AsteriskVersion.ASTERISK_19;
        boolean boolean79 = asteriskVersion76.isAtLeast(asteriskVersion78);
        org.asteriskjava.AsteriskVersion asteriskVersion80 = org.asteriskjava.AsteriskVersion.ASTERISK_14;
        java.lang.String str81 = asteriskVersion80.toString();
        int int82 = asteriskVersion76.compareTo(asteriskVersion80);
        org.asteriskjava.AsteriskVersion asteriskVersion83 = org.asteriskjava.AsteriskVersion.ASTERISK_13;
        org.asteriskjava.tools.HtmlEventTracer htmlEventTracer84 = new org.asteriskjava.tools.HtmlEventTracer();
        htmlEventTracer84.write();
        org.asteriskjava.manager.event.ManagerEvent managerEvent86 = null;
        htmlEventTracer84.onManagerEvent(managerEvent86);
        boolean boolean88 = asteriskVersion83.equals((java.lang.Object) managerEvent86);
        boolean boolean89 = asteriskVersion76.isAtLeast(asteriskVersion83);
        int int90 = asteriskVersion71.compareTo(asteriskVersion83);
        java.lang.String str91 = asteriskVersion71.toString();
        org.junit.Assert.assertNotNull(asteriskVersion0);
        org.junit.Assert.assertNotNull(asteriskVersion1);
        org.junit.Assert.assertNotNull(asteriskVersion2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(asteriskVersion5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(asteriskVersion7);
        org.junit.Assert.assertNotNull(asteriskVersion8);
        org.junit.Assert.assertNotNull(asteriskVersion9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(asteriskVersion12);
        org.junit.Assert.assertNotNull(asteriskVersion13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(asteriskVersion15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion21);
        org.junit.Assert.assertTrue("'" + activityStatusEnum22 + "' != '" + org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS + "'", activityStatusEnum22.equals(org.asteriskjava.pbx.ActivityStatusEnum.PROGRESS));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Progress" + "'", str23, "Progress");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(asteriskVersion25);
        org.junit.Assert.assertNotNull(asteriskVersion26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(asteriskVersion28);
        org.junit.Assert.assertNotNull(asteriskVersion29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion32);
        org.junit.Assert.assertNotNull(asteriskVersion33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority36 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority36.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(asteriskVersion38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion42);
        org.junit.Assert.assertNotNull(asteriskVersion43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(asteriskVersion45);
        org.junit.Assert.assertNotNull(asteriskVersion46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion49);
        org.junit.Assert.assertNotNull(asteriskVersion50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + listenerPriority53 + "' != '" + org.asteriskjava.pbx.ListenerPriority.LOW + "'", listenerPriority53.equals(org.asteriskjava.pbx.ListenerPriority.LOW));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(asteriskVersion56);
        org.junit.Assert.assertNotNull(asteriskVersion57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(asteriskVersion59);
        org.junit.Assert.assertNotNull(asteriskVersion60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion63);
        org.junit.Assert.assertNotNull(asteriskVersion64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(asteriskVersion66);
        org.junit.Assert.assertNotNull(asteriskVersion67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(asteriskVersion70);
        org.junit.Assert.assertNotNull(asteriskVersion71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(asteriskVersion76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Asterisk 11" + "'", str77, "Asterisk 11");
        org.junit.Assert.assertNotNull(asteriskVersion78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(asteriskVersion80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Asterisk 14" + "'", str81, "Asterisk 14");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(asteriskVersion83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Asterisk 20" + "'", str91, "Asterisk 20");
    }
}

