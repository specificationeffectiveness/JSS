package org.apache.rat;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test03501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03501");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("ed42033c-bb2d-4a0c-b6fe-b912f4d3a137", "e15853fc-6f47-4f3f-a346-63fe009915e5");
    }

    @Test
    public void test03502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03502");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter7 = reportConfiguration1.getDirectoryFilter();
        reportConfiguration1.addApprovedLicenseCategory("GPL1 ");
        java.io.FilenameFilter filenameFilter10 = reportConfiguration1.getInputFileFilter();
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setOut(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNotNull(iOFileFilter7);
        org.junit.Assert.assertNull(filenameFilter10);
    }

    @Test
    public void test03503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03503");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.MatcherBuilderTracker.addBuilder("", "73fbee1b-7ed9-442a-968e-b2b525ca688f");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: java.lang.ClassNotFoundException: ");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03504");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter9 = xmlWriter1.attribute((java.lang.CharSequence) "NotBuilder: null", (java.lang.CharSequence) "094643d494c6478ab86115e14bd2e656");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03505");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader2 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        java.util.SortedSet<java.lang.String> strSet4 = licenseReader3.approvedLicenseId();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(licenseReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test03506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03506");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.utils.ReportingSet.Options options2 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration1.licenseDuplicateOption(options2);
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.license.ILicenseFamily iLicenseFamily13 = null;
        reportConfiguration9.addFamily(iLicenseFamily13);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter15 = reportConfiguration9.getDirectoryFilter();
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders21 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration17.setAddLicenseHeaders(addLicenseHeaders21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter26);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter39);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier45 = reportConfiguration44.getOutput();
        reportConfiguration17.setOut(outputStreamIOSupplier45);
        org.apache.rat.utils.Log.Level level47 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration17.logLicenseCollisions(level47);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter49 = reportConfiguration17.getDirectoryFilter();
        java.nio.file.Path path50 = null;
        boolean boolean51 = iOFileFilter49.matches(path50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        java.io.FilenameFilter filenameFilter67 = reportConfiguration66.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet69 = reportConfiguration66.getLicenses(licenseFilter68);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders70 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration66.setAddLicenseHeaders(addLicenseHeaders70);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter75);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier81 = reportConfiguration80.getOutput();
        reportConfiguration53.setOut(outputStreamIOSupplier81);
        org.apache.rat.utils.Log.Level level83 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration53.logLicenseCollisions(level83);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter85 = reportConfiguration53.getDirectoryFilter();
        java.nio.file.Path path86 = null;
        boolean boolean87 = iOFileFilter85.matches(path86);
        java.nio.file.Path path88 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes89 = null;
        java.nio.file.FileVisitResult fileVisitResult90 = iOFileFilter85.accept(path88, basicFileAttributes89);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter91 = iOFileFilter49.or(iOFileFilter85);
        reportConfiguration9.addDirectoryFilter(iOFileFilter91);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter93 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet94 = reportConfiguration9.getLicenses(licenseFilter93);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet94);
        org.junit.Assert.assertTrue("'" + options2 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options2.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertNotNull(iOFileFilter15);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders21 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders21.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier45);
        org.junit.Assert.assertTrue("'" + level47 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level47.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet69);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders70 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders70.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier81);
        org.junit.Assert.assertTrue("'" + level83 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level83.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult90 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult90.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter91);
        org.junit.Assert.assertTrue("'" + licenseFilter93 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter93.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet94);
    }

    @Test
    public void test03507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03507");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher16 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher16.reset();
        org.apache.rat.license.ILicense.Builder builder18 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher16);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str20 = spdxBuilder19.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder22 = spdxBuilder19.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder23 = builder18.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder19);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher24 = spdxBuilder19.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder26 = spdxBuilder19.setId("ba9961f9-a0de-4a54-bd1f-a2e9df26a188");
        java.lang.String str27 = spdxBuilder19.toString();
        java.lang.String str28 = spdxBuilder19.toString();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(spdxBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "SpdxBuilder: null" + "'", str20, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(iHeaderMatcher24);
        org.junit.Assert.assertNotNull(abstractBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str27, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str28, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
    }

    @Test
    public void test03508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03508");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd(".cvsignore");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = copyrightBuilder3.build();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
    }

    @Test
    public void test03509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03509");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender2 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "2953e6cb-20a5-4dcf-a9f5-85c51cc8c635");
        apacheV2LicenseAppender2.setForce(true);
        java.io.File file5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = apacheV2LicenseAppender2.getLicenseHeader(file5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
    }

    @Test
    public void test03510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03510");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder2.setMatchers(strMap4);
        org.apache.rat.configuration.builders.AllBuilder allBuilder6 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setStart("OASIS");
        java.lang.String str10 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder15.setStart("OASIS");
        java.lang.String str18 = copyrightBuilder15.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder15.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str23 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = copyrightBuilder22.setEnd(".cvsignore");
        boolean boolean26 = copyrightBuilder22.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str28 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder27.setEnd(".cvsignore");
        boolean boolean31 = copyrightBuilder27.hasId();
        java.lang.String str32 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean38 = matcherRefBuilder37.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap39 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = matcherRefBuilder37.setMatchers(strMap39);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.lang.String str44 = matcherRefBuilder42.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder42.setMatchers(strMap45);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray47 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, allBuilder6, copyrightBuilder12, matcherRefBuilder13, copyrightBuilder15, copyrightBuilder21, copyrightBuilder22, copyrightBuilder27, copyrightBuilder33, anyBuilder36, matcherRefBuilder37, copyrightBuilder41, matcherRefBuilder42 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList48 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48, builderArray47);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder50 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder51 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str52 = copyrightBuilder51.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder53 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder51);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder55 = copyrightBuilder51.setStart("d0774232-cdef-4507-a8b6-ac22a273dde3");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str10, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str18, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str23, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str28, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str32, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(anyBuilder36);
        org.junit.Assert.assertNotNull(matcherRefBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MathcerRefBuilder: null" + "'", str44, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(builderArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(abstractBuilder50);
        org.junit.Assert.assertNotNull(copyrightBuilder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str52, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(abstractBuilder53);
        org.junit.Assert.assertNotNull(copyrightBuilder55);
    }

    @Test
    public void test03511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03511");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("SpdxBuilder: 7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        java.lang.String str2 = simpleTextMatcher1.getId();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "10ceccc6-9da0-47a6-810c-684cf0a59f88" + "'", str2, "10ceccc6-9da0-47a6-810c-684cf0a59f88");
    }

    @Test
    public void test03512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03512");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("Datum [ name ='MANIFEST.MF',value ='GPL2  ']", pattern1);
    }

    @Test
    public void test03513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03513");
        boolean boolean1 = org.apache.rat.document.impl.guesser.NoteGuesser.isNote("Copyright Builder: s:.cvsignore e:null o:W3C  ");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03514");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray1 = strSet0.toArray();
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        boolean boolean12 = reportConfiguration3.isAddingLicensesForced();
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        reportConfiguration14.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level17 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration14.logFamilyCollisions(level17);
        reportConfiguration3.logLicenseCollisions(level17);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet20 = strSet0.setLogLevel(level17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = strSet0.first();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + level17 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level17.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet20);
    }

    @Test
    public void test03515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03515");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher1 = anyBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = anyBuilder0.build();
        java.lang.String str3 = anyBuilder0.toString();
        org.apache.rat.document.ToNameTransformer toNameTransformer4 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.configuration.builders.AllBuilder allBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList6 = allBuilder5.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = allBuilder5.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList8 = allBuilder5.getChildren();
        java.lang.Object obj9 = toNameTransformer4.transform((java.lang.Object) allBuilder5);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder10 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str11 = spdxBuilder10.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder13 = spdxBuilder10.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher14 = spdxBuilder10.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher15 = spdxBuilder10.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher16 = spdxBuilder10.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher17 = spdxBuilder10.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder19 = spdxBuilder10.setName("7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder20 = allBuilder5.add((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder10);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str22 = anyBuilder21.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList23 = anyBuilder21.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher24 = anyBuilder21.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher25 = anyBuilder21.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList26 = anyBuilder21.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder27 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str28 = notBuilder27.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder29 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean30 = matcherRefBuilder29.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap31 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder32 = matcherRefBuilder29.setMatchers(strMap31);
        org.apache.rat.configuration.builders.AllBuilder allBuilder33 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder34 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder34.setStart("OASIS");
        java.lang.String str37 = copyrightBuilder34.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = copyrightBuilder34.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean41 = matcherRefBuilder40.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder44 = copyrightBuilder42.setStart("OASIS");
        java.lang.String str45 = copyrightBuilder42.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = copyrightBuilder42.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder49 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str50 = copyrightBuilder49.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder52 = copyrightBuilder49.setEnd(".cvsignore");
        boolean boolean53 = copyrightBuilder49.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder54 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str55 = copyrightBuilder54.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder57 = copyrightBuilder54.setEnd(".cvsignore");
        boolean boolean58 = copyrightBuilder54.hasId();
        java.lang.String str59 = copyrightBuilder54.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder60 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder62 = copyrightBuilder60.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder63 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder64 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean65 = matcherRefBuilder64.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap66 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder67 = matcherRefBuilder64.setMatchers(strMap66);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder68 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder69 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean70 = matcherRefBuilder69.hasId();
        java.lang.String str71 = matcherRefBuilder69.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap72 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder73 = matcherRefBuilder69.setMatchers(strMap72);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray74 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder29, allBuilder33, copyrightBuilder39, matcherRefBuilder40, copyrightBuilder42, copyrightBuilder48, copyrightBuilder49, copyrightBuilder54, copyrightBuilder60, anyBuilder63, matcherRefBuilder64, copyrightBuilder68, matcherRefBuilder69 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList75 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList75, builderArray74);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder77 = notBuilder27.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList75);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder78 = anyBuilder21.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList75);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder79 = allBuilder5.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList75);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder80 = anyBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList75);
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder81 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str82 = regexBuilder81.toString();
        java.lang.String str83 = regexBuilder81.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder85 = regexBuilder81.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        java.lang.String str86 = regexBuilder85.toString();
        java.lang.String str87 = regexBuilder85.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder89 = regexBuilder85.setExpr("SpdxBuilder: 641dafc1-13c3-45d4-8272-f36f10392c53");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder90 = anyBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) regexBuilder85);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList91 = anyBuilder0.getChildren();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertNotNull(iHeaderMatcher1);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "AnyBuilder:" + "'", str3, "AnyBuilder:");
        org.junit.Assert.assertNotNull(allBuilder5);
        org.junit.Assert.assertNotNull(iHeaderMatcherList6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(iHeaderMatcherList8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(spdxBuilder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "SpdxBuilder: null" + "'", str11, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder13);
        org.junit.Assert.assertNotNull(iHeaderMatcher14);
        org.junit.Assert.assertNotNull(iHeaderMatcher15);
        org.junit.Assert.assertNotNull(iHeaderMatcher16);
        org.junit.Assert.assertNotNull(iHeaderMatcher17);
        org.junit.Assert.assertNotNull(spdxBuilder19);
        org.junit.Assert.assertNotNull(abstractBuilder20);
        org.junit.Assert.assertNotNull(anyBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AnyBuilder:" + "'", str22, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList23);
        org.junit.Assert.assertNotNull(iHeaderMatcher24);
        org.junit.Assert.assertNotNull(iHeaderMatcher25);
        org.junit.Assert.assertNotNull(iHeaderMatcherList26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "NotBuilder: null" + "'", str28, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder32);
        org.junit.Assert.assertNotNull(copyrightBuilder34);
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str37, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder42);
        org.junit.Assert.assertNotNull(copyrightBuilder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str45, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(copyrightBuilder48);
        org.junit.Assert.assertNotNull(copyrightBuilder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str50, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str55, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str59, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder60);
        org.junit.Assert.assertNotNull(copyrightBuilder62);
        org.junit.Assert.assertNotNull(anyBuilder63);
        org.junit.Assert.assertNotNull(matcherRefBuilder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder67);
        org.junit.Assert.assertNotNull(copyrightBuilder68);
        org.junit.Assert.assertNotNull(matcherRefBuilder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "MathcerRefBuilder: null" + "'", str71, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder73);
        org.junit.Assert.assertNotNull(builderArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(abstractBuilder77);
        org.junit.Assert.assertNotNull(abstractBuilder78);
        org.junit.Assert.assertNotNull(abstractBuilder79);
        org.junit.Assert.assertNotNull(abstractBuilder80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "RegexBuilder: null" + "'", str82, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "RegexBuilder: null" + "'", str83, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae" + "'", str86, "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae" + "'", str87, "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.junit.Assert.assertNotNull(regexBuilder89);
        org.junit.Assert.assertNotNull(abstractBuilder90);
    }

    @Test
    public void test03516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03516");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("MathcerRefBuilder: RegexBuilder: null");
        org.apache.rat.analysis.IHeaderMatcher.State state2 = fullTextMatcher1.currentState();
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state2.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test03517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03517");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        reportConfiguration12.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level15 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration12.logFamilyCollisions(level15);
        reportConfiguration1.logLicenseCollisions(level15);
        org.apache.rat.utils.ReportingSet.Options options18 = org.apache.rat.utils.ReportingSet.Options.IGNORE;
        reportConfiguration1.licenseDuplicateOption(options18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        java.io.FilenameFilter filenameFilter22 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet24 = reportConfiguration21.getLicenses(licenseFilter23);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders25 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration21.setAddLicenseHeaders(addLicenseHeaders25);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic29 = org.apache.rat.Reporter.report(reportConfiguration28);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter30);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet37 = reportConfiguration34.getLicenses(licenseFilter36);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders38 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration34.setAddLicenseHeaders(addLicenseHeaders38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter43);
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter43);
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter43);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier49 = reportConfiguration48.getOutput();
        reportConfiguration21.setOut(outputStreamIOSupplier49);
        org.apache.rat.utils.Log.Level level51 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration21.logLicenseCollisions(level51);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter53 = reportConfiguration21.getDirectoryFilter();
        java.nio.file.Path path54 = null;
        boolean boolean55 = iOFileFilter53.matches(path54);
        java.nio.file.Path path56 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes57 = null;
        java.nio.file.FileVisitResult fileVisitResult58 = iOFileFilter53.accept(path56, basicFileAttributes57);
        reportConfiguration1.setDirectoryFilter(iOFileFilter53);
        java.net.URL uRL60 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + level15 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level15.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + options18 + "' != '" + org.apache.rat.utils.ReportingSet.Options.IGNORE + "'", options18.equals(org.apache.rat.utils.ReportingSet.Options.IGNORE));
        org.junit.Assert.assertNull(filenameFilter22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet24);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders25 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders25.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet37);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders38 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders38.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier49);
        org.junit.Assert.assertTrue("'" + level51 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level51.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult58 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult58.equals(java.nio.file.FileVisitResult.TERMINATE));
    }

    @Test
    public void test03518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03518");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state5 = simpleRegexMatcher3.currentState();
        simpleRegexMatcher3.reset();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = simpleRegexMatcher3.doMatch("a2146a70-f79e-482c-93ff-b6b4a5e049ae");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test03519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03519");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        reportConfiguration53.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = reportConfiguration57.getLicenses(licenseFilter59);
        reportConfiguration53.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet60);
        org.apache.rat.license.ILicenseFamily iLicenseFamily62 = null;
        reportConfiguration53.addFamily(iLicenseFamily62);
        org.apache.rat.utils.DefaultLog defaultLog64 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder65 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder67 = builder65.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher71 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state72 = copyrightMatcher71.finalizeState();
        org.apache.rat.license.ILicense.Builder builder73 = builder67.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher71);
        org.apache.rat.license.ILicense.Builder builder75 = builder73.setLicenseFamilyCategory("");
        defaultLog64.error((java.lang.Object) builder75);
        org.apache.rat.utils.Log.Level level77 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog64.setLevel(level77);
        reportConfiguration53.logFamilyCollisions(level77);
        org.apache.rat.utils.Log log80 = null;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender82 = new org.apache.rat.annotation.ApacheV2LicenseAppender(log80, "274c6a15-09f6-4bfd-ac53-1827770eb507");
        defaultLog0.log(level77, (java.lang.Object) log80);
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily84 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str85 = simpleLicenseFamily84.getFamilyName();
        java.lang.String str86 = simpleLicenseFamily84.getFamilyCategory();
        simpleLicenseFamily84.setFamilyName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        simpleLicenseFamily84.setFamilyName("http://org/apache/rat/meta-data");
        defaultLog0.info((java.lang.Object) "http://org/apache/rat/meta-data");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertNotNull(defaultLog64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + state72 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state72.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + level77 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level77.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test03520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03520");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.license.ILicense.Builder builder7 = builder0.setName("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.lang.String str10 = matcherRefBuilder8.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap11 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder12 = matcherRefBuilder8.setMatchers(strMap11);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap13 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder14 = matcherRefBuilder8.setMatchers(strMap13);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap15 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder16 = matcherRefBuilder8.setMatchers(strMap15);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap17 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder18 = matcherRefBuilder16.setMatchers(strMap17);
        java.lang.String str19 = matcherRefBuilder16.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder21 = matcherRefBuilder16.setRefId("MathcerRefBuilder: null");
        java.lang.String str22 = matcherRefBuilder16.toString();
        org.apache.rat.license.ILicense.Builder builder23 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder16);
        org.apache.rat.license.ILicense.Builder builder25 = builder0.setId("null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher26 = null;
        org.apache.rat.license.ILicense.Builder builder27 = builder0.setMatcher(iHeaderMatcher26);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MathcerRefBuilder: null" + "'", str10, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder14);
        org.junit.Assert.assertNotNull(matcherRefBuilder16);
        org.junit.Assert.assertNotNull(matcherRefBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MathcerRefBuilder: null" + "'", str19, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MathcerRefBuilder: MathcerRefBuilder: null" + "'", str22, "MathcerRefBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test03521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03521");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.MatcherBuilderTracker.addBuilder("7e27cd62-4403-40ab-a9f5-16e7c59ab2f1", "c6108888-bbb8-4ac0-8e5f-6bc60ab81eda");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: java.lang.ClassNotFoundException: 7e27cd62-4403-40ab-a9f5-16e7c59ab2f1");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03522");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders7 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration3.setAddLicenseHeaders(addLicenseHeaders7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter12);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter12);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter25);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier31 = reportConfiguration30.getOutput();
        reportConfiguration3.setOut(outputStreamIOSupplier31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.utils.ReportingSet.Options options39 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration37.licenseDuplicateOption(options39);
        reportConfiguration34.familyDuplicateOption(options39);
        reportConfiguration3.licenseDuplicateOption(options39);
        reportConfiguration3.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        reportConfiguration46.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level49 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration46.logLicenseCollisions(level49);
        reportConfiguration3.logLicenseCollisions(level49);
        defaultLog1.setLevel(level49);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet53 = strSet0.setLog((org.apache.rat.utils.Log) defaultLog1);
        int int54 = strSet0.size();
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders7 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders7.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier31);
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + options39 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options39.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level49 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level49.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test03523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03523");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = fullTextMatchingLicense0.getLicenseFamily();
        fullTextMatchingLicense0.setFullText("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        org.apache.rat.license.ILicense.Builder builder12 = fullTextMatchingLicense0.getLicense();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test03524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03524");
        org.apache.rat.license.ILicense[] iLicenseArray0 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet1 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet1, iLicenseArray0);
        java.lang.String[] strArray15 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, (java.util.Collection<java.lang.String>) strList16);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet19 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1);
        java.util.Collection<java.lang.String> strCollection20 = null;
        org.apache.rat.license.LicenseSetFactory licenseSetFactory21 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, strCollection20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier25 = reportConfiguration23.getOutput();
        org.apache.rat.license.ILicense iLicense26 = null;
        reportConfiguration23.addLicense(iLicense26);
        org.apache.rat.Defaults.Builder builder28 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults29 = builder28.build();
        reportConfiguration23.setFrom(defaults29);
        org.apache.rat.license.ILicense[] iLicenseArray31 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet32 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet32, iLicenseArray31);
        java.lang.String[] strArray46 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory49 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet32, (java.util.Collection<java.lang.String>) strList47);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet51 = licenseSetFactory49.getLicenseFamilies(licenseFilter50);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = defaults29.getLicenses(licenseFilter50);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = licenseSetFactory21.getLicenses(licenseFilter50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedSet<java.lang.String> strSet55 = licenseSetFactory21.getLicenseFamilyIds(licenseFilter54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(defaults29);
        org.junit.Assert.assertNotNull(iLicenseArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet51);
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertNotNull(iLicenseSet53);
    }

    @Test
    public void test03525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03525");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("fe6be119881745678d33352365bfa7c8");
    }

    @Test
    public void test03526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03526");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet15 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet15);
        boolean boolean17 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet15);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.utils.ReportingSet.Options options22 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration21.licenseDuplicateOption(options22);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet19.setDuplicateOption(options22);
        org.apache.rat.license.ILicense.Builder builder25 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder27 = builder25.setLicenseFamilyCategory("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.license.ILicense.Builder builder29 = builder25.setDerivedFrom("The MIT License");
        org.apache.rat.license.ILicense.Builder builder30 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder32 = builder30.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher34 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder35 = builder30.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher34);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str37 = anyBuilder36.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList38 = anyBuilder36.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher39 = anyBuilder36.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher40 = anyBuilder36.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList41 = anyBuilder36.getChildren();
        org.apache.rat.license.ILicense.Builder builder42 = builder30.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) anyBuilder36);
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher44 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("binary");
        org.apache.rat.analysis.IHeaderMatcher.State state45 = simpleTextMatcher44.finalizeState();
        boolean boolean47 = simpleTextMatcher44.doMatch("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicense.Builder builder48 = builder42.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher44);
        boolean boolean50 = simpleTextMatcher44.doMatch("");
        org.apache.rat.license.ILicense.Builder builder51 = builder29.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher44);
        java.lang.String str52 = simpleTextMatcher44.getId();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = strSet19.contains((java.lang.Object) simpleTextMatcher44);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.rat.analysis.matchers.SimpleTextMatcher cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(iLicenseFamilySet15);
        org.junit.Assert.assertNull(iLicenseFamily16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + options22 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options22.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(anyBuilder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "AnyBuilder:" + "'", str37, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList38);
        org.junit.Assert.assertNotNull(iHeaderMatcher39);
        org.junit.Assert.assertNotNull(iHeaderMatcher40);
        org.junit.Assert.assertNotNull(iHeaderMatcherList41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state45.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0281f950-1490-43a7-b38e-85646f125d68" + "'", str52, "0281f950-1490-43a7-b38e-85646f125d68");
    }

    @Test
    public void test03527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03527");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog0.setLevel(level13);
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily15 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str16 = simpleLicenseFamily15.getFamilyName();
        java.lang.String str17 = simpleLicenseFamily15.getFamilyCategory();
        simpleLicenseFamily15.setFamilyCategory("W3C  ");
        simpleLicenseFamily15.setFamilyCategory("AllBuilder:");
        defaultLog0.info((java.lang.Object) simpleLicenseFamily15);
        org.apache.rat.utils.DefaultLog defaultLog23 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        java.io.FilenameFilter filenameFilter26 = reportConfiguration25.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet28 = reportConfiguration25.getLicenses(licenseFilter27);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders29 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration25.setAddLicenseHeaders(addLicenseHeaders29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter34);
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter34);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        java.io.FilenameFilter filenameFilter39 = reportConfiguration38.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet41 = reportConfiguration38.getLicenses(licenseFilter40);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders42 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration38.setAddLicenseHeaders(addLicenseHeaders42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic46 = org.apache.rat.Reporter.report(reportConfiguration45);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter47);
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter47);
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter47);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier53 = reportConfiguration52.getOutput();
        reportConfiguration25.setOut(outputStreamIOSupplier53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic60 = org.apache.rat.Reporter.report(reportConfiguration59);
        org.apache.rat.utils.ReportingSet.Options options61 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration59.licenseDuplicateOption(options61);
        reportConfiguration56.familyDuplicateOption(options61);
        reportConfiguration25.licenseDuplicateOption(options61);
        reportConfiguration25.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        reportConfiguration68.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level71 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration68.logLicenseCollisions(level71);
        reportConfiguration25.logLicenseCollisions(level71);
        defaultLog23.setLevel(level71);
        defaultLog23.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration77 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog23);
        org.apache.rat.utils.DefaultLog defaultLog78 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        reportConfiguration80.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level83 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration80.logFamilyCollisions(level83);
        defaultLog78.setLevel(level83);
        defaultLog23.debug((java.lang.Object) level83);
        org.apache.rat.utils.Log.Level level87 = defaultLog23.getLevel();
        java.lang.Throwable throwable89 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.log(level87, "223f0aba-15d4-49e9-901e-5740c137aebf", throwable89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level13.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(defaultLog23);
        org.junit.Assert.assertNull(filenameFilter26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet28);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders29 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders29.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet41);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders42 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders42.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier53);
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertNull(claimStatistic60);
        org.junit.Assert.assertTrue("'" + options61 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options61.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level71 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level71.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog78);
        org.junit.Assert.assertTrue("'" + level83 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level83.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level87 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level87.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test03528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03528");
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher17 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher17.reset();
        org.apache.rat.license.ILicense.Builder builder19 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher17);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder20 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str21 = spdxBuilder20.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder23 = spdxBuilder20.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder24 = builder19.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder20);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher25 = spdxBuilder20.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder27 = spdxBuilder20.setId("ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        java.lang.String str28 = spdxBuilder20.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher29 = spdxBuilder20.build();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher30 = new org.apache.rat.analysis.matchers.NotMatcher("2b7a7df2-0dac-406a-96b5-ea6b08e88337", iHeaderMatcher29);
        org.apache.rat.analysis.IHeaderMatcher.State state31 = notMatcher30.finalizeState();
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(spdxBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "SpdxBuilder: null" + "'", str21, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(iHeaderMatcher25);
        org.junit.Assert.assertNotNull(abstractBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str28, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(iHeaderMatcher29);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state31.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test03529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03529");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter13 = xmlWriter1.attribute((java.lang.CharSequence) "fef8ca38-d006-48b8-9221-22b2d87fc230", (java.lang.CharSequence) "TextBuilder: COMMON DEVELOPMENT A...");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03530");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']", "AL   ");
        java.lang.String str3 = datum2.getValue();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "AL   " + "'", str3, "AL   ");
    }

    @Test
    public void test03531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03531");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter13 = xmlWriter1.content((java.lang.CharSequence) "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03532");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("");
        org.apache.rat.Defaults.Builder builder10 = builder8.remove("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder12 = builder10.remove("2f88b0fb-cbe0-494f-a237-c14d76af3d76");
        org.apache.rat.Defaults.Builder builder13 = builder10.noDefault();
        java.io.File file14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder15 = builder10.add(file14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test03533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03533");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.not();
        boolean boolean1 = notBuilder0.hasId();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = notBuilder0.build();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: 'not' type matcher requires one and only one enclosed matcher");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(notBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03534");
        org.apache.rat.config.ReportFormat reportFormat0 = org.apache.rat.config.ReportFormat.PLAIN;
        boolean boolean2 = reportFormat0.is("Copyr");
        org.junit.Assert.assertTrue("'" + reportFormat0 + "' != '" + org.apache.rat.config.ReportFormat.PLAIN + "'", reportFormat0.equals(org.apache.rat.config.ReportFormat.PLAIN));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test03535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03535");
        org.apache.rat.license.ILicense[] iLicenseArray2 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet3 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet3, iLicenseArray2);
        java.lang.String[] strArray17 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory20 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet3, (java.util.Collection<java.lang.String>) strList18);
        org.apache.rat.license.ILicense iLicense21 = org.apache.rat.license.LicenseSetFactory.search("binary", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet3);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet22 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet3);
        org.apache.rat.license.ILicense iLicense23 = org.apache.rat.license.LicenseSetFactory.search("RegexBuilder67eb96c283b2456dbfb023ff916bf212", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet22);
        org.junit.Assert.assertNotNull(iLicenseArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(iLicense21);
        org.junit.Assert.assertNull(iLicense23);
    }

    @Test
    public void test03536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03536");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) '4');
        claimStatistic0.setNumUnknown((int) (byte) 0);
        claimStatistic0.setNumUnknown((int) (byte) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null;
        claimStatistic0.setDocumentCategoryMap(strMap13);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(strMap12);
    }

    @Test
    public void test03537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03537");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic3 = org.apache.rat.Reporter.report(reportConfiguration2);
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic6 = org.apache.rat.Reporter.report(reportConfiguration5);
        org.apache.rat.utils.ReportingSet.Options options7 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration5.licenseDuplicateOption(options7);
        reportConfiguration2.familyDuplicateOption(options7);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier10 = reportConfiguration2.getWriter();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        reportConfiguration12.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level15 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration12.logFamilyCollisions(level15);
        reportConfiguration2.logFamilyCollisions(level15);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter18 = reportConfiguration2.getDirectoryFilter();
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        reportConfiguration20.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level23 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration20.logFamilyCollisions(level23);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter25 = reportConfiguration20.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter26 = iOFileFilter18.or(iOFileFilter25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker27 = new org.apache.rat.walker.ArchiveWalker(file0, (java.io.FilenameFilter) iOFileFilter18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic3);
        org.junit.Assert.assertNull(claimStatistic6);
        org.junit.Assert.assertTrue("'" + options7 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options7.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier10);
        org.junit.Assert.assertTrue("'" + level15 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level15.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter18);
        org.junit.Assert.assertTrue("'" + level23 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level23.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter25);
        org.junit.Assert.assertNotNull(iOFileFilter26);
    }

    @Test
    public void test03538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03538");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = allBuilder0.build();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
    }

    @Test
    public void test03539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03539");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str5 = fullTextMatchingLicense0.getNotes();
        java.lang.String str6 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setNotes("NotBuilder: MathcerRefBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyName("8ecb8cce06e4400f84d9ad1cf6289fda");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily11 = fullTextMatchingLicense0.getLicenseFamily();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test03540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03540");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        java.util.regex.Pattern pattern2 = null;
        headerBean0.setHeaderPattern(pattern2);
        headerBean0.setMatch(false);
        headerBean0.setMatch(true);
        headerBean0.setMatch(true);
        java.util.regex.Pattern pattern10 = headerBean0.getHeaderPattern();
        headerBean0.setMatch(false);
        headerBean0.setMatch(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(pattern10);
    }

    @Test
    public void test03541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03541");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder15 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder17 = builder15.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher21 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state22 = copyrightMatcher21.finalizeState();
        org.apache.rat.license.ILicense.Builder builder23 = builder17.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher21);
        org.apache.rat.license.ILicense.Builder builder25 = builder23.setLicenseFamilyCategory("");
        defaultLog14.error((java.lang.Object) builder25);
        org.apache.rat.utils.Log.Level level27 = defaultLog14.getLevel();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        reportConfiguration29.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level32 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration29.logLicenseCollisions(level32);
        defaultLog14.log(level32, "AnyBuilder:");
        defaultLog0.info((java.lang.Object) defaultLog14);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier40 = reportConfiguration38.getOutput();
        boolean boolean41 = reportConfiguration38.isAddingLicensesForced();
        org.apache.rat.license.ILicense[] iLicenseArray42 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet43 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet43, iLicenseArray42);
        java.lang.String[] strArray57 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory60 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet43, (java.util.Collection<java.lang.String>) strList58);
        reportConfiguration38.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet43);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser62 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog0, (java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet43);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state22.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
// flaky:         org.junit.Assert.assertTrue("'" + level27 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level27.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertTrue("'" + level32 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level32.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(iLicenseArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test03542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03542");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.license.ILicense.Builder builder7 = builder0.setDerivedFrom("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.lang.String str10 = matcherRefBuilder8.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap11 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder12 = matcherRefBuilder8.setMatchers(strMap11);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder14 = matcherRefBuilder8.setRefId("RegexBuilder: null");
        org.apache.rat.license.ILicense.Builder builder15 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder8);
        org.apache.rat.license.ILicense.Builder builder17 = builder0.setLicenseFamilyCategory("MathcerRefBuilder: null");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory18 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher20 = sPDXMatcherFactory18.create("GPL3 ");
        org.apache.rat.analysis.IHeaderMatcher.State state21 = iHeaderMatcher20.currentState();
        org.apache.rat.license.ILicense.Builder builder22 = builder0.setMatcher(iHeaderMatcher20);
        org.apache.rat.configuration.Format format23 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader24 = format23.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader25 = format23.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader26 = format23.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader27 = format23.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet28 = licenseReader27.readFamilies();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet29 = licenseReader27.readFamilies();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet30 = licenseReader27.readFamilies();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense31 = builder0.build(iLicenseFamilySet30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: License family MathcerRefBuilder: null not found.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MathcerRefBuilder: null" + "'", str10, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(sPDXMatcherFactory18);
        org.junit.Assert.assertNotNull(iHeaderMatcher20);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state21.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + format23 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format23.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader24);
        org.junit.Assert.assertNotNull(matcherReader25);
        org.junit.Assert.assertNotNull(licenseReader26);
        org.junit.Assert.assertNotNull(licenseReader27);
        org.junit.Assert.assertNotNull(iLicenseFamilySet28);
        org.junit.Assert.assertNotNull(iLicenseFamilySet29);
        org.junit.Assert.assertNotNull(iLicenseFamilySet30);
    }

    @Test
    public void test03543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03543");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.MatcherBuilderTracker.addBuilder("2b7a7df2-0dac-406a-96b5-ea6b08e88337", "org/apache/rat/plain-rat.xsl");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: java.lang.ClassNotFoundException: 2b7a7df2-0dac-406a-96b5-ea6b08e88337");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03544");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder11 = copyrightBuilder7.setEnd("d25f13bc-1910-4451-97b5-b72663551a5d");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder13 = copyrightBuilder7.setId("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        java.lang.String str14 = abstractBuilder13.toString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(copyrightBuilder11);
        org.junit.Assert.assertNotNull(abstractBuilder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Copyright Builder: s:null e:d25f13bc-1910-4451-97b5-b72663551a5d o:null" + "'", str14, "Copyright Builder: s:null e:d25f13bc-1910-4451-97b5-b72663551a5d o:null");
    }

    @Test
    public void test03545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03545");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder5 = builder4.noDefault();
        org.apache.rat.Defaults.Builder builder6 = builder4.noDefault();
        java.net.URL uRL7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder8 = builder4.add(uRL7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03546");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("MathcerRefBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03547");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        boolean boolean14 = strSet6.isEmpty();
        boolean boolean16 = strSet6.addIfNotPresent("OASIS Open License");
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic19 = org.apache.rat.Reporter.report(reportConfiguration18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.utils.ReportingSet.Options options23 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration21.licenseDuplicateOption(options23);
        reportConfiguration18.familyDuplicateOption(options23);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier26 = reportConfiguration18.getWriter();
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        reportConfiguration18.logFamilyCollisions(level31);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet34 = strSet6.setLogLevel(level31);
        java.util.stream.Stream<java.lang.String> strStream35 = strSet6.stream();
        strStream35.close();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(claimStatistic19);
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + options23 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options23.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier26);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strStream35);
    }

    @Test
    public void test03548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03548");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("dae945c0-00a3-4e9e-b53b-5fffbbb3412b");
    }

    @Test
    public void test03549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03549");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray19 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList20 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20, iLicenseFamilyArray19);
        org.apache.rat.policy.DefaultPolicy defaultPolicy22 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        boolean boolean23 = strSet9.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        org.apache.rat.policy.DefaultPolicy defaultPolicy24 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet25 = defaultPolicy24.getApprovedLicenseNames();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet25);
    }

    @Test
    public void test03550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03550");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        reportConfiguration1.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log5 = reportConfiguration1.getLog();
        org.apache.rat.utils.Log.Level level6 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration1.logFamilyCollisions(level6);
        org.apache.rat.license.ILicense[] iLicenseArray9 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet10 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10, iLicenseArray9);
        java.lang.String[] strArray24 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory27 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet10, (java.util.Collection<java.lang.String>) strList25);
        org.apache.rat.license.ILicense iLicense28 = org.apache.rat.license.LicenseSetFactory.search("JAVA", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet10);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet29 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet10);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.utils.ReportingSet.Options options37 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration35.licenseDuplicateOption(options37);
        reportConfiguration32.familyDuplicateOption(options37);
        reportConfiguration1.licenseDuplicateOption(options37);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter41 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet42 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet44 = strSet42.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray45 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray46 = strSet44.toArray(licenseReaderArray45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.utils.ReportingSet.Options options53 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration51.licenseDuplicateOption(options53);
        reportConfiguration48.familyDuplicateOption(options53);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet56 = strSet44.setDuplicateOption(options53);
        reportConfiguration1.licenseDuplicateOption(options53);
        java.io.File file58 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setOut(file58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertTrue("'" + level6 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level6.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(iLicenseArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(iLicense28);
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + options37 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options37.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iOFileFilter41);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(licenseReaderArray45);
        org.junit.Assert.assertNotNull(licenseReaderArray46);
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + options53 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options53.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet56);
    }

    @Test
    public void test03551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03551");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter10 = xmlWriter1.content((java.lang.CharSequence) "3e2b228d-d5ff-4444-8d8c-d614494b2426 null");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03552");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet15 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet15);
        boolean boolean17 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet15);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        java.io.FilenameFilter filenameFilter22 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet24 = reportConfiguration21.getLicenses(licenseFilter23);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders25 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration21.setAddLicenseHeaders(addLicenseHeaders25);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logLicenseCollisions(level31);
        reportConfiguration21.logFamilyCollisions(level31);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet34 = strSet6.setLogLevel(level31);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet35 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.policy.DefaultPolicy defaultPolicy36 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet35);
        boolean boolean37 = strSet34.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet35);
        java.util.stream.Stream<java.lang.String> strStream38 = strSet34.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = strSet34.last();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(iLicenseFamilySet15);
        org.junit.Assert.assertNull(iLicenseFamily16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(filenameFilter22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet24);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders25 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders25.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(iLicenseFamilySet35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strStream38);
    }

    @Test
    public void test03553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03553");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null;
        claimStatistic0.setDocumentCategoryMap(strMap1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = claimStatistic0.getLicenseFileCodeMap();
        int int4 = claimStatistic0.getNumApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap5);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test03554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03554");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null;
        claimStatistic0.setDocumentCategoryMap(strMap1);
        int int3 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap4 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumUnknown((-1));
        int int7 = claimStatistic0.getNumUnApproved();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test03555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03555");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.report.IReportable iReportable3 = null;
        reportConfiguration1.setReportable(iReportable3);
        org.apache.rat.license.ILicense iLicense5 = null;
        reportConfiguration1.addLicense(iLicense5);
        org.apache.rat.utils.Log.Level level7 = null;
        reportConfiguration1.logFamilyCollisions(level7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier12 = reportConfiguration10.getOutput();
        org.apache.rat.license.ILicense iLicense13 = null;
        reportConfiguration10.addLicense(iLicense13);
        org.apache.rat.Defaults.Builder builder15 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults16 = builder15.build();
        reportConfiguration10.setFrom(defaults16);
        org.apache.rat.Defaults.Builder builder18 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder19 = builder18.noDefault();
        org.apache.rat.Defaults defaults20 = builder19.build();
        org.apache.rat.Defaults.Builder builder21 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults22 = builder21.build();
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        java.io.FilenameFilter filenameFilter25 = reportConfiguration24.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet27 = reportConfiguration24.getLicenses(licenseFilter26);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders28 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration24.setAddLicenseHeaders(addLicenseHeaders28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter33);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        java.io.FilenameFilter filenameFilter38 = reportConfiguration37.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = reportConfiguration37.getLicenses(licenseFilter39);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders41 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration37.setAddLicenseHeaders(addLicenseHeaders41);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic45 = org.apache.rat.Reporter.report(reportConfiguration44);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter46);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter46);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet49 = reportConfiguration24.getLicenseFamilies(licenseFilter46);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet50 = defaults22.getLicenses(licenseFilter46);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet51 = defaults20.getLicenseFamilies(licenseFilter46);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet52 = defaults16.getLicenseFamilies(licenseFilter46);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet53 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean55 = strSet53.addIfNotPresent("OASIS Open License");
        boolean boolean57 = strSet53.add("http://org/apache/rat/meta-data#HeaderCategory");
        java.util.Iterator<java.lang.String> strItor58 = strSet53.iterator();
        java.lang.String str59 = strSet53.first();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory60 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet52, (java.util.Collection<java.lang.String>) strSet53);
        org.apache.rat.license.ILicense[] iLicenseArray61 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet62 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet62, iLicenseArray61);
        java.lang.String[] strArray76 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory79 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet62, (java.util.Collection<java.lang.String>) strList77);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter80 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet81 = licenseSetFactory79.getLicenseFamilies(licenseFilter80);
        java.util.SortedSet<java.lang.String> strSet82 = licenseFamilySetFactory60.getFamilyIds(licenseFilter80);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet83 = reportConfiguration1.getLicenseFamilies(licenseFilter80);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(defaults16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(defaults20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(defaults22);
        org.junit.Assert.assertNull(filenameFilter25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet27);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders28 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders28.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet40);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders41 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders41.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet49);
        org.junit.Assert.assertNotNull(iLicenseSet50);
        org.junit.Assert.assertNotNull(iLicenseFamilySet51);
        org.junit.Assert.assertNotNull(iLicenseFamilySet52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strItor58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "OASIS Open License" + "'", str59, "OASIS Open License");
        org.junit.Assert.assertNotNull(iLicenseArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter80 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter80.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet81);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(iLicenseFamilySet83);
    }

    @Test
    public void test03556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03556");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        reportConfiguration2.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level5 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration2.logFamilyCollisions(level5);
        defaultLog0.setLevel(level5);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier37 = reportConfiguration36.getOutput();
        reportConfiguration9.setOut(outputStreamIOSupplier37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.utils.ReportingSet.Options options45 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration43.licenseDuplicateOption(options45);
        reportConfiguration40.familyDuplicateOption(options45);
        reportConfiguration9.licenseDuplicateOption(options45);
        reportConfiguration9.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        reportConfiguration52.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level55 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration52.logLicenseCollisions(level55);
        reportConfiguration9.logLicenseCollisions(level55);
        defaultLog0.log(level55, "GNU General Public License, version 1");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender61 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "W3C  ");
        org.apache.rat.Defaults.Builder builder62 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder63 = builder62.noDefault();
        org.apache.rat.Defaults defaults64 = builder63.build();
        org.apache.rat.Defaults.Builder builder65 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults66 = builder65.build();
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        java.io.FilenameFilter filenameFilter69 = reportConfiguration68.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter70 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet71 = reportConfiguration68.getLicenses(licenseFilter70);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders72 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration68.setAddLicenseHeaders(addLicenseHeaders72);
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic76 = org.apache.rat.Reporter.report(reportConfiguration75);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter77 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration75, licenseFilter77);
        org.apache.rat.Reporter.listLicenses(reportConfiguration68, licenseFilter77);
        org.apache.rat.utils.Log log80 = null;
        org.apache.rat.ReportConfiguration reportConfiguration81 = new org.apache.rat.ReportConfiguration(log80);
        java.io.FilenameFilter filenameFilter82 = reportConfiguration81.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter83 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet84 = reportConfiguration81.getLicenses(licenseFilter83);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders85 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration81.setAddLicenseHeaders(addLicenseHeaders85);
        org.apache.rat.utils.Log log87 = null;
        org.apache.rat.ReportConfiguration reportConfiguration88 = new org.apache.rat.ReportConfiguration(log87);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic89 = org.apache.rat.Reporter.report(reportConfiguration88);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter90 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration88, licenseFilter90);
        org.apache.rat.Reporter.listLicenses(reportConfiguration81, licenseFilter90);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet93 = reportConfiguration68.getLicenseFamilies(licenseFilter90);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet94 = defaults66.getLicenses(licenseFilter90);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet95 = defaults64.getLicenseFamilies(licenseFilter90);
        java.lang.Throwable throwable96 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.error((java.lang.Object) defaults64, throwable96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + level5 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level5.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier37);
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + options45 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options45.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level55 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level55.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(defaults64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(defaults66);
        org.junit.Assert.assertNull(filenameFilter69);
        org.junit.Assert.assertTrue("'" + licenseFilter70 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter70.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet71);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders72 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders72.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic76);
        org.junit.Assert.assertTrue("'" + licenseFilter77 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter77.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter82);
        org.junit.Assert.assertTrue("'" + licenseFilter83 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter83.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet84);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders85 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders85.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic89);
        org.junit.Assert.assertTrue("'" + licenseFilter90 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter90.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet93);
        org.junit.Assert.assertNotNull(iLicenseSet94);
        org.junit.Assert.assertNotNull(iLicenseFamilySet95);
    }

    @Test
    public void test03557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03557");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setNotes("MANIFEST.MF");
        fullTextMatchingLicense0.setLicenseFamilyCategory("standard");
        org.apache.rat.license.ILicenseFamily iLicenseFamily8 = fullTextMatchingLicense0.getLicenseFamily();
        java.lang.String str9 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(iLicenseFamily8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "standard" + "'", str9, "standard");
    }

    @Test
    public void test03558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03558");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        strSet0.clear();
        boolean boolean2 = strSet0.isEmpty();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction3 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet4 = strSet0.setMsgFormat(strFunction3);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test03559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03559");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        boolean boolean4 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier5 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier5);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter7 = reportConfiguration1.getDirectoryFilter();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier5);
        org.junit.Assert.assertNotNull(iOFileFilter7);
    }

    @Test
    public void test03560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03560");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("Apache License Version 2.0", "RegexBuilder67eb96c283b2456dbfb023ff916bf212");
        java.lang.String str3 = simpleTextMatcher2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Apache License Version 2.0" + "'", str3, "Apache License Version 2.0");
    }

    @Test
    public void test03561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03561");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("W3C  ");
        simpleLicenseFamily0.setFamilyName("GEN  ");
        simpleLicenseFamily0.setFamilyCategory("b5cb0999-b639-4e9c-ab9c-268137bc8846");
        simpleLicenseFamily0.setFamilyCategory("bd015714-405b-4304-9faa-36efad80e6e6");
        java.lang.String str11 = simpleLicenseFamily0.toString();
        java.lang.String str12 = simpleLicenseFamily0.getFamilyCategory();
        java.lang.String str13 = simpleLicenseFamily0.getFamilyCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bd015714-405b-4304-9faa-36efad80e6e6 GEN  " + "'", str11, "bd015714-405b-4304-9faa-36efad80e6e6 GEN  ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "bd015714-405b-4304-9faa-36efad80e6e6" + "'", str12, "bd015714-405b-4304-9faa-36efad80e6e6");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bd015714-405b-4304-9faa-36efad80e6e6" + "'", str13, "bd015714-405b-4304-9faa-36efad80e6e6");
    }

    @Test
    public void test03562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03562");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter11 = xmlWriter1.attribute((java.lang.CharSequence) "6232a9af-c312-410c-9bbb-6b12d7725116", (java.lang.CharSequence) "AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24\nTextBuilder: t true");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03563");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder0.setId("GPL2 ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setDerivedFrom("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense8 = builder4.build(iLicenseFamilySet7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Matcher must not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03564");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray19 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList20 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20, iLicenseFamilyArray19);
        org.apache.rat.policy.DefaultPolicy defaultPolicy22 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        boolean boolean23 = strSet9.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        org.apache.rat.policy.DefaultPolicy defaultPolicy24 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray25 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList26 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList26, iLicenseFamilyArray25);
        org.apache.rat.policy.DefaultPolicy defaultPolicy28 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList26);
        org.apache.rat.api.Document document29 = null;
        defaultPolicy28.analyse(document29);
        org.apache.rat.api.Document document31 = null;
        defaultPolicy28.analyse(document31);
        org.apache.rat.Defaults.Builder builder33 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults34 = builder33.build();
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet40 = defaults34.getLicenseFamilies(licenseFilter38);
        org.apache.rat.policy.DefaultPolicy defaultPolicy41 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet40);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet42 = defaultPolicy41.getApprovedLicenseNames();
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray43 = new org.apache.rat.document.IDocumentAnalyser[] { defaultPolicy24, defaultPolicy28, defaultPolicy41 };
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer44 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray43);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer45 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray43);
        org.apache.rat.api.Document document46 = null;
        documentAnalyserMultiplexer45.analyse(document46);
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(defaults34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet40);
        org.junit.Assert.assertNotNull(iLicenseFamilySet42);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray43);
    }

    @Test
    public void test03565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03565");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration2.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter4 = reportConfiguration2.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter5 = iOFileFilter4.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = iOFileFilter4.negate();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        java.io.FilenameFilter filenameFilter9 = reportConfiguration8.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet11 = reportConfiguration8.getLicenses(licenseFilter10);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders12 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration8.setAddLicenseHeaders(addLicenseHeaders12);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration15);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter17);
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter17);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        java.io.FilenameFilter filenameFilter22 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet24 = reportConfiguration21.getLicenses(licenseFilter23);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders25 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration21.setAddLicenseHeaders(addLicenseHeaders25);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic29 = org.apache.rat.Reporter.report(reportConfiguration28);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter30);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier36 = reportConfiguration35.getOutput();
        reportConfiguration8.setOut(outputStreamIOSupplier36);
        org.apache.rat.utils.Log.Level level38 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration8.logLicenseCollisions(level38);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter40 = reportConfiguration8.getDirectoryFilter();
        java.nio.file.Path path41 = null;
        boolean boolean42 = iOFileFilter40.matches(path41);
        java.nio.file.Path path43 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes44 = null;
        java.nio.file.FileVisitResult fileVisitResult45 = iOFileFilter40.accept(path43, basicFileAttributes44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        java.io.FilenameFilter filenameFilter48 = reportConfiguration47.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet50 = reportConfiguration47.getLicenses(licenseFilter49);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders51 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration47.setAddLicenseHeaders(addLicenseHeaders51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic55 = org.apache.rat.Reporter.report(reportConfiguration54);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter56);
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter56);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        java.io.FilenameFilter filenameFilter61 = reportConfiguration60.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet63 = reportConfiguration60.getLicenses(licenseFilter62);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders64 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration60.setAddLicenseHeaders(addLicenseHeaders64);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic68 = org.apache.rat.Reporter.report(reportConfiguration67);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter69 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration67, licenseFilter69);
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter69);
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter69);
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier75 = reportConfiguration74.getOutput();
        reportConfiguration47.setOut(outputStreamIOSupplier75);
        org.apache.rat.utils.Log.Level level77 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration47.logLicenseCollisions(level77);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter79 = reportConfiguration47.getDirectoryFilter();
        java.nio.file.Path path80 = null;
        boolean boolean81 = iOFileFilter79.matches(path80);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter82 = iOFileFilter40.and(iOFileFilter79);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter83 = iOFileFilter79.negate();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker84 = new org.apache.rat.walker.DirectoryWalker(file0, (java.io.FilenameFilter) iOFileFilter4, iOFileFilter79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNotNull(iOFileFilter4);
        org.junit.Assert.assertNotNull(iOFileFilter5);
        org.junit.Assert.assertNotNull(iOFileFilter6);
        org.junit.Assert.assertNull(filenameFilter9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet11);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders12 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders12.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet24);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders25 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders25.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier36);
        org.junit.Assert.assertTrue("'" + level38 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level38.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult45 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult45.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNull(filenameFilter48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet50);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders51 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders51.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet63);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders64 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders64.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic68);
        org.junit.Assert.assertTrue("'" + licenseFilter69 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter69.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier75);
        org.junit.Assert.assertTrue("'" + level77 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level77.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(iOFileFilter82);
        org.junit.Assert.assertNotNull(iOFileFilter83);
    }

    @Test
    public void test03566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03566");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("t true");
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder4 = textBuilder0.setText("c523095e-4421-4cc4-93e2-039f23b91f76");
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder0.setText("TMF  ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = textBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = textBuilder0.build();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textCaptureBuilder4);
        org.junit.Assert.assertNotNull(textBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
    }

    @Test
    public void test03567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03567");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        java.io.FilenameFilter filenameFilter12 = reportConfiguration1.getInputFileFilter();
        boolean boolean13 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier14 = reportConfiguration1.getStyleSheet();
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray17 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList18 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18, iLicenseFamilyArray17);
        reportConfiguration16.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18);
        org.apache.rat.utils.Log.Level level21 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration16.logLicenseCollisions(level21);
        org.apache.rat.report.IReportable iReportable23 = reportConfiguration16.getReportable();
        org.apache.rat.report.IReportable iReportable24 = reportConfiguration16.getReportable();
        org.apache.rat.utils.ReportingSet.Options options25 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration16.licenseDuplicateOption(options25);
        reportConfiguration1.licenseDuplicateOption(options25);
        java.net.URI uRI28 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRI28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(inputStreamIOSupplier14);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + level21 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level21.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(iReportable23);
        org.junit.Assert.assertNull(iReportable24);
        org.junit.Assert.assertTrue("'" + options25 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options25.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
    }

    @Test
    public void test03568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03568");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        java.io.FilenameFilter filenameFilter12 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.report.IReportable iReportable13 = null;
        reportConfiguration1.setReportable(iReportable13);
        reportConfiguration1.addApprovedLicenseCategory("TextBuilder: COMMON DEVELOPMENT A...");
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNull(filenameFilter12);
    }

    @Test
    public void test03569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03569");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet19 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet2);
        java.lang.String[] strArray25 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet26 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        boolean boolean29 = strSet26.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.api.MetaData.Datum datum30 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_2;
        boolean boolean31 = strSet26.equals((java.lang.Object) datum30);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory32 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet26);
        int int33 = strSet26.size();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(datum30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
    }

    @Test
    public void test03570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03570");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = reportConfiguration1.getDirectoryFilter();
        java.lang.String[] strArray12 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean16 = strSet13.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean18 = strSet13.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction19 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet20 = strSet13.setMsgFormat(strFunction19);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily23 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet22);
        boolean boolean24 = strSet13.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet13);
        org.apache.rat.report.IReportable iReportable26 = null;
        reportConfiguration1.setReportable(iReportable26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray30 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList31 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList31, iLicenseFamilyArray30);
        reportConfiguration29.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList31);
        reportConfiguration29.addApprovedLicenseCategory("http://org/apache/rat/meta-data");
        org.apache.rat.report.IReportable iReportable36 = reportConfiguration29.getReportable();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter37 = reportConfiguration29.getDirectoryFilter();
        reportConfiguration1.setDirectoryFilter(iOFileFilter37);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier39 = reportConfiguration1.getOutput();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier40 = reportConfiguration1.getStyleSheet();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet41 = org.apache.rat.license.LicenseSetFactory.emptyLicenseSet();
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet41);
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertNull(iLicenseFamily23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(iReportable36);
        org.junit.Assert.assertNotNull(iOFileFilter37);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier39);
        org.junit.Assert.assertNull(inputStreamIOSupplier40);
        org.junit.Assert.assertNotNull(iLicenseSet41);
    }

    @Test
    public void test03571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03571");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        strSet0.clear();
        boolean boolean2 = strSet0.isEmpty();
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        java.io.FilenameFilter filenameFilter5 = reportConfiguration4.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter6 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet7 = reportConfiguration4.getLicenses(licenseFilter6);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders8 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration4.setAddLicenseHeaders(addLicenseHeaders8);
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter13);
        org.apache.rat.Reporter.listLicenses(reportConfiguration4, licenseFilter13);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders21 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration17.setAddLicenseHeaders(addLicenseHeaders21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration4, licenseFilter26);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration4.getOutput();
        org.apache.rat.utils.ReportingSet.Options options31 = org.apache.rat.utils.ReportingSet.Options.FAIL;
        reportConfiguration4.familyDuplicateOption(options31);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet33 = strSet0.setDuplicateOption(options31);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(filenameFilter5);
        org.junit.Assert.assertTrue("'" + licenseFilter6 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter6.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet7);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders8 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders8.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders21 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders21.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertTrue("'" + options31 + "' != '" + org.apache.rat.utils.ReportingSet.Options.FAIL + "'", options31.equals(org.apache.rat.utils.ReportingSet.Options.FAIL));
        org.junit.Assert.assertNotNull(strSet33);
    }

    @Test
    public void test03572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03572");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        reportConfiguration1.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable30 = null;
        reportConfiguration1.setReportable(iReportable30);
        org.apache.rat.Defaults.Builder builder33 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults34 = builder33.build();
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = reportConfiguration49.getLicenses(licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter58);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet61 = reportConfiguration36.getLicenseFamilies(licenseFilter58);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = defaults34.getLicenses(licenseFilter58);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet63 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet62);
        org.apache.rat.license.ILicense iLicense64 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet62);
        reportConfiguration1.addLicense(iLicense64);
        org.apache.rat.license.ILicenseFamily iLicenseFamily66 = iLicense64.getLicenseFamily();
        org.apache.rat.license.ILicenseFamily iLicenseFamily67 = iLicense64.getLicenseFamily();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(defaults34);
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet61);
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertNotNull(iLicense64);
        org.junit.Assert.assertNotNull(iLicenseFamily66);
        org.junit.Assert.assertNotNull(iLicenseFamily67);
    }

    @Test
    public void test03573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03573");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher4 = new org.apache.rat.analysis.matchers.CopyrightMatcher("49ba0523-306f-4984-949f-9db17b9667d9", "eba9cdef-527a-48ca-947b-897e2e06ea31", "Copyright Builder: s:null e:null o:The MIT License", "535b5d01-f553-45e5-bb29-a646e4b8b66f");
        java.lang.String str5 = copyrightMatcher4.getId();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "49ba0523-306f-4984-949f-9db17b9667d9" + "'", str5, "49ba0523-306f-4984-949f-9db17b9667d9");
    }

    @Test
    public void test03574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03574");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier14 = reportConfiguration13.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter15 = reportConfiguration13.getDirectoryFilter();
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        reportConfiguration17.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        java.io.FilenameFilter filenameFilter22 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet24 = reportConfiguration21.getLicenses(licenseFilter23);
        reportConfiguration17.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet24);
        java.io.FilenameFilter filenameFilter26 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = reportConfiguration28.getLicenses(licenseFilter30);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders32 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration28.setAddLicenseHeaders(addLicenseHeaders32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter37);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter37);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = reportConfiguration41.getLicenses(licenseFilter43);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders45 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter50);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet53 = reportConfiguration28.getLicenseFamilies(licenseFilter50);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration17, licenseFilter50);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet55 = reportConfiguration13.getLicenseFamilies(licenseFilter50);
        org.apache.rat.policy.DefaultPolicy defaultPolicy56 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet55);
        boolean boolean57 = strSet6.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet55);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet58 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.license.ILicense[] iLicenseArray59 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet60 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet60, iLicenseArray59);
        java.lang.String[] strArray74 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory77 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet60, (java.util.Collection<java.lang.String>) strList75);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter78 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet79 = licenseSetFactory77.getLicenseFamilies(licenseFilter78);
        org.apache.rat.policy.DefaultPolicy defaultPolicy80 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet79);
        boolean boolean81 = strSet58.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet79);
        java.lang.Object[] objArray82 = strSet58.toArray();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet84 = strSet58.tailSet("f7c80ac5-f6d7-4a47-993b-a27ea27d7efb");
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory85 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet55, (java.util.Collection<java.lang.String>) strSet58);
        strSet58.clear();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier14);
        org.junit.Assert.assertNotNull(iOFileFilter15);
        org.junit.Assert.assertNull(filenameFilter22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet24);
        org.junit.Assert.assertNull(filenameFilter26);
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders32 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders32.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders45 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders45.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet53);
        org.junit.Assert.assertNotNull(iLicenseFamilySet55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(iLicenseArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter78 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter78.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
        org.junit.Assert.assertNotNull(strSet84);
    }

    @Test
    public void test03575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03575");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        defaultLog0.info((java.lang.Object) "TextBuilder: Datum [ name ='http:...");
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders54 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration50.setAddLicenseHeaders(addLicenseHeaders54);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = org.apache.rat.Reporter.report(reportConfiguration57);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter59);
        org.apache.rat.report.IReportable iReportable62 = null;
        reportConfiguration50.setReportable(iReportable62);
        java.lang.String str64 = reportConfiguration50.getCopyrightMessage();
        defaultLog0.warn((java.lang.Object) reportConfiguration50);
        org.apache.rat.license.ILicense[] iLicenseArray66 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet67 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet67, iLicenseArray66);
        java.lang.String[] strArray81 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory84 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet67, (java.util.Collection<java.lang.String>) strList82);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser85 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog0, (java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet67);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders54 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders54.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(iLicenseArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test03576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03576");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null;
        claimStatistic0.setDocumentCategoryMap(strMap1);
        int int3 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap4 = claimStatistic0.getDocumentCategoryMap();
        int int5 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap6);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test03577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03577");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.report.IReportable iReportable13 = null;
        reportConfiguration1.setReportable(iReportable13);
        org.apache.rat.report.IReportable iReportable15 = reportConfiguration1.getReportable();
        org.apache.rat.license.ILicense[] iLicenseArray16 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet17 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet17, iLicenseArray16);
        java.lang.String[] strArray31 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory34 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet17, (java.util.Collection<java.lang.String>) strList32);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet36 = licenseSetFactory34.getLicenseFamilies(licenseFilter35);
        org.apache.rat.license.ILicense[] iLicenseArray37 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet38 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet38, iLicenseArray37);
        java.lang.String[] strArray52 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory55 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet38, (java.util.Collection<java.lang.String>) strList53);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = reportConfiguration57.getLicenses(licenseFilter59);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders61 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration57.setAddLicenseHeaders(addLicenseHeaders61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter66);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter66);
        org.apache.rat.utils.Log log69 = null;
        org.apache.rat.ReportConfiguration reportConfiguration70 = new org.apache.rat.ReportConfiguration(log69);
        java.io.FilenameFilter filenameFilter71 = reportConfiguration70.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter72 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet73 = reportConfiguration70.getLicenses(licenseFilter72);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders74 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration70.setAddLicenseHeaders(addLicenseHeaders74);
        org.apache.rat.utils.Log log76 = null;
        org.apache.rat.ReportConfiguration reportConfiguration77 = new org.apache.rat.ReportConfiguration(log76);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic78 = org.apache.rat.Reporter.report(reportConfiguration77);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter79 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration77, licenseFilter79);
        org.apache.rat.Reporter.listLicenses(reportConfiguration70, licenseFilter79);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter79);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet83 = licenseSetFactory55.getLicenses(licenseFilter79);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet84 = licenseSetFactory34.getLicenseFamilies(licenseFilter79);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet85 = reportConfiguration1.getLicenseFamilies(licenseFilter79);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier86 = reportConfiguration1.getStyleSheet();
        java.io.FilenameFilter filenameFilter87 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense88 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense88.setLicenseFamilyName("hi!");
        java.lang.String str91 = fullTextMatchingLicense88.getLicenseFamilyCategory();
        java.lang.String str92 = fullTextMatchingLicense88.getLicenseFamilyCategory();
        fullTextMatchingLicense88.setLicenseFamilyCategory("DOJO ");
        java.lang.String str95 = fullTextMatchingLicense88.getLicenseFamilyName();
        fullTextMatchingLicense88.setNotes("SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicenseFamily iLicenseFamily98 = fullTextMatchingLicense88.getLicenseFamily();
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily98);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(iReportable15);
        org.junit.Assert.assertNotNull(iLicenseArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet36);
        org.junit.Assert.assertNotNull(iLicenseArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders61 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders61.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter71);
        org.junit.Assert.assertTrue("'" + licenseFilter72 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter72.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet73);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders74 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders74.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic78);
        org.junit.Assert.assertTrue("'" + licenseFilter79 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter79.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet83);
        org.junit.Assert.assertNotNull(iLicenseFamilySet84);
        org.junit.Assert.assertNotNull(iLicenseFamilySet85);
        org.junit.Assert.assertNull(inputStreamIOSupplier86);
        org.junit.Assert.assertNull(filenameFilter87);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "hi!" + "'", str95, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily98);
    }

    @Test
    public void test03578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03578");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("Copyright Builder: s:null e:EBC30EB7-B3EA-4F39-BAEA-5FEA4FA0278B o:null");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03579");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        reportConfiguration1.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable30 = null;
        reportConfiguration1.setReportable(iReportable30);
        org.apache.rat.Defaults.Builder builder33 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults34 = builder33.build();
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = reportConfiguration49.getLicenses(licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter58);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet61 = reportConfiguration36.getLicenseFamilies(licenseFilter58);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = defaults34.getLicenses(licenseFilter58);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet63 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet62);
        org.apache.rat.license.ILicense iLicense64 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet62);
        reportConfiguration1.addLicense(iLicense64);
        org.apache.rat.license.ILicenseFamily iLicenseFamily66 = iLicense64.getLicenseFamily();
        java.lang.String str67 = iLicenseFamily66.getFamilyCategory();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(defaults34);
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet61);
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertNotNull(iLicense64);
        org.junit.Assert.assertNotNull(iLicenseFamily66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "BSD-3" + "'", str67, "BSD-3");
    }

    @Test
    public void test03580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03580");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader2 = format0.licenseReader();
        java.util.SortedSet<java.lang.String> strSet3 = licenseReader2.approvedLicenseId();
        java.net.URL uRL4 = null;
        // The following exception was thrown during execution in test generation
        try {
            licenseReader2.addLicenses(uRL4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(licenseReader2);
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test03581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03581");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        fullTextMatchingLicense0.setFullText("MANIFEST.MF");
        org.apache.rat.license.ILicense.Builder builder5 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setNotes("MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        java.lang.String str8 = fullTextMatchingLicense0.getNotes();
        java.lang.String str9 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str8, "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test03582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03582");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter13 = xmlWriter1.openElement((java.lang.CharSequence) "d5e7a2c2-8d0f-4d83-b61d-957264d7bb7b");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: 'd5e7a2c2-8d0f-4d83-b61d-957264d7bb7b' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03583");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader5 = format0.matcherReader();
        matcherReader5.readMatcherBuilders();
        java.net.URL uRL7 = null;
        // The following exception was thrown during execution in test generation
        try {
            matcherReader5.addMatchers(uRL7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(matcherReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(licenseReader4);
        org.junit.Assert.assertNotNull(matcherReader5);
    }

    @Test
    public void test03584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03584");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder2 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder4 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder6 = iLicenseFamilyBuilder0.setLicenseFamilyName("MathcerRefBuilder: ");
        org.apache.rat.license.ILicenseFamily.Builder builder8 = iLicenseFamilyBuilder0.setLicenseFamilyName("Copyright Builder: s:6481fb19-38f0-43f5-ab95-caf84a069ee1 e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder10 = builder8.setLicenseFamilyCategory("4f1be289-aaa7-4730-8076-690bc1f926c5");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test03585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03585");
        java.lang.String str1 = org.apache.rat.analysis.matchers.FullTextMatcher.prune("SpdxBuilder: 641dafc1-13c3-45d4-8272-f36f10392c53");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder641dafc113c345d48272f36f10392c53" + "'", str1, "SpdxBuilder641dafc113c345d48272f36f10392c53");
    }

    @Test
    public void test03586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03586");
        org.apache.rat.license.ILicense.Builder builder0 = new org.apache.rat.license.ILicense.Builder();
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder1);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = allBuilder1.setId("binary");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder6 = allBuilder1.setId("http://org/apache/rat/meta-data");
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList7 = allBuilder1.getChildren();
        org.junit.Assert.assertNotNull(allBuilder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(abstractBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcherList7);
    }

    @Test
    public void test03587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03587");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.apache.rat.license.ILicenseFamily.Builder builder9 = builder7.setLicenseFamilyCategory("094643d4-94c6-478a-b861-15e14bd2e656");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test03588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03588");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder1 = org.apache.rat.configuration.MatcherBuilderTracker.getMatcherBuilder("null http://org/apache/rat/meta-data#LicenseFamilyName");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: ?Valid builders?all?matcherRef?copyright?not?regex?spdx?text?any?ERROR MSG?No matcher builder named null http://org/apache/rat/meta-data#LicenseFamilyName");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03589");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.lang.String[] strArray45 = new java.lang.String[] { "http://org/apache/rat/meta-data", "GNU General Public License, version 2", "Modified BSD License", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "The MIT License", "OASIS", "?????", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "6486879f-fc81-4b57-aec7-c4c77d540c30", "MANIFEST.MF", "?????", "GEN  ", "GPL3 ", "http://org/apache/rat/meta-data#HeaderCategory", "DOJO ", "true", "GPL2 ", "?????", "Apache License Version 2.0", "OASIS", "W3CD ", "OASIS", "?????", "OASIS Open License", "", "standard", "GPL2 ", "GEN  ", "W3CD ", "TMF  ", ".cvsignore", "Copyright Builder: s:null e:null o:null", "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 2", "W3CD ", ".cvsignore", "Apache License Version 2.0", "GEN  ", "W3C Software Copyright", "Modified BSD License", "GPL2 ", "JAVA" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList46);
        java.lang.String str49 = reportConfiguration1.getCopyrightMessage();
        java.util.SortedSet<java.lang.String> strSet50 = reportConfiguration1.getApprovedLicenseCategories();
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier54 = reportConfiguration52.getOutput();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders55 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration52.setAddLicenseHeaders(addLicenseHeaders55);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders55);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier60 = reportConfiguration59.getOutput();
        reportConfiguration59.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        java.io.FilenameFilter filenameFilter65 = reportConfiguration64.getInputFileFilter();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders66 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration64.setAddLicenseHeaders(addLicenseHeaders66);
        reportConfiguration59.setAddLicenseHeaders(addLicenseHeaders66);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders66);
        boolean boolean70 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier71 = reportConfiguration1.getOutput();
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier54);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders55 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders55.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier60);
        org.junit.Assert.assertNull(filenameFilter65);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders66 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders66.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier71);
    }

    @Test
    public void test03590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03590");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data#FileCategory", "8f82a952-5bfd-446b-ac79-15beef5b3f17");
        fullTextMatcher2.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = fullTextMatcher2.currentState();
        java.lang.String str5 = fullTextMatcher2.toString();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://org/apache/rat/meta-data#FileCategory" + "'", str5, "http://org/apache/rat/meta-data#FileCategory");
    }

    @Test
    public void test03591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03591");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("W3CD ");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray7 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList8 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList8, iLicenseFamilyArray7);
        reportConfiguration6.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList8);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense11 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense11.setLicenseFamilyName("hi!");
        java.lang.String str14 = fullTextMatchingLicense11.getLicenseFamilyCategory();
        java.lang.String str15 = fullTextMatchingLicense11.getLicenseFamilyName();
        fullTextMatchingLicense11.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense11.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily20 = fullTextMatchingLicense11.getLicenseFamily();
        reportConfiguration6.addFamily(iLicenseFamily20);
        java.lang.String str22 = iLicenseFamily20.getFamilyName();
        java.lang.String str23 = iLicenseFamily20.getFamilyName();
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray26 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList27 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList27, iLicenseFamilyArray26);
        reportConfiguration25.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList27);
        org.apache.rat.policy.DefaultPolicy defaultPolicy30 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList27);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet31 = defaultPolicy30.getApprovedLicenseNames();
        org.apache.rat.license.ILicenseFamily iLicenseFamily32 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily20, iLicenseFamilySet31);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense33 = builder4.build(iLicenseFamilySet31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Matcher must not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "SpdxBuilder: null" + "'", str22, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "SpdxBuilder: null" + "'", str23, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(iLicenseFamilyArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet31);
        org.junit.Assert.assertNull(iLicenseFamily32);
    }

    @Test
    public void test03592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03592");
        java.lang.String str1 = org.apache.rat.license.ILicenseFamily.makeCategory("f02d0cdc36424583b71fdd84a120752c");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "f02d0" + "'", str1, "f02d0");
    }

    @Test
    public void test03593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03593");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("W3CD ");
        org.apache.rat.license.ILicense.Builder builder4 = builder0.setName("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.license.ILicense.Builder builder6 = builder0.setDerivedFrom("Copyright Builder: s:.cvsignore e:standard o:W3C  ");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03594");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinaryData("i indeterminent");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03595");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        java.io.FilenameFilter filenameFilter3 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        reportConfiguration5.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        reportConfiguration5.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet12);
        org.apache.rat.license.ILicense[] iLicenseArray14 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet15 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet15, iLicenseArray14);
        java.lang.String[] strArray29 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory32 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet15, (java.util.Collection<java.lang.String>) strList30);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet37 = reportConfiguration34.getLicenses(licenseFilter36);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders38 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration34.setAddLicenseHeaders(addLicenseHeaders38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter43);
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter43);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        java.io.FilenameFilter filenameFilter48 = reportConfiguration47.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet50 = reportConfiguration47.getLicenses(licenseFilter49);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders51 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration47.setAddLicenseHeaders(addLicenseHeaders51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic55 = org.apache.rat.Reporter.report(reportConfiguration54);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter56);
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter56);
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter56);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = licenseSetFactory32.getLicenses(licenseFilter56);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration5, licenseFilter56);
        java.lang.String[] strArray67 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet68 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        boolean boolean71 = strSet68.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean73 = strSet68.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction74 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet75 = strSet68.setMsgFormat(strFunction74);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet77 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily78 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet77);
        boolean boolean79 = strSet68.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet77);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet81 = strSet68.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.utils.Log log82 = null;
        org.apache.rat.ReportConfiguration reportConfiguration83 = new org.apache.rat.ReportConfiguration(log82);
        java.io.FilenameFilter filenameFilter84 = reportConfiguration83.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter85 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet86 = reportConfiguration83.getLicenses(licenseFilter85);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders87 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration83.setAddLicenseHeaders(addLicenseHeaders87);
        org.apache.rat.utils.Log log89 = null;
        org.apache.rat.ReportConfiguration reportConfiguration90 = new org.apache.rat.ReportConfiguration(log89);
        reportConfiguration90.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level93 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration90.logLicenseCollisions(level93);
        reportConfiguration83.logFamilyCollisions(level93);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet96 = strSet68.setLogLevel(level93);
        reportConfiguration5.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet96);
        boolean boolean98 = strSet96.isEmpty();
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet96);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertNotNull(iLicenseArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet37);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders38 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders38.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet50);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders51 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders51.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(iLicenseFamilySet77);
        org.junit.Assert.assertNull(iLicenseFamily78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNull(filenameFilter84);
        org.junit.Assert.assertTrue("'" + licenseFilter85 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter85.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet86);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders87 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders87.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertTrue("'" + level93 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level93.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test03596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03596");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter4 = xmlWriter1.attribute((java.lang.CharSequence) "RegexBuilder: GNU General Public License, version 1", (java.lang.CharSequence) "03F7B314-6887-4617-9C7E-BF1600B331CD");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03597");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders3 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        reportConfiguration6.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        java.io.FilenameFilter filenameFilter11 = reportConfiguration10.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet13 = reportConfiguration10.getLicenses(licenseFilter12);
        reportConfiguration6.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet13);
        reportConfiguration6.setCopyrightMessage("MathcerRefBuilder: null");
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier17 = org.apache.rat.Defaults.getUnapprovedLicensesStyleSheet();
        reportConfiguration6.setStyleSheet(inputStreamIOSupplier17);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier17);
        boolean boolean20 = reportConfiguration1.isStyleReport();
        org.apache.rat.license.ILicense.Builder builder21 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder23 = builder21.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher25 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder26 = builder21.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher25);
        org.apache.rat.license.ILicense.Builder builder28 = builder21.setName("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense29 = reportConfiguration1.addLicense(builder28);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders3 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders3.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet13);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test03598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03598");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        reportConfiguration1.setCopyrightMessage("d4148d3a-edbc-4672-b347-0fa619553f91");
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
    }

    @Test
    public void test03599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03599");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.license.ILicense.Builder builder4 = builder0.setDerivedFrom("The MIT License");
        java.util.regex.Pattern pattern6 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher7 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern6);
        simpleRegexMatcher7.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state9 = simpleRegexMatcher7.finalizeState();
        java.lang.String str10 = simpleRegexMatcher7.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state11 = simpleRegexMatcher7.currentState();
        org.apache.rat.license.ILicense.Builder builder12 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher7);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = simpleRegexMatcher7.doMatch("03f7b314-6887-4617-9c7e-bf1600b331cd");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "5fe5938a-3843-45ca-b00f-133c8cb2a618" + "'", str10, "5fe5938a-3843-45ca-b00f-133c8cb2a618");
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state11.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test03600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03600");
        boolean boolean1 = org.apache.rat.document.impl.guesser.NoteGuesser.isNote("Datum");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03601");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder0.remove("GNU General Public License, version 2");
        org.apache.rat.Defaults.Builder builder8 = builder0.remove("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.Defaults.Builder builder10 = builder8.add("6481fb19-38f0-43f5-ab95-caf84a069ee1");
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder12 = builder8.add(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test03602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03602");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        java.lang.String str3 = textBuilder2.toString();
        java.lang.String str4 = textBuilder2.toString();
        java.lang.String str5 = textBuilder2.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder7 = textBuilder2.setId("1e96b21e-f913-4d52-87cc-09323c460281");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "TextBuilder: true" + "'", str3, "TextBuilder: true");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "TextBuilder: true" + "'", str4, "TextBuilder: true");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "TextBuilder: true" + "'", str5, "TextBuilder: true");
        org.junit.Assert.assertNotNull(abstractBuilder7);
    }

    @Test
    public void test03603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03603");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder5 = builder4.noDefault();
        org.apache.rat.Defaults.Builder builder7 = builder4.remove("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.Defaults.Builder builder9 = builder4.add("0925e382-79b7-417a-85be-aed683d949e2");
        java.net.URL uRL10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder11 = builder4.add(uRL10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test03604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03604");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray0 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList1 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1, iLicenseFamilyArray0);
        org.apache.rat.policy.DefaultPolicy defaultPolicy3 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet4 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.api.Document document5 = null;
        defaultPolicy3.analyse(document5);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet7 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.policy.DefaultPolicy defaultPolicy8 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet7);
        org.apache.rat.api.Document document9 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy8.reportLicenseApprovalClaim(document9, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilyArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet4);
        org.junit.Assert.assertNotNull(iLicenseFamilySet7);
    }

    @Test
    public void test03605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03605");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter9 = xmlWriter1.attribute((java.lang.CharSequence) "b0e37132-fd30-43ee-82db-bfeddc05a682", (java.lang.CharSequence) "4332afa1-5b0a-4efc-9be6-c0dd49b836ab");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03606");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter1 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.fromText("d25f1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.rat.license.LicenseSetFactory.LicenseFilter.d25f1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03607");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("f6c7d16f-90d4-435d-b9d9-a9f6c196d56a", "Copyright Builder: s:null e:null o:The MIT License");
    }

    @Test
    public void test03608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03608");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap3);
        int int5 = claimStatistic0.getNumUnknown();
        claimStatistic0.setNumUnApproved((int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getDocumentCategoryMap();
        int int9 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null;
        claimStatistic0.setDocumentCategoryMap(strMap10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = claimStatistic0.getDocumentCategoryMap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNull(strMap12);
    }

    @Test
    public void test03609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03609");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder0.build();
        java.lang.String str7 = spdxBuilder0.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = spdxBuilder0.build();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher11 = new org.apache.rat.analysis.matchers.NotMatcher(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str7, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
    }

    @Test
    public void test03610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03610");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        defaultLog0.info((java.lang.Object) "TextBuilder: Datum [ name ='http:...");
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.license.ILicenseFamily iLicenseFamily54 = null;
        reportConfiguration50.addFamily(iLicenseFamily54);
        reportConfiguration50.setCopyrightMessage("hi!");
        defaultLog0.error((java.lang.Object) reportConfiguration50);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender60 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "03f7b314-6887-4617-9c7e-bf1600b331cd");
        apacheV2LicenseAppender60.setForce(true);
        apacheV2LicenseAppender60.setForce(false);
        java.io.File file65 = null;
        // The following exception was thrown during execution in test generation
        try {
            apacheV2LicenseAppender60.append(file65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
    }

    @Test
    public void test03611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03611");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder1 = org.apache.rat.configuration.MatcherBuilderTracker.getMatcherBuilder("0925e382-79b7-417a-85be-aed683d949e2");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: ?Valid builders?all?matcherRef?copyright?not?regex?spdx?text?any?ERROR MSG?No matcher builder named 0925e382-79b7-417a-85be-aed683d949e2");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03612");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = fullTextMatchingLicense0.getLicenseFamily();
        fullTextMatchingLicense0.setLicenseFamilyName("?????");
        fullTextMatchingLicense0.setFullText("TextBuilder: f5f3fb9b-540a-43ef-a...");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
    }

    @Test
    public void test03613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03613");
        boolean boolean1 = org.apache.rat.document.impl.guesser.ArchiveGuesser.isArchive("094643d494c6478ab86115e14bd2e656");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03614");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("META-DATA#LICENSEFAMILYNAME", "W3C Document Copyright", "f false");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = copyrightMatcher3.finalizeState();
        copyrightMatcher3.reset();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test03615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03615");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("http://org/apache/rat/meta-data");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher3 = new org.apache.rat.analysis.matchers.NotMatcher(iHeaderMatcher2);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state5 = notMatcher3.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = notMatcher3.currentState();
        boolean boolean7 = state6.asBoolean();
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test03616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03616");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        boolean boolean3 = textBuilder2.hasId();
        org.apache.rat.configuration.builders.TextBuilder textBuilder5 = textBuilder2.setText("Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null");
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder7 = textBuilder2.setText("182c6bda-66b3-41a7-a4b2-bceee007bb27");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(textBuilder5);
        org.junit.Assert.assertNotNull(textCaptureBuilder7);
    }

    @Test
    public void test03617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03617");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = textBuilder0.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder5 = textBuilder0.setText("SpdxBuilder: null");
        org.apache.rat.configuration.builders.TextBuilder textBuilder7 = textBuilder5.setText("binary");
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder9 = textBuilder5.setText("f5f3fb9b-540a-43ef-a018-8ce5779e23f4");
        java.lang.String str10 = textBuilder5.toString();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(textBuilder5);
        org.junit.Assert.assertNotNull(textBuilder7);
        org.junit.Assert.assertNotNull(textCaptureBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "TextBuilder: f5f3fb9b-540a-43ef-a..." + "'", str10, "TextBuilder: f5f3fb9b-540a-43ef-a...");
    }

    @Test
    public void test03618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03618");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily.Builder builder12 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("8f82a952-5bfd-446b-ac79-15beef5b3f17");
        org.apache.rat.license.ILicenseFamily iLicenseFamily13 = iLicenseFamilyBuilder0.build();
        org.apache.rat.license.ILicenseFamily iLicenseFamily14 = iLicenseFamilyBuilder0.build();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MIT  " + "'", str8, "MIT  ");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(iLicenseFamily13);
        org.junit.Assert.assertNotNull(iLicenseFamily14);
    }

    @Test
    public void test03619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03619");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = reportConfiguration1.getDirectoryFilter();
        java.lang.String[] strArray12 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean16 = strSet13.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean18 = strSet13.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction19 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet20 = strSet13.setMsgFormat(strFunction19);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily23 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet22);
        boolean boolean24 = strSet13.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet13);
        org.apache.rat.report.IReportable iReportable26 = null;
        reportConfiguration1.setReportable(iReportable26);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier28 = reportConfiguration1.getStyleSheet();
        org.apache.rat.license.ILicense.Builder builder29 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder31 = builder29.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher35 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state36 = copyrightMatcher35.finalizeState();
        org.apache.rat.license.ILicense.Builder builder37 = builder31.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher35);
        org.apache.rat.license.ILicense.Builder builder39 = builder31.setName("hi!");
        java.util.regex.Pattern pattern42 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher43 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern42);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher44 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher43);
        org.apache.rat.analysis.IHeaderMatcher.State state45 = notMatcher44.finalizeState();
        java.lang.String str46 = notMatcher44.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state47 = notMatcher44.currentState();
        notMatcher44.reset();
        org.apache.rat.license.ILicense.Builder builder49 = builder31.setMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher44);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense50 = reportConfiguration1.addLicense(builder31);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertNull(iLicenseFamily23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(inputStreamIOSupplier28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + state36 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state36.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state45.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "GNU General Public License, version 2" + "'", str46, "GNU General Public License, version 2");
        org.junit.Assert.assertTrue("'" + state47 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state47.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test03620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03620");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setNotes("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        fullTextMatchingLicense0.setLicenseFamilyCategory("9c36f068-9920-4c66-98c2-ba24e3dffa9c");
        java.lang.String str12 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "9c36f068-9920-4c66-98c2-ba24e3dffa9c" + "'", str12, "9c36f068-9920-4c66-98c2-ba24e3dffa9c");
    }

    @Test
    public void test03621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03621");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.text();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("");
        java.lang.String str3 = textBuilder2.toString();
        org.apache.rat.configuration.builders.TextBuilder textBuilder5 = textBuilder2.setText("38e4211d-0f24-4ec0-aa5c-260c68412f39");
        org.junit.Assert.assertNotNull(textBuilder0);
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "TextBuilder: " + "'", str3, "TextBuilder: ");
        org.junit.Assert.assertNotNull(textBuilder5);
    }

    @Test
    public void test03622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03622");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter8 = xmlWriter1.attribute((java.lang.CharSequence) "f5f3fb9b-540a-43ef-a018-8ce5779e23f4", (java.lang.CharSequence) "64868");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03623");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder2 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("Modified BSD License");
        java.lang.String str3 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("Datum [ name ='COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0',value ='CDDL1 ']");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Modified BSD License" + "'", str3, "Modified BSD License");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test03624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03624");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher4 = new org.apache.rat.analysis.matchers.CopyrightMatcher("Copyright Builder: s:OASIS e:null o:null", "RegexBuilder89662180a89f497b9301227d494d2bae", "null ", "http://org/apache/rat/meta-data#HeaderSample null");
    }

    @Test
    public void test03625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03625");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.license.ILicense.Builder builder7 = builder0.setName("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']");
        org.apache.rat.license.ILicense.Builder builder9 = builder0.setDerivedFrom("OASIS Open License");
        org.apache.rat.license.ILicense.Builder builder11 = builder0.setNotes("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']");
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        boolean boolean16 = reportConfiguration14.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier17 = reportConfiguration14.getOutput();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier18 = reportConfiguration14.getStyleSheet();
        reportConfiguration14.setStyleReport(false);
        java.lang.String[] strArray26 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet27 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        boolean boolean30 = strSet27.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean32 = strSet27.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier35 = reportConfiguration34.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter36 = reportConfiguration34.getDirectoryFilter();
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        reportConfiguration38.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        reportConfiguration38.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration38.getInputFileFilter();
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = reportConfiguration49.getLicenses(licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter58);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        java.io.FilenameFilter filenameFilter63 = reportConfiguration62.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet65 = reportConfiguration62.getLicenses(licenseFilter64);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders66 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration62.setAddLicenseHeaders(addLicenseHeaders66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter71 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration69, licenseFilter71);
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter71);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet74 = reportConfiguration49.getLicenseFamilies(licenseFilter71);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration38, licenseFilter71);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet76 = reportConfiguration34.getLicenseFamilies(licenseFilter71);
        org.apache.rat.policy.DefaultPolicy defaultPolicy77 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet76);
        boolean boolean78 = strSet27.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet76);
        reportConfiguration14.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet76);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray81 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList82 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList82, iLicenseFamilyArray81);
        org.apache.rat.policy.DefaultPolicy defaultPolicy84 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList82);
        org.apache.rat.api.Document document85 = null;
        defaultPolicy84.analyse(document85);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet87 = defaultPolicy84.getApprovedLicenseNames();
        org.apache.rat.license.ILicenseFamily iLicenseFamily88 = org.apache.rat.license.LicenseFamilySetFactory.search("Copyright Builder: s:archive e:null o:null", iLicenseFamilySet87);
        reportConfiguration14.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet87);
        org.apache.rat.license.ILicenseFamily iLicenseFamily90 = org.apache.rat.license.LicenseFamilySetFactory.search("TextBuilder: ", iLicenseFamilySet87);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense91 = builder0.build(iLicenseFamilySet87);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier17);
        org.junit.Assert.assertNull(inputStreamIOSupplier18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier35);
        org.junit.Assert.assertNotNull(iOFileFilter36);
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet65);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders66 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders66.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + licenseFilter71 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter71.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet74);
        org.junit.Assert.assertNotNull(iLicenseFamilySet76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet87);
        org.junit.Assert.assertNull(iLicenseFamily88);
        org.junit.Assert.assertNull(iLicenseFamily90);
    }

    @Test
    public void test03626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03626");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        java.lang.Object obj15 = null;
        defaultLog1.warn(obj15);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender17 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog1);
        java.lang.Throwable throwable19 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog1.debug((java.lang.Object) "B5CB0999-B639-4E9C-AB9C-268137BC8846", throwable19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test03627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03627");
        org.apache.rat.api.MetaData.Datum datum0 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_UNKNOWN;
        java.lang.String str1 = datum0.getValue();
        org.junit.Assert.assertNotNull(datum0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "?????" + "'", str1, "?????");
    }

    @Test
    public void test03628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03628");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.text();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder2.setText("true|false|forced");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = textBuilder2.build();
        org.junit.Assert.assertNotNull(textBuilder0);
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
    }

    @Test
    public void test03629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03629");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog0.log(level13, "JAVA");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.WARN;
        defaultLog0.log(level16, "");
        org.apache.rat.document.ToNameTransformer toNameTransformer19 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog20 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder21 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder23 = builder21.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher27 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state28 = copyrightMatcher27.finalizeState();
        org.apache.rat.license.ILicense.Builder builder29 = builder23.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher27);
        org.apache.rat.license.ILicense.Builder builder31 = builder29.setLicenseFamilyCategory("");
        defaultLog20.error((java.lang.Object) builder31);
        java.lang.Object obj33 = toNameTransformer19.transform((java.lang.Object) defaultLog20);
        org.apache.rat.configuration.builders.AllBuilder allBuilder34 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str35 = allBuilder34.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList36 = allBuilder34.getChildren();
        java.lang.Object obj37 = toNameTransformer19.transform((java.lang.Object) allBuilder34);
        org.apache.rat.Defaults.Builder builder38 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults39 = builder38.build();
        org.apache.rat.Defaults.Builder builder40 = builder38.noDefault();
        org.apache.rat.Defaults.Builder builder42 = builder38.add("W3C Document Copyright");
        org.apache.rat.Defaults.Builder builder44 = builder38.add("9c36f068-9920-4c66-98c2-ba24e3dffa9c");
        java.lang.Object obj45 = toNameTransformer19.transform((java.lang.Object) "9c36f068-9920-4c66-98c2-ba24e3dffa9c");
        java.lang.Throwable throwable46 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.debug((java.lang.Object) "9c36f068-9920-4c66-98c2-ba24e3dffa9c", throwable46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level13.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level16.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(defaultLog20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state28.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AllBuilder:" + "'", str35, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(defaults39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(obj45);
    }

    @Test
    public void test03630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03630");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state5 = notMatcher4.finalizeState();
        notMatcher4.reset();
        java.lang.String str7 = notMatcher4.getId();
        notMatcher4.reset();
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GNU General Public License, version 2" + "'", str7, "GNU General Public License, version 2");
    }

    @Test
    public void test03631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03631");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setFullText("c8f389b8-5295-40d4-be8e-f0d0afde51c6");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily6 = fullTextMatchingLicense0.getLicenseFamily();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test03632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03632");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter13 = xmlWriter1.closeElement();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03633");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = null;
        claimStatistic0.setLicenseFileNameMap(strMap5);
        int int7 = claimStatistic0.getNumUnknown();
        int int8 = claimStatistic0.getNumGenerated();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test03634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03634");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        org.apache.rat.Defaults.Builder builder6 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults7 = builder6.build();
        reportConfiguration1.setFrom(defaults7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray11 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList12 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList12, iLicenseFamilyArray11);
        reportConfiguration10.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList12);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense15 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense15.setLicenseFamilyName("hi!");
        java.lang.String str18 = fullTextMatchingLicense15.getLicenseFamilyCategory();
        java.lang.String str19 = fullTextMatchingLicense15.getLicenseFamilyName();
        fullTextMatchingLicense15.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense15.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily24 = fullTextMatchingLicense15.getLicenseFamily();
        reportConfiguration10.addFamily(iLicenseFamily24);
        java.lang.String str26 = iLicenseFamily24.getFamilyName();
        java.lang.String str27 = iLicenseFamily24.getFamilyName();
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily24);
        java.lang.String str29 = iLicenseFamily24.getFamilyName();
        java.lang.String str30 = iLicenseFamily24.getFamilyName();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaults7);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "SpdxBuilder: null" + "'", str26, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "SpdxBuilder: null" + "'", str27, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "SpdxBuilder: null" + "'", str29, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "SpdxBuilder: null" + "'", str30, "SpdxBuilder: null");
    }

    @Test
    public void test03635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03635");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.utils.Log.Level level54 = defaultLog0.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender55 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.api.MetaData metaData56 = new org.apache.rat.api.MetaData();
        java.lang.String str58 = metaData56.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection59 = metaData56.getData();
        java.lang.String str61 = metaData56.value("hi!");
        metaData56.clear();
        metaData56.clear();
        metaData56.clear();
        java.lang.Throwable throwable65 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.debug((java.lang.Object) metaData56, throwable65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level54 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level54.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(datumCollection59);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test03636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03636");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        java.lang.CharSequence charSequence7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter8 = xmlWriter1.openElement(charSequence7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03637");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        simpleRegexMatcher3.reset();
        java.lang.String str5 = simpleRegexMatcher3.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 1", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        notMatcher7.reset();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher9 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher7);
        notMatcher9.reset();
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "5479da42-d4d7-4457-9e6b-e6ae8ab5c74c" + "'", str5, "5479da42-d4d7-4457-9e6b-e6ae8ab5c74c");
    }

    @Test
    public void test03638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03638");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        boolean boolean3 = textBuilder2.hasId();
        org.apache.rat.configuration.builders.TextBuilder textBuilder5 = textBuilder2.setText("Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null");
        org.apache.rat.configuration.builders.TextBuilder textBuilder7 = textBuilder2.setText("TextBuilder: SpdxBuilder: null");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(textBuilder5);
        org.junit.Assert.assertNotNull(textBuilder7);
    }

    @Test
    public void test03639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03639");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList1 = anyBuilder0.getChildren();
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertNotNull(iHeaderMatcherList1);
    }

    @Test
    public void test03640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03640");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier27 = reportConfiguration1.getOutput();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.configuration.Format format29 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader30 = format29.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = licenseReader30.readLicenses();
        java.lang.String[] strArray37 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet38 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        boolean boolean41 = strSet38.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean43 = strSet38.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction44 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet45 = strSet38.setMsgFormat(strFunction44);
        boolean boolean46 = strSet38.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory47 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet31, (java.util.Collection<java.lang.String>) strSet38);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet48 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet31);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet48);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier50 = reportConfiguration1.getStyleSheet();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier27);
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + format29 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format29.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader30);
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(inputStreamIOSupplier50);
    }

    @Test
    public void test03641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03641");
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher17 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher17.reset();
        org.apache.rat.license.ILicense.Builder builder19 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher17);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher20 = new org.apache.rat.analysis.matchers.NotMatcher("AnyBuilder:\nAllBuilder:", (org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher17);
        org.apache.rat.analysis.IHeaderMatcher.State state21 = notMatcher20.currentState();
        java.lang.String str22 = notMatcher20.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state24 = notMatcher20.matches("SpdxBuilder: 7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.apache.rat.analysis.IHeaderMatcher.State state25 = notMatcher20.finalizeState();
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state21.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "AnyBuilder:\nAllBuilder:" + "'", str22, "AnyBuilder:\nAllBuilder:");
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state24.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state25.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test03642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03642");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.fromName("ba9961f9-a0de-4a54-bd1f-a2e9df26a188");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: ba9961f9-a0de-4a54-bd1f-a2e9df26a188");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03643");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode(".giti");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03644");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isKeystore("7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03645");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        reportConfiguration1.addApprovedLicenseCategory("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        java.io.FilenameFilter filenameFilter12 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = reportConfiguration11.getLicenses(licenseFilter13);
        org.apache.rat.license.ILicenseFamily iLicenseFamily15 = null;
        reportConfiguration11.addFamily(iLicenseFamily15);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter17 = reportConfiguration11.getDirectoryFilter();
        org.apache.rat.document.ToNameTransformer toNameTransformer18 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog19 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder20 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder22 = builder20.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher26 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state27 = copyrightMatcher26.finalizeState();
        org.apache.rat.license.ILicense.Builder builder28 = builder22.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher26);
        org.apache.rat.license.ILicense.Builder builder30 = builder28.setLicenseFamilyCategory("");
        defaultLog19.error((java.lang.Object) builder30);
        java.lang.Object obj32 = toNameTransformer18.transform((java.lang.Object) defaultLog19);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense36 = null;
        reportConfiguration34.addLicense(iLicense36);
        org.apache.rat.license.ILicenseFamily iLicenseFamily38 = null;
        reportConfiguration34.addFamily(iLicenseFamily38);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier40 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration34.setStyleSheet(inputStreamIOSupplier40);
        java.lang.Object obj42 = toNameTransformer18.transform((java.lang.Object) inputStreamIOSupplier40);
        reportConfiguration11.setStyleSheet(inputStreamIOSupplier40);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier40);
        boolean boolean45 = reportConfiguration1.isAddingLicensesForced();
        reportConfiguration1.setStyleReport(true);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertNotNull(iOFileFilter17);
        org.junit.Assert.assertNotNull(defaultLog19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state27.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test03646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03646");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter5 = xmlWriter1.attribute((java.lang.CharSequence) "b44875e2-725e-49f9-8e21-90384e2ef96f", (java.lang.CharSequence) "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='W3C Software Copyright ']");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03647");
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.api.ContentType contentType3 = new org.apache.rat.api.ContentType("b1db9857-a506-44af-b49f-cf1fc4c885c7", "", strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03648");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.ReportingSet.Options options52 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options52);
        reportConfiguration47.familyDuplicateOption(options52);
        reportConfiguration16.licenseDuplicateOption(options52);
        reportConfiguration16.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration16.logLicenseCollisions(level62);
        defaultLog14.setLevel(level62);
        defaultLog14.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog14);
        org.apache.rat.utils.DefaultLog defaultLog69 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logFamilyCollisions(level74);
        defaultLog69.setLevel(level74);
        defaultLog14.debug((java.lang.Object) level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet13.setLogLevel(level74);
        org.apache.rat.utils.DefaultLog defaultLog79 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log80 = null;
        org.apache.rat.ReportConfiguration reportConfiguration81 = new org.apache.rat.ReportConfiguration(log80);
        reportConfiguration81.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level84 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration81.logFamilyCollisions(level84);
        defaultLog79.setLevel(level84);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet87 = strSet78.setLog((org.apache.rat.utils.Log) defaultLog79);
        java.lang.Object[] objArray88 = strSet87.toArray();
        int int89 = strSet87.size();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet91 = strSet87.tailSet("ddd566ca-b176-4397-9768-911583d93df2");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + options52 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options52.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog69);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(defaultLog79);
        org.junit.Assert.assertTrue("'" + level84 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level84.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 7 + "'", int89 == 7);
        org.junit.Assert.assertNotNull(strSet91);
    }

    @Test
    public void test03649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03649");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        java.lang.String[] strArray51 = new java.lang.String[] { "274c6a15-09f6-4bfd-ac53-1827770eb507", "true|false|forced", "GEN  ", "Apache License Version 2.0", "OASIS", "Apache License Version 2.0", "hi!", "http://org/apache/rat/meta-data", "standard", "", "GEN  ", "W3C Document Copyright", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "Copyright Builder: s:null e:null o:null", "MANIFEST.MF", "Modified BSD License", "true|false|forced", "t true", "GPL2 ", "Modified BSD License", "hi!", "MANIFEST.MF", "GPL2 ", "W3C Software Copyright", "W3C Software Copyright", "021187d7-27c2-4fd9-bc74-8cc00413ee52", "Apache License Version 2.0", "W3C Software Copyright", ".cvsignore", "?????", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 1", "GNU General Public License, version 1", "TMF  ", "6486879f-fc81-4b57-aec7-c4c77d540c30", "org/apache/rat/plain-rat.xsl", "GNU General Public License, version 2", "?????" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList52);
        java.io.FilenameFilter filenameFilter55 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList52);
        java.io.FilenameFilter filenameFilter56 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList52);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(filenameFilter55);
        org.junit.Assert.assertNotNull(filenameFilter56);
    }

    @Test
    public void test03650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03650");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter7 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier37 = reportConfiguration36.getOutput();
        reportConfiguration9.setOut(outputStreamIOSupplier37);
        org.apache.rat.utils.Log.Level level39 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration9.logLicenseCollisions(level39);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter41 = reportConfiguration9.getDirectoryFilter();
        java.nio.file.Path path42 = null;
        boolean boolean43 = iOFileFilter41.matches(path42);
        java.nio.file.Path path44 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes45 = null;
        java.nio.file.FileVisitResult fileVisitResult46 = iOFileFilter41.accept(path44, basicFileAttributes45);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter47 = iOFileFilter7.or(iOFileFilter41);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter48 = iOFileFilter41.negate();
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders54 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration50.setAddLicenseHeaders(addLicenseHeaders54);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = org.apache.rat.Reporter.report(reportConfiguration57);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter59);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        java.io.FilenameFilter filenameFilter64 = reportConfiguration63.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter65 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet66 = reportConfiguration63.getLicenses(licenseFilter65);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders67 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration63.setAddLicenseHeaders(addLicenseHeaders67);
        org.apache.rat.utils.Log log69 = null;
        org.apache.rat.ReportConfiguration reportConfiguration70 = new org.apache.rat.ReportConfiguration(log69);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic71 = org.apache.rat.Reporter.report(reportConfiguration70);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter72 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration70, licenseFilter72);
        org.apache.rat.Reporter.listLicenses(reportConfiguration63, licenseFilter72);
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter72);
        org.apache.rat.utils.Log log76 = null;
        org.apache.rat.ReportConfiguration reportConfiguration77 = new org.apache.rat.ReportConfiguration(log76);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier78 = reportConfiguration77.getOutput();
        reportConfiguration50.setOut(outputStreamIOSupplier78);
        org.apache.rat.utils.Log.Level level80 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration50.logLicenseCollisions(level80);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter82 = reportConfiguration50.getDirectoryFilter();
        java.nio.file.Path path83 = null;
        boolean boolean84 = iOFileFilter82.matches(path83);
        java.nio.file.Path path85 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes86 = null;
        java.nio.file.FileVisitResult fileVisitResult87 = iOFileFilter82.accept(path85, basicFileAttributes86);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter88 = iOFileFilter41.and(iOFileFilter82);
        java.nio.file.Path path89 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes90 = null;
        java.nio.file.FileVisitResult fileVisitResult91 = iOFileFilter88.accept(path89, basicFileAttributes90);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter92 = iOFileFilter88.negate();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNotNull(iOFileFilter7);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier37);
        org.junit.Assert.assertTrue("'" + level39 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level39.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult46 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult46.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter47);
        org.junit.Assert.assertNotNull(iOFileFilter48);
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders54 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders54.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter64);
        org.junit.Assert.assertTrue("'" + licenseFilter65 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter65.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet66);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders67 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders67.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic71);
        org.junit.Assert.assertTrue("'" + licenseFilter72 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter72.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier78);
        org.junit.Assert.assertTrue("'" + level80 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level80.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult87 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult87.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter88);
        org.junit.Assert.assertTrue("'" + fileVisitResult91 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult91.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter92);
    }

    @Test
    public void test03651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03651");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher4 = new org.apache.rat.analysis.matchers.CopyrightMatcher("MANIFEST.MF", "null null", "SpdxBuilder: Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']", "67f4ee73-0b29-40fd-b100-eb4a09e17011");
    }

    @Test
    public void test03652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03652");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        simpleRegexMatcher3.reset();
        java.lang.String str5 = simpleRegexMatcher3.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 1", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state7 = simpleRegexMatcher3.finalizeState();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = simpleRegexMatcher3.doMatch("CDDL1");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "19fcbf01-a996-4bb5-ab6d-8cc64a5516ca" + "'", str5, "19fcbf01-a996-4bb5-ab6d-8cc64a5516ca");
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test03653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03653");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum12 = metaData0.get("http:");
        org.apache.rat.api.MetaData.Datum datum13 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATIM_TRUE;
        metaData0.add(datum13);
        org.apache.rat.api.MetaData.Datum datum17 = new org.apache.rat.api.MetaData.Datum("3c840dc2-bef0-42b5-b26c-35a568d53a24", "NotBuilder: null");
        metaData0.add(datum17);
        org.apache.rat.api.MetaData.Datum datum20 = metaData0.get("archi");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNull(datum12);
        org.junit.Assert.assertNotNull(datum13);
        org.junit.Assert.assertNull(datum20);
    }

    @Test
    public void test03654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03654");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        boolean boolean4 = reportConfiguration1.isAddingLicensesForced();
        java.lang.String str5 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.license.ILicense[] iLicenseArray6 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet7 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet7, iLicenseArray6);
        java.lang.String[] strArray21 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory24 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet7, (java.util.Collection<java.lang.String>) strList22);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration26.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet29 = reportConfiguration26.getLicenses(licenseFilter28);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders30 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration26.setAddLicenseHeaders(addLicenseHeaders30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter35);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        java.io.FilenameFilter filenameFilter40 = reportConfiguration39.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet42 = reportConfiguration39.getLicenses(licenseFilter41);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders43 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration39.setAddLicenseHeaders(addLicenseHeaders43);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic47 = org.apache.rat.Reporter.report(reportConfiguration46);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter48);
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter48);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter48);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = licenseSetFactory24.getLicenses(licenseFilter48);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration1, licenseFilter48);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.utils.ReportingSet.Options options60 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration58.licenseDuplicateOption(options60);
        reportConfiguration55.familyDuplicateOption(options60);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier63 = reportConfiguration55.getWriter();
        boolean boolean64 = reportConfiguration55.isAddingLicensesForced();
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        reportConfiguration66.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level69 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration66.logFamilyCollisions(level69);
        reportConfiguration55.logLicenseCollisions(level69);
        org.apache.rat.utils.ReportingSet.Options options72 = org.apache.rat.utils.ReportingSet.Options.IGNORE;
        reportConfiguration55.licenseDuplicateOption(options72);
        reportConfiguration1.familyDuplicateOption(options72);
        reportConfiguration1.removeApprovedLicenseCategory("22d821a7-325b-4a40-8f38-f9cfc616d71a");
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(iLicenseArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet29);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders30 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders30.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet42);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders43 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders43.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertTrue("'" + options60 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options60.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + level69 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level69.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + options72 + "' != '" + org.apache.rat.utils.ReportingSet.Options.IGNORE + "'", options72.equals(org.apache.rat.utils.ReportingSet.Options.IGNORE));
    }

    @Test
    public void test03655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03655");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isNonBinary("COPYRIGHT BUILDER: S:NULL E:.CVSIGNORE O:5FEC021B-B12E-48C3-A002-3EEA7A06339A");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03656");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("W3C  ");
        simpleLicenseFamily0.setFamilyCategory("AllBuilder:");
        java.lang.String str7 = simpleLicenseFamily0.getFamilyName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test03657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03657");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier27 = reportConfiguration1.getOutput();
        org.apache.rat.utils.ReportingSet.Options options28 = org.apache.rat.utils.ReportingSet.Options.FAIL;
        reportConfiguration1.familyDuplicateOption(options28);
        java.lang.String str30 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.utils.ReportingSet.Options options34 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration32.licenseDuplicateOption(options34);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray36 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList37 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList37, iLicenseFamilyArray36);
        org.apache.rat.policy.DefaultPolicy defaultPolicy39 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList37);
        org.apache.rat.api.Document document40 = null;
        defaultPolicy39.analyse(document40);
        org.apache.rat.api.Document document42 = null;
        defaultPolicy39.analyse(document42);
        org.apache.rat.api.Document document44 = null;
        defaultPolicy39.analyse(document44);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense46 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense46.setLicenseFamilyName("hi!");
        java.lang.String str49 = fullTextMatchingLicense46.getLicenseFamilyCategory();
        java.lang.String str50 = fullTextMatchingLicense46.getLicenseFamilyName();
        fullTextMatchingLicense46.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense46.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily55 = fullTextMatchingLicense46.getLicenseFamily();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet56 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily57 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily55, iLicenseFamilySet56);
        defaultPolicy39.add(iLicenseFamily55);
        java.lang.String str59 = iLicenseFamily55.getFamilyName();
        reportConfiguration32.addApprovedLicenseCategory(iLicenseFamily55);
        reportConfiguration1.addFamily(iLicenseFamily55);
        java.io.File file62 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(file62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier27);
        org.junit.Assert.assertTrue("'" + options28 + "' != '" + org.apache.rat.utils.ReportingSet.Options.FAIL + "'", options28.equals(org.apache.rat.utils.ReportingSet.Options.FAIL));
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertTrue("'" + options34 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options34.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilyArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily55);
        org.junit.Assert.assertNotNull(iLicenseFamilySet56);
        org.junit.Assert.assertNull(iLicenseFamily57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "SpdxBuilder: null" + "'", str59, "SpdxBuilder: null");
    }

    @Test
    public void test03658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03658");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("i indeterminent", pattern1);
    }

    @Test
    public void test03659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03659");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("MANIFEST.MF", "GPL2 ");
        java.lang.String str3 = datum2.getName();
        java.lang.String str4 = datum2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MANIFEST.MF" + "'", str3, "MANIFEST.MF");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Datum [ name ='MANIFEST.MF',value ='GPL2  ']" + "'", str4, "Datum [ name ='MANIFEST.MF',value ='GPL2  ']");
    }

    @Test
    public void test03660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03660");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        boolean boolean14 = strSet6.isEmpty();
        boolean boolean16 = strSet6.addIfNotPresent("OASIS Open License");
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic19 = org.apache.rat.Reporter.report(reportConfiguration18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.utils.ReportingSet.Options options23 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration21.licenseDuplicateOption(options23);
        reportConfiguration18.familyDuplicateOption(options23);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier26 = reportConfiguration18.getWriter();
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        reportConfiguration18.logFamilyCollisions(level31);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet34 = strSet6.setLogLevel(level31);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet36 = strSet6.tailSet("bd015714-405b-4304-9faa-36efad80e6e6 GEN  ");
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.utils.ReportingSet.Options options40 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration38.licenseDuplicateOption(options40);
        org.apache.rat.license.ILicenseFamily iLicenseFamily42 = null;
        reportConfiguration38.addFamily(iLicenseFamily42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray46 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList47 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList47, iLicenseFamilyArray46);
        reportConfiguration45.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList47);
        org.apache.rat.report.IReportable iReportable50 = null;
        reportConfiguration45.setReportable(iReportable50);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet52 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray53 = strSet52.toArray();
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.utils.ReportingSet.Options options60 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration58.licenseDuplicateOption(options60);
        reportConfiguration55.familyDuplicateOption(options60);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier63 = reportConfiguration55.getWriter();
        boolean boolean64 = reportConfiguration55.isAddingLicensesForced();
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        reportConfiguration66.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level69 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration66.logFamilyCollisions(level69);
        reportConfiguration55.logLicenseCollisions(level69);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet72 = strSet52.setLogLevel(level69);
        java.util.stream.Stream<java.lang.String> strStream73 = strSet72.stream();
        reportConfiguration45.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet72);
        org.apache.rat.utils.Log log75 = null;
        org.apache.rat.ReportConfiguration reportConfiguration76 = new org.apache.rat.ReportConfiguration(log75);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic77 = org.apache.rat.Reporter.report(reportConfiguration76);
        org.apache.rat.report.IReportable iReportable78 = null;
        reportConfiguration76.setReportable(iReportable78);
        org.apache.rat.license.ILicense iLicense80 = null;
        reportConfiguration76.addLicense(iLicense80);
        org.apache.rat.utils.Log log82 = null;
        org.apache.rat.ReportConfiguration reportConfiguration83 = new org.apache.rat.ReportConfiguration(log82);
        org.apache.rat.utils.ReportingSet.Options options84 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration83.licenseDuplicateOption(options84);
        reportConfiguration76.familyDuplicateOption(options84);
        reportConfiguration45.familyDuplicateOption(options84);
        reportConfiguration38.licenseDuplicateOption(options84);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet89 = strSet36.setDuplicateOption(options84);
        java.lang.Object obj90 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = strSet36.contains(obj90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(claimStatistic19);
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + options23 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options23.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier26);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertTrue("'" + options40 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options40.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilyArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertTrue("'" + options60 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options60.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + level69 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level69.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(strStream73);
        org.junit.Assert.assertNull(claimStatistic77);
        org.junit.Assert.assertTrue("'" + options84 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options84.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet89);
    }

    @Test
    public void test03661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03661");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder3);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder3.setRefId("http:");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder3.setMatchers(strMap7);
        java.lang.String str9 = matcherRefBuilder3.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder3.setRefId("AL   ");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = matcherRefBuilder3.setRefId("");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher14 = matcherRefBuilder13.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MathcerRefBuilder: http:" + "'", str9, "MathcerRefBuilder: http:");
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
    }

    @Test
    public void test03662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03662");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinary("REGEXBUILDER: NULL");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03663");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyName();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily4 = fullTextMatchingLicense0.getLicenseFamily();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
    }

    @Test
    public void test03664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03664");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("false");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("Copyright Builder: s:null e:.cvsignore o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("");
        java.lang.String str8 = builder7.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder10 = builder7.setLicenseFamilyCategory("2b7a7df2-0dac-406a-96b5-ea6b08e88337");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "false" + "'", str8, "false");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test03665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03665");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("2a532815-b4cd-4dd0-bed4-60dfe5c0f741");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03666");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.stream.Stream<java.lang.String> strStream25 = strSet6.parallelStream();
        strSet6.clear();
        boolean boolean28 = strSet6.addIfNotPresent("Datum [ name ='GNU General Public License, version 2',value ='021187d7-27c2-4fd9-bc74-8cc00413ee52 ']");
        java.util.stream.Stream<java.lang.String> strStream29 = strSet6.stream();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strStream25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strStream29);
    }

    @Test
    public void test03667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03667");
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.api.ContentType contentType3 = new org.apache.rat.api.ContentType("RegexBuilder: GNU General Public License, version 1", "binary", strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03668");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isKeystore("c6108888-bbb8-4ac0-8e5f-6bc60ab81eda");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03669");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        boolean boolean4 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier5 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier5);
        java.lang.String[] strArray12 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean16 = strSet13.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean18 = strSet13.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction19 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet20 = strSet13.setMsgFormat(strFunction19);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily23 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet22);
        boolean boolean24 = strSet13.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet26 = strSet13.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = reportConfiguration28.getLicenses(licenseFilter30);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders32 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration28.setAddLicenseHeaders(addLicenseHeaders32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        reportConfiguration35.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level38 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration35.logLicenseCollisions(level38);
        reportConfiguration28.logFamilyCollisions(level38);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet41 = strSet13.setLogLevel(level38);
        reportConfiguration1.logFamilyCollisions(level38);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier43 = reportConfiguration1.getOutput();
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration45.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense47 = null;
        reportConfiguration45.addLicense(iLicense47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        boolean boolean52 = reportConfiguration50.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier53 = reportConfiguration50.getOutput();
        reportConfiguration45.setOut(outputStreamIOSupplier53);
        reportConfiguration1.setOut(outputStreamIOSupplier53);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.ILicense.Builder builder57 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder59 = builder57.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher63 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state64 = copyrightMatcher63.finalizeState();
        org.apache.rat.license.ILicense.Builder builder65 = builder59.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher63);
        org.apache.rat.license.ILicense.Builder builder67 = builder59.setName("hi!");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher71 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher71.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state73 = copyrightMatcher71.finalizeState();
        copyrightMatcher71.reset();
        org.apache.rat.license.ILicense.Builder builder75 = builder59.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher71);
        org.apache.rat.license.ILicense.Builder builder77 = builder75.setLicenseFamilyCategory("MIT  ");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense78 = reportConfiguration1.addLicense(builder77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: License family MIT   not found.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertNull(iLicenseFamily23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders32 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders32.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertTrue("'" + level38 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level38.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier43);
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier53);
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + state64 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state64.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + state73 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state73.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test03670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03670");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        java.lang.Object obj54 = null;
        java.lang.Throwable throwable55 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.warn(obj54, throwable55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test03671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03671");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isNonBinary("MathcerRefBuilder: TextBuilder: SpdxBuilder: null");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03672");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.DefaultLog defaultLog55 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        reportConfiguration57.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level60 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration57.logFamilyCollisions(level60);
        defaultLog55.setLevel(level60);
        defaultLog0.debug((java.lang.Object) level60);
        org.apache.rat.utils.Log.Level level64 = defaultLog0.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender66 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "8ECB8CCE-06E4-400F-84D9-AD1CF6289FDA");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender68 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "httporgapacheratmetadataLicenseFamilyName");
        java.io.File file69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = apacheV2LicenseAppender68.getLicenseHeader(file69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog55);
        org.junit.Assert.assertTrue("'" + level60 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level60.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level64 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level64.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test03673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03673");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection3 = metaData0.getData();
        java.lang.String str5 = metaData0.value("hi!");
        metaData0.clear();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection7 = metaData0.getData();
        metaData0.clear();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(datumCollection3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(datumCollection7);
    }

    @Test
    public void test03674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03674");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("MIT  ");
        java.lang.String str6 = iLicenseFamilyBuilder0.getCategory();
        java.lang.String str7 = iLicenseFamilyBuilder0.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MIT  " + "'", str6, "MIT  ");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MIT  " + "'", str7, "MIT  ");
    }

    @Test
    public void test03675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03675");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.api.MetaData.Datum datum10 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_2;
        boolean boolean11 = strSet6.equals((java.lang.Object) datum10);
        java.lang.String str12 = datum10.getName();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(datum10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str12, "http://org/apache/rat/meta-data#LicenseFamilyName");
    }

    @Test
    public void test03676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03676");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("");
        org.apache.rat.Defaults.Builder builder9 = builder6.noDefault();
        org.apache.rat.Defaults.Builder builder10 = builder6.noDefault();
        java.net.URL uRL11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder12 = builder6.add(uRL11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test03677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03677");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        java.lang.String str2 = matcherRefBuilder0.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap3 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder4 = matcherRefBuilder0.setMatchers(strMap3);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap5 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder0.setMatchers(strMap5);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder0.setMatchers(strMap7);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap9 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder8.setMatchers(strMap9);
        java.lang.String str11 = matcherRefBuilder8.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = matcherRefBuilder8.setRefId("MathcerRefBuilder: null");
        java.lang.String str14 = matcherRefBuilder8.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher15 = matcherRefBuilder8.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MathcerRefBuilder: null" + "'", str2, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MathcerRefBuilder: null" + "'", str11, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MathcerRefBuilder: MathcerRefBuilder: null" + "'", str14, "MathcerRefBuilder: MathcerRefBuilder: null");
    }

    @Test
    public void test03678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03678");
        java.io.File file0 = null;
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems1 = org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION;
        boolean boolean2 = sourceCodeManagementSystems1.hasIgnoreFile();
        java.util.List<java.lang.String> strList3 = sourceCodeManagementSystems1.getExclusions();
        java.util.List<java.lang.String> strList4 = sourceCodeManagementSystems1.getExclusions();
        java.util.List<java.lang.String> strList5 = sourceCodeManagementSystems1.getExclusions();
        java.util.List<java.lang.String> strList6 = sourceCodeManagementSystems1.getExclusions();
        java.io.FilenameFilter filenameFilter7 = org.apache.rat.Report.parseExclusions(strList6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        reportConfiguration9.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level12 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration9.logFamilyCollisions(level12);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter14 = reportConfiguration9.getDirectoryFilter();
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.utils.ReportingSet.Options options17 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration16.licenseDuplicateOption(options17);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter42);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier48 = reportConfiguration47.getOutput();
        reportConfiguration20.setOut(outputStreamIOSupplier48);
        org.apache.rat.utils.Log.Level level50 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration20.logLicenseCollisions(level50);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter52 = reportConfiguration20.getDirectoryFilter();
        reportConfiguration16.setInputFileFilter((java.io.FilenameFilter) iOFileFilter52);
        java.nio.file.Path path54 = null;
        boolean boolean55 = iOFileFilter52.matches(path54);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter56 = iOFileFilter52.negate();
        java.nio.file.Path path57 = null;
        boolean boolean58 = iOFileFilter52.matches(path57);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter59 = iOFileFilter52.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter60 = iOFileFilter14.and(iOFileFilter59);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker61 = new org.apache.rat.walker.DirectoryWalker(file0, filenameFilter7, iOFileFilter59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems1 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION + "'", sourceCodeManagementSystems1.equals(org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(filenameFilter7);
        org.junit.Assert.assertTrue("'" + level12 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level12.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter14);
        org.junit.Assert.assertTrue("'" + options17 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options17.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier48);
        org.junit.Assert.assertTrue("'" + level50 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level50.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(iOFileFilter56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(iOFileFilter59);
        org.junit.Assert.assertNotNull(iOFileFilter60);
    }

    @Test
    public void test03679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03679");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        reportConfiguration2.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level5 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration2.logFamilyCollisions(level5);
        defaultLog0.setLevel(level5);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier37 = reportConfiguration36.getOutput();
        reportConfiguration9.setOut(outputStreamIOSupplier37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.utils.ReportingSet.Options options45 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration43.licenseDuplicateOption(options45);
        reportConfiguration40.familyDuplicateOption(options45);
        reportConfiguration9.licenseDuplicateOption(options45);
        reportConfiguration9.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        reportConfiguration52.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level55 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration52.logLicenseCollisions(level55);
        reportConfiguration9.logLicenseCollisions(level55);
        defaultLog0.log(level55, "GNU General Public License, version 1");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender61 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "W3C  ");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender62 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + level5 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level5.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier37);
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + options45 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options45.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level55 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level55.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test03680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03680");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.text();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder2.setText("true|false|forced");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder6 = textBuilder4.setId("TextBuilder: stand");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = textBuilder4.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder9 = textBuilder4.setText("641dafc1-13c3-45d4-8272-f36f10392c53");
        org.junit.Assert.assertNotNull(textBuilder0);
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(abstractBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(textBuilder9);
    }

    @Test
    public void test03681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03681");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        boolean boolean9 = reportConfiguration1.isStyleReport();
        org.apache.rat.license.ILicense[] iLicenseArray10 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet11 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet11, iLicenseArray10);
        java.lang.String[] strArray25 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory28 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet11, (java.util.Collection<java.lang.String>) strList26);
        java.io.FilenameFilter filenameFilter29 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList26);
        java.io.FilenameFilter filenameFilter30 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList26);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList26);
        java.io.File file32 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setOut(file32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(iLicenseArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(filenameFilter29);
        org.junit.Assert.assertNotNull(filenameFilter30);
    }

    @Test
    public void test03682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03682");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection3 = metaData0.getData();
        java.lang.String str5 = metaData0.value("hi!");
        metaData0.clear();
        boolean boolean8 = metaData0.clear("90663eff-7ed8-41bd-85a8-e8f189198bc6");
        java.lang.String str10 = metaData0.value("TextBuilder: AL   ");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(datumCollection3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test03683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03683");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("09515582-f498-42b1-81db-55dad652cc61");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03684");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyName("TMF  ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = builder3.setLicenseFamilyName("");
        java.lang.String str6 = builder3.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test03685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03685");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter6 = xmlWriter1.openElement((java.lang.CharSequence) "ab913e1f-22c2-4747-9d4b-1a549cb028f0");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: 'ab913e1f-22c2-4747-9d4b-1a549cb028f0' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03686");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.ReportingSet.Options options52 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options52);
        reportConfiguration47.familyDuplicateOption(options52);
        reportConfiguration16.licenseDuplicateOption(options52);
        reportConfiguration16.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration16.logLicenseCollisions(level62);
        defaultLog14.setLevel(level62);
        defaultLog14.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog14);
        org.apache.rat.utils.DefaultLog defaultLog69 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logFamilyCollisions(level74);
        defaultLog69.setLevel(level74);
        defaultLog14.debug((java.lang.Object) level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet13.setLogLevel(level74);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        reportConfiguration80.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level83 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration80.logFamilyCollisions(level83);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet85 = strSet78.setLogLevel(level83);
        org.apache.rat.utils.Log log86 = null;
        org.apache.rat.ReportConfiguration reportConfiguration87 = new org.apache.rat.ReportConfiguration(log86);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray88 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList89 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList89, iLicenseFamilyArray88);
        reportConfiguration87.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList89);
        org.apache.rat.policy.DefaultPolicy defaultPolicy92 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList89);
        boolean boolean93 = strSet78.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList89);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + options52 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options52.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog69);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + level83 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level83.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test03687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03687");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        boolean boolean4 = reportConfiguration1.isAddingLicensesForced();
        java.lang.String str5 = reportConfiguration1.getCopyrightMessage();
        reportConfiguration1.removeApprovedLicenseCategory("AnyBuilder:\nAllBuilder:");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier11 = reportConfiguration9.getOutput();
        org.apache.rat.license.ILicense iLicense12 = null;
        reportConfiguration9.addLicense(iLicense12);
        org.apache.rat.Defaults.Builder builder14 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults15 = builder14.build();
        reportConfiguration9.setFrom(defaults15);
        org.apache.rat.license.ILicense[] iLicenseArray17 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet18 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet18, iLicenseArray17);
        java.lang.String[] strArray32 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory35 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet18, (java.util.Collection<java.lang.String>) strList33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet37 = licenseSetFactory35.getLicenseFamilies(licenseFilter36);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = defaults15.getLicenses(licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter36);
        java.net.URL uRL40 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(defaults15);
        org.junit.Assert.assertNotNull(iLicenseArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet37);
        org.junit.Assert.assertNotNull(iLicenseSet38);
    }

    @Test
    public void test03688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03688");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        reportConfiguration11.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level14 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration11.logFamilyCollisions(level14);
        reportConfiguration1.logFamilyCollisions(level14);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration1.getInputFileFilter();
        reportConfiguration1.setCopyrightMessage("7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        java.io.FilenameFilter filenameFilter22 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet24 = reportConfiguration21.getLicenses(licenseFilter23);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders25 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration21.setAddLicenseHeaders(addLicenseHeaders25);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic29 = org.apache.rat.Reporter.report(reportConfiguration28);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter30);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet37 = reportConfiguration34.getLicenses(licenseFilter36);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders38 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration34.setAddLicenseHeaders(addLicenseHeaders38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter43);
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter43);
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter43);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = reportConfiguration49.getLicenses(licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter58);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        java.io.FilenameFilter filenameFilter63 = reportConfiguration62.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet65 = reportConfiguration62.getLicenses(licenseFilter64);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders66 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration62.setAddLicenseHeaders(addLicenseHeaders66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter71 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration69, licenseFilter71);
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter71);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter71);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet75 = reportConfiguration21.getLicenses(licenseFilter71);
        boolean boolean76 = reportConfiguration21.isAddingLicensesForced();
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic79 = org.apache.rat.Reporter.report(reportConfiguration78);
        org.apache.rat.utils.Log log80 = null;
        org.apache.rat.ReportConfiguration reportConfiguration81 = new org.apache.rat.ReportConfiguration(log80);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic82 = org.apache.rat.Reporter.report(reportConfiguration81);
        org.apache.rat.utils.ReportingSet.Options options83 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration81.licenseDuplicateOption(options83);
        reportConfiguration78.familyDuplicateOption(options83);
        reportConfiguration21.familyDuplicateOption(options83);
        reportConfiguration1.familyDuplicateOption(options83);
        org.apache.rat.report.IReportable iReportable88 = null;
        reportConfiguration1.setReportable(iReportable88);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier90 = reportConfiguration1.getOutput();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + level14 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level14.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertNull(filenameFilter22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet24);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders25 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders25.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet37);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders38 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders38.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet65);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders66 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders66.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + licenseFilter71 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter71.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(claimStatistic79);
        org.junit.Assert.assertNull(claimStatistic82);
        org.junit.Assert.assertTrue("'" + options83 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options83.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier90);
    }

    @Test
    public void test03689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03689");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter9 = xmlWriter1.content((java.lang.CharSequence) "50413ae6-037c-4fdd-a790-7c8514c95b09");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03690");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.api.Document document12 = null;
        // The following exception was thrown during execution in test generation
        try {
            simpleXmlClaimReporter11.report(document12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03691");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data#FileCategory", "8f82a952-5bfd-446b-ac79-15beef5b3f17");
        fullTextMatcher2.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state5 = fullTextMatcher2.matches("ANYBUILDER:");
        fullTextMatcher2.reset();
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test03692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03692");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        reportConfiguration3.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        java.io.FilenameFilter filenameFilter8 = reportConfiguration7.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter9 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet10 = reportConfiguration7.getLicenses(licenseFilter9);
        reportConfiguration3.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10);
        reportConfiguration3.setStyleReport(true);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = reportConfiguration28.getLicenses(licenseFilter30);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders32 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration28.setAddLicenseHeaders(addLicenseHeaders32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter37);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter37);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter37);
        java.io.FilenameFilter filenameFilter41 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = reportConfiguration43.getLicenses(licenseFilter45);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter52);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        java.io.FilenameFilter filenameFilter57 = reportConfiguration56.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet59 = reportConfiguration56.getLicenses(licenseFilter58);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders60 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration56.setAddLicenseHeaders(addLicenseHeaders60);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic64 = org.apache.rat.Reporter.report(reportConfiguration63);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter65 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration63, licenseFilter65);
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter65);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter65);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet69 = reportConfiguration15.getLicenses(licenseFilter65);
        boolean boolean70 = reportConfiguration15.isAddingLicensesForced();
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic73 = org.apache.rat.Reporter.report(reportConfiguration72);
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic76 = org.apache.rat.Reporter.report(reportConfiguration75);
        org.apache.rat.utils.ReportingSet.Options options77 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration75.licenseDuplicateOption(options77);
        reportConfiguration72.familyDuplicateOption(options77);
        reportConfiguration15.familyDuplicateOption(options77);
        org.apache.rat.license.ILicenseFamily.Builder builder81 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str82 = builder81.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder84 = builder81.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder86 = builder84.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder88 = builder86.setLicenseFamilyName("6620e9ee-d651-4c18-8162-edad6d18368e");
        reportConfiguration15.addFamily(builder86);
        org.apache.rat.license.ILicenseFamily.Builder builder91 = builder86.setLicenseFamilyCategory("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.license.ILicenseFamily.Builder builder93 = builder91.setLicenseFamilyCategory("58515fd1-71f9-42a1-b033-b509624129a7");
        org.apache.rat.license.ILicenseFamily.Builder builder95 = builder91.setLicenseFamilyName("SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName");
        reportConfiguration3.addFamily(builder95);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter97 = reportConfiguration3.getDirectoryFilter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker98 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter8);
        org.junit.Assert.assertTrue("'" + licenseFilter9 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter9.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet10);
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders32 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders32.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet59);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders60 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders60.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic64);
        org.junit.Assert.assertTrue("'" + licenseFilter65 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter65.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(claimStatistic73);
        org.junit.Assert.assertNull(claimStatistic76);
        org.junit.Assert.assertTrue("'" + options77 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options77.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(iOFileFilter97);
    }

    @Test
    public void test03693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03693");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog0.setLevel(level13);
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily15 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str16 = simpleLicenseFamily15.getFamilyName();
        java.lang.String str17 = simpleLicenseFamily15.getFamilyCategory();
        simpleLicenseFamily15.setFamilyCategory("W3C  ");
        simpleLicenseFamily15.setFamilyCategory("AllBuilder:");
        defaultLog0.info((java.lang.Object) simpleLicenseFamily15);
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean26 = strSet24.addIfNotPresent("OASIS Open License");
        boolean boolean28 = strSet24.add("http://org/apache/rat/meta-data#HeaderCategory");
        java.util.Iterator<java.lang.String> strItor29 = strSet24.iterator();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense30 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense30.setLicenseFamilyName("hi!");
        java.lang.String str33 = fullTextMatchingLicense30.getLicenseFamilyCategory();
        java.lang.String str34 = fullTextMatchingLicense30.getLicenseFamilyName();
        fullTextMatchingLicense30.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense30.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily39 = fullTextMatchingLicense30.getLicenseFamily();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet40 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily41 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily39, iLicenseFamilySet40);
        java.lang.String[] strArray47 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet48 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        boolean boolean51 = strSet48.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor52 = strSet48.iterator();
        java.lang.Object[] objArray53 = strSet48.toArray();
        java.lang.String[] strArray59 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet60 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        boolean boolean63 = strSet60.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet64 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean65 = strSet60.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet64);
        boolean boolean66 = strSet48.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet64);
        org.apache.rat.license.ILicenseFamily iLicenseFamily67 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily39, iLicenseFamilySet64);
        boolean boolean68 = strSet24.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet64);
        java.lang.Throwable throwable69 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.warn((java.lang.Object) boolean68, throwable69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level13.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily39);
        org.junit.Assert.assertNotNull(iLicenseFamilySet40);
        org.junit.Assert.assertNull(iLicenseFamily41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(iLicenseFamily67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test03694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03694");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet2 = strSet0.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray3 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray4 = strSet2.toArray(licenseReaderArray3);
        strSet2.clear();
        boolean boolean6 = strSet2.isEmpty();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction7 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet8 = strSet2.setMsgFormat(strFunction7);
        java.lang.Object[] objArray9 = strSet8.toArray();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic10.setNumApproved((int) (short) 10);
        claimStatistic10.setNumApproved(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = strSet8.contains((java.lang.Object) claimStatistic10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(licenseReaderArray3);
        org.junit.Assert.assertNotNull(licenseReaderArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    }

    @Test
    public void test03695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03695");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.report.IReportable iReportable3 = null;
        reportConfiguration1.setReportable(iReportable3);
        org.apache.rat.license.ILicense iLicense5 = null;
        reportConfiguration1.addLicense(iLicense5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.utils.ReportingSet.Options options9 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration8.licenseDuplicateOption(options9);
        reportConfiguration1.familyDuplicateOption(options9);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration13.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet16 = reportConfiguration13.getLicenses(licenseFilter15);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders17 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration13.setAddLicenseHeaders(addLicenseHeaders17);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic21 = org.apache.rat.Reporter.report(reportConfiguration20);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter22);
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter22);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration26.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet29 = reportConfiguration26.getLicenses(licenseFilter28);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders30 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration26.setAddLicenseHeaders(addLicenseHeaders30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier39 = reportConfiguration13.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier39);
        java.net.URL uRL41 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + options9 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options9.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet16);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders17 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders17.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet29);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders30 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders30.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier39);
    }

    @Test
    public void test03696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03696");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet6.spliterator();
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        defaultLog26.setLevel(level31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration48.getLicenses(licenseFilter50);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders52 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration48.setAddLicenseHeaders(addLicenseHeaders52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter57);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier63 = reportConfiguration62.getOutput();
        reportConfiguration35.setOut(outputStreamIOSupplier63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.utils.ReportingSet.Options options71 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration69.licenseDuplicateOption(options71);
        reportConfiguration66.familyDuplicateOption(options71);
        reportConfiguration35.licenseDuplicateOption(options71);
        reportConfiguration35.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logLicenseCollisions(level81);
        reportConfiguration35.logLicenseCollisions(level81);
        defaultLog26.log(level81, "GNU General Public License, version 1");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog26);
        int int87 = strSet6.size();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet89 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily90 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet89);
        org.apache.rat.policy.DefaultPolicy defaultPolicy91 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet89);
        boolean boolean92 = strSet6.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet89);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction93 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet94 = strSet6.setMsgFormat(strFunction93);
        java.lang.Object[] objArray95 = strSet94.toArray();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders52 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders52.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier63);
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + options71 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options71.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 6 + "'", int87 == 6);
        org.junit.Assert.assertNotNull(iLicenseFamilySet89);
        org.junit.Assert.assertNull(iLicenseFamily90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertNotNull(objArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray95), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray95), "[]");
    }

    @Test
    public void test03697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03697");
        java.lang.String str1 = org.apache.rat.license.ILicenseFamily.makeCategory("NOTBUILDER: NULL");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NOTBU" + "'", str1, "NOTBU");
    }

    @Test
    public void test03698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03698");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = fullTextMatchingLicense0.getLicenseFamily();
        fullTextMatchingLicense0.setLicenseFamilyCategory("NotBuilder: null");
        org.apache.rat.license.ILicenseFamily iLicenseFamily12 = fullTextMatchingLicense0.getLicenseFamily();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
        org.junit.Assert.assertNotNull(iLicenseFamily12);
    }

    @Test
    public void test03699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03699");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.api.Document document10 = null;
        // The following exception was thrown during execution in test generation
        try {
            simpleXmlClaimReporter9.report(document10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03700");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.matchers.NotMatcher notMatcher2 = new org.apache.rat.analysis.matchers.NotMatcher("9DF69CA9-2229-47B6-966B-221652FD7D08", iHeaderMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: enclosed matcher may not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03701");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.lang.String[] strArray45 = new java.lang.String[] { "http://org/apache/rat/meta-data", "GNU General Public License, version 2", "Modified BSD License", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "The MIT License", "OASIS", "?????", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "6486879f-fc81-4b57-aec7-c4c77d540c30", "MANIFEST.MF", "?????", "GEN  ", "GPL3 ", "http://org/apache/rat/meta-data#HeaderCategory", "DOJO ", "true", "GPL2 ", "?????", "Apache License Version 2.0", "OASIS", "W3CD ", "OASIS", "?????", "OASIS Open License", "", "standard", "GPL2 ", "GEN  ", "W3CD ", "TMF  ", ".cvsignore", "Copyright Builder: s:null e:null o:null", "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 2", "W3CD ", ".cvsignore", "Apache License Version 2.0", "GEN  ", "W3C Software Copyright", "Modified BSD License", "GPL2 ", "JAVA" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList46);
        reportConfiguration1.removeApprovedLicenseCategory("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        java.io.FilenameFilter filenameFilter67 = reportConfiguration66.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet69 = reportConfiguration66.getLicenses(licenseFilter68);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders70 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration66.setAddLicenseHeaders(addLicenseHeaders70);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter75);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier81 = reportConfiguration80.getOutput();
        reportConfiguration53.setOut(outputStreamIOSupplier81);
        org.apache.rat.utils.Log.Level level83 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration53.logLicenseCollisions(level83);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter85 = reportConfiguration53.getDirectoryFilter();
        java.nio.file.Path path86 = null;
        boolean boolean87 = iOFileFilter85.matches(path86);
        java.nio.file.Path path88 = null;
        boolean boolean89 = iOFileFilter85.matches(path88);
        reportConfiguration1.setInputFileFilter((java.io.FilenameFilter) iOFileFilter85);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter91 = iOFileFilter85.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter92 = iOFileFilter85.negate();
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet69);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders70 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders70.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier81);
        org.junit.Assert.assertTrue("'" + level83 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level83.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(iOFileFilter91);
        org.junit.Assert.assertNotNull(iOFileFilter92);
    }

    @Test
    public void test03702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03702");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.license.ILicenseFamily iLicenseFamily6 = null;
        reportConfiguration2.addFamily(iLicenseFamily6);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter8 = reportConfiguration2.getDirectoryFilter();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        java.io.FilenameFilter filenameFilter11 = reportConfiguration10.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet13 = reportConfiguration10.getLicenses(licenseFilter12);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders14 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration10.setAddLicenseHeaders(addLicenseHeaders14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = org.apache.rat.Reporter.report(reportConfiguration17);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter19);
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter19);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter32);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier38 = reportConfiguration37.getOutput();
        reportConfiguration10.setOut(outputStreamIOSupplier38);
        org.apache.rat.utils.Log.Level level40 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration10.logLicenseCollisions(level40);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter42 = reportConfiguration10.getDirectoryFilter();
        java.nio.file.Path path43 = null;
        boolean boolean44 = iOFileFilter42.matches(path43);
        java.nio.file.Path path45 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes46 = null;
        java.nio.file.FileVisitResult fileVisitResult47 = iOFileFilter42.accept(path45, basicFileAttributes46);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter48 = iOFileFilter8.or(iOFileFilter42);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter49 = iOFileFilter42.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter50 = iOFileFilter42.negate();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker51 = new org.apache.rat.walker.ArchiveWalker(file0, (java.io.FilenameFilter) iOFileFilter42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertNotNull(iOFileFilter8);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet13);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders14 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders14.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier38);
        org.junit.Assert.assertTrue("'" + level40 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level40.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult47 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult47.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter48);
        org.junit.Assert.assertNotNull(iOFileFilter49);
        org.junit.Assert.assertNotNull(iOFileFilter50);
    }

    @Test
    public void test03703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03703");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher1 = anyBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = anyBuilder0.build();
        iHeaderMatcher2.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = iHeaderMatcher2.currentState();
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertNotNull(iHeaderMatcher1);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test03704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03704");
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.api.ContentType contentType3 = new org.apache.rat.api.ContentType("106ab050-2110-44f8-a9e7-726c4af443ea", "390c23ba-3dd0-46e7-95a7-28fcb417054c", strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03705");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter11 = xmlWriter1.openElement((java.lang.CharSequence) "f9686227-2048-447b-8a8f-3164382365d2");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: 'f9686227-2048-447b-8a8f-3164382365d2' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03706");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.MatcherBuilderTracker.addBuilder("e7c2816d-f550-482a-953f-5642846d0ebd", "49ba0523-306f-4984-949f-9db17b9667d9");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: java.lang.ClassNotFoundException: e7c2816d-f550-482a-953f-5642846d0ebd");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03707");
        java.lang.String[] strArray4 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean5 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", strArray4);
        boolean boolean6 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("http://org/apache/rat/meta-data#LicenseFamilyCategory", strArray4);
        boolean boolean7 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("The MIT License", strArray4);
        boolean boolean8 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("9d334763-6150-4fa3-86d4-32f09aebbaad", strArray4);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test03708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03708");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            simpleXmlClaimReporter11.startReport();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03709");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.fromName("d5b3cead-3d07-43ee-903a-1e1ba144eb11");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: d5b3cead-3d07-43ee-903a-1e1ba144eb11");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03710");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("t true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder2.setText("Academic Free License, Version 2.1");
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder2.setText("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(textBuilder6);
    }

    @Test
    public void test03711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03711");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("GNUGeneralPublicLicenseversion2");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03712");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter12 = xmlWriter1.openElement((java.lang.CharSequence) "6486879f-fc81-4b57-aec7-c4c77d540c30");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: '6486879f-fc81-4b57-aec7-c4c77d540c30' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03713");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter13 = xmlWriter1.closeDocument();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03714");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        java.lang.String str2 = matcherRefBuilder0.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap3 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder4 = matcherRefBuilder0.setMatchers(strMap3);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap5 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder0.setMatchers(strMap5);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder0.setMatchers(strMap7);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap9 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder8.setMatchers(strMap9);
        java.lang.String str11 = matcherRefBuilder8.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = matcherRefBuilder8.setRefId("MathcerRefBuilder: null");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher14 = matcherRefBuilder8.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MathcerRefBuilder: null" + "'", str2, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MathcerRefBuilder: null" + "'", str11, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
    }

    @Test
    public void test03715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03715");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.lang.String str14 = strSet13.first();
        strSet13.clear();
        java.lang.Object[] objArray16 = strSet13.toArray();
        int int17 = strSet13.size();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet13.headSet("RegexBuilder: 255ef7d8-e270-4908-9de7-bebc7df6eb88");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet22 = strSet13.subSet("a8ad40e5-63d4-4711-aeee-d32efcd029a3", "TextBuilder: true");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey > toKey");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AllBuilder:" + "'", str14, "AllBuilder:");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(strSet19);
    }

    @Test
    public void test03716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03716");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter1 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.fromText("58515fd1-71f9-42a1-b033-b509624129a7");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.rat.license.LicenseSetFactory.LicenseFilter.58515fd1-71f9-42a1-b033-b509624129a7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03717");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinary("f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03718");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter3 = xmlWriter1.content((java.lang.CharSequence) "B2EAFDEF-0477-406A-8B6D-8D332A86679E");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03719");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter7 = xmlWriter1.startDocument();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03720");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier5 = reportConfiguration1.getStyleSheet();
        reportConfiguration1.addApprovedLicenseCategory("true");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier11 = reportConfiguration9.getOutput();
        boolean boolean12 = reportConfiguration9.isAddingLicensesForced();
        java.lang.String str13 = reportConfiguration9.getCopyrightMessage();
        reportConfiguration9.removeApprovedLicenseCategory("AnyBuilder:\nAllBuilder:");
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier16 = reportConfiguration9.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier16);
        java.util.function.Consumer<java.lang.String> strConsumer18 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.validate(strConsumer18);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: Reportable may not be null");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNull(inputStreamIOSupplier5);
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier16);
    }

    @Test
    public void test03721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03721");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter14 = xmlWriter1.content((java.lang.CharSequence) "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 2 ']");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03722");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinaryData("RegexBuilder: b44875e2-725e-49f9-8e21-90384e2ef96f");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03723");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.ReportingSet.Options options52 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options52);
        reportConfiguration47.familyDuplicateOption(options52);
        reportConfiguration16.licenseDuplicateOption(options52);
        reportConfiguration16.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration16.logLicenseCollisions(level62);
        defaultLog14.setLevel(level62);
        defaultLog14.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog14);
        org.apache.rat.utils.DefaultLog defaultLog69 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logFamilyCollisions(level74);
        defaultLog69.setLevel(level74);
        defaultLog14.debug((java.lang.Object) level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet13.setLogLevel(level74);
        org.apache.rat.utils.DefaultLog defaultLog79 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log80 = null;
        org.apache.rat.ReportConfiguration reportConfiguration81 = new org.apache.rat.ReportConfiguration(log80);
        reportConfiguration81.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level84 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration81.logFamilyCollisions(level84);
        defaultLog79.setLevel(level84);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet87 = strSet78.setLog((org.apache.rat.utils.Log) defaultLog79);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet89 = strSet78.headSet("OASIS");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet92 = strSet89.subSet("a80aad6c-340e-4343-88df-efe4fdbf9c47", "c4c4fff5-2656-471f-bd41-62e472c2ca7b");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey out of range");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + options52 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options52.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog69);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(defaultLog79);
        org.junit.Assert.assertTrue("'" + level84 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level84.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNotNull(strSet89);
    }

    @Test
    public void test03724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03724");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.lang.String[] strArray45 = new java.lang.String[] { "http://org/apache/rat/meta-data", "GNU General Public License, version 2", "Modified BSD License", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "The MIT License", "OASIS", "?????", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "6486879f-fc81-4b57-aec7-c4c77d540c30", "MANIFEST.MF", "?????", "GEN  ", "GPL3 ", "http://org/apache/rat/meta-data#HeaderCategory", "DOJO ", "true", "GPL2 ", "?????", "Apache License Version 2.0", "OASIS", "W3CD ", "OASIS", "?????", "OASIS Open License", "", "standard", "GPL2 ", "GEN  ", "W3CD ", "TMF  ", ".cvsignore", "Copyright Builder: s:null e:null o:null", "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 2", "W3CD ", ".cvsignore", "Apache License Version 2.0", "GEN  ", "W3C Software Copyright", "Modified BSD License", "GPL2 ", "JAVA" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList46);
        reportConfiguration1.removeApprovedLicenseCategory("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration1);
        reportConfiguration1.removeApprovedLicenseCategory("NOTBU");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(claimStatistic51);
    }

    @Test
    public void test03725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03725");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.ReportingSet.Options options52 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options52);
        reportConfiguration47.familyDuplicateOption(options52);
        reportConfiguration16.licenseDuplicateOption(options52);
        reportConfiguration16.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration16.logLicenseCollisions(level62);
        defaultLog14.setLevel(level62);
        defaultLog14.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog14);
        org.apache.rat.utils.DefaultLog defaultLog69 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logFamilyCollisions(level74);
        defaultLog69.setLevel(level74);
        defaultLog14.debug((java.lang.Object) level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet13.setLogLevel(level74);
        java.util.stream.Stream<java.lang.String> strStream79 = strSet13.parallelStream();
        boolean boolean80 = strSet13.isEmpty();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + options52 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options52.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog69);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(strStream79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test03726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03726");
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.api.ContentType contentType3 = new org.apache.rat.api.ContentType("09515582-f498-42b1-81db-55dad652cc61", "Copyright Builder: s:null e:.cvsignore o:null", strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03727");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        defaultLog0.info((java.lang.Object) "Modified BSD License");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender4 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "W3CD ");
        org.apache.rat.utils.DefaultLog defaultLog5 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder6 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder8 = builder6.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher12 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state13 = copyrightMatcher12.finalizeState();
        org.apache.rat.license.ILicense.Builder builder14 = builder8.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher12);
        org.apache.rat.license.ILicense.Builder builder16 = builder14.setLicenseFamilyCategory("");
        defaultLog5.error((java.lang.Object) builder16);
        org.apache.rat.utils.Log.Level level18 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog5.log(level18, "JAVA");
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier23 = reportConfiguration22.getOutput();
        reportConfiguration22.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log26 = reportConfiguration22.getLog();
        org.apache.rat.utils.Log.Level level27 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration22.logFamilyCollisions(level27);
        defaultLog5.setLevel(level27);
        defaultLog0.setLevel(level27);
        defaultLog0.error((java.lang.Object) "71f9048b-6413-4a71-a18a-0ee565e2b3ba");
        org.apache.rat.document.ToNameTransformer toNameTransformer33 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog34 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder35 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder37 = builder35.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher41 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state42 = copyrightMatcher41.finalizeState();
        org.apache.rat.license.ILicense.Builder builder43 = builder37.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher41);
        org.apache.rat.license.ILicense.Builder builder45 = builder43.setLicenseFamilyCategory("");
        defaultLog34.error((java.lang.Object) builder45);
        java.lang.Object obj47 = toNameTransformer33.transform((java.lang.Object) defaultLog34);
        java.lang.Object obj48 = null;
        defaultLog34.warn(obj48);
        org.apache.rat.utils.DefaultLog defaultLog50 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        reportConfiguration52.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level55 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration52.logFamilyCollisions(level55);
        defaultLog50.setLevel(level55);
        defaultLog34.log(level55, "AnyBuilder:");
        java.lang.Throwable throwable61 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.log(level55, "TMF  ", throwable61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(defaultLog5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state13.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + level18 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level18.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier23);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + level27 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level27.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(defaultLog34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + state42 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state42.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(defaultLog50);
        org.junit.Assert.assertTrue("'" + level55 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level55.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test03728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03728");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter11 = xmlWriter1.content((java.lang.CharSequence) "00186AD8-9B49-4E79-B8F0-40326F09C054 null");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03729");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog0.log(level13, "JAVA");
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        defaultLog0.info((java.lang.Object) licenseFilter16);
        org.apache.rat.configuration.Format format19 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader20 = format19.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader21 = format19.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader22 = format19.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = licenseReader22.readLicenses();
        org.apache.rat.license.ILicense iLicense24 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet23);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet25 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser26 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog0, (java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet23);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level13.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertTrue("'" + format19 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format19.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader20);
        org.junit.Assert.assertNotNull(matcherReader21);
        org.junit.Assert.assertNotNull(licenseReader22);
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertNull(iLicense24);
    }

    @Test
    public void test03730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03730");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.document.ToNameTransformer toNameTransformer11 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic12.setNumApproved((int) (short) 10);
        claimStatistic12.setNumUnknown(30);
        java.lang.Object obj17 = toNameTransformer11.transform((java.lang.Object) claimStatistic12);
        claimStatistic12.setNumGenerated((int) (short) 100);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        reportConfiguration21.addApprovedLicenseCategory(".cvsignore");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.RatReport ratReport24 = org.apache.rat.report.xml.XmlReportFactory.createStandardReport((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1, claimStatistic12, reportConfiguration21);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test03731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03731");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.DefaultLog defaultLog55 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        reportConfiguration57.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level60 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration57.logFamilyCollisions(level60);
        defaultLog55.setLevel(level60);
        defaultLog0.debug((java.lang.Object) level60);
        org.apache.rat.configuration.builders.AllBuilder allBuilder64 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str65 = allBuilder64.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList66 = allBuilder64.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder67 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder68 = allBuilder64.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder67);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder70 = matcherRefBuilder67.setRefId("TMF");
        defaultLog0.info((java.lang.Object) "TMF");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog55);
        org.junit.Assert.assertTrue("'" + level60 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level60.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "AllBuilder:" + "'", str65, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList66);
        org.junit.Assert.assertNotNull(abstractBuilder68);
        org.junit.Assert.assertNotNull(matcherRefBuilder70);
    }

    @Test
    public void test03732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03732");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        headerBean0.setMatch(false);
        headerBean0.setMatch(false);
        boolean boolean6 = headerBean0.isMatch();
        java.util.regex.Pattern pattern7 = null;
        headerBean0.setHeaderPattern(pattern7);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test03733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03733");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders7 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration3.setAddLicenseHeaders(addLicenseHeaders7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter12);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter12);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter25);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier31 = reportConfiguration30.getOutput();
        reportConfiguration3.setOut(outputStreamIOSupplier31);
        org.apache.rat.utils.Log.Level level33 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration3.logLicenseCollisions(level33);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter35 = reportConfiguration3.getDirectoryFilter();
        java.nio.file.Path path36 = null;
        boolean boolean37 = iOFileFilter35.matches(path36);
        java.nio.file.Path path38 = null;
        boolean boolean39 = iOFileFilter35.matches(path38);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter40 = iOFileFilter35.negate();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker41 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders7 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders7.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier31);
        org.junit.Assert.assertTrue("'" + level33 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level33.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(iOFileFilter40);
    }

    @Test
    public void test03734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03734");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter13 = xmlWriter1.content((java.lang.CharSequence) "COMMO");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03735");
        org.apache.rat.license.ILicenseFamily.Builder builder0 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str1 = builder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = builder0.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = builder3.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = builder5.setLicenseFamilyCategory("7480723c65a64470aa58975de51fe7c5");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03736");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration1.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier6 = reportConfiguration1.getOutput();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier7 = reportConfiguration1.getOutput();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier8 = reportConfiguration1.getOutput();
        boolean boolean9 = reportConfiguration1.isStyleReport();
        org.junit.Assert.assertNotNull(outputStreamIOSupplier6);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier7);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test03737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03737");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder3);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder3.setRefId("http:");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder6.setMatchers(strMap7);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder8.setRefId("");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder12 = matcherRefBuilder8.setRefId("F FALSE");
        java.lang.String str13 = matcherRefBuilder12.toString();
        java.lang.String str14 = matcherRefBuilder12.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
        org.junit.Assert.assertNotNull(matcherRefBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MathcerRefBuilder: F FALSE" + "'", str13, "MathcerRefBuilder: F FALSE");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MathcerRefBuilder: F FALSE" + "'", str14, "MathcerRefBuilder: F FALSE");
    }

    @Test
    public void test03738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03738");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        fullTextMatchingLicense0.setFullText("MANIFEST.MF");
        org.apache.rat.license.ILicense.Builder builder5 = fullTextMatchingLicense0.getLicense();
        java.lang.String str6 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str7 = fullTextMatchingLicense0.getNotes();
        org.apache.rat.license.ILicense.Builder builder8 = fullTextMatchingLicense0.getLicense();
        java.lang.String str9 = fullTextMatchingLicense0.getNotes();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test03739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03739");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.fromName("64ae0b82-4b80-4d92-9c12-7c39421cb10a");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: 64ae0b82-4b80-4d92-9c12-7c39421cb10a");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03740");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = copyrightBuilder7.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setOwner("TextBuilder: Datum [ name ='http:...");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder14 = copyrightBuilder7.setOwner("PLAIN-RAT.XSL");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder16 = copyrightBuilder7.setOwner("a1abad46-6a98-44f8-aa20-7839919a8270");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder16.setOwner("stand");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder18.setStart("");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = copyrightBuilder18.setOwner("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(copyrightBuilder14);
        org.junit.Assert.assertNotNull(copyrightBuilder16);
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
    }

    @Test
    public void test03741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03741");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet8 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray9 = strSet8.toArray();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.utils.ReportingSet.Options options16 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration14.licenseDuplicateOption(options16);
        reportConfiguration11.familyDuplicateOption(options16);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier19 = reportConfiguration11.getWriter();
        boolean boolean20 = reportConfiguration11.isAddingLicensesForced();
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        reportConfiguration22.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level25 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration22.logFamilyCollisions(level25);
        reportConfiguration11.logLicenseCollisions(level25);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet28 = strSet8.setLogLevel(level25);
        java.util.stream.Stream<java.lang.String> strStream29 = strSet28.stream();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.report.IReportable iReportable34 = null;
        reportConfiguration32.setReportable(iReportable34);
        org.apache.rat.license.ILicense iLicense36 = null;
        reportConfiguration32.addLicense(iLicense36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.utils.ReportingSet.Options options40 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration39.licenseDuplicateOption(options40);
        reportConfiguration32.familyDuplicateOption(options40);
        reportConfiguration1.familyDuplicateOption(options40);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier44 = org.apache.rat.Defaults.getUnapprovedLicensesStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier44);
        java.lang.String[] strArray51 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet52 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        boolean boolean55 = strSet52.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean57 = strSet52.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.stream.Stream<java.lang.String> strStream58 = strSet52.stream();
        org.apache.rat.utils.DefaultLog defaultLog59 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        reportConfiguration61.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level64 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration61.logFamilyCollisions(level64);
        defaultLog59.setLevel(level64);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet67 = strSet52.setLogLevel(level64);
        boolean boolean68 = strSet67.isEmpty();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet67);
        boolean boolean70 = reportConfiguration1.isAddingLicensesForced();
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertTrue("'" + options16 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options16.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + level25 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level25.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertTrue("'" + options40 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options40.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(inputStreamIOSupplier44);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strStream58);
        org.junit.Assert.assertNotNull(defaultLog59);
        org.junit.Assert.assertTrue("'" + level64 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level64.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test03742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03742");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved(10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnApproved((int) 'a');
        org.junit.Assert.assertNull(strMap3);
    }

    @Test
    public void test03743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03743");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((-1));
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumUnApproved((int) '#');
        claimStatistic0.setNumApproved((int) (byte) -1);
        int int8 = claimStatistic0.getNumUnknown();
        claimStatistic0.setNumGenerated(0);
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic0.getDocumentCategoryMap();
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test03744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03744");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        org.apache.rat.utils.DefaultLog defaultLog15 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder16 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder18 = builder16.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher22 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state23 = copyrightMatcher22.finalizeState();
        org.apache.rat.license.ILicense.Builder builder24 = builder18.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher22);
        org.apache.rat.license.ILicense.Builder builder26 = builder24.setLicenseFamilyCategory("");
        defaultLog15.error((java.lang.Object) builder26);
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog15);
        org.apache.rat.Defaults.Builder builder29 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults30 = builder29.build();
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration32.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet35 = reportConfiguration32.getLicenses(licenseFilter34);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders36 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter41);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration45.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet48 = reportConfiguration45.getLicenses(licenseFilter47);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders49 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration45.setAddLicenseHeaders(addLicenseHeaders49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter54);
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter54);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet57 = reportConfiguration32.getLicenseFamilies(licenseFilter54);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = defaults30.getLicenses(licenseFilter54);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet59 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet58);
        org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser60 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog15, (java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet58);
        org.apache.rat.utils.Log.Level level61 = defaultLog15.getLevel();
        org.apache.rat.utils.Log.Level level62 = defaultLog15.getLevel();
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher65 = new org.apache.rat.analysis.matchers.FullTextMatcher("TMF  ", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state66 = fullTextMatcher65.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state67 = fullTextMatcher65.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state68 = fullTextMatcher65.currentState();
        defaultLog1.log(level62, (java.lang.Object) state68);
        org.apache.rat.license.ILicenseFamily.Builder builder70 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str71 = builder70.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder73 = builder70.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder75 = builder73.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder77 = builder75.setLicenseFamilyCategory("641dafc1-13c3-45d4-8272-f36f10392c53");
        org.apache.rat.license.ILicenseFamily.Builder builder79 = builder77.setLicenseFamilyName("ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        defaultLog1.debug((java.lang.Object) builder77);
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(defaultLog15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state23.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(defaults30);
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet35);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders36 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders36.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet48);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders49 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders49.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet57);
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertNotNull(iDocumentAnalyser60);
        org.junit.Assert.assertTrue("'" + level61 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level61.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + state66 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state66.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state67 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state67.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state68 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state68.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test03745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03745");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier57 = reportConfiguration56.getOutput();
        reportConfiguration29.setOut(outputStreamIOSupplier57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic64 = org.apache.rat.Reporter.report(reportConfiguration63);
        org.apache.rat.utils.ReportingSet.Options options65 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration63.licenseDuplicateOption(options65);
        reportConfiguration60.familyDuplicateOption(options65);
        reportConfiguration29.licenseDuplicateOption(options65);
        reportConfiguration1.licenseDuplicateOption(options65);
        java.lang.String str70 = reportConfiguration1.getCopyrightMessage();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier57);
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertNull(claimStatistic64);
        org.junit.Assert.assertTrue("'" + options65 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options65.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(str70);
    }

    @Test
    public void test03746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03746");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        defaultLog0.info((java.lang.Object) "TextBuilder: Datum [ name ='http:...");
        org.apache.rat.utils.DefaultLog defaultLog49 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder50 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder52 = builder50.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher56 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state57 = copyrightMatcher56.finalizeState();
        org.apache.rat.license.ILicense.Builder builder58 = builder52.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher56);
        org.apache.rat.license.ILicense.Builder builder60 = builder58.setLicenseFamilyCategory("");
        defaultLog49.error((java.lang.Object) builder60);
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog49.log(level62, "JAVA");
        org.apache.rat.utils.Log.Level level65 = org.apache.rat.utils.Log.Level.WARN;
        defaultLog49.log(level65, "");
        org.apache.rat.license.ILicense.Builder builder68 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder70 = builder68.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher72 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder73 = builder68.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher72);
        org.apache.rat.license.ILicense.Builder builder75 = builder73.setLicenseFamilyCategory("httporgapacheratmetadataLicenseFamilyName");
        org.apache.rat.license.ILicense.Builder builder77 = builder73.setNotes("d25f13bc-1910-4451-97b5-b72663551a5d");
        defaultLog49.error((java.lang.Object) builder77);
        defaultLog0.debug((java.lang.Object) defaultLog49);
        org.apache.rat.utils.Log.Level level80 = org.apache.rat.utils.Log.Level.INFO;
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder81 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str82 = spdxBuilder81.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder84 = spdxBuilder81.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.lang.String str85 = spdxBuilder84.toString();
        java.lang.String str86 = spdxBuilder84.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher87 = spdxBuilder84.build();
        java.lang.Throwable throwable88 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.log(level80, (java.lang.Object) iHeaderMatcher87, throwable88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(defaultLog49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + state57 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state57.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level62.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + level65 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level65.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + level80 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level80.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(spdxBuilder81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "SpdxBuilder: null" + "'", str82, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str85, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str86, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(iHeaderMatcher87);
    }

    @Test
    public void test03747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03747");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        reportConfiguration1.addApprovedLicenseCategory("W3C Software Copyright");
        org.apache.rat.report.IReportable iReportable15 = null;
        reportConfiguration1.setReportable(iReportable15);
        org.apache.rat.license.ILicense iLicense17 = null;
        reportConfiguration1.addLicense(iLicense17);
        boolean boolean19 = reportConfiguration1.isStyleReport();
        java.lang.String[] strArray25 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet26 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        boolean boolean29 = strSet26.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor30 = strSet26.iterator();
        strSet26.clear();
        strSet26.clear();
        java.lang.Object[] objArray33 = strSet26.toArray();
        java.util.stream.Stream<java.lang.String> strStream34 = strSet26.stream();
        java.util.Comparator<? super java.lang.String> wildcardComparator35 = strSet26.comparator();
        boolean boolean37 = strSet26.add("SpdxBuilder: null");
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet26);
        org.apache.rat.Defaults.Builder builder39 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder40 = builder39.noDefault();
        org.apache.rat.Defaults defaults41 = builder40.build();
        org.apache.rat.Defaults.Builder builder42 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults43 = builder42.build();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet45 = defaults43.getLicenseFamilies(licenseFilter44);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet46 = defaults41.getLicenseFamilies(licenseFilter44);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier50 = reportConfiguration48.getOutput();
        boolean boolean51 = reportConfiguration48.isAddingLicensesForced();
        java.lang.String str52 = reportConfiguration48.getCopyrightMessage();
        reportConfiguration48.removeApprovedLicenseCategory("AnyBuilder:\nAllBuilder:");
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier58 = reportConfiguration56.getOutput();
        org.apache.rat.license.ILicense iLicense59 = null;
        reportConfiguration56.addLicense(iLicense59);
        org.apache.rat.Defaults.Builder builder61 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults62 = builder61.build();
        reportConfiguration56.setFrom(defaults62);
        org.apache.rat.license.ILicense[] iLicenseArray64 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet65 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet65, iLicenseArray64);
        java.lang.String[] strArray79 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory82 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet65, (java.util.Collection<java.lang.String>) strList80);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter83 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet84 = licenseSetFactory82.getLicenseFamilies(licenseFilter83);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet85 = defaults62.getLicenses(licenseFilter83);
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter83);
        java.util.SortedSet<java.lang.String> strSet87 = defaults41.getLicenseIds(licenseFilter83);
        reportConfiguration1.setFrom(defaults41);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertNull(wildcardComparator35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(defaults41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(defaults43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet45);
        org.junit.Assert.assertNotNull(iLicenseFamilySet46);
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(defaults62);
        org.junit.Assert.assertNotNull(iLicenseArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter83 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter83.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet84);
        org.junit.Assert.assertNotNull(iLicenseSet85);
        org.junit.Assert.assertNotNull(strSet87);
    }

    @Test
    public void test03748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03748");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter14 = xmlWriter1.attribute((java.lang.CharSequence) "da5fe944-291b-4f2c-8b38-a63be532e7b8", (java.lang.CharSequence) "7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03749");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isNonBinary("a8ad40e5-63d4-4711-aeee-d32efcd029a3");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03750");
        org.apache.commons.cli.CommandLine commandLine1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.ReportConfiguration reportConfiguration2 = org.apache.rat.Report.createConfiguration("42a1ccd7-5fae-417c-8b98-3ee9e6ec4b19", commandLine1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03751");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter10 = xmlWriter1.closeElement();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03752");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("55614104-0318-4696-ad8f-51f38556d5d6");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03753");
        java.lang.String str1 = org.apache.rat.license.ILicenseFamily.makeCategory("64ae0b82-4b80-4d92-9c12-7c39421cb10a");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "64ae0" + "'", str1, "64ae0");
    }

    @Test
    public void test03754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03754");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        org.apache.rat.license.ILicense[] iLicenseArray10 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet11 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet11, iLicenseArray10);
        java.lang.String[] strArray25 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory28 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet11, (java.util.Collection<java.lang.String>) strList26);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = reportConfiguration43.getLicenses(licenseFilter45);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter52);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = licenseSetFactory28.getLicenses(licenseFilter52);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration1, licenseFilter52);
        java.lang.String[] strArray63 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet64 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        boolean boolean67 = strSet64.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean69 = strSet64.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction70 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet71 = strSet64.setMsgFormat(strFunction70);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet73 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily74 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet73);
        boolean boolean75 = strSet64.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet73);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet77 = strSet64.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        java.io.FilenameFilter filenameFilter80 = reportConfiguration79.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter81 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet82 = reportConfiguration79.getLicenses(licenseFilter81);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders83 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration79.setAddLicenseHeaders(addLicenseHeaders83);
        org.apache.rat.utils.Log log85 = null;
        org.apache.rat.ReportConfiguration reportConfiguration86 = new org.apache.rat.ReportConfiguration(log85);
        reportConfiguration86.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level89 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration86.logLicenseCollisions(level89);
        reportConfiguration79.logFamilyCollisions(level89);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet92 = strSet64.setLogLevel(level89);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet92);
        boolean boolean95 = strSet92.addIfNotPresent("Copyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24");
        boolean boolean96 = strSet92.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream97 = strSet92.parallelStream();
        strStream97.close();
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNotNull(iLicenseArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(iLicenseFamilySet73);
        org.junit.Assert.assertNull(iLicenseFamily74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNull(filenameFilter80);
        org.junit.Assert.assertTrue("'" + licenseFilter81 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter81.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet82);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders83 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders83.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertTrue("'" + level89 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level89.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(strStream97);
    }

    @Test
    public void test03755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03755");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder1 = org.apache.rat.configuration.MatcherBuilderTracker.getMatcherBuilder("5479da42-d4d7-4457-9e6b-e6ae8ab5c74c");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: ?Valid builders?all?matcherRef?copyright?not?regex?spdx?text?any?ERROR MSG?No matcher builder named 5479da42-d4d7-4457-9e6b-e6ae8ab5c74c");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03756");
        boolean boolean1 = org.apache.rat.document.impl.guesser.ArchiveGuesser.isArchive("ACADEMIC FREE LICENSE, VERSION 2.1");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03757");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        reportConfiguration1.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log5 = reportConfiguration1.getLog();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier6 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier6);
        java.lang.String str8 = reportConfiguration1.getCopyrightMessage();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter9 = reportConfiguration1.getDirectoryFilter();
        boolean boolean10 = reportConfiguration1.isAddingLicenses();
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MANIFEST.MF" + "'", str8, "MANIFEST.MF");
        org.junit.Assert.assertNotNull(iOFileFilter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test03758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03758");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder5 = builder0.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.Defaults.Builder builder6 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("GPL2 ");
        org.apache.rat.Defaults.Builder builder10 = builder6.add("f6c7d16f-90d4-435d-b9d9-a9f6c196d56a");
        org.apache.rat.Defaults.Builder builder12 = builder6.remove("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        org.apache.rat.Defaults.Builder builder14 = builder12.remove("DOJO ");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults defaults15 = builder14.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: 1%20'%5D");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test03759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03759");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isNonBinary("1d9c9d9e-3274-4f05-8f26-218d38f9ae19");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03760");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter12 = xmlWriter1.openElement((java.lang.CharSequence) "f5f3fb9b-540a-43ef-a018-8ce5779e23f4");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: 'f5f3fb9b-540a-43ef-a018-8ce5779e23f4' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03761");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher4 = new org.apache.rat.analysis.matchers.CopyrightMatcher("10ceccc6-9da0-47a6-810c-684cf0a59f88", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "96ba4e3b-7c1a-47bf-88c5-78860245a028", "03f7b314-6887-4617-9c7e-bf1600b331cd");
    }

    @Test
    public void test03762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03762");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        org.apache.rat.license.ILicense[] iLicenseArray10 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet11 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet11, iLicenseArray10);
        java.lang.String[] strArray25 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory28 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet11, (java.util.Collection<java.lang.String>) strList26);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = reportConfiguration43.getLicenses(licenseFilter45);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter52);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = licenseSetFactory28.getLicenses(licenseFilter52);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration1, licenseFilter52);
        java.lang.String[] strArray63 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet64 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        boolean boolean67 = strSet64.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean69 = strSet64.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction70 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet71 = strSet64.setMsgFormat(strFunction70);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet73 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily74 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet73);
        boolean boolean75 = strSet64.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet73);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet77 = strSet64.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        java.io.FilenameFilter filenameFilter80 = reportConfiguration79.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter81 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet82 = reportConfiguration79.getLicenses(licenseFilter81);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders83 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration79.setAddLicenseHeaders(addLicenseHeaders83);
        org.apache.rat.utils.Log log85 = null;
        org.apache.rat.ReportConfiguration reportConfiguration86 = new org.apache.rat.ReportConfiguration(log85);
        reportConfiguration86.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level89 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration86.logLicenseCollisions(level89);
        reportConfiguration79.logFamilyCollisions(level89);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet92 = strSet64.setLogLevel(level89);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet92);
        boolean boolean95 = strSet92.addIfNotPresent("Copyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24");
        boolean boolean96 = strSet92.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream97 = strSet92.parallelStream();
        java.lang.String str98 = strSet92.first();
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNotNull(iLicenseArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(iLicenseFamilySet73);
        org.junit.Assert.assertNull(iLicenseFamily74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNull(filenameFilter80);
        org.junit.Assert.assertTrue("'" + licenseFilter81 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter81.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet82);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders83 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders83.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertTrue("'" + level89 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level89.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(strStream97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "AllBuilder:" + "'", str98, "AllBuilder:");
    }

    @Test
    public void test03763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03763");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        simpleRegexMatcher3.reset();
        java.lang.String str5 = simpleRegexMatcher3.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 1", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state7 = notMatcher6.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state8 = notMatcher6.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state9 = notMatcher6.finalizeState();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher.State state11 = notMatcher6.matches("97f57b71-8f44-4dda-a148-19f50c572927");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "52d3547d-0a2c-4607-9611-0d2b8cf687ee" + "'", str5, "52d3547d-0a2c-4607-9611-0d2b8cf687ee");
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test03764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03764");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher4 = new org.apache.rat.analysis.matchers.CopyrightMatcher("org/apache/rat/unapproved-licenses.xsl", "e5b7b7d6-30de-4972-8c78-a5e3e85d54e0", "01cd6410-ba98-464c-a66e-0b7190dd6096", "5229ae24-2b36-466b-8ff4-f67a7c68ef04");
    }

    @Test
    public void test03765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03765");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.utils.ReportingSet.Options options2 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration1.licenseDuplicateOption(options2);
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders9 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration5.setAddLicenseHeaders(addLicenseHeaders9);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration12, licenseFilter14);
        org.apache.rat.Reporter.listLicenses(reportConfiguration5, licenseFilter14);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet21 = reportConfiguration18.getLicenses(licenseFilter20);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders22 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration18.setAddLicenseHeaders(addLicenseHeaders22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration5, licenseFilter27);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier33 = reportConfiguration32.getOutput();
        reportConfiguration5.setOut(outputStreamIOSupplier33);
        org.apache.rat.utils.Log.Level level35 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration5.logLicenseCollisions(level35);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter37 = reportConfiguration5.getDirectoryFilter();
        reportConfiguration1.setInputFileFilter((java.io.FilenameFilter) iOFileFilter37);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier39 = reportConfiguration1.getStyleSheet();
        java.util.function.Consumer<java.lang.String> strConsumer40 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.validate(strConsumer40);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: Reportable may not be null");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + options2 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options2.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders9 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders9.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet21);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders22 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders22.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier33);
        org.junit.Assert.assertTrue("'" + level35 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level35.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter37);
        org.junit.Assert.assertNull(inputStreamIOSupplier39);
    }

    @Test
    public void test03766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03766");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        java.lang.String[] strArray51 = new java.lang.String[] { "274c6a15-09f6-4bfd-ac53-1827770eb507", "true|false|forced", "GEN  ", "Apache License Version 2.0", "OASIS", "Apache License Version 2.0", "hi!", "http://org/apache/rat/meta-data", "standard", "", "GEN  ", "W3C Document Copyright", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "Copyright Builder: s:null e:null o:null", "MANIFEST.MF", "Modified BSD License", "true|false|forced", "t true", "GPL2 ", "Modified BSD License", "hi!", "MANIFEST.MF", "GPL2 ", "W3C Software Copyright", "W3C Software Copyright", "021187d7-27c2-4fd9-bc74-8cc00413ee52", "Apache License Version 2.0", "W3C Software Copyright", ".cvsignore", "?????", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 1", "GNU General Public License, version 1", "TMF  ", "6486879f-fc81-4b57-aec7-c4c77d540c30", "org/apache/rat/plain-rat.xsl", "GNU General Public License, version 2", "?????" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList52);
        reportConfiguration1.setCopyrightMessage("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.io.FilenameFilter filenameFilter57 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.Defaults.Builder builder58 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder59 = builder58.noDefault();
        org.apache.rat.Defaults defaults60 = builder59.build();
        reportConfiguration1.setFrom(defaults60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration1, licenseFilter62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(filenameFilter57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(defaults60);
    }

    @Test
    public void test03767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03767");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.Spliterator<java.lang.String> strSpliterator14 = strSet6.spliterator();
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray17 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList18 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18, iLicenseFamilyArray17);
        reportConfiguration16.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18);
        boolean boolean21 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet22 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet22.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray25 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray26 = strSet24.toArray(licenseReaderArray25);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic29 = org.apache.rat.Reporter.report(reportConfiguration28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.utils.ReportingSet.Options options33 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration31.licenseDuplicateOption(options33);
        reportConfiguration28.familyDuplicateOption(options33);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet36 = strSet24.setDuplicateOption(options33);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet37 = strSet6.setDuplicateOption(options33);
        java.lang.String str38 = strSet37.first();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet41 = strSet37.subSet("a8ad4", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey > toKey");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strSpliterator14);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(licenseReaderArray25);
        org.junit.Assert.assertNotNull(licenseReaderArray26);
        org.junit.Assert.assertNull(claimStatistic29);
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + options33 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options33.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "AllBuilder:" + "'", str38, "AllBuilder:");
    }

    @Test
    public void test03768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03768");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter7 = xmlWriter1.content((java.lang.CharSequence) "SpdxBuilder: 7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03769");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("GPL3 ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = sPDXMatcherFactory0.create("MANIFEST.MF");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = sPDXMatcherFactory0.create("MathcerRefBuilder: AllBuilder:");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = sPDXMatcherFactory0.create("4f6baee5-accf-42cc-adfd-2bd688852a2e");
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
    }

    @Test
    public void test03770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03770");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        java.lang.String str63 = allBuilder1.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher64 = allBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "AllBuilder:\nMathcerRefBuilder: null\nAnyBuilder:\nNotBuilder: MathcerRefBuilder: null\nMathcerRefBuilder: null" + "'", str63, "AllBuilder:\nMathcerRefBuilder: null\nAnyBuilder:\nNotBuilder: MathcerRefBuilder: null\nMathcerRefBuilder: null");
    }

    @Test
    public void test03771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03771");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder6 = builder0.add("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder7 = builder0.noDefault();
        java.io.File file8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder9 = builder7.add(file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03772");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems0 = org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION;
        boolean boolean1 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.util.List<java.lang.String> strList2 = sourceCodeManagementSystems0.getExclusions();
        java.util.List<java.lang.String> strList3 = sourceCodeManagementSystems0.getExclusions();
        java.util.List<java.lang.String> strList4 = sourceCodeManagementSystems0.getExclusions();
        java.util.List<java.lang.String> strList5 = sourceCodeManagementSystems0.getExclusions();
        java.util.List<java.lang.String> strList6 = sourceCodeManagementSystems0.getExclusions();
        boolean boolean7 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.util.List<java.lang.String> strList8 = sourceCodeManagementSystems0.getExclusions();
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems0 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION + "'", sourceCodeManagementSystems0.equals(org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test03773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03773");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet10 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean11 = strSet6.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet10);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray14 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList15 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList15, iLicenseFamilyArray14);
        reportConfiguration13.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList15);
        org.apache.rat.utils.Log.Level level18 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logLicenseCollisions(level18);
        org.apache.rat.report.IReportable iReportable20 = reportConfiguration13.getReportable();
        org.apache.rat.report.IReportable iReportable21 = reportConfiguration13.getReportable();
        org.apache.rat.utils.ReportingSet.Options options22 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration13.licenseDuplicateOption(options22);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet6.setDuplicateOption(options22);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet27 = strSet6.subSet("TextBuilder: ", "org/a");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + level18 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level18.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(iReportable20);
        org.junit.Assert.assertNull(iReportable21);
        org.junit.Assert.assertTrue("'" + options22 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options22.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strSet27);
    }

    @Test
    public void test03774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03774");
        java.util.regex.Pattern pattern3 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher4 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern3);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher5 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher4);
        org.apache.rat.analysis.IHeaderMatcher.State state6 = notMatcher5.finalizeState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher("binary", (org.apache.rat.analysis.IHeaderMatcher) notMatcher5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher.State state9 = notMatcher5.matches("Copyright Builder: s:W3CD  e:null o:Copyright Builder: s:null e:274c6a15-09f6-4bfd-ac53-1827770eb507 o:null");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test03775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03775");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isAudio("ac588fb8-47ff-4c8a-b192-4b692ac6762c");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03776");
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder3.setName("hi!");
        java.util.regex.Pattern pattern14 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher15 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern14);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher16 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher15);
        org.apache.rat.analysis.IHeaderMatcher.State state17 = notMatcher16.finalizeState();
        java.lang.String str18 = notMatcher16.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state19 = notMatcher16.currentState();
        notMatcher16.reset();
        org.apache.rat.license.ILicense.Builder builder21 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher16);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher22 = new org.apache.rat.analysis.matchers.NotMatcher("TextBuilder: fe6be119-8817-4567-8...", (org.apache.rat.analysis.IHeaderMatcher) notMatcher16);
        org.apache.rat.analysis.IHeaderMatcher.State state23 = notMatcher22.finalizeState();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state17.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GNU General Public License, version 2" + "'", str18, "GNU General Public License, version 2");
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state19.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state23.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test03777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03777");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = copyrightBuilder7.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setOwner("TextBuilder: Datum [ name ='http:...");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder14 = copyrightBuilder7.setOwner("PLAIN-RAT.XSL");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder16 = copyrightBuilder7.setOwner("a1abad46-6a98-44f8-aa20-7839919a8270");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder7.setOwner("REGEXBUILDER: NULL");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder7.setEnd("f false");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(copyrightBuilder14);
        org.junit.Assert.assertNotNull(copyrightBuilder16);
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(copyrightBuilder20);
    }

    @Test
    public void test03778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03778");
        org.apache.rat.license.ILicense[] iLicenseArray0 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet1 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet1, iLicenseArray0);
        java.lang.String[] strArray15 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, (java.util.Collection<java.lang.String>) strList16);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet19 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1);
        java.util.Collection<java.lang.String> strCollection20 = null;
        org.apache.rat.license.LicenseSetFactory licenseSetFactory21 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, strCollection20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier25 = reportConfiguration23.getOutput();
        org.apache.rat.license.ILicense iLicense26 = null;
        reportConfiguration23.addLicense(iLicense26);
        org.apache.rat.Defaults.Builder builder28 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults29 = builder28.build();
        reportConfiguration23.setFrom(defaults29);
        org.apache.rat.license.ILicense[] iLicenseArray31 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet32 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet32, iLicenseArray31);
        java.lang.String[] strArray46 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory49 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet32, (java.util.Collection<java.lang.String>) strList47);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet51 = licenseSetFactory49.getLicenseFamilies(licenseFilter50);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = defaults29.getLicenses(licenseFilter50);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = licenseSetFactory21.getLicenses(licenseFilter50);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet54 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet56 = strSet54.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray57 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray58 = strSet56.toArray(licenseReaderArray57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic64 = org.apache.rat.Reporter.report(reportConfiguration63);
        org.apache.rat.utils.ReportingSet.Options options65 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration63.licenseDuplicateOption(options65);
        reportConfiguration60.familyDuplicateOption(options65);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet68 = strSet56.setDuplicateOption(options65);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory69 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet53, (java.util.Collection<java.lang.String>) strSet68);
        org.apache.rat.utils.Log.Level level70 = org.apache.rat.utils.Log.Level.DEBUG;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet71 = strSet68.setLogLevel(level70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = strSet71.last();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(defaults29);
        org.junit.Assert.assertNotNull(iLicenseArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet51);
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(licenseReaderArray57);
        org.junit.Assert.assertNotNull(licenseReaderArray58);
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertNull(claimStatistic64);
        org.junit.Assert.assertTrue("'" + options65 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options65.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertTrue("'" + level70 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level70.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNotNull(strSet71);
    }

    @Test
    public void test03779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03779");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str1 = anyBuilder0.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder2 = new org.apache.rat.configuration.builders.AnyBuilder();
        java.lang.String str3 = anyBuilder2.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = anyBuilder2.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str6 = anyBuilder5.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList7 = anyBuilder5.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = anyBuilder5.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = anyBuilder5.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList10 = anyBuilder5.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder11 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str12 = notBuilder11.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap15 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder16 = matcherRefBuilder13.setMatchers(strMap15);
        org.apache.rat.configuration.builders.AllBuilder allBuilder17 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder18.setStart("OASIS");
        java.lang.String str21 = copyrightBuilder18.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder18.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder24 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean25 = matcherRefBuilder24.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = copyrightBuilder26.setStart("OASIS");
        java.lang.String str29 = copyrightBuilder26.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder26.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder32 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder38 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str39 = copyrightBuilder38.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder38.setEnd(".cvsignore");
        boolean boolean42 = copyrightBuilder38.hasId();
        java.lang.String str43 = copyrightBuilder38.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder44 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder46 = copyrightBuilder44.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap50 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder51 = matcherRefBuilder48.setMatchers(strMap50);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder52 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder53 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean54 = matcherRefBuilder53.hasId();
        java.lang.String str55 = matcherRefBuilder53.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap56 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = matcherRefBuilder53.setMatchers(strMap56);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder13, allBuilder17, copyrightBuilder23, matcherRefBuilder24, copyrightBuilder26, copyrightBuilder32, copyrightBuilder33, copyrightBuilder38, copyrightBuilder44, anyBuilder47, matcherRefBuilder48, copyrightBuilder52, matcherRefBuilder53 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = notBuilder11.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder62 = anyBuilder5.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder63 = anyBuilder2.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder64 = anyBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList65 = anyBuilder0.getChildren();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AnyBuilder:" + "'", str1, "AnyBuilder:");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "AnyBuilder:" + "'", str3, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "AnyBuilder:" + "'", str6, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcherList10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NotBuilder: null" + "'", str12, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder16);
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str21, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertNotNull(matcherRefBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str29, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertNotNull(copyrightBuilder32);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str39, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str43, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder44);
        org.junit.Assert.assertNotNull(copyrightBuilder46);
        org.junit.Assert.assertNotNull(anyBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder51);
        org.junit.Assert.assertNotNull(copyrightBuilder52);
        org.junit.Assert.assertNotNull(matcherRefBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "MathcerRefBuilder: null" + "'", str55, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder57);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(abstractBuilder62);
        org.junit.Assert.assertNotNull(abstractBuilder63);
        org.junit.Assert.assertNotNull(abstractBuilder64);
    }

    @Test
    public void test03780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03780");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher6 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state7 = copyrightMatcher6.finalizeState();
        org.apache.rat.license.ILicense.Builder builder8 = builder2.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher6);
        org.apache.rat.license.ILicense.Builder builder10 = builder8.setNotes("8f0ee536-38ae-476a-a728-de95e24c13c3");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher13 = new org.apache.rat.analysis.matchers.FullTextMatcher("notice", "3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.license.ILicense.Builder builder14 = builder10.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher13);
        org.apache.rat.license.ILicense.Builder builder16 = builder14.setLicenseFamilyCategory("OASIS");
        org.apache.rat.license.ILicense.Builder builder18 = builder14.setDerivedFrom("9d334763-6150-4fa3-86d4-32f09aebbaad");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test03781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03781");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter1 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.fromText("Regex");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.rat.license.LicenseSetFactory.LicenseFilter.regex");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03782");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("binary");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = simpleTextMatcher2.finalizeState();
        boolean boolean5 = simpleTextMatcher2.doMatch("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher(".bzrignore", (org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher2);
        java.lang.String str7 = notMatcher6.getId();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + ".bzrignore" + "'", str7, ".bzrignore");
    }

    @Test
    public void test03783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03783");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.report.IReportable iReportable3 = null;
        reportConfiguration1.setReportable(iReportable3);
        org.apache.rat.license.ILicense iLicense5 = null;
        reportConfiguration1.addLicense(iLicense5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        reportConfiguration8.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level11 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration8.logFamilyCollisions(level11);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier13 = reportConfiguration8.getOutput();
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        reportConfiguration15.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        reportConfiguration15.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration26.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet29 = reportConfiguration26.getLicenses(licenseFilter28);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders30 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration26.setAddLicenseHeaders(addLicenseHeaders30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter35);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        java.io.FilenameFilter filenameFilter40 = reportConfiguration39.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet42 = reportConfiguration39.getLicenses(licenseFilter41);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders43 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration39.setAddLicenseHeaders(addLicenseHeaders43);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic47 = org.apache.rat.Reporter.report(reportConfiguration46);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter48);
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter48);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet51 = reportConfiguration26.getLicenseFamilies(licenseFilter48);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration15, licenseFilter48);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet53 = reportConfiguration8.getLicenseFamilies(licenseFilter48);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter54 = reportConfiguration8.getDirectoryFilter();
        reportConfiguration1.addDirectoryFilter(iOFileFilter54);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = reportConfiguration57.getLicenses(licenseFilter59);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders61 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration57.setAddLicenseHeaders(addLicenseHeaders61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter66);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter66);
        org.apache.rat.utils.Log log69 = null;
        org.apache.rat.ReportConfiguration reportConfiguration70 = new org.apache.rat.ReportConfiguration(log69);
        java.io.FilenameFilter filenameFilter71 = reportConfiguration70.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter72 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet73 = reportConfiguration70.getLicenses(licenseFilter72);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders74 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration70.setAddLicenseHeaders(addLicenseHeaders74);
        org.apache.rat.utils.Log log76 = null;
        org.apache.rat.ReportConfiguration reportConfiguration77 = new org.apache.rat.ReportConfiguration(log76);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic78 = org.apache.rat.Reporter.report(reportConfiguration77);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter79 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration77, licenseFilter79);
        org.apache.rat.Reporter.listLicenses(reportConfiguration70, licenseFilter79);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter79);
        org.apache.rat.utils.Log log83 = null;
        org.apache.rat.ReportConfiguration reportConfiguration84 = new org.apache.rat.ReportConfiguration(log83);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier85 = reportConfiguration84.getOutput();
        reportConfiguration57.setOut(outputStreamIOSupplier85);
        boolean boolean87 = reportConfiguration57.isStyleReport();
        boolean boolean88 = reportConfiguration57.isStyleReport();
        org.apache.rat.utils.Log log89 = null;
        org.apache.rat.ReportConfiguration reportConfiguration90 = new org.apache.rat.ReportConfiguration(log89);
        reportConfiguration90.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level93 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration90.logLicenseCollisions(level93);
        reportConfiguration57.logLicenseCollisions(level93);
        reportConfiguration1.logFamilyCollisions(level93);
        reportConfiguration1.removeApprovedLicenseCategory("b5cb0999-b639-4e9c-ab9c-268137bc8846 GEN  ");
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + level11 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level11.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier13);
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet29);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders30 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders30.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet42);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders43 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders43.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet51);
        org.junit.Assert.assertNotNull(iLicenseFamilySet53);
        org.junit.Assert.assertNotNull(iOFileFilter54);
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders61 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders61.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter71);
        org.junit.Assert.assertTrue("'" + licenseFilter72 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter72.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet73);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders74 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders74.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic78);
        org.junit.Assert.assertTrue("'" + licenseFilter79 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter79.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + level93 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level93.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test03784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03784");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter10 = xmlWriter1.attribute((java.lang.CharSequence) "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='W3C Software Copyright ']", (java.lang.CharSequence) "223f0aba-15d4-49e9-901e-5740c137aebf null");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03785");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null;
        claimStatistic0.setDocumentCategoryMap(strMap1);
        int int3 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap4 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumUnknown((-1));
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        claimStatistic0.setLicenseFileNameMap(strMap7);
        claimStatistic0.setNumApproved(4);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strMap4);
    }

    @Test
    public void test03786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03786");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration1.getLicenses(licenseFilter51);
        boolean boolean56 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.report.IReportable iReportable57 = null;
        reportConfiguration1.setReportable(iReportable57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(claimStatistic59);
    }

    @Test
    public void test03787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03787");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection3 = metaData0.getData();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection4 = metaData0.getData();
        org.apache.rat.api.MetaData.Datum datum6 = metaData0.get("9a27162b-29e4-4613-9f18-8eafe431b3a4");
        org.apache.rat.api.MetaData.Datum datum8 = metaData0.get("01cd6410-ba98-464c-a66e-0b7190dd6096");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(datumCollection3);
        org.junit.Assert.assertNotNull(datumCollection4);
        org.junit.Assert.assertNull(datum6);
        org.junit.Assert.assertNull(datum8);
    }

    @Test
    public void test03788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03788");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("Datum [ name ='021187d7-27c2-4fd9-bc74-8cc00413ee52',value ='094643d4-94c6-478a-b861-15e14bd2e656 ']");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03789");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders4 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders4);
        reportConfiguration1.removeApprovedLicenseCategory("The MIT License");
        reportConfiguration1.removeApprovedLicenseCategory("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.apache.rat.license.ILicense iLicense10 = null;
        reportConfiguration1.addLicense(iLicense10);
        java.util.function.Consumer<java.lang.String> strConsumer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.validate(strConsumer12);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: Reportable may not be null");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders4 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders4.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
    }

    @Test
    public void test03790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03790");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter14 = xmlWriter1.attribute((java.lang.CharSequence) "TextBuilder: fe6be119-8817-4567-8...", (java.lang.CharSequence) "TextBuilder: fe6be119-8817-4567-8...");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03791");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("AnyBuilder:\nAllBuilder:", "Datum [ name ='binary',value =' ']", "265F6D84-FB7A-4674-9DC1-FEA7799ECF68");
    }

    @Test
    public void test03792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03792");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder1 = builder0.noDefault();
        org.apache.rat.Defaults defaults2 = builder1.build();
        org.apache.rat.Defaults.Builder builder4 = builder1.add("W3CD ");
        org.apache.rat.Defaults.Builder builder5 = builder4.noDefault();
        java.io.File file6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder7 = builder4.add(file6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(defaults2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test03793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03793");
        org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter0 = null;
        org.apache.rat.document.ToNameTransformer toNameTransformer1 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic2.setNumApproved((int) (short) 10);
        claimStatistic2.setNumUnknown(30);
        java.lang.Object obj7 = toNameTransformer1.transform((java.lang.Object) claimStatistic2);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic2.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic2.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic2.getDocumentCategoryMap();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray13 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList14 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList14, iLicenseFamilyArray13);
        reportConfiguration12.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList14);
        org.apache.rat.report.IReportable iReportable17 = null;
        reportConfiguration12.setReportable(iReportable17);
        reportConfiguration12.addApprovedLicenseCategory("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.apache.rat.Defaults.Builder builder22 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults23 = builder22.build();
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        java.io.FilenameFilter filenameFilter26 = reportConfiguration25.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet28 = reportConfiguration25.getLicenses(licenseFilter27);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders29 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration25.setAddLicenseHeaders(addLicenseHeaders29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter34);
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter34);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        java.io.FilenameFilter filenameFilter39 = reportConfiguration38.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet41 = reportConfiguration38.getLicenses(licenseFilter40);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders42 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration38.setAddLicenseHeaders(addLicenseHeaders42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic46 = org.apache.rat.Reporter.report(reportConfiguration45);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter47);
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter47);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet50 = reportConfiguration25.getLicenseFamilies(licenseFilter47);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = defaults23.getLicenses(licenseFilter47);
        org.apache.rat.license.ILicense iLicense52 = org.apache.rat.license.LicenseSetFactory.search(".bzrignore", iLicenseSet51);
        reportConfiguration12.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet51);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.RatReport ratReport54 = org.apache.rat.report.xml.XmlReportFactory.createStandardReport(iXmlWriter0, claimStatistic2, reportConfiguration12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(defaults23);
        org.junit.Assert.assertNull(filenameFilter26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet28);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders29 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders29.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet41);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders42 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders42.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet50);
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertNull(iLicense52);
    }

    @Test
    public void test03794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03794");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.MatcherBuilderTracker.addBuilder("TextBuilder: 4fcae176-e574-46ed-b...", "ae1d3f1b-6a63-45e7-a11c-0cd273efa3f6");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: java.lang.ClassNotFoundException: TextBuilder: 4fcae176-e574-46ed-b...");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03795");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        claimStatistic0.setNumUnknown((int) '#');
        int int5 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = null;
        claimStatistic0.setDocumentCategoryMap(strMap9);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap8);
    }

    @Test
    public void test03796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03796");
        org.apache.rat.license.ILicense[] iLicenseArray0 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet1 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet1, iLicenseArray0);
        java.lang.String[] strArray15 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, (java.util.Collection<java.lang.String>) strList16);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet19 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1);
        java.util.Collection<java.lang.String> strCollection20 = null;
        org.apache.rat.license.LicenseSetFactory licenseSetFactory21 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, strCollection20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier25 = reportConfiguration23.getOutput();
        org.apache.rat.license.ILicense iLicense26 = null;
        reportConfiguration23.addLicense(iLicense26);
        org.apache.rat.Defaults.Builder builder28 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults29 = builder28.build();
        reportConfiguration23.setFrom(defaults29);
        org.apache.rat.license.ILicense[] iLicenseArray31 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet32 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet32, iLicenseArray31);
        java.lang.String[] strArray46 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory49 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet32, (java.util.Collection<java.lang.String>) strList47);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet51 = licenseSetFactory49.getLicenseFamilies(licenseFilter50);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = defaults29.getLicenses(licenseFilter50);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = licenseSetFactory21.getLicenses(licenseFilter50);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet54 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet56 = strSet54.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray57 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray58 = strSet56.toArray(licenseReaderArray57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic64 = org.apache.rat.Reporter.report(reportConfiguration63);
        org.apache.rat.utils.ReportingSet.Options options65 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration63.licenseDuplicateOption(options65);
        reportConfiguration60.familyDuplicateOption(options65);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet68 = strSet56.setDuplicateOption(options65);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory69 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet53, (java.util.Collection<java.lang.String>) strSet68);
        org.apache.rat.utils.Log.Level level70 = org.apache.rat.utils.Log.Level.DEBUG;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet71 = strSet68.setLogLevel(level70);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet74 = strSet68.subSet("META-DATA#LICENSEFAMILYNAME',VALUE ='GNU GENERAL PUBLIC LICENSE, VERSION 1 ']", "9ec38a8d-0e0f-4c31-8d12-d6138412a101");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey out of range");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(defaults29);
        org.junit.Assert.assertNotNull(iLicenseArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet51);
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(licenseReaderArray57);
        org.junit.Assert.assertNotNull(licenseReaderArray58);
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertNull(claimStatistic64);
        org.junit.Assert.assertTrue("'" + options65 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options65.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertTrue("'" + level70 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level70.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNotNull(strSet71);
    }

    @Test
    public void test03797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03797");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd("W3C Software Copyright");
        java.lang.String str4 = copyrightBuilder0.toString();
        java.lang.String str5 = copyrightBuilder0.toString();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Copyright Builder: s:null e:W3C Software Copyright o:null" + "'", str4, "Copyright Builder: s:null e:W3C Software Copyright o:null");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Copyright Builder: s:null e:W3C Software Copyright o:null" + "'", str5, "Copyright Builder: s:null e:W3C Software Copyright o:null");
    }

    @Test
    public void test03798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03798");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.report.IReportable iReportable13 = null;
        reportConfiguration1.setReportable(iReportable13);
        java.lang.String str15 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = strSet16.tailSet("hi!");
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter42);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier48 = reportConfiguration47.getOutput();
        reportConfiguration20.setOut(outputStreamIOSupplier48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier52 = reportConfiguration51.getOutput();
        reportConfiguration20.setOut(outputStreamIOSupplier52);
        boolean boolean54 = strSet16.equals((java.lang.Object) outputStreamIOSupplier52);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet16);
        int int56 = strSet16.size();
        org.apache.rat.utils.DefaultLog defaultLog57 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder58 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder60 = builder58.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher64 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state65 = copyrightMatcher64.finalizeState();
        org.apache.rat.license.ILicense.Builder builder66 = builder60.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher64);
        org.apache.rat.license.ILicense.Builder builder68 = builder66.setLicenseFamilyCategory("");
        defaultLog57.error((java.lang.Object) builder68);
        org.apache.rat.utils.Log.Level level70 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog57.log(level70, "JAVA");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet73 = strSet16.setLog((org.apache.rat.utils.Log) defaultLog57);
        boolean boolean75 = strSet16.addIfNotPresent("5fec021b-b12e-48c3-a002-3eea7a06339a");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet77 = strSet16.headSet("archive null");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet79 = strSet16.tailSet("NotBuilder: MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier48);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(defaultLog57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + state65 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state65.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + level70 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level70.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(strSet79);
    }

    @Test
    public void test03799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03799");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet0 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.policy.DefaultPolicy defaultPolicy1 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet0);
        org.apache.rat.policy.DefaultPolicy defaultPolicy2 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet0);
        org.apache.rat.api.Document document3 = null;
        defaultPolicy2.analyse(document3);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense5 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense5.setLicenseFamilyName("hi!");
        java.lang.String str8 = fullTextMatchingLicense5.getLicenseFamilyCategory();
        java.lang.String str9 = fullTextMatchingLicense5.getLicenseFamilyName();
        fullTextMatchingLicense5.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense5.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily14 = fullTextMatchingLicense5.getLicenseFamily();
        java.lang.String str15 = iLicenseFamily14.getFamilyName();
        java.lang.String str16 = iLicenseFamily14.getFamilyName();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder17 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str18 = iLicenseFamilyBuilder17.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder20 = iLicenseFamilyBuilder17.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder22 = iLicenseFamilyBuilder17.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder24 = iLicenseFamilyBuilder17.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str25 = iLicenseFamilyBuilder17.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder27 = iLicenseFamilyBuilder17.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily28 = iLicenseFamilyBuilder17.build();
        int int29 = iLicenseFamily14.compareTo(iLicenseFamily28);
        java.lang.String str30 = iLicenseFamily28.getFamilyName();
        defaultPolicy2.add(iLicenseFamily28);
        org.apache.rat.api.Document document32 = null;
        defaultPolicy2.analyse(document32);
        org.apache.rat.api.Document document34 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy2.reportLicenseApprovalClaim(document34, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilySet0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "SpdxBuilder: null" + "'", str15, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "SpdxBuilder: null" + "'", str16, "SpdxBuilder: null");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "MIT  " + "'", str25, "MIT  ");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(iLicenseFamily28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "8ecb8cce-06e4-400f-84d9-ad1cf6289fda" + "'", str30, "8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
    }

    @Test
    public void test03800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03800");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier16 = reportConfiguration15.getOutput();
        reportConfiguration15.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log19 = reportConfiguration15.getLog();
        org.apache.rat.utils.Log.Level level20 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration15.logFamilyCollisions(level20);
        defaultLog0.log(level20, "Copyright Builder: s:6481fb19-38f0-43f5-ab95-caf84a069ee1 e:null o:null");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder24 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str25 = regexBuilder24.toString();
        java.lang.String str26 = regexBuilder24.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder28 = regexBuilder24.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder30 = regexBuilder28.setExpr("AL   ");
        defaultLog0.error((java.lang.Object) regexBuilder30);
        boolean boolean32 = regexBuilder30.hasId();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder34 = regexBuilder30.setExpr("");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier16);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + level20 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level20.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "RegexBuilder: null" + "'", str25, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "RegexBuilder: null" + "'", str26, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder28);
        org.junit.Assert.assertNotNull(regexBuilder30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(regexBuilder34);
    }

    @Test
    public void test03801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03801");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        defaultLog0.info((java.lang.Object) "Modified BSD License");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender4 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "W3CD ");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic5.setNumApproved((int) (short) 10);
        claimStatistic5.setNumUnknown((int) '#');
        int int10 = claimStatistic5.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic5.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = null;
        claimStatistic5.setLicenseFileCodeMap(strMap12);
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null;
        claimStatistic5.setLicenseFileCodeMap(strMap14);
        defaultLog0.error((java.lang.Object) strMap14);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender17 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet23 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser24 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog0, (java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet22);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
    }

    @Test
    public void test03802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03802");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("ccda37f8-8aec-461c-a257-84923fc7818c");
    }

    @Test
    public void test03803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03803");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender2 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "2953e6cb-20a5-4dcf-a9f5-85c51cc8c635");
        org.apache.rat.utils.Log.Level level3 = defaultLog0.getLevel();
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier6 = reportConfiguration5.getOutput();
        reportConfiguration5.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log9 = reportConfiguration5.getLog();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        java.io.FilenameFilter filenameFilter12 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = reportConfiguration11.getLicenses(licenseFilter13);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders15 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration11.setAddLicenseHeaders(addLicenseHeaders15);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic19 = org.apache.rat.Reporter.report(reportConfiguration18);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter20);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter20);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        java.io.FilenameFilter filenameFilter25 = reportConfiguration24.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet27 = reportConfiguration24.getLicenses(licenseFilter26);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders28 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration24.setAddLicenseHeaders(addLicenseHeaders28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter33);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet36 = reportConfiguration11.getLicenseFamilies(licenseFilter33);
        org.apache.rat.license.ILicense[] iLicenseArray38 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet39 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet39, iLicenseArray38);
        java.lang.String[] strArray53 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory56 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet39, (java.util.Collection<java.lang.String>) strList54);
        org.apache.rat.license.ILicense iLicense57 = org.apache.rat.license.LicenseSetFactory.search("JAVA", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet39);
        reportConfiguration11.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet39);
        reportConfiguration5.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet39);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser60 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog0, (java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet39);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + level3 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level3.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier6);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders15 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders15.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet27);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders28 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders28.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet36);
        org.junit.Assert.assertNotNull(iLicenseArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(iLicense57);
    }

    @Test
    public void test03804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03804");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder5 = builder0.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.Defaults.Builder builder7 = builder0.remove("GNU General Public License, version 3");
        java.io.File file8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder9 = builder7.add(file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03805");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.license.ILicense.Builder builder11 = builder4.setNotes("http:");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher13 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("RegexBuilder: JAVA");
        org.apache.rat.license.ILicense.Builder builder14 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher13);
        org.apache.rat.analysis.IHeaderMatcher.State state15 = simpleTextMatcher13.currentState();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state15.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test03806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03806");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isAudio("MathcerRefBuilder: TextBuilder: SpdxBuilder: null");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03807");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.matchers.NotMatcher notMatcher2 = new org.apache.rat.analysis.matchers.NotMatcher("f629778c-c97c-4f52-a91a-ec6e154d2523", iHeaderMatcher1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: enclosed matcher may not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03808");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        org.apache.rat.utils.ReportingSet.Options options12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setDuplicateOption(options12);
        boolean boolean15 = strSet13.add("bd015714-405b-4304-9faa-36efad80e6e6 GEN  ");
        java.lang.String str16 = strSet13.last();
        java.lang.String str17 = strSet13.last();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet13.headSet("Copyright Builder: s:OASIS e:null o:null");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet22 = strSet19.subSet("5b0daab8-75ce-482b-bcb3-4741d11fddf7", "Copyright Builder: s:null e:null o:a1abad46-6a98-44f8-aa20-7839919a8270");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: toKey out of range");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str16, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str17, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(strSet19);
    }

    @Test
    public void test03809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03809");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender2 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        apacheV2LicenseAppender2.setForce(true);
        java.io.File file5 = null;
        // The following exception was thrown during execution in test generation
        try {
            apacheV2LicenseAppender2.append(file5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
    }

    @Test
    public void test03810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03810");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data#HeaderSample");
        boolean boolean3 = fullTextMatcher1.doMatch("Copyright Builder: s:null e:null o:The MIT License");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test03811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03811");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier3 = reportConfiguration1.getStyleSheet();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems5 = org.apache.rat.config.SourceCodeManagementSystems.CVS;
        java.lang.String str6 = sourceCodeManagementSystems5.getIgnoreFile();
        boolean boolean7 = sourceCodeManagementSystems5.hasIgnoreFile();
        java.util.List<java.lang.String> strList8 = sourceCodeManagementSystems5.getExclusions();
        java.io.FilenameFilter filenameFilter9 = org.apache.rat.Report.parseExclusions(strList8);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList8);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        reportConfiguration12.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level15 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration12.logLicenseCollisions(level15);
        reportConfiguration12.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter42);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration20.getInputFileFilter();
        reportConfiguration20.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable49 = null;
        reportConfiguration20.setReportable(iReportable49);
        org.apache.rat.Defaults.Builder builder52 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults53 = builder52.build();
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration55.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter64);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        java.io.FilenameFilter filenameFilter69 = reportConfiguration68.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter70 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet71 = reportConfiguration68.getLicenses(licenseFilter70);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders72 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration68.setAddLicenseHeaders(addLicenseHeaders72);
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic76 = org.apache.rat.Reporter.report(reportConfiguration75);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter77 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration75, licenseFilter77);
        org.apache.rat.Reporter.listLicenses(reportConfiguration68, licenseFilter77);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet80 = reportConfiguration55.getLicenseFamilies(licenseFilter77);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet81 = defaults53.getLicenses(licenseFilter77);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet82 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet81);
        org.apache.rat.license.ILicense iLicense83 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet81);
        reportConfiguration20.addLicense(iLicense83);
        java.lang.String str85 = iLicense83.derivedFrom();
        reportConfiguration12.addLicense(iLicense83);
        reportConfiguration1.addLicense(iLicense83);
        java.lang.String str88 = iLicense83.derivedFrom();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher89 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) iLicense83);
        java.lang.String str90 = iLicense83.derivedFrom();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(inputStreamIOSupplier3);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems5 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.CVS + "'", sourceCodeManagementSystems5.equals(org.apache.rat.config.SourceCodeManagementSystems.CVS));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + ".cvsignore" + "'", str6, ".cvsignore");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(filenameFilter9);
        org.junit.Assert.assertTrue("'" + level15 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level15.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(defaults53);
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter69);
        org.junit.Assert.assertTrue("'" + licenseFilter70 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter70.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet71);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders72 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders72.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic76);
        org.junit.Assert.assertTrue("'" + licenseFilter77 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter77.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet80);
        org.junit.Assert.assertNotNull(iLicenseSet81);
        org.junit.Assert.assertNotNull(iLicense83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "BSD-3" + "'", str85, "BSD-3");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "BSD-3" + "'", str88, "BSD-3");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "BSD-3" + "'", str90, "BSD-3");
    }

    @Test
    public void test03812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03812");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader5 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader6 = format0.matcherReader();
        matcherReader6.readMatcherBuilders();
        matcherReader6.readMatcherBuilders();
        matcherReader6.readMatcherBuilders();
        java.net.URL uRL10 = null;
        // The following exception was thrown during execution in test generation
        try {
            matcherReader6.addMatchers(uRL10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(matcherReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(licenseReader4);
        org.junit.Assert.assertNotNull(matcherReader5);
        org.junit.Assert.assertNotNull(matcherReader6);
    }

    @Test
    public void test03813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03813");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet15 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet15);
        boolean boolean17 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet15);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray20 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList21 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList21, iLicenseFamilyArray20);
        org.apache.rat.policy.DefaultPolicy defaultPolicy23 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList21);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet24 = defaultPolicy23.getApprovedLicenseNames();
        boolean boolean25 = strSet19.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet24);
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder27 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder29 = builder27.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher33 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state34 = copyrightMatcher33.finalizeState();
        org.apache.rat.license.ILicense.Builder builder35 = builder29.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher33);
        org.apache.rat.license.ILicense.Builder builder37 = builder35.setLicenseFamilyCategory("");
        defaultLog26.error((java.lang.Object) builder37);
        org.apache.rat.utils.Log.Level level39 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog26.log(level39, "JAVA");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic42.setNumApproved((int) (short) 10);
        claimStatistic42.setNumUnknown((int) '#');
        defaultLog26.error((java.lang.Object) '#');
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet48 = strSet19.setLog((org.apache.rat.utils.Log) defaultLog26);
        java.lang.String[] strArray54 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet55 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        boolean boolean58 = strSet55.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean60 = strSet55.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction61 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet62 = strSet55.setMsgFormat(strFunction61);
        boolean boolean63 = strSet55.isEmpty();
        boolean boolean65 = strSet55.addIfNotPresent("OASIS Open License");
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic68 = org.apache.rat.Reporter.report(reportConfiguration67);
        org.apache.rat.utils.Log log69 = null;
        org.apache.rat.ReportConfiguration reportConfiguration70 = new org.apache.rat.ReportConfiguration(log69);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic71 = org.apache.rat.Reporter.report(reportConfiguration70);
        org.apache.rat.utils.ReportingSet.Options options72 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration70.licenseDuplicateOption(options72);
        reportConfiguration67.familyDuplicateOption(options72);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier75 = reportConfiguration67.getWriter();
        org.apache.rat.utils.Log log76 = null;
        org.apache.rat.ReportConfiguration reportConfiguration77 = new org.apache.rat.ReportConfiguration(log76);
        reportConfiguration77.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level80 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration77.logFamilyCollisions(level80);
        reportConfiguration67.logFamilyCollisions(level80);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet83 = strSet55.setLogLevel(level80);
        defaultLog26.setLevel(level80);
        org.apache.rat.license.ILicense.Builder builder85 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder87 = builder85.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher89 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder90 = builder85.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher89);
        org.apache.rat.license.ILicense.Builder builder92 = builder85.setDerivedFrom("http://org/apache/rat/meta-data#HeaderSample");
        java.lang.Throwable throwable93 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog26.debug((java.lang.Object) "http://org/apache/rat/meta-data#HeaderSample", throwable93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(iLicenseFamilySet15);
        org.junit.Assert.assertNull(iLicenseFamily16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state34.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + level39 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level39.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(claimStatistic68);
        org.junit.Assert.assertNull(claimStatistic71);
        org.junit.Assert.assertTrue("'" + options72 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options72.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier75);
        org.junit.Assert.assertTrue("'" + level80 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level80.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test03814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03814");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("binary");
        simpleTextMatcher1.reset();
        java.lang.String str3 = simpleTextMatcher1.getId();
        boolean boolean5 = simpleTextMatcher1.doMatch("6486879f-fc81-4b57-aec7-c4c77d540c30");
        boolean boolean7 = simpleTextMatcher1.doMatch("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        boolean boolean9 = simpleTextMatcher1.doMatch("Copyright Builder: s:null e:3c840dc2-bef0-42b5-b26c-35a568d53a24 o:null");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "a7913c10-8476-4fa4-ad98-2c9ab822f086" + "'", str3, "a7913c10-8476-4fa4-ad98-2c9ab822f086");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test03815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03815");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter11 = xmlWriter1.content((java.lang.CharSequence) "4f1be289-aaa7-4730-8076-690bc1f926c5");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03816");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = fullTextMatchingLicense0.getLicenseFamily();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet10 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily11 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily9, iLicenseFamilySet10);
        org.apache.rat.utils.DefaultLog defaultLog12 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder13 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder15 = builder13.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher19 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state20 = copyrightMatcher19.finalizeState();
        org.apache.rat.license.ILicense.Builder builder21 = builder15.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher19);
        org.apache.rat.license.ILicense.Builder builder23 = builder21.setLicenseFamilyCategory("");
        defaultLog12.error((java.lang.Object) builder23);
        org.apache.rat.utils.Log.Level level25 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog12.log(level25, "JAVA");
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.utils.ReportingSet.Options options34 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration32.licenseDuplicateOption(options34);
        reportConfiguration29.familyDuplicateOption(options34);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier37 = reportConfiguration29.getWriter();
        boolean boolean38 = reportConfiguration29.isAddingLicensesForced();
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        reportConfiguration40.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level43 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration40.logFamilyCollisions(level43);
        reportConfiguration29.logLicenseCollisions(level43);
        defaultLog12.log(level43, "http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        reportConfiguration49.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration49.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder54 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults55 = builder54.build();
        reportConfiguration49.setFrom(defaults55);
        boolean boolean57 = reportConfiguration49.isAddingLicenses();
        defaultLog12.warn((java.lang.Object) reportConfiguration49);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier61 = reportConfiguration60.getOutput();
        reportConfiguration60.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log64 = reportConfiguration60.getLog();
        org.apache.rat.Defaults.Builder builder65 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder66 = builder65.noDefault();
        org.apache.rat.Defaults defaults67 = builder66.build();
        reportConfiguration60.setFrom(defaults67);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder69 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str70 = iLicenseFamilyBuilder69.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder72 = iLicenseFamilyBuilder69.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder74 = iLicenseFamilyBuilder69.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder76 = iLicenseFamilyBuilder69.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str77 = iLicenseFamilyBuilder69.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder79 = iLicenseFamilyBuilder69.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily80 = iLicenseFamilyBuilder69.build();
        reportConfiguration60.addApprovedLicenseCategory(iLicenseFamily80);
        reportConfiguration49.addApprovedLicenseCategory(iLicenseFamily80);
        int int83 = iLicenseFamily9.compareTo(iLicenseFamily80);
        java.lang.String str84 = iLicenseFamily80.getFamilyCategory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
        org.junit.Assert.assertNotNull(iLicenseFamilySet10);
        org.junit.Assert.assertNull(iLicenseFamily11);
        org.junit.Assert.assertNotNull(defaultLog12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state20.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + level25 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level25.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertTrue("'" + options34 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options34.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + level43 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level43.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(defaults55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier61);
        org.junit.Assert.assertNull(log64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(defaults67);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "MIT  " + "'", str77, "MIT  ");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(iLicenseFamily80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 7 + "'", int83 == 7);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "MIT  " + "'", str84, "MIT  ");
    }

    @Test
    public void test03817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03817");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.license.ILicenseFamily iLicenseFamily6 = null;
        reportConfiguration2.addFamily(iLicenseFamily6);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter8 = reportConfiguration2.getDirectoryFilter();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        java.io.FilenameFilter filenameFilter11 = reportConfiguration10.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet13 = reportConfiguration10.getLicenses(licenseFilter12);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders14 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration10.setAddLicenseHeaders(addLicenseHeaders14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = org.apache.rat.Reporter.report(reportConfiguration17);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter19);
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter19);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter32);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier38 = reportConfiguration37.getOutput();
        reportConfiguration10.setOut(outputStreamIOSupplier38);
        org.apache.rat.utils.Log.Level level40 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration10.logLicenseCollisions(level40);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter42 = reportConfiguration10.getDirectoryFilter();
        java.nio.file.Path path43 = null;
        boolean boolean44 = iOFileFilter42.matches(path43);
        java.nio.file.Path path45 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes46 = null;
        java.nio.file.FileVisitResult fileVisitResult47 = iOFileFilter42.accept(path45, basicFileAttributes46);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter48 = iOFileFilter8.or(iOFileFilter42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker49 = new org.apache.rat.walker.DirectoryWalker(file0, iOFileFilter48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertNotNull(iOFileFilter8);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet13);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders14 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders14.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier38);
        org.junit.Assert.assertTrue("'" + level40 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level40.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult47 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult47.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter48);
    }

    @Test
    public void test03818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03818");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = null;
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        java.lang.String[] strArray56 = new java.lang.String[] { "http://org/apache/rat/meta-data", "GNU General Public License, version 2", "Modified BSD License", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "The MIT License", "OASIS", "?????", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "6486879f-fc81-4b57-aec7-c4c77d540c30", "MANIFEST.MF", "?????", "GEN  ", "GPL3 ", "http://org/apache/rat/meta-data#HeaderCategory", "DOJO ", "true", "GPL2 ", "?????", "Apache License Version 2.0", "OASIS", "W3CD ", "OASIS", "?????", "OASIS Open License", "", "standard", "GPL2 ", "GEN  ", "W3CD ", "TMF  ", ".cvsignore", "Copyright Builder: s:null e:null o:null", "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 2", "W3CD ", ".cvsignore", "Apache License Version 2.0", "GEN  ", "W3C Software Copyright", "Modified BSD License", "GPL2 ", "JAVA" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        reportConfiguration12.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList57);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier62 = reportConfiguration61.getOutput();
        reportConfiguration12.setOut(outputStreamIOSupplier62);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.RatReport ratReport64 = org.apache.rat.report.xml.XmlReportFactory.createStandardReport((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1, claimStatistic10, reportConfiguration12);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier62);
    }

    @Test
    public void test03819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03819");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = allBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = allBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = allBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = iHeaderMatcher4.matches("MathcerRefBuilder: http:");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test03820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03820");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        java.lang.String[] strArray51 = new java.lang.String[] { "274c6a15-09f6-4bfd-ac53-1827770eb507", "true|false|forced", "GEN  ", "Apache License Version 2.0", "OASIS", "Apache License Version 2.0", "hi!", "http://org/apache/rat/meta-data", "standard", "", "GEN  ", "W3C Document Copyright", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "Copyright Builder: s:null e:null o:null", "MANIFEST.MF", "Modified BSD License", "true|false|forced", "t true", "GPL2 ", "Modified BSD License", "hi!", "MANIFEST.MF", "GPL2 ", "W3C Software Copyright", "W3C Software Copyright", "021187d7-27c2-4fd9-bc74-8cc00413ee52", "Apache License Version 2.0", "W3C Software Copyright", ".cvsignore", "?????", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 1", "GNU General Public License, version 1", "TMF  ", "6486879f-fc81-4b57-aec7-c4c77d540c30", "org/apache/rat/plain-rat.xsl", "GNU General Public License, version 2", "?????" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList52);
        reportConfiguration1.setCopyrightMessage("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.io.FilenameFilter filenameFilter57 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.Defaults.Builder builder58 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder59 = builder58.noDefault();
        org.apache.rat.Defaults defaults60 = builder59.build();
        reportConfiguration1.setFrom(defaults60);
        reportConfiguration1.removeApprovedLicenseCategory("Copyright Builder: s:org/a e:standard o:W3C  ");
        java.io.FilenameFilter filenameFilter64 = null;
        reportConfiguration1.setInputFileFilter(filenameFilter64);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(filenameFilter57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(defaults60);
    }

    @Test
    public void test03821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03821");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter3 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic6 = org.apache.rat.Reporter.report(reportConfiguration5);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier7 = reportConfiguration5.getOutput();
        boolean boolean8 = reportConfiguration5.isAddingLicensesForced();
        org.apache.rat.license.ILicense[] iLicenseArray9 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet10 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10, iLicenseArray9);
        java.lang.String[] strArray24 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory27 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet10, (java.util.Collection<java.lang.String>) strList25);
        reportConfiguration5.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10);
        java.lang.Class<?> wildcardClass30 = iLicenseSet10.getClass();
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNotNull(iOFileFilter3);
        org.junit.Assert.assertNull(claimStatistic6);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(iLicenseArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test03822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03822");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense6 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense6.setLicenseFamilyName("hi!");
        java.lang.String str9 = fullTextMatchingLicense6.getLicenseFamilyCategory();
        java.lang.String str10 = fullTextMatchingLicense6.getLicenseFamilyName();
        fullTextMatchingLicense6.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense6.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily15 = fullTextMatchingLicense6.getLicenseFamily();
        reportConfiguration1.addFamily(iLicenseFamily15);
        java.lang.String str17 = iLicenseFamily15.getFamilyName();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense18 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense18.setLicenseFamilyName("hi!");
        fullTextMatchingLicense18.setLicenseFamilyCategory("binary");
        org.apache.rat.license.ILicenseFamily iLicenseFamily23 = fullTextMatchingLicense18.getLicenseFamily();
        int int24 = iLicenseFamily15.compareTo(iLicenseFamily23);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily26 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily15, iLicenseFamilySet25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "SpdxBuilder: null" + "'", str17, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(iLicenseFamily23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-14) + "'", int24 == (-14));
    }

    @Test
    public void test03823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03823");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher16 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher16.reset();
        org.apache.rat.license.ILicense.Builder builder18 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher16);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str20 = spdxBuilder19.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder22 = spdxBuilder19.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder23 = builder18.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder19);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher24 = spdxBuilder19.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder26 = spdxBuilder19.setId("ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        java.lang.String str27 = spdxBuilder19.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder29 = spdxBuilder19.setName("SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(spdxBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "SpdxBuilder: null" + "'", str20, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(iHeaderMatcher24);
        org.junit.Assert.assertNotNull(abstractBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str27, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(spdxBuilder29);
    }

    @Test
    public void test03824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03824");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.license.ILicense[] iLicenseArray3 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet4 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet4, iLicenseArray3);
        java.lang.String[] strArray18 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory21 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4, (java.util.Collection<java.lang.String>) strList19);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = licenseSetFactory21.getLicenses(licenseFilter45);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.utils.ReportingSet.Options options58 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration56.licenseDuplicateOption(options58);
        reportConfiguration53.familyDuplicateOption(options58);
        reportConfiguration1.familyDuplicateOption(options58);
        java.util.SortedSet<java.lang.String> strSet62 = reportConfiguration1.getApprovedLicenseCategories();
        reportConfiguration1.addApprovedLicenseCategory("httporgapacheratmetadataLicenseFamilyName");
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(iLicenseArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + options58 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options58.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet62);
    }

    @Test
    public void test03825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03825");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier27 = reportConfiguration1.getOutput();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = reportConfiguration43.getLicenses(licenseFilter45);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter52);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier58 = reportConfiguration57.getOutput();
        reportConfiguration30.setOut(outputStreamIOSupplier58);
        org.apache.rat.utils.Log.Level level60 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration30.logLicenseCollisions(level60);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter62 = reportConfiguration30.getDirectoryFilter();
        java.nio.file.Path path63 = null;
        boolean boolean64 = iOFileFilter62.matches(path63);
        java.nio.file.Path path65 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes66 = null;
        java.nio.file.FileVisitResult fileVisitResult67 = iOFileFilter62.accept(path65, basicFileAttributes66);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter68 = iOFileFilter62.negate();
        reportConfiguration1.setDirectoryFilter(iOFileFilter62);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier70 = reportConfiguration1.getWriter();
        java.util.function.Consumer<java.lang.String> strConsumer71 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.validate(strConsumer71);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: Reportable may not be null");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier27);
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier58);
        org.junit.Assert.assertTrue("'" + level60 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level60.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult67 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult67.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter68);
        org.junit.Assert.assertNotNull(printWriterIOSupplier70);
    }

    @Test
    public void test03826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03826");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        java.lang.String str11 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily iLicenseFamily12 = iLicenseFamilyBuilder0.build();
        org.apache.rat.license.ILicenseFamily.Builder builder14 = iLicenseFamilyBuilder0.setLicenseFamilyName("TextBuilder: SpdxBuilder: null");
        java.lang.String str15 = iLicenseFamilyBuilder0.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MIT  " + "'", str8, "MIT  ");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MIT  " + "'", str11, "MIT  ");
        org.junit.Assert.assertNotNull(iLicenseFamily12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MIT  " + "'", str15, "MIT  ");
    }

    @Test
    public void test03827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03827");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet6.spliterator();
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        defaultLog26.setLevel(level31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration48.getLicenses(licenseFilter50);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders52 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration48.setAddLicenseHeaders(addLicenseHeaders52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter57);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier63 = reportConfiguration62.getOutput();
        reportConfiguration35.setOut(outputStreamIOSupplier63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.utils.ReportingSet.Options options71 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration69.licenseDuplicateOption(options71);
        reportConfiguration66.familyDuplicateOption(options71);
        reportConfiguration35.licenseDuplicateOption(options71);
        reportConfiguration35.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logLicenseCollisions(level81);
        reportConfiguration35.logLicenseCollisions(level81);
        defaultLog26.log(level81, "GNU General Public License, version 1");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog26);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet88 = strSet6.tailSet("Copyright Builder: s:null e:W3C Software Copyright o:null");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction89 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet90 = strSet6.setMsgFormat(strFunction89);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet93 = strSet90.subSet("8f82a952-5bfd-446b-ac79-15beef5b3f17", "Datum [ name ='http://org/apache/rat/meta-data#FileCategory',value ='archive ']");
        org.apache.rat.utils.ReportingSet.Options options94 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet95 = strSet93.setDuplicateOption(options94);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet97 = strSet95.headSet("http://org/apache/rat/meta-data#HeaderCategory");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: toKey out of range");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders52 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders52.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier63);
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + options71 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options71.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNotNull(strSet95);
    }

    @Test
    public void test03828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03828");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.ReportingSet.Options options52 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options52);
        reportConfiguration47.familyDuplicateOption(options52);
        reportConfiguration16.licenseDuplicateOption(options52);
        reportConfiguration16.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration16.logLicenseCollisions(level62);
        defaultLog14.setLevel(level62);
        defaultLog14.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog14);
        org.apache.rat.utils.DefaultLog defaultLog69 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logFamilyCollisions(level74);
        defaultLog69.setLevel(level74);
        defaultLog14.debug((java.lang.Object) level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet13.setLogLevel(level74);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        reportConfiguration80.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level83 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration80.logFamilyCollisions(level83);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet85 = strSet78.setLogLevel(level83);
        java.util.Spliterator<java.lang.String> strSpliterator86 = strSet78.spliterator();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet88 = strSet78.headSet("274c6a15-09f6-4bfd-ac53-1827770eb507");
        java.util.stream.Stream<java.lang.String> strStream89 = strSet78.stream();
        strStream89.close();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + options52 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options52.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog69);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + level83 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level83.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strSpliterator86);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(strStream89);
    }

    @Test
    public void test03829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03829");
        org.apache.commons.cli.CommandLine commandLine1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.ReportConfiguration reportConfiguration2 = org.apache.rat.Report.createConfiguration("398ffede-0433-4a77-8c45-5224348d9444", commandLine1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03830");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.not();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap5 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder2.setMatchers(strMap5);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder2.setMatchers(strMap7);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap9 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder2.setMatchers(strMap9);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder12 = matcherRefBuilder2.setRefId("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        java.lang.String str13 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder14 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder2);
        java.lang.String str15 = notBuilder0.toString();
        java.lang.String str16 = notBuilder0.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList17 = notBuilder0.getChildren();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(notBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
        org.junit.Assert.assertNotNull(matcherRefBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str13, "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertNotNull(abstractBuilder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NotBuilder: MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str15, "NotBuilder: MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NotBuilder: MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str16, "NotBuilder: MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
    }

    @Test
    public void test03831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03831");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03832");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter1 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.fromText("5fd2c009-d426-4f2e-aa5f-fa818707c48c");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.rat.license.LicenseSetFactory.LicenseFilter.5fd2c009-d426-4f2e-aa5f-fa818707c48c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03833");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter14 = xmlWriter1.openElement((java.lang.CharSequence) "4dbea497-3ef1-472e-aaad-e5481abb7e67");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: '4dbea497-3ef1-472e-aaad-e5481abb7e67' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03834");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str3 = spdxBuilder2.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder5 = spdxBuilder2.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = spdxBuilder2.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder11 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder2);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder13 = spdxBuilder2.setName("15ff671b-67b8-4791-9e1e-208f319fb7e2");
        java.lang.String str14 = spdxBuilder13.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "SpdxBuilder: null" + "'", str3, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(abstractBuilder11);
        org.junit.Assert.assertNotNull(spdxBuilder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "SpdxBuilder: 15ff671b-67b8-4791-9e1e-208f319fb7e2" + "'", str14, "SpdxBuilder: 15ff671b-67b8-4791-9e1e-208f319fb7e2");
    }

    @Test
    public void test03835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03835");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter7 = xmlWriter1.content((java.lang.CharSequence) "B2EAFDEF-0477-406A-8B6D-8D332A86679E");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03836");
        org.apache.rat.license.ILicense[] iLicenseArray1 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet2 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet2, iLicenseArray1);
        java.lang.String[] strArray16 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory19 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2, (java.util.Collection<java.lang.String>) strList17);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet21 = licenseSetFactory19.getLicenseFamilies(licenseFilter20);
        org.apache.rat.license.ILicense[] iLicenseArray22 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet23 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet23, iLicenseArray22);
        java.lang.String[] strArray37 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory40 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet23, (java.util.Collection<java.lang.String>) strList38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration55.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter64);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet68 = licenseSetFactory40.getLicenses(licenseFilter64);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = licenseSetFactory19.getLicenseFamilies(licenseFilter64);
        org.apache.rat.policy.DefaultPolicy defaultPolicy70 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet69);
        org.apache.rat.license.ILicenseFamily iLicenseFamily71 = org.apache.rat.license.LicenseFamilySetFactory.search("The MIT License", iLicenseFamilySet69);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet72 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray73 = strSet72.toArray();
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic76 = org.apache.rat.Reporter.report(reportConfiguration75);
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic79 = org.apache.rat.Reporter.report(reportConfiguration78);
        org.apache.rat.utils.ReportingSet.Options options80 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration78.licenseDuplicateOption(options80);
        reportConfiguration75.familyDuplicateOption(options80);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier83 = reportConfiguration75.getWriter();
        boolean boolean84 = reportConfiguration75.isAddingLicensesForced();
        org.apache.rat.utils.Log log85 = null;
        org.apache.rat.ReportConfiguration reportConfiguration86 = new org.apache.rat.ReportConfiguration(log85);
        reportConfiguration86.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level89 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration86.logFamilyCollisions(level89);
        reportConfiguration75.logLicenseCollisions(level89);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet92 = strSet72.setLogLevel(level89);
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory93 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet69, (java.util.Collection<java.lang.String>) strSet92);
        strSet92.clear();
        org.apache.rat.utils.ReportingSet.Options options95 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet96 = strSet92.setDuplicateOption(options95);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet99 = strSet92.subSet("ab913e1f-22c2-4747-9d4b-1a549cb028f0", "i indeterminent");
        org.junit.Assert.assertNotNull(iLicenseArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet21);
        org.junit.Assert.assertNotNull(iLicenseArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet68);
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNull(iLicenseFamily71);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertNull(claimStatistic76);
        org.junit.Assert.assertNull(claimStatistic79);
        org.junit.Assert.assertTrue("'" + options80 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options80.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + level89 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level89.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertNotNull(strSet99);
    }

    @Test
    public void test03837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03837");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder0.remove("GNU General Public License, version 2");
        java.net.URL uRL7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder8 = builder0.add(uRL7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03838");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.api.Document document13 = null;
        // The following exception was thrown during execution in test generation
        try {
            simpleXmlClaimReporter12.report(document13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03839");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        reportConfiguration1.addApprovedLicenseCategory("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet10 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray11 = strSet10.toArray();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic14 = org.apache.rat.Reporter.report(reportConfiguration13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.utils.ReportingSet.Options options18 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration16.licenseDuplicateOption(options18);
        reportConfiguration13.familyDuplicateOption(options18);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier21 = reportConfiguration13.getWriter();
        boolean boolean22 = reportConfiguration13.isAddingLicensesForced();
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        reportConfiguration24.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level27 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration24.logFamilyCollisions(level27);
        reportConfiguration13.logLicenseCollisions(level27);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet30 = strSet10.setLogLevel(level27);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet30);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNull(claimStatistic14);
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + options18 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options18.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + level27 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level27.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet30);
    }

    @Test
    public void test03840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03840");
        java.util.regex.Pattern pattern0 = null;
        org.apache.rat.header.HeaderBean headerBean2 = new org.apache.rat.header.HeaderBean(pattern0, true);
        headerBean2.setMatch(true);
        boolean boolean5 = headerBean2.isMatch();
        headerBean2.setMatch(false);
        java.util.regex.Pattern pattern8 = headerBean2.getHeaderPattern();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(pattern8);
    }

    @Test
    public void test03841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03841");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        reportConfiguration2.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level5 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration2.logFamilyCollisions(level5);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter7 = reportConfiguration2.getDirectoryFilter();
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier11 = reportConfiguration9.getStyleSheet();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration13.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet16 = reportConfiguration13.getLicenses(licenseFilter15);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders17 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration13.setAddLicenseHeaders(addLicenseHeaders17);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic21 = org.apache.rat.Reporter.report(reportConfiguration20);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter22);
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter22);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration26.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet29 = reportConfiguration26.getLicenses(licenseFilter28);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders30 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration26.setAddLicenseHeaders(addLicenseHeaders30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter35);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier41 = reportConfiguration40.getOutput();
        reportConfiguration13.setOut(outputStreamIOSupplier41);
        org.apache.rat.utils.Log.Level level43 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration13.logLicenseCollisions(level43);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter45 = reportConfiguration13.getDirectoryFilter();
        java.nio.file.Path path46 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes47 = null;
        java.nio.file.FileVisitResult fileVisitResult48 = iOFileFilter45.accept(path46, basicFileAttributes47);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter49 = iOFileFilter45.negate();
        java.nio.file.Path path50 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes51 = null;
        java.nio.file.FileVisitResult fileVisitResult52 = iOFileFilter45.accept(path50, basicFileAttributes51);
        reportConfiguration9.addDirectoryFilter(iOFileFilter45);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter54 = iOFileFilter7.and(iOFileFilter45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker55 = new org.apache.rat.walker.DirectoryWalker(file0, iOFileFilter45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + level5 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level5.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter7);
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertNull(inputStreamIOSupplier11);
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet16);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders17 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders17.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet29);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders30 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders30.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier41);
        org.junit.Assert.assertTrue("'" + level43 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level43.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter45);
        org.junit.Assert.assertTrue("'" + fileVisitResult48 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult48.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter49);
        org.junit.Assert.assertTrue("'" + fileVisitResult52 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult52.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter54);
    }

    @Test
    public void test03842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03842");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet0 = null;
        java.lang.String[] strArray6 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet7 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        boolean boolean10 = strSet7.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor11 = strSet7.iterator();
        java.lang.Object[] objArray12 = strSet7.toArray();
        java.lang.String[] strArray18 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        boolean boolean22 = strSet19.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet23 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean24 = strSet19.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet23);
        boolean boolean25 = strSet7.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet23);
        java.util.Spliterator<java.lang.String> strSpliterator26 = strSet7.spliterator();
        org.apache.rat.utils.DefaultLog defaultLog27 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        reportConfiguration29.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level32 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration29.logFamilyCollisions(level32);
        defaultLog27.setLevel(level32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = reportConfiguration49.getLicenses(licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter58);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier64 = reportConfiguration63.getOutput();
        reportConfiguration36.setOut(outputStreamIOSupplier64);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic68 = org.apache.rat.Reporter.report(reportConfiguration67);
        org.apache.rat.utils.Log log69 = null;
        org.apache.rat.ReportConfiguration reportConfiguration70 = new org.apache.rat.ReportConfiguration(log69);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic71 = org.apache.rat.Reporter.report(reportConfiguration70);
        org.apache.rat.utils.ReportingSet.Options options72 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration70.licenseDuplicateOption(options72);
        reportConfiguration67.familyDuplicateOption(options72);
        reportConfiguration36.licenseDuplicateOption(options72);
        reportConfiguration36.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        reportConfiguration79.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level82 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration79.logLicenseCollisions(level82);
        reportConfiguration36.logLicenseCollisions(level82);
        defaultLog27.log(level82, "GNU General Public License, version 1");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet87 = strSet7.setLog((org.apache.rat.utils.Log) defaultLog27);
        boolean boolean89 = strSet7.add("Apache License Version 2.0");
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory90 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet0, (java.util.Collection<java.lang.String>) strSet7);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedSet<java.lang.String> strSet92 = licenseFamilySetFactory90.getFamilyIds(licenseFilter91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strSpliterator26);
        org.junit.Assert.assertNotNull(defaultLog27);
        org.junit.Assert.assertTrue("'" + level32 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level32.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier64);
        org.junit.Assert.assertNull(claimStatistic68);
        org.junit.Assert.assertNull(claimStatistic71);
        org.junit.Assert.assertTrue("'" + options72 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options72.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level82 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level82.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test03843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03843");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName");
    }

    @Test
    public void test03844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03844");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.ReportingSet.Options options52 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options52);
        reportConfiguration47.familyDuplicateOption(options52);
        reportConfiguration16.licenseDuplicateOption(options52);
        reportConfiguration16.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration16.logLicenseCollisions(level62);
        defaultLog14.setLevel(level62);
        defaultLog14.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog14);
        org.apache.rat.utils.DefaultLog defaultLog69 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logFamilyCollisions(level74);
        defaultLog69.setLevel(level74);
        defaultLog14.debug((java.lang.Object) level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet13.setLogLevel(level74);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        reportConfiguration80.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level83 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration80.logFamilyCollisions(level83);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet85 = strSet78.setLogLevel(level83);
        java.util.Spliterator<java.lang.String> strSpliterator86 = strSet78.spliterator();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet88 = strSet78.headSet("274c6a15-09f6-4bfd-ac53-1827770eb507");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet91 = strSet78.subSet("f6c7d16f-90d4-435d-b9d9-a9f6c196d56a", "httporgapacheratmetadataLicenseFamilyName");
        boolean boolean93 = strSet78.addIfNotPresent("f false");
        java.util.Iterator<java.lang.String> strItor94 = strSet78.iterator();
        java.lang.String str95 = strSet78.last();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + options52 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options52.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog69);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + level83 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level83.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strSpliterator86);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(strItor94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str95, "http://org/apache/rat/meta-data#LicenseFamilyName");
    }

    @Test
    public void test03845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03845");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        org.apache.rat.utils.DefaultLog defaultLog11 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder12 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder14 = builder12.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher18 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state19 = copyrightMatcher18.finalizeState();
        org.apache.rat.license.ILicense.Builder builder20 = builder14.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher18);
        org.apache.rat.license.ILicense.Builder builder22 = builder20.setLicenseFamilyCategory("");
        defaultLog11.error((java.lang.Object) builder22);
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog11);
        org.apache.rat.utils.DefaultLog defaultLog25 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder26 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder28 = builder26.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher32 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state33 = copyrightMatcher32.finalizeState();
        org.apache.rat.license.ILicense.Builder builder34 = builder28.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher32);
        org.apache.rat.license.ILicense.Builder builder36 = builder34.setLicenseFamilyCategory("");
        defaultLog25.error((java.lang.Object) builder36);
        org.apache.rat.utils.Log.Level level38 = defaultLog25.getLevel();
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        reportConfiguration40.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level43 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration40.logLicenseCollisions(level43);
        defaultLog25.log(level43, "AnyBuilder:");
        defaultLog11.info((java.lang.Object) defaultLog25);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet48 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog11);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender49 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog11);
        java.io.File file50 = null;
        // The following exception was thrown during execution in test generation
        try {
            apacheV2LicenseAppender49.append(file50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(defaultLog11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state19.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(defaultLog25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state33.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + level38 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level38.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level43 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level43.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet48);
    }

    @Test
    public void test03846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03846");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender56 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "8ecb8cce06e4400f84d9ad1cf6289fda");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender57 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder58 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder60 = copyrightBuilder58.setStart("OASIS");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder62 = copyrightBuilder58.setOwner("Copyright Builder: s:null e:274c6a15-09f6-4bfd-ac53-1827770eb507 o:null");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder64 = copyrightBuilder58.setStart("W3CD ");
        java.lang.String str65 = copyrightBuilder64.toString();
        defaultLog0.debug((java.lang.Object) str65);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense67 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense67.setLicenseFamilyName("hi!");
        java.lang.String str70 = fullTextMatchingLicense67.getLicenseFamilyCategory();
        java.lang.String str71 = fullTextMatchingLicense67.getLicenseFamilyName();
        fullTextMatchingLicense67.setFullText("AnyBuilder:\nAllBuilder:");
        java.lang.String str74 = fullTextMatchingLicense67.getLicenseFamilyName();
        java.lang.String str75 = fullTextMatchingLicense67.getLicenseFamilyCategory();
        java.lang.String str76 = fullTextMatchingLicense67.getNotes();
        java.lang.Throwable throwable77 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.info((java.lang.Object) fullTextMatchingLicense67, throwable77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(copyrightBuilder58);
        org.junit.Assert.assertNotNull(copyrightBuilder60);
        org.junit.Assert.assertNotNull(copyrightBuilder62);
        org.junit.Assert.assertNotNull(copyrightBuilder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Copyright Builder: s:W3CD  e:null o:Copyright Builder: s:null e:274c6a15-09f6-4bfd-ac53-1827770eb507 o:null" + "'", str65, "Copyright Builder: s:W3CD  e:null o:Copyright Builder: s:null e:274c6a15-09f6-4bfd-ac53-1827770eb507 o:null");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test03847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03847");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.license.ILicenseFamily iLicenseFamily7 = null;
        reportConfiguration3.addFamily(iLicenseFamily7);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter9 = reportConfiguration3.getDirectoryFilter();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        java.io.FilenameFilter filenameFilter12 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = reportConfiguration11.getLicenses(licenseFilter13);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders15 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration11.setAddLicenseHeaders(addLicenseHeaders15);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic19 = org.apache.rat.Reporter.report(reportConfiguration18);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter20);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter20);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        java.io.FilenameFilter filenameFilter25 = reportConfiguration24.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet27 = reportConfiguration24.getLicenses(licenseFilter26);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders28 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration24.setAddLicenseHeaders(addLicenseHeaders28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter33);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier39 = reportConfiguration38.getOutput();
        reportConfiguration11.setOut(outputStreamIOSupplier39);
        org.apache.rat.utils.Log.Level level41 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration11.logLicenseCollisions(level41);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter43 = reportConfiguration11.getDirectoryFilter();
        java.nio.file.Path path44 = null;
        boolean boolean45 = iOFileFilter43.matches(path44);
        java.nio.file.Path path46 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes47 = null;
        java.nio.file.FileVisitResult fileVisitResult48 = iOFileFilter43.accept(path46, basicFileAttributes47);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter49 = iOFileFilter9.or(iOFileFilter43);
        java.nio.file.Path path50 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes51 = null;
        java.nio.file.FileVisitResult fileVisitResult52 = iOFileFilter49.accept(path50, basicFileAttributes51);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter53 = iOFileFilter49.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter54 = iOFileFilter53.negate();
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        java.io.FilenameFilter filenameFilter57 = reportConfiguration56.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet59 = reportConfiguration56.getLicenses(licenseFilter58);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders60 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration56.setAddLicenseHeaders(addLicenseHeaders60);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic64 = org.apache.rat.Reporter.report(reportConfiguration63);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter65 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration63, licenseFilter65);
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter65);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        java.io.FilenameFilter filenameFilter70 = reportConfiguration69.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter71 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet72 = reportConfiguration69.getLicenses(licenseFilter71);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders73 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration69.setAddLicenseHeaders(addLicenseHeaders73);
        org.apache.rat.utils.Log log75 = null;
        org.apache.rat.ReportConfiguration reportConfiguration76 = new org.apache.rat.ReportConfiguration(log75);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic77 = org.apache.rat.Reporter.report(reportConfiguration76);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter78 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration76, licenseFilter78);
        org.apache.rat.Reporter.listLicenses(reportConfiguration69, licenseFilter78);
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter78);
        org.apache.rat.utils.Log log82 = null;
        org.apache.rat.ReportConfiguration reportConfiguration83 = new org.apache.rat.ReportConfiguration(log82);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier84 = reportConfiguration83.getOutput();
        reportConfiguration56.setOut(outputStreamIOSupplier84);
        org.apache.rat.utils.Log.Level level86 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration56.logLicenseCollisions(level86);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter88 = reportConfiguration56.getDirectoryFilter();
        java.nio.file.Path path89 = null;
        boolean boolean90 = iOFileFilter88.matches(path89);
        java.nio.file.Path path91 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes92 = null;
        java.nio.file.FileVisitResult fileVisitResult93 = iOFileFilter88.accept(path91, basicFileAttributes92);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter94 = iOFileFilter88.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter95 = iOFileFilter53.or(iOFileFilter88);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker96 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertNotNull(iOFileFilter9);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders15 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders15.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet27);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders28 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders28.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier39);
        org.junit.Assert.assertTrue("'" + level41 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level41.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult48 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult48.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter49);
        org.junit.Assert.assertTrue("'" + fileVisitResult52 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult52.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter53);
        org.junit.Assert.assertNotNull(iOFileFilter54);
        org.junit.Assert.assertNull(filenameFilter57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet59);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders60 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders60.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic64);
        org.junit.Assert.assertTrue("'" + licenseFilter65 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter65.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter70);
        org.junit.Assert.assertTrue("'" + licenseFilter71 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter71.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet72);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders73 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders73.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic77);
        org.junit.Assert.assertTrue("'" + licenseFilter78 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter78.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier84);
        org.junit.Assert.assertTrue("'" + level86 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level86.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult93 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult93.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter94);
        org.junit.Assert.assertNotNull(iOFileFilter95);
    }

    @Test
    public void test03848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03848");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum4 = metaData0.get("Copyright Builder: s:null e:.cvsignore o:null");
        java.lang.String str6 = metaData0.value("W3C Software Copyright");
        org.apache.rat.api.MetaData.Datum datum8 = metaData0.get("255ef7d8-e270-4908-9de7-bebc7df6eb88");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get(".bzrignore");
        org.apache.rat.api.MetaData.Datum datum11 = org.apache.rat.api.MetaData.RAT_DOCUMENT_CATEGORY_DATUM_STANDARD;
        metaData0.add(datum11);
        org.apache.rat.api.MetaData.Datum datum14 = metaData0.get("PLAIN");
        org.apache.rat.api.MetaData.Datum datum17 = new org.apache.rat.api.MetaData.Datum("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "CDDL1");
        java.lang.String str18 = datum17.getName();
        metaData0.add(datum17);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(datum4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(datum8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNotNull(datum11);
        org.junit.Assert.assertNull(datum14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0" + "'", str18, "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
    }

    @Test
    public void test03849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03849");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("GNU General Public License, version 3");
        org.apache.rat.license.ILicenseFamily iLicenseFamily6 = builder5.build();
        java.lang.String str7 = iLicenseFamily6.getFamilyName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(iLicenseFamily6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GNU General Public License, version 3" + "'", str7, "GNU General Public License, version 3");
    }

    @Test
    public void test03850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03850");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        org.apache.rat.license.ILicense.Builder builder16 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder13);
        java.lang.String str17 = copyrightBuilder13.toString();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str17, "Copyright Builder: s:OASIS e:null o:null");
    }

    @Test
    public void test03851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03851");
        org.apache.commons.cli.CommandLine commandLine1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.ReportConfiguration reportConfiguration2 = org.apache.rat.Report.createConfiguration("1e96b21e-f913-4d52-87cc-09323c460281", commandLine1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03852");
        java.io.File file0 = null;
        byte[] byteArray3 = new byte[] { (byte) 0, (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.impl.ArchiveEntryDocument archiveEntryDocument4 = new org.apache.rat.document.impl.ArchiveEntryDocument(file0, byteArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 1]");
    }

    @Test
    public void test03853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03853");
        org.apache.rat.configuration.Format format2 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader3 = format2.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = licenseReader3.readLicenses();
        java.lang.String[] strArray10 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet11 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        boolean boolean14 = strSet11.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean16 = strSet11.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction17 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = strSet11.setMsgFormat(strFunction17);
        boolean boolean19 = strSet11.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory20 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet4, (java.util.Collection<java.lang.String>) strSet11);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet21 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet4);
        org.apache.rat.license.ILicense iLicense22 = org.apache.rat.license.LicenseSetFactory.search("4fcae176-e574-46ed-b9e4-dea2e2f3b458", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet21);
        org.apache.rat.license.ILicense iLicense23 = org.apache.rat.license.LicenseSetFactory.search("Academic Free License, Version 2.1", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet21);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet24 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet21);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet25 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet24);
        org.junit.Assert.assertTrue("'" + format2 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format2.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(iLicense22);
        org.junit.Assert.assertNull(iLicense23);
    }

    @Test
    public void test03854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03854");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        java.util.regex.Pattern pattern2 = null;
        headerBean0.setHeaderPattern(pattern2);
        headerBean0.setMatch(false);
        headerBean0.setMatch(true);
        headerBean0.setMatch(true);
        boolean boolean10 = headerBean0.isMatch();
        headerBean0.setMatch(false);
        java.util.regex.Pattern pattern13 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern14 = null;
        headerBean0.setHeaderPattern(pattern14);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(pattern13);
    }

    @Test
    public void test03855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03855");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        claimStatistic0.setNumUnknown((int) '#');
        int int5 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = claimStatistic0.getLicenseFileCodeMap();
        claimStatistic0.setNumGenerated((int) (short) 1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getLicenseFileNameMap();
        int int10 = claimStatistic0.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic0.getLicenseFileNameMap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test03856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03856");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder0.setText("stand");
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder0.setText("ApacheLicenseVersion20");
        boolean boolean7 = textBuilder6.hasId();
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder9 = textBuilder6.setText("Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='true ']");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(textBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(textCaptureBuilder9);
    }

    @Test
    public void test03857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03857");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder7 = builder6.noDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults defaults8 = builder6.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: /home/mopuser/workspace/creadur-rat/%3F%3F%3F%3F%3F");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03858");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("false");
        java.lang.String str4 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder6 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("GPL3 ");
        org.apache.rat.license.ILicenseFamily.Builder builder8 = builder6.setLicenseFamilyCategory("33ac78df-d24f-43c9-beeb-83abf1fa7aa0");
        java.lang.String str9 = builder8.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "false" + "'", str4, "false");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "33ac78df-d24f-43c9-beeb-83abf1fa7aa0" + "'", str9, "33ac78df-d24f-43c9-beeb-83abf1fa7aa0");
    }

    @Test
    public void test03859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03859");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str1 = anyBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = anyBuilder0.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = anyBuilder0.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder4 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str5 = anyBuilder4.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList6 = anyBuilder4.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = anyBuilder4.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = anyBuilder4.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList9 = anyBuilder4.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder10 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str11 = notBuilder10.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder12 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean13 = matcherRefBuilder12.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap14 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder15 = matcherRefBuilder12.setMatchers(strMap14);
        org.apache.rat.configuration.builders.AllBuilder allBuilder16 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder19 = copyrightBuilder17.setStart("OASIS");
        java.lang.String str20 = copyrightBuilder17.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = copyrightBuilder17.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder23 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean24 = matcherRefBuilder23.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = copyrightBuilder25.setStart("OASIS");
        java.lang.String str28 = copyrightBuilder25.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder25.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder32 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str33 = copyrightBuilder32.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder32.setEnd(".cvsignore");
        boolean boolean36 = copyrightBuilder32.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str38 = copyrightBuilder37.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder40 = copyrightBuilder37.setEnd(".cvsignore");
        boolean boolean41 = copyrightBuilder37.hasId();
        java.lang.String str42 = copyrightBuilder37.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder45 = copyrightBuilder43.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder46 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean48 = matcherRefBuilder47.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap49 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder50 = matcherRefBuilder47.setMatchers(strMap49);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder51 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean53 = matcherRefBuilder52.hasId();
        java.lang.String str54 = matcherRefBuilder52.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap55 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder56 = matcherRefBuilder52.setMatchers(strMap55);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray57 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder12, allBuilder16, copyrightBuilder22, matcherRefBuilder23, copyrightBuilder25, copyrightBuilder31, copyrightBuilder32, copyrightBuilder37, copyrightBuilder43, anyBuilder46, matcherRefBuilder47, copyrightBuilder51, matcherRefBuilder52 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList58 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList58, builderArray57);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder60 = notBuilder10.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = anyBuilder4.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder62 = anyBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList58);
        org.apache.rat.license.ILicense.Builder builder63 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder65 = builder63.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder67 = builder65.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder69 = builder67.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder70 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str71 = copyrightBuilder70.toString();
        org.apache.rat.license.ILicense.Builder builder72 = builder67.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder70);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher73 = copyrightBuilder70.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder75 = copyrightBuilder70.setOwner("TextBuilder: Datum [ name ='http:...");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder77 = copyrightBuilder70.setOwner("PLAIN-RAT.XSL");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder79 = copyrightBuilder70.setOwner("a1abad46-6a98-44f8-aa20-7839919a8270");
        java.lang.String str80 = copyrightBuilder79.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder81 = anyBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder79);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder83 = anyBuilder0.setResource("f03158f7-b7b2-4d1f-90b1-98481344f604");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AnyBuilder:" + "'", str1, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(anyBuilder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AnyBuilder:" + "'", str5, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcherList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NotBuilder: null" + "'", str11, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertNotNull(copyrightBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str20, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertNotNull(matcherRefBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str28, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertNotNull(copyrightBuilder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str33, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str38, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str42, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder43);
        org.junit.Assert.assertNotNull(copyrightBuilder45);
        org.junit.Assert.assertNotNull(anyBuilder46);
        org.junit.Assert.assertNotNull(matcherRefBuilder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder50);
        org.junit.Assert.assertNotNull(copyrightBuilder51);
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "MathcerRefBuilder: null" + "'", str54, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder56);
        org.junit.Assert.assertNotNull(builderArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(abstractBuilder60);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(abstractBuilder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(copyrightBuilder70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str71, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(iHeaderMatcher73);
        org.junit.Assert.assertNotNull(copyrightBuilder75);
        org.junit.Assert.assertNotNull(copyrightBuilder77);
        org.junit.Assert.assertNotNull(copyrightBuilder79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Copyright Builder: s:null e:null o:a1abad46-6a98-44f8-aa20-7839919a8270" + "'", str80, "Copyright Builder: s:null e:null o:a1abad46-6a98-44f8-aa20-7839919a8270");
        org.junit.Assert.assertNotNull(abstractBuilder81);
    }

    @Test
    public void test03860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03860");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinaryData("Copyright Builder: s:.cvsignore e:null o:W3C  ");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03861");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            simpleXmlClaimReporter12.endReport();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.api.RatException; message: Cannot close last element");
        } catch (org.apache.rat.api.RatException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03862");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.text();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("");
        java.lang.String str3 = textBuilder2.toString();
        org.apache.rat.configuration.builders.TextBuilder textBuilder5 = textBuilder2.setText("d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder7 = textBuilder5.setText("4f1be289-aaa7-4730-8076-690bc1f926c5");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = textBuilder5.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = textBuilder5.build();
        org.junit.Assert.assertNotNull(textBuilder0);
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "TextBuilder: " + "'", str3, "TextBuilder: ");
        org.junit.Assert.assertNotNull(textBuilder5);
        org.junit.Assert.assertNotNull(textCaptureBuilder7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
    }

    @Test
    public void test03863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03863");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("notice");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03864");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter7 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier37 = reportConfiguration36.getOutput();
        reportConfiguration9.setOut(outputStreamIOSupplier37);
        org.apache.rat.utils.Log.Level level39 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration9.logLicenseCollisions(level39);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter41 = reportConfiguration9.getDirectoryFilter();
        java.nio.file.Path path42 = null;
        boolean boolean43 = iOFileFilter41.matches(path42);
        java.nio.file.Path path44 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes45 = null;
        java.nio.file.FileVisitResult fileVisitResult46 = iOFileFilter41.accept(path44, basicFileAttributes45);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter47 = iOFileFilter7.or(iOFileFilter41);
        java.nio.file.Path path48 = null;
        boolean boolean49 = iOFileFilter41.matches(path48);
        java.nio.file.Path path50 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes51 = null;
        java.nio.file.FileVisitResult fileVisitResult52 = iOFileFilter41.accept(path50, basicFileAttributes51);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.filefilter.IOFileFilter iOFileFilter54 = iOFileFilter41.or(iOFileFilter53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: fileFilter");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNotNull(iOFileFilter7);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier37);
        org.junit.Assert.assertTrue("'" + level39 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level39.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult46 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult46.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult52 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult52.equals(java.nio.file.FileVisitResult.TERMINATE));
    }

    @Test
    public void test03865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03865");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder5 = builder0.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.Defaults.Builder builder7 = builder0.remove("GNU General Public License, version 2");
        java.io.File file8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder9 = builder0.add(file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03866");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        simpleLicenseFamily0.setFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        simpleLicenseFamily0.setFamilyCategory("c523095e-4421-4cc4-93e2-039f23b91f76");
        simpleLicenseFamily0.setFamilyCategory(".cvsignore");
        java.lang.String str7 = simpleLicenseFamily0.getFamilyName();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str7, "http://org/apache/rat/meta-data#LicenseFamilyName");
    }

    @Test
    public void test03867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03867");
        java.lang.String str1 = org.apache.rat.license.ILicenseFamily.makeCategory("6620e9ee-d651-4c18-8162-edad6d18368e");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "6620e" + "'", str1, "6620e");
    }

    @Test
    public void test03868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03868");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("");
        java.io.File file9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder10 = builder8.remove(file9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test03869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03869");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher4 = new org.apache.rat.analysis.matchers.CopyrightMatcher("6232a9af-c312-410c-9bbb-6b12d7725116", "Datum [ name ='http://org/apache/rat/meta-data#FileCategory',value ='standard ']", "SpdxBuilder: 03F7B314-6887-4617-9C7E-BF1600B331CD", "MANIFEST.MF");
    }

    @Test
    public void test03870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03870");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((-1));
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumUnApproved((int) '#');
        claimStatistic0.setNumApproved((int) (byte) -1);
        java.lang.Class<?> wildcardClass8 = claimStatistic0.getClass();
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test03871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03871");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration1.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier6 = reportConfiguration1.getOutput();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier7 = reportConfiguration1.getOutput();
        org.apache.rat.utils.DefaultLog defaultLog8 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder9 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher15 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state16 = copyrightMatcher15.finalizeState();
        org.apache.rat.license.ILicense.Builder builder17 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher15);
        org.apache.rat.license.ILicense.Builder builder19 = builder17.setLicenseFamilyCategory("");
        defaultLog8.error((java.lang.Object) builder19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter44);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier50 = reportConfiguration49.getOutput();
        reportConfiguration22.setOut(outputStreamIOSupplier50);
        org.apache.rat.utils.Log.Level level52 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration22.logLicenseCollisions(level52);
        defaultLog8.warn((java.lang.Object) level52);
        reportConfiguration1.logFamilyCollisions(level52);
        java.io.File file56 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setOut(file56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier6);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier7);
        org.junit.Assert.assertNotNull(defaultLog8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state16.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier50);
        org.junit.Assert.assertTrue("'" + level52 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level52.equals(org.apache.rat.utils.Log.Level.WARN));
    }

    @Test
    public void test03872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03872");
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration2.getOutput();
        reportConfiguration2.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        java.io.FilenameFilter filenameFilter8 = reportConfiguration7.getInputFileFilter();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders9 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration7.setAddLicenseHeaders(addLicenseHeaders9);
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders9);
        org.apache.rat.configuration.Format format12 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader13 = format12.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader14 = format12.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader15 = format12.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet16 = licenseReader15.readLicenses();
        reportConfiguration2.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet16);
        org.apache.rat.license.ILicense iLicense18 = org.apache.rat.license.LicenseSetFactory.search("ebc30eb7-b3ea-4f39-baea-5fea4fa0278b", iLicenseSet16);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNull(filenameFilter8);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders9 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders9.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
        org.junit.Assert.assertTrue("'" + format12 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format12.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader13);
        org.junit.Assert.assertNotNull(licenseReader14);
        org.junit.Assert.assertNotNull(licenseReader15);
        org.junit.Assert.assertNotNull(iLicenseSet16);
        org.junit.Assert.assertNull(iLicense18);
    }

    @Test
    public void test03873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03873");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.util.Comparator<? super java.lang.String> wildcardComparator11 = strSet6.comparator();
        java.util.stream.Stream<java.lang.String> strStream12 = strSet6.stream();
        java.util.stream.Stream<java.lang.String> strStream13 = strSet6.stream();
        java.lang.Object obj14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = strSet6.remove(obj14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNull(wildcardComparator11);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(strStream13);
    }

    @Test
    public void test03874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03874");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder65 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str66 = copyrightBuilder65.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder68 = copyrightBuilder65.setEnd(".cvsignore");
        boolean boolean69 = copyrightBuilder65.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder71 = copyrightBuilder65.setEnd("notice");
        defaultLog0.debug((java.lang.Object) "notice");
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier75 = reportConfiguration74.getOutput();
        reportConfiguration74.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log78 = reportConfiguration74.getLog();
        org.apache.rat.utils.Log.Level level79 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration74.logFamilyCollisions(level79);
        defaultLog0.setLevel(level79);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender83 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, ".bzrignore");
        java.io.File file84 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = apacheV2LicenseAppender83.getLicenseHeader(file84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(copyrightBuilder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str66, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder71);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier75);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + level79 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level79.equals(org.apache.rat.utils.Log.Level.INFO));
    }

    @Test
    public void test03875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03875");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.policy.DefaultPolicy defaultPolicy6 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet7 = defaultPolicy6.getApprovedLicenseNames();
        org.apache.rat.api.Document document8 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy6.reportLicenseApprovalClaim(document8, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet7);
    }

    @Test
    public void test03876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03876");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily8 = fullTextMatchingLicense0.getLicenseFamily();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test03877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03877");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter1 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.fromText("http://org/apache/rat/meta-data#ApprovedLicense");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.rat.license.LicenseSetFactory.LicenseFilter.http://org/apache/rat/meta-data#approvedlicense");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03878");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet6.spliterator();
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        defaultLog26.setLevel(level31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration48.getLicenses(licenseFilter50);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders52 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration48.setAddLicenseHeaders(addLicenseHeaders52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter57);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier63 = reportConfiguration62.getOutput();
        reportConfiguration35.setOut(outputStreamIOSupplier63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.utils.ReportingSet.Options options71 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration69.licenseDuplicateOption(options71);
        reportConfiguration66.familyDuplicateOption(options71);
        reportConfiguration35.licenseDuplicateOption(options71);
        reportConfiguration35.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logLicenseCollisions(level81);
        reportConfiguration35.logLicenseCollisions(level81);
        defaultLog26.log(level81, "GNU General Public License, version 1");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog26);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet88 = strSet6.tailSet("Copyright Builder: s:null e:W3C Software Copyright o:null");
        strSet88.clear();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder90 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str91 = regexBuilder90.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder93 = regexBuilder90.setExpr("GNU General Public License, version 1");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = strSet88.remove((java.lang.Object) regexBuilder90);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders52 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders52.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier63);
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + options71 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options71.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "RegexBuilder: null" + "'", str91, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder93);
    }

    @Test
    public void test03879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03879");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.license.ILicenseFamily iLicenseFamily6 = null;
        reportConfiguration2.addFamily(iLicenseFamily6);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter8 = reportConfiguration2.getDirectoryFilter();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        java.io.FilenameFilter filenameFilter11 = reportConfiguration10.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet13 = reportConfiguration10.getLicenses(licenseFilter12);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders14 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration10.setAddLicenseHeaders(addLicenseHeaders14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = org.apache.rat.Reporter.report(reportConfiguration17);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter19);
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter19);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter32);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier38 = reportConfiguration37.getOutput();
        reportConfiguration10.setOut(outputStreamIOSupplier38);
        org.apache.rat.utils.Log.Level level40 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration10.logLicenseCollisions(level40);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter42 = reportConfiguration10.getDirectoryFilter();
        java.nio.file.Path path43 = null;
        boolean boolean44 = iOFileFilter42.matches(path43);
        java.nio.file.Path path45 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes46 = null;
        java.nio.file.FileVisitResult fileVisitResult47 = iOFileFilter42.accept(path45, basicFileAttributes46);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter48 = iOFileFilter8.or(iOFileFilter42);
        java.nio.file.Path path49 = null;
        boolean boolean50 = iOFileFilter42.matches(path49);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker51 = new org.apache.rat.walker.ArchiveWalker(file0, (java.io.FilenameFilter) iOFileFilter42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertNotNull(iOFileFilter8);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet13);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders14 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders14.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier38);
        org.junit.Assert.assertTrue("'" + level40 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level40.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult47 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult47.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test03880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03880");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinary("null d4148d3a-edbc-4672-b347-0fa619553f91");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03881");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.MatcherBuilderTracker.addBuilder("8ecb8cce06e4400f84d9ad1cf6289fda", "ab913e1f-22c2-4747-9d4b-1a549cb028f0");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: java.lang.ClassNotFoundException: 8ecb8cce06e4400f84d9ad1cf6289fda");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03882");
        boolean boolean1 = org.apache.rat.document.impl.guesser.ArchiveGuesser.isArchive("e1c779c1-1196-4511-a2e8-5a3ea82bde26");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03883");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier6 = reportConfiguration1.getOutput();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        reportConfiguration8.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        java.io.FilenameFilter filenameFilter13 = reportConfiguration12.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet15 = reportConfiguration12.getLicenses(licenseFilter14);
        reportConfiguration8.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration8.getInputFileFilter();
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration32.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet35 = reportConfiguration32.getLicenses(licenseFilter34);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders36 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter41);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet44 = reportConfiguration19.getLicenseFamilies(licenseFilter41);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration8, licenseFilter41);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet46 = reportConfiguration1.getLicenseFamilies(licenseFilter41);
        java.util.Collection<java.lang.String> strCollection47 = null;
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory48 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet46, strCollection47);
        org.apache.rat.policy.DefaultPolicy defaultPolicy49 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet46);
        org.apache.rat.api.Document document50 = null;
        defaultPolicy49.analyse(document50);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet52 = defaultPolicy49.getApprovedLicenseNames();
        org.apache.rat.policy.DefaultPolicy defaultPolicy53 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet52);
        org.apache.rat.api.Document document54 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy53.reportLicenseApprovalClaim(document54, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier6);
        org.junit.Assert.assertNull(filenameFilter13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet15);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet35);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders36 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders36.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet44);
        org.junit.Assert.assertNotNull(iLicenseFamilySet46);
        org.junit.Assert.assertNotNull(iLicenseFamilySet52);
    }

    @Test
    public void test03884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03884");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.license.ILicense.Builder builder4 = builder0.setDerivedFrom("MANIFEST.MF");
        org.apache.rat.license.ILicense.Builder builder6 = builder0.setId("ed0faf32-f32c-46f1-a629-4fe87704cb0e");
        org.apache.rat.license.ILicense.Builder builder8 = builder0.setDerivedFrom("01cd6410-ba98-464c-a66e-0b7190dd6096");
        org.apache.rat.license.ILicense.Builder builder10 = builder0.setName(".bzrignore");
        org.apache.rat.license.ILicense.Builder builder12 = builder0.setDerivedFrom("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test03885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03885");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.fromName("fbb40927-c032-4101-ad4a-253592dd8a5f");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: fbb40927-c032-4101-ad4a-253592dd8a5f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03886");
        org.apache.commons.cli.CommandLine commandLine1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.ReportConfiguration reportConfiguration2 = org.apache.rat.Report.createConfiguration("8f82a952-5bfd-446b-ac79-15beef5b3f17 null", commandLine1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03887");
        boolean boolean1 = org.apache.rat.document.impl.guesser.ArchiveGuesser.isArchive("Copyright Builder: s:null e:ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5 o:03f57a5c-be91-4df3-b5be-50bd5e31e571");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03888");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter3 = xmlWriter1.content((java.lang.CharSequence) "Datum [ name ='b9d57440-4b03-461e-a164-b29e1341bbc8',value =' ']");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03889");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("15ff671b-67b8-4791-9e1e-208f319fb7e2", "AllBu");
    }

    @Test
    public void test03890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03890");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.report.IReportable iReportable13 = null;
        reportConfiguration1.setReportable(iReportable13);
        java.lang.String str15 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = strSet16.tailSet("hi!");
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter42);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier48 = reportConfiguration47.getOutput();
        reportConfiguration20.setOut(outputStreamIOSupplier48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier52 = reportConfiguration51.getOutput();
        reportConfiguration20.setOut(outputStreamIOSupplier52);
        boolean boolean54 = strSet16.equals((java.lang.Object) outputStreamIOSupplier52);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet16);
        int int56 = strSet16.size();
        org.apache.rat.utils.DefaultLog defaultLog57 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder58 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder60 = builder58.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher64 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state65 = copyrightMatcher64.finalizeState();
        org.apache.rat.license.ILicense.Builder builder66 = builder60.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher64);
        org.apache.rat.license.ILicense.Builder builder68 = builder66.setLicenseFamilyCategory("");
        defaultLog57.error((java.lang.Object) builder68);
        org.apache.rat.utils.Log.Level level70 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog57.log(level70, "JAVA");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet73 = strSet16.setLog((org.apache.rat.utils.Log) defaultLog57);
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog57);
        org.apache.rat.utils.Log.Level level75 = null;
        defaultLog57.setLevel(level75);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender77 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog57);
        java.io.File file78 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = apacheV2LicenseAppender77.getLicenseHeader(file78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier48);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(defaultLog57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + state65 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state65.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + level70 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level70.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(strSet73);
    }

    @Test
    public void test03891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03891");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter9 = xmlWriter1.startDocument();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03892");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.license.ILicense[] iLicenseArray3 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet4 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet4, iLicenseArray3);
        java.lang.String[] strArray18 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory21 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4, (java.util.Collection<java.lang.String>) strList19);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = licenseSetFactory21.getLicenses(licenseFilter45);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration1.getInputFileFilter();
        reportConfiguration1.setCopyrightMessage("SpdxBuilder: null");
        org.apache.rat.Defaults.Builder builder54 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder55 = builder54.noDefault();
        org.apache.rat.Defaults defaults56 = builder55.build();
        org.apache.rat.Defaults.Builder builder57 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults58 = builder57.build();
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        java.io.FilenameFilter filenameFilter61 = reportConfiguration60.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet63 = reportConfiguration60.getLicenses(licenseFilter62);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders64 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration60.setAddLicenseHeaders(addLicenseHeaders64);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic68 = org.apache.rat.Reporter.report(reportConfiguration67);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter69 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration67, licenseFilter69);
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter69);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        java.io.FilenameFilter filenameFilter74 = reportConfiguration73.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet76 = reportConfiguration73.getLicenses(licenseFilter75);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders77 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration73.setAddLicenseHeaders(addLicenseHeaders77);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic81 = org.apache.rat.Reporter.report(reportConfiguration80);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter82 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration80, licenseFilter82);
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter82);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet85 = reportConfiguration60.getLicenseFamilies(licenseFilter82);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet86 = defaults58.getLicenses(licenseFilter82);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet87 = defaults56.getLicenseFamilies(licenseFilter82);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration1, licenseFilter82);
        java.net.URL uRL89 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(iLicenseArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(defaults56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(defaults58);
        org.junit.Assert.assertNull(filenameFilter61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet63);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders64 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders64.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic68);
        org.junit.Assert.assertTrue("'" + licenseFilter69 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter69.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet76);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders77 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders77.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic81);
        org.junit.Assert.assertTrue("'" + licenseFilter82 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter82.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet85);
        org.junit.Assert.assertNotNull(iLicenseSet86);
        org.junit.Assert.assertNotNull(iLicenseFamilySet87);
    }

    @Test
    public void test03893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03893");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern1);
        simpleRegexMatcher2.reset();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = simpleRegexMatcher2.doMatch("RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03894");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader5 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader6 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader7 = format0.matcherReader();
        matcherReader7.readMatcherBuilders();
        java.net.URL uRL9 = null;
        // The following exception was thrown during execution in test generation
        try {
            matcherReader7.addMatchers(uRL9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(matcherReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(licenseReader4);
        org.junit.Assert.assertNotNull(matcherReader5);
        org.junit.Assert.assertNotNull(matcherReader6);
        org.junit.Assert.assertNotNull(matcherReader7);
    }

    @Test
    public void test03895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03895");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter12 = xmlWriter1.openElement((java.lang.CharSequence) "30657c35-59d9-408c-bd70-d0dfa5fdf8a2");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: '30657c35-59d9-408c-bd70-d0dfa5fdf8a2' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03896");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        reportConfiguration3.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level6 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration3.logFamilyCollisions(level6);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter8 = reportConfiguration3.getDirectoryFilter();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.utils.ReportingSet.Options options11 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration10.licenseDuplicateOption(options11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter46 = reportConfiguration14.getDirectoryFilter();
        reportConfiguration10.setInputFileFilter((java.io.FilenameFilter) iOFileFilter46);
        java.nio.file.Path path48 = null;
        boolean boolean49 = iOFileFilter46.matches(path48);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter50 = iOFileFilter46.negate();
        java.nio.file.Path path51 = null;
        boolean boolean52 = iOFileFilter46.matches(path51);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter53 = iOFileFilter46.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter54 = iOFileFilter8.and(iOFileFilter53);
        java.nio.file.Path path55 = null;
        boolean boolean56 = iOFileFilter53.matches(path55);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker57 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + level6 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level6.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter8);
        org.junit.Assert.assertTrue("'" + options11 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options11.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(iOFileFilter50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(iOFileFilter53);
        org.junit.Assert.assertNotNull(iOFileFilter54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test03897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03897");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("B2EAFDEF-0477-406A-8B6D-8D332A86679E");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03898");
        boolean boolean1 = org.apache.rat.document.impl.guesser.NoteGuesser.isNote("b5db6c34-5b1c-41fd-a4cc-888dda28cf4e");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03899");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.ReportingSet.Options options52 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options52);
        reportConfiguration47.familyDuplicateOption(options52);
        reportConfiguration16.licenseDuplicateOption(options52);
        reportConfiguration16.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration16.logLicenseCollisions(level62);
        defaultLog14.setLevel(level62);
        defaultLog14.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog14);
        org.apache.rat.utils.DefaultLog defaultLog69 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logFamilyCollisions(level74);
        defaultLog69.setLevel(level74);
        defaultLog14.debug((java.lang.Object) level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet13.setLogLevel(level74);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        reportConfiguration80.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level83 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration80.logFamilyCollisions(level83);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet85 = strSet78.setLogLevel(level83);
        java.util.Spliterator<java.lang.String> strSpliterator86 = strSet78.spliterator();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet88 = strSet78.headSet("274c6a15-09f6-4bfd-ac53-1827770eb507");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet90 = strSet78.headSet("AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24");
        strSet78.clear();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + options52 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options52.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog69);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + level83 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level83.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strSpliterator86);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(strSet90);
    }

    @Test
    public void test03900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03900");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog0.log(level13, "JAVA");
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        defaultLog0.info((java.lang.Object) licenseFilter16);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration32.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet35 = reportConfiguration32.getLicenses(licenseFilter34);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders36 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter41);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier47 = reportConfiguration46.getOutput();
        reportConfiguration19.setOut(outputStreamIOSupplier47);
        boolean boolean49 = reportConfiguration19.isStyleReport();
        boolean boolean50 = reportConfiguration19.isStyleReport();
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        reportConfiguration52.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level55 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration52.logLicenseCollisions(level55);
        reportConfiguration19.logLicenseCollisions(level55);
        org.apache.rat.utils.Log.Level level58 = org.apache.rat.utils.Log.Level.DEBUG;
        reportConfiguration19.logLicenseCollisions(level58);
        defaultLog0.log(level58, "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender62 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.DefaultLog defaultLog63 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder64 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder66 = builder64.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher70 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state71 = copyrightMatcher70.finalizeState();
        org.apache.rat.license.ILicense.Builder builder72 = builder66.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher70);
        org.apache.rat.license.ILicense.Builder builder74 = builder72.setLicenseFamilyCategory("");
        defaultLog63.error((java.lang.Object) builder74);
        org.apache.rat.utils.Log.Level level76 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog63.log(level76, "JAVA");
        org.apache.rat.utils.Log.Level level79 = defaultLog63.getLevel();
        java.lang.Throwable throwable81 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.log(level79, "f06626c1-35ed-4c9c-a3c4-db199c6e7bfb", throwable81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level13.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet35);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders36 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders36.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + level55 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level55.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level58 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level58.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNotNull(defaultLog63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + state71 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state71.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + level76 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level76.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + level79 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level79.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test03901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03901");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter11 = xmlWriter1.content((java.lang.CharSequence) "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03902");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.utils.ReportingSet.Options options37 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration35.licenseDuplicateOption(options37);
        reportConfiguration32.familyDuplicateOption(options37);
        reportConfiguration1.licenseDuplicateOption(options37);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration45.getInputFileFilter();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration45.setAddLicenseHeaders(addLicenseHeaders47);
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        java.io.FilenameFilter filenameFilter52 = reportConfiguration51.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet54 = reportConfiguration51.getLicenses(licenseFilter53);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders55 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration51.setAddLicenseHeaders(addLicenseHeaders55);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter60);
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter60);
        org.apache.rat.report.IReportable iReportable63 = null;
        reportConfiguration51.setReportable(iReportable63);
        java.lang.String str65 = reportConfiguration51.getCopyrightMessage();
        org.apache.rat.report.IReportable iReportable66 = reportConfiguration51.getReportable();
        org.apache.rat.license.ILicenseFamily.Builder builder67 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str68 = builder67.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder70 = builder67.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder72 = builder70.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder74 = builder72.setLicenseFamilyName("6620e9ee-d651-4c18-8162-edad6d18368e");
        reportConfiguration51.addFamily(builder74);
        org.apache.rat.utils.Log log76 = null;
        org.apache.rat.ReportConfiguration reportConfiguration77 = new org.apache.rat.ReportConfiguration(log76);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic78 = org.apache.rat.Reporter.report(reportConfiguration77);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic81 = org.apache.rat.Reporter.report(reportConfiguration80);
        org.apache.rat.utils.ReportingSet.Options options82 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration80.licenseDuplicateOption(options82);
        reportConfiguration77.familyDuplicateOption(options82);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier85 = reportConfiguration77.getWriter();
        org.apache.rat.utils.Log log86 = null;
        org.apache.rat.ReportConfiguration reportConfiguration87 = new org.apache.rat.ReportConfiguration(log86);
        reportConfiguration87.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level90 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration87.logFamilyCollisions(level90);
        reportConfiguration77.logFamilyCollisions(level90);
        reportConfiguration51.logLicenseCollisions(level90);
        reportConfiguration42.logFamilyCollisions(level90);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders95 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders95);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders95);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + options37 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options37.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
        org.junit.Assert.assertNull(filenameFilter52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet54);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders55 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders55.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(iReportable66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(claimStatistic78);
        org.junit.Assert.assertNull(claimStatistic81);
        org.junit.Assert.assertTrue("'" + options82 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options82.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier85);
        org.junit.Assert.assertTrue("'" + level90 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level90.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + addLicenseHeaders95 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders95.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
    }

    @Test
    public void test03903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03903");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.utils.ReportingSet.Options options37 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration35.licenseDuplicateOption(options37);
        reportConfiguration32.familyDuplicateOption(options37);
        reportConfiguration1.licenseDuplicateOption(options37);
        org.apache.rat.report.IReportable iReportable41 = null;
        reportConfiguration1.setReportable(iReportable41);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        reportConfiguration44.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration48.getLicenses(licenseFilter50);
        reportConfiguration44.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet51);
        reportConfiguration44.removeApprovedLicenseCategory("The MIT License");
        org.apache.rat.license.ILicense iLicense55 = null;
        reportConfiguration44.addLicense(iLicense55);
        org.apache.rat.license.ILicense iLicense57 = null;
        reportConfiguration44.addLicense(iLicense57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        java.io.FilenameFilter filenameFilter61 = reportConfiguration60.getInputFileFilter();
        boolean boolean62 = reportConfiguration60.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier63 = reportConfiguration60.getOutput();
        org.apache.rat.utils.Log log64 = reportConfiguration60.getLog();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier65 = org.apache.rat.Defaults.getUnapprovedLicensesStyleSheet();
        reportConfiguration60.setStyleSheet(inputStreamIOSupplier65);
        reportConfiguration44.setStyleSheet(inputStreamIOSupplier65);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier68 = reportConfiguration44.getStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier68);
        org.apache.rat.report.IReportable iReportable70 = reportConfiguration1.getReportable();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + options37 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options37.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertNull(filenameFilter61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier63);
        org.junit.Assert.assertNull(log64);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier65);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier68);
        org.junit.Assert.assertNull(iReportable70);
    }

    @Test
    public void test03904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03904");
        org.apache.rat.license.ILicense[] iLicenseArray0 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet1 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet1, iLicenseArray0);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray5 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList6 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList6, iLicenseFamilyArray5);
        reportConfiguration4.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList6);
        org.apache.rat.report.IReportable iReportable9 = null;
        reportConfiguration4.setReportable(iReportable9);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet11 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray12 = strSet11.toArray();
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = org.apache.rat.Reporter.report(reportConfiguration17);
        org.apache.rat.utils.ReportingSet.Options options19 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration17.licenseDuplicateOption(options19);
        reportConfiguration14.familyDuplicateOption(options19);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier22 = reportConfiguration14.getWriter();
        boolean boolean23 = reportConfiguration14.isAddingLicensesForced();
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        reportConfiguration25.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level28 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration25.logFamilyCollisions(level28);
        reportConfiguration14.logLicenseCollisions(level28);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet31 = strSet11.setLogLevel(level28);
        java.util.stream.Stream<java.lang.String> strStream32 = strSet31.stream();
        reportConfiguration4.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet31);
        org.apache.rat.utils.ReportingSet.Options options34 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet35 = strSet31.setDuplicateOption(options34);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory36 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, (java.util.Collection<java.lang.String>) strSet31);
        boolean boolean38 = strSet31.add("AllBuilder:");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet40 = strSet31.headSet("MathcerRefBuilder: 58515fd1-71f9-42a1-b033-b509624129a7");
        org.junit.Assert.assertNotNull(iLicenseArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertNull(claimStatistic18);
        org.junit.Assert.assertTrue("'" + options19 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options19.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + level28 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level28.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strStream32);
        org.junit.Assert.assertTrue("'" + options34 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options34.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strSet40);
    }

    @Test
    public void test03905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03905");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher1 = anyBuilder0.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str3 = anyBuilder2.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList4 = anyBuilder2.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = anyBuilder2.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder6 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str7 = anyBuilder6.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList8 = anyBuilder6.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = anyBuilder6.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = anyBuilder6.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList11 = anyBuilder6.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder12 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str13 = notBuilder12.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder14 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean15 = matcherRefBuilder14.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap16 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder17 = matcherRefBuilder14.setMatchers(strMap16);
        org.apache.rat.configuration.builders.AllBuilder allBuilder18 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = copyrightBuilder19.setStart("OASIS");
        java.lang.String str22 = copyrightBuilder19.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder24 = copyrightBuilder19.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder25 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean26 = matcherRefBuilder25.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder29 = copyrightBuilder27.setStart("OASIS");
        java.lang.String str30 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder32 = copyrightBuilder27.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder34 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str35 = copyrightBuilder34.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder37 = copyrightBuilder34.setEnd(".cvsignore");
        boolean boolean38 = copyrightBuilder34.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str40 = copyrightBuilder39.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder42 = copyrightBuilder39.setEnd(".cvsignore");
        boolean boolean43 = copyrightBuilder39.hasId();
        java.lang.String str44 = copyrightBuilder39.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder45 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = copyrightBuilder45.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder49 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean50 = matcherRefBuilder49.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder49.setMatchers(strMap51);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder53 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder54 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean55 = matcherRefBuilder54.hasId();
        java.lang.String str56 = matcherRefBuilder54.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap57 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder58 = matcherRefBuilder54.setMatchers(strMap57);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray59 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder14, allBuilder18, copyrightBuilder24, matcherRefBuilder25, copyrightBuilder27, copyrightBuilder33, copyrightBuilder34, copyrightBuilder39, copyrightBuilder45, anyBuilder48, matcherRefBuilder49, copyrightBuilder53, matcherRefBuilder54 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList60 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList60, builderArray59);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder62 = notBuilder12.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList60);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder63 = anyBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList60);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder64 = anyBuilder2.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList60);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder65 = anyBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList60);
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder66 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str67 = regexBuilder66.toString();
        java.lang.String str68 = regexBuilder66.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder70 = regexBuilder66.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder72 = regexBuilder70.setExpr("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder74 = regexBuilder70.setExpr("ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder75 = anyBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) regexBuilder70);
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder77 = regexBuilder70.setExpr("");
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertNotNull(iHeaderMatcher1);
        org.junit.Assert.assertNotNull(anyBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "AnyBuilder:" + "'", str3, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(anyBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AnyBuilder:" + "'", str7, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcherList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NotBuilder: null" + "'", str13, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder17);
        org.junit.Assert.assertNotNull(copyrightBuilder19);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str22, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder24);
        org.junit.Assert.assertNotNull(matcherRefBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str30, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder32);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str35, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str40, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str44, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder45);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(anyBuilder48);
        org.junit.Assert.assertNotNull(matcherRefBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(copyrightBuilder53);
        org.junit.Assert.assertNotNull(matcherRefBuilder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "MathcerRefBuilder: null" + "'", str56, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder58);
        org.junit.Assert.assertNotNull(builderArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(abstractBuilder62);
        org.junit.Assert.assertNotNull(abstractBuilder63);
        org.junit.Assert.assertNotNull(abstractBuilder64);
        org.junit.Assert.assertNotNull(abstractBuilder65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "RegexBuilder: null" + "'", str67, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "RegexBuilder: null" + "'", str68, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder70);
        org.junit.Assert.assertNotNull(regexBuilder72);
        org.junit.Assert.assertNotNull(regexBuilder74);
        org.junit.Assert.assertNotNull(abstractBuilder75);
        org.junit.Assert.assertNotNull(regexBuilder77);
    }

    @Test
    public void test03906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03906");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        java.lang.String str2 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder4 = regexBuilder0.setExpr("d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder6 = regexBuilder0.setExpr("JAVA");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = regexBuilder6.build();
        org.apache.rat.analysis.IHeaderMatcher.State state8 = iHeaderMatcher7.currentState();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RegexBuilder: null" + "'", str2, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder4);
        org.junit.Assert.assertNotNull(regexBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test03907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03907");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("ACADEMIC FREE LICENSE, VERSION 2.1");
        java.lang.String str2 = simpleTextMatcher1.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state3 = simpleTextMatcher1.finalizeState();
        simpleTextMatcher1.reset();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "788fd438-864a-45bf-b3f2-b0665bd16acd" + "'", str2, "788fd438-864a-45bf-b3f2-b0665bd16acd");
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test03908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03908");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        org.apache.rat.api.MetaData.Datum datum7 = new org.apache.rat.api.MetaData.Datum("GNU General Public License, version 3", "021187d7-27c2-4fd9-bc74-8cc00413ee52");
        metaData0.set(datum7);
        org.apache.rat.api.MetaData.Datum datum9 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_UNKNOWN;
        java.lang.String str10 = datum9.getName();
        metaData0.set(datum9);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(datum9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str10, "http://org/apache/rat/meta-data#LicenseFamilyName");
    }

    @Test
    public void test03909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03909");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.report.IReportable iReportable3 = null;
        reportConfiguration1.setReportable(iReportable3);
        boolean boolean5 = reportConfiguration1.isAddingLicensesForced();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.report.IReportable iReportable7 = null;
        reportConfiguration1.setReportable(iReportable7);
        java.io.File file9 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(file9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(iOFileFilter6);
    }

    @Test
    public void test03910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03910");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders7 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration3.setAddLicenseHeaders(addLicenseHeaders7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter12);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter12);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter25);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier31 = reportConfiguration30.getOutput();
        reportConfiguration3.setOut(outputStreamIOSupplier31);
        org.apache.rat.utils.Log.Level level33 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration3.logLicenseCollisions(level33);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter35 = reportConfiguration3.getDirectoryFilter();
        java.nio.file.Path path36 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes37 = null;
        java.nio.file.FileVisitResult fileVisitResult38 = iOFileFilter35.accept(path36, basicFileAttributes37);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter39 = iOFileFilter35.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter40 = iOFileFilter39.negate();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker41 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders7 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders7.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier31);
        org.junit.Assert.assertTrue("'" + level33 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level33.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter35);
        org.junit.Assert.assertTrue("'" + fileVisitResult38 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult38.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter39);
        org.junit.Assert.assertNotNull(iOFileFilter40);
    }

    @Test
    public void test03911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03911");
        java.io.File file0 = null;
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 100 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.impl.ArchiveEntryDocument archiveEntryDocument4 = new org.apache.rat.document.impl.ArchiveEntryDocument(file0, byteArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 100]");
    }

    @Test
    public void test03912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03912");
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.api.ContentType contentType3 = new org.apache.rat.api.ContentType("dae945c0-00a3-4e9e-b53b-5fffbbb3412b", "2e48d868-a09d-40cc-abd4-819232908bca", strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03913");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setLicenseFileNameMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = null;
        claimStatistic0.setLicenseFileNameMap(strMap5);
    }

    @Test
    public void test03914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03914");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet6.spliterator();
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        defaultLog26.setLevel(level31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration48.getLicenses(licenseFilter50);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders52 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration48.setAddLicenseHeaders(addLicenseHeaders52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter57);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier63 = reportConfiguration62.getOutput();
        reportConfiguration35.setOut(outputStreamIOSupplier63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.utils.ReportingSet.Options options71 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration69.licenseDuplicateOption(options71);
        reportConfiguration66.familyDuplicateOption(options71);
        reportConfiguration35.licenseDuplicateOption(options71);
        reportConfiguration35.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logLicenseCollisions(level81);
        reportConfiguration35.logLicenseCollisions(level81);
        defaultLog26.log(level81, "GNU General Public License, version 1");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog26);
        java.util.Comparator<? super java.lang.String> wildcardComparator87 = strSet86.comparator();
        org.apache.rat.configuration.builders.TextBuilder textBuilder88 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder90 = textBuilder88.setText("true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher91 = textBuilder88.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder93 = textBuilder88.setText("SpdxBuilder: null");
        boolean boolean94 = strSet86.remove((java.lang.Object) "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders52 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders52.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier63);
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + options71 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options71.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNull(wildcardComparator87);
        org.junit.Assert.assertNotNull(textBuilder90);
        org.junit.Assert.assertNotNull(iHeaderMatcher91);
        org.junit.Assert.assertNotNull(textBuilder93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test03915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03915");
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.api.ContentType contentType3 = new org.apache.rat.api.ContentType("8ecb8cce-06e4-400f-84d9-ad1cf6289fda", "ed0faf32-f32c-46f1-a629-4fe87704cb0e", strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03916");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        int int5 = claimStatistic0.getNumApproved();
        int int6 = claimStatistic0.getNumUnApproved();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
    }

    @Test
    public void test03917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03917");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder1 = builder0.noDefault();
        org.apache.rat.Defaults defaults2 = builder1.build();
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        java.io.FilenameFilter filenameFilter5 = reportConfiguration4.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter6 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet7 = reportConfiguration4.getLicenses(licenseFilter6);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders8 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration4.setAddLicenseHeaders(addLicenseHeaders8);
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter13);
        org.apache.rat.Reporter.listLicenses(reportConfiguration4, licenseFilter13);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders21 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration17.setAddLicenseHeaders(addLicenseHeaders21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration4, licenseFilter26);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = defaults2.getLicenses(licenseFilter26);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier34 = reportConfiguration32.getOutput();
        org.apache.rat.license.ILicense iLicense35 = null;
        reportConfiguration32.addLicense(iLicense35);
        org.apache.rat.Defaults.Builder builder37 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults38 = builder37.build();
        reportConfiguration32.setFrom(defaults38);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet41 = defaults38.getLicenses(licenseFilter40);
        java.lang.String[] strArray47 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet48 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        boolean boolean51 = strSet48.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean53 = strSet48.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction54 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet55 = strSet48.setMsgFormat(strFunction54);
        java.util.Spliterator<java.lang.String> strSpliterator56 = strSet48.spliterator();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory57 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet41, (java.util.Collection<java.lang.String>) strSet48);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory58 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet30, (java.util.Collection<java.lang.String>) strSet48);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense59 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense59.setLicenseFamilyName("hi!");
        java.lang.String str62 = fullTextMatchingLicense59.getLicenseFamilyCategory();
        java.lang.String str63 = fullTextMatchingLicense59.getLicenseFamilyName();
        fullTextMatchingLicense59.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense59.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense59.setFullText("W3C  ");
        java.lang.String str70 = fullTextMatchingLicense59.getNotes();
        fullTextMatchingLicense59.setNotes("archive W3CD ");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = strSet48.contains((java.lang.Object) fullTextMatchingLicense59);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(defaults2);
        org.junit.Assert.assertNull(filenameFilter5);
        org.junit.Assert.assertTrue("'" + licenseFilter6 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter6.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet7);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders8 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders8.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders21 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders21.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(defaults38);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(strSpliterator56);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNull(str70);
    }

    @Test
    public void test03918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03918");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        reportConfiguration1.removeApprovedLicenseCategory("The MIT License");
        org.apache.rat.license.ILicense iLicense12 = null;
        reportConfiguration1.addLicense(iLicense12);
        org.apache.rat.license.ILicense iLicense14 = null;
        reportConfiguration1.addLicense(iLicense14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        boolean boolean19 = reportConfiguration17.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier20 = reportConfiguration17.getOutput();
        org.apache.rat.utils.Log log21 = reportConfiguration17.getLog();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier22 = org.apache.rat.Defaults.getUnapprovedLicensesStyleSheet();
        reportConfiguration17.setStyleSheet(inputStreamIOSupplier22);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier22);
        java.util.SortedSet<java.lang.String> strSet25 = reportConfiguration1.getApprovedLicenseCategories();
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier20);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier22);
        org.junit.Assert.assertNotNull(strSet25);
    }

    @Test
    public void test03919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03919");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders7 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration3.setAddLicenseHeaders(addLicenseHeaders7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter12);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter12);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter25);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier31 = reportConfiguration30.getOutput();
        reportConfiguration3.setOut(outputStreamIOSupplier31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.utils.ReportingSet.Options options39 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration37.licenseDuplicateOption(options39);
        reportConfiguration34.familyDuplicateOption(options39);
        reportConfiguration3.licenseDuplicateOption(options39);
        reportConfiguration3.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        reportConfiguration46.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level49 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration46.logLicenseCollisions(level49);
        reportConfiguration3.logLicenseCollisions(level49);
        defaultLog1.setLevel(level49);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet53 = strSet0.setLog((org.apache.rat.utils.Log) defaultLog1);
        org.apache.rat.configuration.Format format54 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader55 = format54.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = licenseReader55.readLicenses();
        java.lang.String[] strArray62 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet63 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        boolean boolean66 = strSet63.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean68 = strSet63.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction69 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet70 = strSet63.setMsgFormat(strFunction69);
        boolean boolean71 = strSet63.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory72 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet56, (java.util.Collection<java.lang.String>) strSet63);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray73 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList74 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74, iLicenseFamilyArray73);
        org.apache.rat.policy.DefaultPolicy defaultPolicy76 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74);
        boolean boolean77 = strSet63.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74);
        org.apache.rat.policy.DefaultPolicy defaultPolicy78 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74);
        boolean boolean79 = strSet0.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74);
        boolean boolean81 = strSet0.add("Regex");
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders7 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders7.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier31);
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + options39 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options39.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level49 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level49.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + format54 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format54.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader55);
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test03920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03920");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder65 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str66 = copyrightBuilder65.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder68 = copyrightBuilder65.setEnd(".cvsignore");
        boolean boolean69 = copyrightBuilder65.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder71 = copyrightBuilder65.setEnd("notice");
        defaultLog0.debug((java.lang.Object) "notice");
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier75 = reportConfiguration74.getOutput();
        reportConfiguration74.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log78 = reportConfiguration74.getLog();
        org.apache.rat.utils.Log.Level level79 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration74.logFamilyCollisions(level79);
        defaultLog0.setLevel(level79);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender83 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, ".bzrignore");
        apacheV2LicenseAppender83.setForce(true);
        java.io.File file86 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str87 = apacheV2LicenseAppender83.getLicenseHeader(file86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(copyrightBuilder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str66, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder71);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier75);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + level79 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level79.equals(org.apache.rat.utils.Log.Level.INFO));
    }

    @Test
    public void test03921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03921");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        java.lang.String str11 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder13 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("ffalse");
        java.lang.String str14 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder16 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("Copyright Builder: s:OASIS e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder18 = builder16.setLicenseFamilyName("TMF http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MIT  " + "'", str8, "MIT  ");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MIT  " + "'", str11, "MIT  ");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ffalse" + "'", str14, "ffalse");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test03922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03922");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("t true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = textBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = textBuilder0.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder0.setText("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.configuration.builders.TextBuilder textBuilder8 = textBuilder0.setText("bd015714-405b-4304-9faa-36efad80e6e6");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(textBuilder6);
        org.junit.Assert.assertNotNull(textBuilder8);
    }

    @Test
    public void test03923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03923");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        simpleRegexMatcher3.reset();
        java.lang.String str5 = simpleRegexMatcher3.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 1", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state7 = simpleRegexMatcher3.currentState();
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "546f9881-8eb1-4b23-9950-45cc8fae4831" + "'", str5, "546f9881-8eb1-4b23-9950-45cc8fae4831");
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test03924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03924");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender66 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher69 = new org.apache.rat.analysis.matchers.FullTextMatcher("notice");
        boolean boolean71 = fullTextMatcher69.doMatch("2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher72 = new org.apache.rat.analysis.matchers.NotMatcher("notice", (org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher69);
        defaultLog0.debug((java.lang.Object) "notice");
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        reportConfiguration75.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level78 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration75.logFamilyCollisions(level78);
        defaultLog0.log(level78, "ebc30eb7-b3ea-4f39-baea-5fea4fa0278b");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender83 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "b49bbf96-8d22-4667-8eed-1e7199c8356e");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder84 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str85 = spdxBuilder84.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder87 = spdxBuilder84.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher88 = spdxBuilder84.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder90 = spdxBuilder84.setName("641dafc1-13c3-45d4-8272-f36f10392c53");
        java.lang.String str91 = spdxBuilder90.toString();
        defaultLog0.error((java.lang.Object) spdxBuilder90);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + level78 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level78.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(spdxBuilder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "SpdxBuilder: null" + "'", str85, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder87);
        org.junit.Assert.assertNotNull(iHeaderMatcher88);
        org.junit.Assert.assertNotNull(spdxBuilder90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "SpdxBuilder: 641dafc1-13c3-45d4-8272-f36f10392c53" + "'", str91, "SpdxBuilder: 641dafc1-13c3-45d4-8272-f36f10392c53");
    }

    @Test
    public void test03925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03925");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        defaultLog0.info((java.lang.Object) "Modified BSD License");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender4 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "W3CD ");
        org.apache.rat.utils.DefaultLog defaultLog5 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder6 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder8 = builder6.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher12 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state13 = copyrightMatcher12.finalizeState();
        org.apache.rat.license.ILicense.Builder builder14 = builder8.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher12);
        org.apache.rat.license.ILicense.Builder builder16 = builder14.setLicenseFamilyCategory("");
        defaultLog5.error((java.lang.Object) builder16);
        org.apache.rat.utils.Log.Level level18 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog5.log(level18, "JAVA");
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier23 = reportConfiguration22.getOutput();
        reportConfiguration22.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log26 = reportConfiguration22.getLog();
        org.apache.rat.utils.Log.Level level27 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration22.logFamilyCollisions(level27);
        defaultLog5.setLevel(level27);
        defaultLog0.setLevel(level27);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        reportConfiguration32.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        reportConfiguration32.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet39);
        org.apache.rat.license.ILicenseFamily iLicenseFamily41 = null;
        reportConfiguration32.addFamily(iLicenseFamily41);
        org.apache.rat.utils.DefaultLog defaultLog43 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder44 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder46 = builder44.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher50 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state51 = copyrightMatcher50.finalizeState();
        org.apache.rat.license.ILicense.Builder builder52 = builder46.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher50);
        org.apache.rat.license.ILicense.Builder builder54 = builder52.setLicenseFamilyCategory("");
        defaultLog43.error((java.lang.Object) builder54);
        org.apache.rat.utils.Log.Level level56 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog43.setLevel(level56);
        reportConfiguration32.logFamilyCollisions(level56);
        defaultLog0.setLevel(level56);
        org.apache.rat.license.ILicense[] iLicenseArray60 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet61 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet61, iLicenseArray60);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray65 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList66 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList66, iLicenseFamilyArray65);
        reportConfiguration64.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList66);
        org.apache.rat.report.IReportable iReportable69 = null;
        reportConfiguration64.setReportable(iReportable69);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet71 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray72 = strSet71.toArray();
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic75 = org.apache.rat.Reporter.report(reportConfiguration74);
        org.apache.rat.utils.Log log76 = null;
        org.apache.rat.ReportConfiguration reportConfiguration77 = new org.apache.rat.ReportConfiguration(log76);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic78 = org.apache.rat.Reporter.report(reportConfiguration77);
        org.apache.rat.utils.ReportingSet.Options options79 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration77.licenseDuplicateOption(options79);
        reportConfiguration74.familyDuplicateOption(options79);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier82 = reportConfiguration74.getWriter();
        boolean boolean83 = reportConfiguration74.isAddingLicensesForced();
        org.apache.rat.utils.Log log84 = null;
        org.apache.rat.ReportConfiguration reportConfiguration85 = new org.apache.rat.ReportConfiguration(log84);
        reportConfiguration85.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level88 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration85.logFamilyCollisions(level88);
        reportConfiguration74.logLicenseCollisions(level88);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet91 = strSet71.setLogLevel(level88);
        java.util.stream.Stream<java.lang.String> strStream92 = strSet91.stream();
        reportConfiguration64.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet91);
        org.apache.rat.utils.ReportingSet.Options options94 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet95 = strSet91.setDuplicateOption(options94);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory96 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet61, (java.util.Collection<java.lang.String>) strSet91);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser97 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog0, (java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet61);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(defaultLog5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state13.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + level18 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level18.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier23);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + level27 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level27.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertNotNull(defaultLog43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + state51 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state51.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + level56 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level56.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNotNull(iLicenseArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertNull(claimStatistic75);
        org.junit.Assert.assertNull(claimStatistic78);
        org.junit.Assert.assertTrue("'" + options79 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options79.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + level88 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level88.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(strStream92);
        org.junit.Assert.assertTrue("'" + options94 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options94.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet95);
    }

    @Test
    public void test03926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03926");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='true ']", ".cvsignore http://org/apache/rat/meta-data#LicenseFamilyName");
    }

    @Test
    public void test03927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03927");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap8);
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic0.getLicenseFileCodeMap();
        claimStatistic0.setNumUnknown(0);
        claimStatistic0.setNumUnApproved((int) (byte) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null;
        claimStatistic0.setDocumentCategoryMap(strMap15);
        java.util.Map<java.lang.String, java.lang.Integer> strMap17 = null;
        claimStatistic0.setLicenseFileNameMap(strMap17);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test03928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03928");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder3);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder3.setRefId("http:");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder6.setMatchers(strMap7);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder8.setRefId("");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap11 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder12 = matcherRefBuilder8.setMatchers(strMap11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher13 = matcherRefBuilder8.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
        org.junit.Assert.assertNotNull(matcherRefBuilder12);
    }

    @Test
    public void test03929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03929");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter8 = xmlWriter1.attribute((java.lang.CharSequence) "7934b3ba-1073-4ff1-bfc3-c46ebe8a6c06", (java.lang.CharSequence) "725f33f3-3304-4bfa-b1c1-c226b58a407e");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03930");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.Spliterator<java.lang.String> strSpliterator14 = strSet6.spliterator();
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray17 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList18 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18, iLicenseFamilyArray17);
        reportConfiguration16.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18);
        boolean boolean21 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18);
        org.apache.rat.policy.DefaultPolicy defaultPolicy22 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder23 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str24 = iLicenseFamilyBuilder23.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder26 = iLicenseFamilyBuilder23.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder28 = iLicenseFamilyBuilder23.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder30 = iLicenseFamilyBuilder23.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str31 = iLicenseFamilyBuilder23.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder33 = iLicenseFamilyBuilder23.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily34 = iLicenseFamilyBuilder23.build();
        defaultPolicy22.add(iLicenseFamily34);
        java.lang.String str36 = iLicenseFamily34.getFamilyName();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strSpliterator14);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "MIT  " + "'", str31, "MIT  ");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(iLicenseFamily34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "8ecb8cce-06e4-400f-84d9-ad1cf6289fda" + "'", str36, "8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
    }

    @Test
    public void test03931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03931");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration1.logLicenseCollisions(level31);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter33 = reportConfiguration1.getDirectoryFilter();
        java.nio.file.Path path34 = null;
        boolean boolean35 = iOFileFilter33.matches(path34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        java.io.FilenameFilter filenameFilter38 = reportConfiguration37.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = reportConfiguration37.getLicenses(licenseFilter39);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders41 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration37.setAddLicenseHeaders(addLicenseHeaders41);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic45 = org.apache.rat.Reporter.report(reportConfiguration44);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter46);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter46);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders54 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration50.setAddLicenseHeaders(addLicenseHeaders54);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = org.apache.rat.Reporter.report(reportConfiguration57);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter59);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier65 = reportConfiguration64.getOutput();
        reportConfiguration37.setOut(outputStreamIOSupplier65);
        org.apache.rat.utils.Log.Level level67 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration37.logLicenseCollisions(level67);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter69 = reportConfiguration37.getDirectoryFilter();
        java.nio.file.Path path70 = null;
        boolean boolean71 = iOFileFilter69.matches(path70);
        java.nio.file.Path path72 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes73 = null;
        java.nio.file.FileVisitResult fileVisitResult74 = iOFileFilter69.accept(path72, basicFileAttributes73);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter75 = iOFileFilter33.or(iOFileFilter69);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter76 = iOFileFilter75.negate();
        java.nio.file.Path path77 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes78 = null;
        java.nio.file.FileVisitResult fileVisitResult79 = iOFileFilter76.accept(path77, basicFileAttributes78);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level31.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(filenameFilter38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet40);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders41 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders41.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders54 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders54.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier65);
        org.junit.Assert.assertTrue("'" + level67 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level67.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult74 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult74.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter75);
        org.junit.Assert.assertNotNull(iOFileFilter76);
        org.junit.Assert.assertTrue("'" + fileVisitResult79 + "' != '" + java.nio.file.FileVisitResult.CONTINUE + "'", fileVisitResult79.equals(java.nio.file.FileVisitResult.CONTINUE));
    }

    @Test
    public void test03932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03932");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher13 = new org.apache.rat.analysis.matchers.CopyrightMatcher("AL   ", "GEN  ", "GEN  ");
        org.apache.rat.analysis.IHeaderMatcher.State state15 = copyrightMatcher13.matches(".cvsignore");
        org.apache.rat.license.ILicense.Builder builder16 = builder9.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher13);
        org.apache.rat.license.ILicense.Builder builder18 = builder16.setLicenseFamilyCategory("binary");
        org.apache.rat.license.ILicense.Builder builder20 = builder16.setNotes("a49970c4-ad7c-456c-a950-28a9913fec59");
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        reportConfiguration23.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level26 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration23.logFamilyCollisions(level26);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier28 = reportConfiguration23.getOutput();
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        reportConfiguration30.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet37 = reportConfiguration34.getLicenses(licenseFilter36);
        reportConfiguration30.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet37);
        java.io.FilenameFilter filenameFilter39 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = reportConfiguration41.getLicenses(licenseFilter43);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders45 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter50);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        java.io.FilenameFilter filenameFilter55 = reportConfiguration54.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet57 = reportConfiguration54.getLicenses(licenseFilter56);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders58 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration54.setAddLicenseHeaders(addLicenseHeaders58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter63 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration61, licenseFilter63);
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter63);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet66 = reportConfiguration41.getLicenseFamilies(licenseFilter63);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration30, licenseFilter63);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet68 = reportConfiguration23.getLicenseFamilies(licenseFilter63);
        java.util.Collection<java.lang.String> strCollection69 = null;
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory70 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet68, strCollection69);
        org.apache.rat.license.ILicenseFamily iLicenseFamily71 = org.apache.rat.license.LicenseFamilySetFactory.search("RegexBuilder: d4148d3a-edbc-4672-b347-0fa619553f91", iLicenseFamilySet68);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense72 = builder16.build(iLicenseFamilySet68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: License family binary not found.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state15.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + level26 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level26.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier28);
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet37);
        org.junit.Assert.assertNull(filenameFilter39);
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders45 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders45.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet57);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders58 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders58.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertTrue("'" + licenseFilter63 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter63.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet66);
        org.junit.Assert.assertNotNull(iLicenseFamilySet68);
        org.junit.Assert.assertNull(iLicenseFamily71);
    }

    @Test
    public void test03933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03933");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet26 = reportConfiguration1.getLicenseFamilies(licenseFilter23);
        org.apache.rat.license.ILicense[] iLicenseArray28 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet29 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet29, iLicenseArray28);
        java.lang.String[] strArray43 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory46 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet29, (java.util.Collection<java.lang.String>) strList44);
        org.apache.rat.license.ILicense iLicense47 = org.apache.rat.license.LicenseSetFactory.search("JAVA", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet29);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet29);
        boolean boolean49 = reportConfiguration1.isAddingLicensesForced();
        java.io.File file50 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setOut(file50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet26);
        org.junit.Assert.assertNotNull(iLicenseArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(iLicense47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test03934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03934");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet0 = null;
        java.lang.String[] strArray6 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet7 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        boolean boolean10 = strSet7.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor11 = strSet7.iterator();
        java.lang.Object[] objArray12 = strSet7.toArray();
        java.lang.String[] strArray18 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        boolean boolean22 = strSet19.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet23 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean24 = strSet19.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet23);
        boolean boolean25 = strSet7.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet23);
        java.util.Spliterator<java.lang.String> strSpliterator26 = strSet7.spliterator();
        org.apache.rat.utils.DefaultLog defaultLog27 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        reportConfiguration29.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level32 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration29.logFamilyCollisions(level32);
        defaultLog27.setLevel(level32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = reportConfiguration49.getLicenses(licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter58);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier64 = reportConfiguration63.getOutput();
        reportConfiguration36.setOut(outputStreamIOSupplier64);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic68 = org.apache.rat.Reporter.report(reportConfiguration67);
        org.apache.rat.utils.Log log69 = null;
        org.apache.rat.ReportConfiguration reportConfiguration70 = new org.apache.rat.ReportConfiguration(log69);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic71 = org.apache.rat.Reporter.report(reportConfiguration70);
        org.apache.rat.utils.ReportingSet.Options options72 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration70.licenseDuplicateOption(options72);
        reportConfiguration67.familyDuplicateOption(options72);
        reportConfiguration36.licenseDuplicateOption(options72);
        reportConfiguration36.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        reportConfiguration79.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level82 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration79.logLicenseCollisions(level82);
        reportConfiguration36.logLicenseCollisions(level82);
        defaultLog27.log(level82, "GNU General Public License, version 1");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet87 = strSet7.setLog((org.apache.rat.utils.Log) defaultLog27);
        boolean boolean89 = strSet7.add("Apache License Version 2.0");
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory90 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet0, (java.util.Collection<java.lang.String>) strSet7);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter91 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedSet<java.lang.String> strSet92 = licenseFamilySetFactory90.getFamilyIds(licenseFilter91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strSpliterator26);
        org.junit.Assert.assertNotNull(defaultLog27);
        org.junit.Assert.assertTrue("'" + level32 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level32.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier64);
        org.junit.Assert.assertNull(claimStatistic68);
        org.junit.Assert.assertNull(claimStatistic71);
        org.junit.Assert.assertTrue("'" + options72 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options72.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level82 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level82.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter91 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter91.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
    }

    @Test
    public void test03935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03935");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration1.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.license.ILicenseFamily iLicenseFamily6 = null;
        reportConfiguration1.addFamily(iLicenseFamily6);
        boolean boolean8 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter9 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.Defaults.Builder builder11 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults12 = builder11.build();
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet39 = reportConfiguration14.getLicenseFamilies(licenseFilter36);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = defaults12.getLicenses(licenseFilter36);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet41 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet40);
        org.apache.rat.license.ILicense iLicense42 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet40);
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(iOFileFilter9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(defaults12);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet39);
        org.junit.Assert.assertNotNull(iLicenseSet40);
        org.junit.Assert.assertNotNull(iLicense42);
    }

    @Test
    public void test03936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03936");
        org.apache.commons.cli.CommandLine commandLine1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.ReportConfiguration reportConfiguration2 = org.apache.rat.Report.createConfiguration("f7c80ac5-f6d7-4a47-993b-a27ea27d7efb", commandLine1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03937");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("3a01ef2a-65ad-4697-a3a7-bb504d3c1921");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03938");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.DefaultLog defaultLog55 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        reportConfiguration57.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level60 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration57.logFamilyCollisions(level60);
        defaultLog55.setLevel(level60);
        defaultLog0.debug((java.lang.Object) level60);
        org.apache.rat.utils.Log.Level level64 = defaultLog0.getLevel();
        org.apache.rat.utils.Log.Level level65 = org.apache.rat.utils.Log.Level.OFF;
        java.lang.String[] strArray71 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet72 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        boolean boolean75 = strSet72.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor76 = strSet72.iterator();
        java.util.Comparator<? super java.lang.String> wildcardComparator77 = strSet72.comparator();
        defaultLog0.log(level65, (java.lang.Object) wildcardComparator77);
        org.apache.rat.utils.Log.Level level79 = defaultLog0.getLevel();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic80 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic80.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap83 = null;
        claimStatistic80.setDocumentCategoryMap(strMap83);
        java.util.Map<java.lang.String, java.lang.Integer> strMap85 = claimStatistic80.getLicenseFileNameMap();
        claimStatistic80.setNumUnknown((int) (byte) -1);
        claimStatistic80.setNumGenerated((int) (short) 10);
        claimStatistic80.setNumApproved((int) (short) 0);
        java.util.Map<java.lang.String, java.lang.Integer> strMap92 = null;
        claimStatistic80.setLicenseFileCodeMap(strMap92);
        defaultLog0.error((java.lang.Object) claimStatistic80);
        java.util.Map<java.lang.String, java.lang.Integer> strMap95 = claimStatistic80.getLicenseFileCodeMap();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog55);
        org.junit.Assert.assertTrue("'" + level60 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level60.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level64 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level64.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level65 + "' != '" + org.apache.rat.utils.Log.Level.OFF + "'", level65.equals(org.apache.rat.utils.Log.Level.OFF));
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strItor76);
        org.junit.Assert.assertNull(wildcardComparator77);
        org.junit.Assert.assertTrue("'" + level79 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level79.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(strMap85);
        org.junit.Assert.assertNull(strMap95);
    }

    @Test
    public void test03939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03939");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder0.remove("GNU General Public License, version 2");
        org.apache.rat.Defaults.Builder builder8 = builder0.remove("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.Defaults.Builder builder10 = builder0.remove("MathcerRefBuilder: t true");
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder12 = builder0.remove(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test03940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03940");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        reportConfiguration2.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level5 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration2.logFamilyCollisions(level5);
        defaultLog0.setLevel(level5);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier37 = reportConfiguration36.getOutput();
        reportConfiguration9.setOut(outputStreamIOSupplier37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.utils.ReportingSet.Options options45 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration43.licenseDuplicateOption(options45);
        reportConfiguration40.familyDuplicateOption(options45);
        reportConfiguration9.licenseDuplicateOption(options45);
        reportConfiguration9.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        reportConfiguration52.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level55 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration52.logLicenseCollisions(level55);
        reportConfiguration9.logLicenseCollisions(level55);
        defaultLog0.log(level55, "GNU General Public License, version 1");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender61 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "W3C  ");
        org.apache.rat.utils.Log.Level level62 = defaultLog0.getLevel();
        org.apache.rat.api.MetaData metaData63 = new org.apache.rat.api.MetaData();
        java.lang.String str65 = metaData63.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str67 = metaData63.value("W3C Document Copyright");
        boolean boolean69 = metaData63.clear("hi!");
        java.lang.String str71 = metaData63.value("true");
        org.apache.rat.api.MetaData.Datum datum73 = metaData63.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum74 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_MIT;
        java.lang.String str75 = datum74.getName();
        metaData63.set(datum74);
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection77 = metaData63.getData();
        java.lang.String str79 = metaData63.value("null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection80 = metaData63.getData();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection81 = metaData63.getData();
        java.lang.Throwable throwable82 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.debug((java.lang.Object) datumCollection81, throwable82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + level5 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level5.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier37);
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + options45 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options45.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level55 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level55.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(datum73);
        org.junit.Assert.assertNotNull(datum74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyCategory" + "'", str75, "http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.junit.Assert.assertNotNull(datumCollection77);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(datumCollection80);
        org.junit.Assert.assertNotNull(datumCollection81);
    }

    @Test
    public void test03941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03941");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("false");
        java.lang.String str4 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder6 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("58b635db-013c-4c62-a5ea-1307084f8666");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily7 = iLicenseFamilyBuilder0.build();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Name must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "false" + "'", str4, "false");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03942");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03943");
        boolean boolean1 = org.apache.rat.document.impl.guesser.ArchiveGuesser.isArchive("9840e036-761e-48cc-9e26-9f86fbc734b2");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03944");
        org.apache.rat.license.ILicense[] iLicenseArray0 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet1 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet1, iLicenseArray0);
        java.lang.String[] strArray15 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, (java.util.Collection<java.lang.String>) strList16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet20 = licenseSetFactory18.getLicenseFamilies(licenseFilter19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter44);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet48 = licenseSetFactory18.getLicenseFamilies(licenseFilter44);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier52 = reportConfiguration50.getOutput();
        org.apache.rat.license.ILicense iLicense53 = null;
        reportConfiguration50.addLicense(iLicense53);
        org.apache.rat.Defaults.Builder builder55 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults56 = builder55.build();
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        reportConfiguration58.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        java.io.FilenameFilter filenameFilter63 = reportConfiguration62.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet65 = reportConfiguration62.getLicenses(licenseFilter64);
        reportConfiguration58.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet65);
        java.io.FilenameFilter filenameFilter67 = reportConfiguration58.getInputFileFilter();
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        java.io.FilenameFilter filenameFilter70 = reportConfiguration69.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter71 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet72 = reportConfiguration69.getLicenses(licenseFilter71);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders73 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration69.setAddLicenseHeaders(addLicenseHeaders73);
        org.apache.rat.utils.Log log75 = null;
        org.apache.rat.ReportConfiguration reportConfiguration76 = new org.apache.rat.ReportConfiguration(log75);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic77 = org.apache.rat.Reporter.report(reportConfiguration76);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter78 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration76, licenseFilter78);
        org.apache.rat.Reporter.listLicenses(reportConfiguration69, licenseFilter78);
        org.apache.rat.utils.Log log81 = null;
        org.apache.rat.ReportConfiguration reportConfiguration82 = new org.apache.rat.ReportConfiguration(log81);
        java.io.FilenameFilter filenameFilter83 = reportConfiguration82.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter84 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet85 = reportConfiguration82.getLicenses(licenseFilter84);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders86 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration82.setAddLicenseHeaders(addLicenseHeaders86);
        org.apache.rat.utils.Log log88 = null;
        org.apache.rat.ReportConfiguration reportConfiguration89 = new org.apache.rat.ReportConfiguration(log88);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic90 = org.apache.rat.Reporter.report(reportConfiguration89);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter91 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration89, licenseFilter91);
        org.apache.rat.Reporter.listLicenses(reportConfiguration82, licenseFilter91);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet94 = reportConfiguration69.getLicenseFamilies(licenseFilter91);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration58, licenseFilter91);
        java.util.SortedSet<java.lang.String> strSet96 = defaults56.getLicenseIds(licenseFilter91);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet97 = reportConfiguration50.getLicenses(licenseFilter91);
        java.util.SortedSet<java.lang.String> strSet98 = licenseSetFactory18.getLicenseFamilyIds(licenseFilter91);
        org.junit.Assert.assertNotNull(iLicenseArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet20);
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet48);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(defaults56);
        org.junit.Assert.assertNull(filenameFilter63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet65);
        org.junit.Assert.assertNull(filenameFilter67);
        org.junit.Assert.assertNull(filenameFilter70);
        org.junit.Assert.assertTrue("'" + licenseFilter71 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter71.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet72);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders73 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders73.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic77);
        org.junit.Assert.assertTrue("'" + licenseFilter78 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter78.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter83);
        org.junit.Assert.assertTrue("'" + licenseFilter84 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter84.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet85);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders86 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders86.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic90);
        org.junit.Assert.assertTrue("'" + licenseFilter91 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter91.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet94);
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertNotNull(iLicenseSet97);
        org.junit.Assert.assertNotNull(strSet98);
    }

    @Test
    public void test03945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03945");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.report.IReportable iReportable13 = null;
        reportConfiguration1.setReportable(iReportable13);
        org.apache.rat.report.IReportable iReportable15 = reportConfiguration1.getReportable();
        reportConfiguration1.setStyleReport(true);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration32.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet35 = reportConfiguration32.getLicenses(licenseFilter34);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders36 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter41);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier47 = reportConfiguration46.getOutput();
        reportConfiguration19.setOut(outputStreamIOSupplier47);
        org.apache.rat.utils.Log.Level level49 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration19.logLicenseCollisions(level49);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter51 = reportConfiguration19.getDirectoryFilter();
        java.nio.file.Path path52 = null;
        boolean boolean53 = iOFileFilter51.matches(path52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration55.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter64);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        java.io.FilenameFilter filenameFilter69 = reportConfiguration68.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter70 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet71 = reportConfiguration68.getLicenses(licenseFilter70);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders72 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration68.setAddLicenseHeaders(addLicenseHeaders72);
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic76 = org.apache.rat.Reporter.report(reportConfiguration75);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter77 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration75, licenseFilter77);
        org.apache.rat.Reporter.listLicenses(reportConfiguration68, licenseFilter77);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter77);
        org.apache.rat.utils.Log log81 = null;
        org.apache.rat.ReportConfiguration reportConfiguration82 = new org.apache.rat.ReportConfiguration(log81);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier83 = reportConfiguration82.getOutput();
        reportConfiguration55.setOut(outputStreamIOSupplier83);
        org.apache.rat.utils.Log.Level level85 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration55.logLicenseCollisions(level85);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter87 = reportConfiguration55.getDirectoryFilter();
        java.nio.file.Path path88 = null;
        boolean boolean89 = iOFileFilter87.matches(path88);
        java.nio.file.Path path90 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes91 = null;
        java.nio.file.FileVisitResult fileVisitResult92 = iOFileFilter87.accept(path90, basicFileAttributes91);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter93 = iOFileFilter51.or(iOFileFilter87);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter94 = iOFileFilter51.negate();
        reportConfiguration1.setInputFileFilter((java.io.FilenameFilter) iOFileFilter94);
        java.nio.file.Path path96 = null;
        boolean boolean97 = iOFileFilter94.matches(path96);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(iReportable15);
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet35);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders36 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders36.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier47);
        org.junit.Assert.assertTrue("'" + level49 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level49.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter69);
        org.junit.Assert.assertTrue("'" + licenseFilter70 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter70.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet71);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders72 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders72.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic76);
        org.junit.Assert.assertTrue("'" + licenseFilter77 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter77.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier83);
        org.junit.Assert.assertTrue("'" + level85 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level85.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult92 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult92.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter93);
        org.junit.Assert.assertNotNull(iOFileFilter94);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test03946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03946");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter9 = xmlWriter1.attribute((java.lang.CharSequence) "Copyright Builder: s:null e:EBC30EB7-B3EA-4F39-BAEA-5FEA4FA0278B o:null", (java.lang.CharSequence) "Copyright Builder: s:null e:null o:The MIT License");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03947");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isKeystore("RegexBuilder89662180a89f497b9301227d494d2bae");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03948");
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray0 = new org.apache.rat.document.IDocumentAnalyser[] {};
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer1 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.api.Document document2 = null;
        documentAnalyserMultiplexer1.analyse(document2);
        org.apache.rat.api.Document document4 = null;
        documentAnalyserMultiplexer1.analyse(document4);
        org.apache.rat.api.Document document6 = null;
        documentAnalyserMultiplexer1.analyse(document6);
        org.apache.rat.api.Document document8 = null;
        documentAnalyserMultiplexer1.analyse(document8);
        org.apache.rat.api.Document document10 = null;
        documentAnalyserMultiplexer1.analyse(document10);
        org.apache.rat.api.Document document12 = null;
        documentAnalyserMultiplexer1.analyse(document12);
        org.apache.rat.api.Document document14 = null;
        documentAnalyserMultiplexer1.analyse(document14);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray0);
    }

    @Test
    public void test03949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03949");
        org.apache.rat.utils.DefaultLog defaultLog2 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder3 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder5 = builder3.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher9 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state10 = copyrightMatcher9.finalizeState();
        org.apache.rat.license.ILicense.Builder builder11 = builder5.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher9);
        org.apache.rat.license.ILicense.Builder builder13 = builder11.setLicenseFamilyCategory("");
        defaultLog2.error((java.lang.Object) builder13);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher18 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher18.reset();
        org.apache.rat.license.ILicense.Builder builder20 = builder13.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher18);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher21 = new org.apache.rat.analysis.matchers.NotMatcher("AnyBuilder:\nAllBuilder:", (org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher18);
        org.apache.rat.analysis.IHeaderMatcher.State state22 = notMatcher21.finalizeState();
        java.lang.String str23 = notMatcher21.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher24 = new org.apache.rat.analysis.matchers.NotMatcher("stand", (org.apache.rat.analysis.IHeaderMatcher) notMatcher21);
        notMatcher24.reset();
        notMatcher24.reset();
        org.junit.Assert.assertNotNull(defaultLog2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state10.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state22.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AnyBuilder:\nAllBuilder:" + "'", str23, "AnyBuilder:\nAllBuilder:");
    }

    @Test
    public void test03950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03950");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd(".cvsignore");
        boolean boolean4 = copyrightBuilder0.hasId();
        boolean boolean5 = copyrightBuilder0.hasId();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = copyrightBuilder0.build();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher(iHeaderMatcher6);
        org.apache.rat.analysis.IHeaderMatcher.State state8 = notMatcher7.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state9 = notMatcher7.finalizeState();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test03951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03951");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog0.log(level13, "JAVA");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.WARN;
        defaultLog0.log(level16, "");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender19 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.configuration.builders.AllBuilder allBuilder20 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean22 = matcherRefBuilder21.hasId();
        java.lang.String str23 = matcherRefBuilder21.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder24 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder25 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str26 = notBuilder25.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean28 = matcherRefBuilder27.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap29 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder30 = matcherRefBuilder27.setMatchers(strMap29);
        org.apache.rat.configuration.builders.AllBuilder allBuilder31 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder32 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder34 = copyrightBuilder32.setStart("OASIS");
        java.lang.String str35 = copyrightBuilder32.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder37 = copyrightBuilder32.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder38 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean39 = matcherRefBuilder38.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder40 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder42 = copyrightBuilder40.setStart("OASIS");
        java.lang.String str43 = copyrightBuilder40.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder45 = copyrightBuilder40.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder46 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str48 = copyrightBuilder47.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder50 = copyrightBuilder47.setEnd(".cvsignore");
        boolean boolean51 = copyrightBuilder47.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder52 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str53 = copyrightBuilder52.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder55 = copyrightBuilder52.setEnd(".cvsignore");
        boolean boolean56 = copyrightBuilder52.hasId();
        java.lang.String str57 = copyrightBuilder52.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder58 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder60 = copyrightBuilder58.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder61 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder62 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean63 = matcherRefBuilder62.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap64 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder65 = matcherRefBuilder62.setMatchers(strMap64);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder66 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder67 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean68 = matcherRefBuilder67.hasId();
        java.lang.String str69 = matcherRefBuilder67.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap70 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder71 = matcherRefBuilder67.setMatchers(strMap70);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray72 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder27, allBuilder31, copyrightBuilder37, matcherRefBuilder38, copyrightBuilder40, copyrightBuilder46, copyrightBuilder47, copyrightBuilder52, copyrightBuilder58, anyBuilder61, matcherRefBuilder62, copyrightBuilder66, matcherRefBuilder67 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList73 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList73, builderArray72);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder75 = notBuilder25.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList73);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder76 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray77 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder21, anyBuilder24, notBuilder25, matcherRefBuilder76 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList78 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList78, builderArray77);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder80 = allBuilder20.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList78);
        java.lang.Throwable throwable81 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.error((java.lang.Object) abstractBuilder80, throwable81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level13.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level16.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(matcherRefBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "MathcerRefBuilder: null" + "'", str23, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "NotBuilder: null" + "'", str26, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder30);
        org.junit.Assert.assertNotNull(copyrightBuilder32);
        org.junit.Assert.assertNotNull(copyrightBuilder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str35, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder37);
        org.junit.Assert.assertNotNull(matcherRefBuilder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str43, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder45);
        org.junit.Assert.assertNotNull(copyrightBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str48, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str53, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str57, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder58);
        org.junit.Assert.assertNotNull(copyrightBuilder60);
        org.junit.Assert.assertNotNull(anyBuilder61);
        org.junit.Assert.assertNotNull(matcherRefBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder65);
        org.junit.Assert.assertNotNull(copyrightBuilder66);
        org.junit.Assert.assertNotNull(matcherRefBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "MathcerRefBuilder: null" + "'", str69, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder71);
        org.junit.Assert.assertNotNull(builderArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(abstractBuilder75);
        org.junit.Assert.assertNotNull(builderArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(abstractBuilder80);
    }

    @Test
    public void test03952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03952");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog0.log(level13, "JAVA");
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        defaultLog0.info((java.lang.Object) licenseFilter16);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration32.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet35 = reportConfiguration32.getLicenses(licenseFilter34);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders36 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter41);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier47 = reportConfiguration46.getOutput();
        reportConfiguration19.setOut(outputStreamIOSupplier47);
        boolean boolean49 = reportConfiguration19.isStyleReport();
        boolean boolean50 = reportConfiguration19.isStyleReport();
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        reportConfiguration52.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level55 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration52.logLicenseCollisions(level55);
        reportConfiguration19.logLicenseCollisions(level55);
        org.apache.rat.utils.Log.Level level58 = org.apache.rat.utils.Log.Level.DEBUG;
        reportConfiguration19.logLicenseCollisions(level58);
        defaultLog0.log(level58, "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender62 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        apacheV2LicenseAppender62.setForce(false);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level13.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet35);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders36 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders36.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + level55 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level55.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level58 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level58.equals(org.apache.rat.utils.Log.Level.DEBUG));
    }

    @Test
    public void test03953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03953");
        boolean boolean1 = org.apache.rat.document.impl.guesser.ArchiveGuesser.isArchive("106ab050-2110-44f8-a9e7-726c4af443ea");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03954");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter13 = xmlWriter1.content((java.lang.CharSequence) "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03955");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("GPL2 ");
        org.apache.rat.analysis.IHeaderMatcher.State state2 = fullTextMatcher1.finalizeState();
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state2.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test03956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03956");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        fullTextMatchingLicense0.setLicenseFamilyCategory("binary");
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = fullTextMatchingLicense0.getLicenseFamily();
        org.apache.rat.license.ILicenseFamily iLicenseFamily6 = fullTextMatchingLicense0.getLicenseFamily();
        org.junit.Assert.assertNotNull(iLicenseFamily5);
        org.junit.Assert.assertNotNull(iLicenseFamily6);
    }

    @Test
    public void test03957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03957");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter11 = xmlWriter1.openElement((java.lang.CharSequence) "JAVA");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03958");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str3 = spdxBuilder2.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder5 = spdxBuilder2.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = spdxBuilder2.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder11 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder2);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder12 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str13 = anyBuilder12.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList14 = anyBuilder12.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher15 = anyBuilder12.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher16 = anyBuilder12.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList17 = anyBuilder12.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder18 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str19 = notBuilder18.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder20 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean21 = matcherRefBuilder20.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap22 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder23 = matcherRefBuilder20.setMatchers(strMap22);
        org.apache.rat.configuration.builders.AllBuilder allBuilder24 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = copyrightBuilder25.setStart("OASIS");
        java.lang.String str28 = copyrightBuilder25.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder25.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder31 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean32 = matcherRefBuilder31.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        java.lang.String str36 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder38 = copyrightBuilder33.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder40 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str41 = copyrightBuilder40.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder43 = copyrightBuilder40.setEnd(".cvsignore");
        boolean boolean44 = copyrightBuilder40.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder45 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str46 = copyrightBuilder45.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder48 = copyrightBuilder45.setEnd(".cvsignore");
        boolean boolean49 = copyrightBuilder45.hasId();
        java.lang.String str50 = copyrightBuilder45.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder51 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder53 = copyrightBuilder51.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder54 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder55 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean56 = matcherRefBuilder55.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap57 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder58 = matcherRefBuilder55.setMatchers(strMap57);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder59 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder60 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean61 = matcherRefBuilder60.hasId();
        java.lang.String str62 = matcherRefBuilder60.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap63 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder64 = matcherRefBuilder60.setMatchers(strMap63);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray65 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder20, allBuilder24, copyrightBuilder30, matcherRefBuilder31, copyrightBuilder33, copyrightBuilder39, copyrightBuilder40, copyrightBuilder45, copyrightBuilder51, anyBuilder54, matcherRefBuilder55, copyrightBuilder59, matcherRefBuilder60 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList66 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList66, builderArray65);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder68 = notBuilder18.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList66);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder69 = anyBuilder12.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList66);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder70 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList66);
        org.apache.rat.configuration.builders.AllBuilder allBuilder71 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher72 = allBuilder71.build();
        org.apache.rat.configuration.builders.AllBuilder allBuilder73 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher74 = allBuilder73.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher75 = allBuilder73.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher76 = allBuilder73.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder77 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str78 = copyrightBuilder77.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder80 = copyrightBuilder77.setEnd(".cvsignore");
        boolean boolean81 = copyrightBuilder77.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder83 = copyrightBuilder77.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder84 = allBuilder73.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder77);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder86 = copyrightBuilder77.setEnd("Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder87 = allBuilder71.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder86);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder88 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder86);
        java.lang.String str89 = copyrightBuilder86.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "SpdxBuilder: null" + "'", str3, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(abstractBuilder11);
        org.junit.Assert.assertNotNull(anyBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AnyBuilder:" + "'", str13, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList14);
        org.junit.Assert.assertNotNull(iHeaderMatcher15);
        org.junit.Assert.assertNotNull(iHeaderMatcher16);
        org.junit.Assert.assertNotNull(iHeaderMatcherList17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NotBuilder: null" + "'", str19, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder23);
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str28, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertNotNull(matcherRefBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str36, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder38);
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str41, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str46, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str50, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder51);
        org.junit.Assert.assertNotNull(copyrightBuilder53);
        org.junit.Assert.assertNotNull(anyBuilder54);
        org.junit.Assert.assertNotNull(matcherRefBuilder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder58);
        org.junit.Assert.assertNotNull(copyrightBuilder59);
        org.junit.Assert.assertNotNull(matcherRefBuilder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "MathcerRefBuilder: null" + "'", str62, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder64);
        org.junit.Assert.assertNotNull(builderArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(abstractBuilder68);
        org.junit.Assert.assertNotNull(abstractBuilder69);
        org.junit.Assert.assertNotNull(abstractBuilder70);
        org.junit.Assert.assertNotNull(iHeaderMatcher72);
        org.junit.Assert.assertNotNull(iHeaderMatcher74);
        org.junit.Assert.assertNotNull(iHeaderMatcher75);
        org.junit.Assert.assertNotNull(iHeaderMatcher76);
        org.junit.Assert.assertNotNull(copyrightBuilder77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str78, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder83);
        org.junit.Assert.assertNotNull(abstractBuilder84);
        org.junit.Assert.assertNotNull(copyrightBuilder86);
        org.junit.Assert.assertNotNull(abstractBuilder87);
        org.junit.Assert.assertNotNull(abstractBuilder88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Copyright Builder: s:null e:Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null o:3c840dc2-bef0-42b5-b26c-35a568d53a24" + "'", str89, "Copyright Builder: s:null e:Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null o:3c840dc2-bef0-42b5-b26c-35a568d53a24");
    }

    @Test
    public void test03959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03959");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = copyrightBuilder7.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setOwner("TextBuilder: Datum [ name ='http:...");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder14 = copyrightBuilder7.setStart("f9686227-2048-447b-8a8f-3164382365d2");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher15 = copyrightBuilder7.build();
            org.junit.Assert.fail("Expected exception of type java.util.regex.PatternSyntaxException; message: Unclosed character class near index 97?\\s+((\\([Cc]\\)|?)\\s+)?f9686227-2048-447b-8a8f-3164382365d2,?\\s+TextBuilder: Datum [ name ='http:...?                                                                                                 ^");
        } catch (java.util.regex.PatternSyntaxException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(copyrightBuilder14);
    }

    @Test
    public void test03960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03960");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Iterator<java.lang.String> strItor25 = strSet6.iterator();
        java.util.Comparator<? super java.lang.String> wildcardComparator26 = strSet6.comparator();
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic29 = org.apache.rat.Reporter.report(reportConfiguration28);
        reportConfiguration28.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet32 = reportConfiguration28.getApprovedLicenseCategories();
        java.io.FilenameFilter filenameFilter33 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.utils.ReportingSet.Options options37 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration35.licenseDuplicateOption(options37);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet40 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily41 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet40);
        org.apache.rat.policy.DefaultPolicy defaultPolicy42 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet40);
        reportConfiguration35.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet40);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet44 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray45 = strSet44.toArray();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory46 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet40, (java.util.Collection<java.lang.String>) strSet44);
        reportConfiguration28.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet44);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str49 = anyBuilder48.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList50 = anyBuilder48.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher51 = anyBuilder48.build();
        org.apache.rat.license.ILicense.Builder builder52 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder54 = builder52.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher56 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder57 = builder52.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher56);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder58 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str59 = anyBuilder58.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList60 = anyBuilder58.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher61 = anyBuilder58.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher62 = anyBuilder58.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList63 = anyBuilder58.getChildren();
        org.apache.rat.license.ILicense.Builder builder64 = builder52.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) anyBuilder58);
        org.apache.rat.configuration.builders.AnyBuilder[] anyBuilderArray65 = new org.apache.rat.configuration.builders.AnyBuilder[] { anyBuilder48, anyBuilder58 };
        org.apache.rat.configuration.builders.AnyBuilder[] anyBuilderArray66 = strSet44.toArray(anyBuilderArray65);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray67 = strSet6.toArray((org.apache.rat.analysis.IHeaderMatcher.Builder[]) anyBuilderArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNull(wildcardComparator26);
        org.junit.Assert.assertNull(claimStatistic29);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + options37 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options37.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilySet40);
        org.junit.Assert.assertNull(iLicenseFamily41);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(anyBuilder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "AnyBuilder:" + "'", str49, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList50);
        org.junit.Assert.assertNotNull(iHeaderMatcher51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(anyBuilder58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "AnyBuilder:" + "'", str59, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList60);
        org.junit.Assert.assertNotNull(iHeaderMatcher61);
        org.junit.Assert.assertNotNull(iHeaderMatcher62);
        org.junit.Assert.assertNotNull(iHeaderMatcherList63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(anyBuilderArray65);
        org.junit.Assert.assertNotNull(anyBuilderArray66);
    }

    @Test
    public void test03961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03961");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet8 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray9 = strSet8.toArray();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.utils.ReportingSet.Options options16 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration14.licenseDuplicateOption(options16);
        reportConfiguration11.familyDuplicateOption(options16);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier19 = reportConfiguration11.getWriter();
        boolean boolean20 = reportConfiguration11.isAddingLicensesForced();
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        reportConfiguration22.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level25 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration22.logFamilyCollisions(level25);
        reportConfiguration11.logLicenseCollisions(level25);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet28 = strSet8.setLogLevel(level25);
        java.util.stream.Stream<java.lang.String> strStream29 = strSet28.stream();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet28);
        org.apache.rat.report.IReportable iReportable31 = null;
        reportConfiguration1.setReportable(iReportable31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.utils.ReportingSet.Options options39 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration37.licenseDuplicateOption(options39);
        reportConfiguration34.familyDuplicateOption(options39);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier42 = reportConfiguration34.getWriter();
        boolean boolean43 = reportConfiguration34.isAddingLicensesForced();
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logFamilyCollisions(level48);
        reportConfiguration34.logLicenseCollisions(level48);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        java.io.FilenameFilter filenameFilter53 = reportConfiguration52.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration52.getLicenses(licenseFilter54);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders56 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration52.setAddLicenseHeaders(addLicenseHeaders56);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic60 = org.apache.rat.Reporter.report(reportConfiguration59);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter61 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter61);
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter61);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders64 = org.apache.rat.config.AddLicenseHeaders.FORCED;
        reportConfiguration52.setAddLicenseHeaders(addLicenseHeaders64);
        reportConfiguration34.setAddLicenseHeaders(addLicenseHeaders64);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders64);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertTrue("'" + options16 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options16.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + level25 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level25.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + options39 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options39.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders56 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders56.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic60);
        org.junit.Assert.assertTrue("'" + licenseFilter61 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter61.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertTrue("'" + addLicenseHeaders64 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FORCED + "'", addLicenseHeaders64.equals(org.apache.rat.config.AddLicenseHeaders.FORCED));
    }

    @Test
    public void test03962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03962");
        boolean boolean1 = org.apache.rat.document.impl.guesser.ArchiveGuesser.isArchive("true");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03963");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        reportConfiguration2.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level5 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration2.logFamilyCollisions(level5);
        defaultLog0.setLevel(level5);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.utils.ReportingSet.Options options10 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration9.licenseDuplicateOption(options10);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration13.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet16 = reportConfiguration13.getLicenses(licenseFilter15);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders17 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration13.setAddLicenseHeaders(addLicenseHeaders17);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic21 = org.apache.rat.Reporter.report(reportConfiguration20);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter22);
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter22);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration26.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet29 = reportConfiguration26.getLicenses(licenseFilter28);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders30 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration26.setAddLicenseHeaders(addLicenseHeaders30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter35);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier41 = reportConfiguration40.getOutput();
        reportConfiguration13.setOut(outputStreamIOSupplier41);
        org.apache.rat.utils.Log.Level level43 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration13.logLicenseCollisions(level43);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter45 = reportConfiguration13.getDirectoryFilter();
        reportConfiguration9.setInputFileFilter((java.io.FilenameFilter) iOFileFilter45);
        java.nio.file.Path path47 = null;
        boolean boolean48 = iOFileFilter45.matches(path47);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter49 = iOFileFilter45.negate();
        java.nio.file.Path path50 = null;
        boolean boolean51 = iOFileFilter45.matches(path50);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter52 = iOFileFilter45.negate();
        java.nio.file.Path path53 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes54 = null;
        java.nio.file.FileVisitResult fileVisitResult55 = iOFileFilter52.accept(path53, basicFileAttributes54);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter56 = iOFileFilter52.negate();
        defaultLog0.debug((java.lang.Object) iOFileFilter56);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + level5 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level5.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + options10 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options10.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet16);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders17 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders17.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet29);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders30 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders30.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier41);
        org.junit.Assert.assertTrue("'" + level43 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level43.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(iOFileFilter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(iOFileFilter52);
        org.junit.Assert.assertTrue("'" + fileVisitResult55 + "' != '" + java.nio.file.FileVisitResult.CONTINUE + "'", fileVisitResult55.equals(java.nio.file.FileVisitResult.CONTINUE));
        org.junit.Assert.assertNotNull(iOFileFilter56);
    }

    @Test
    public void test03964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03964");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setFullText("AnyBuilder:\nAllBuilder:");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyName();
        java.lang.String str8 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("W3C Software Copyright null");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test03965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03965");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.MatcherBuilderTracker.addBuilder("ffa6f6cf-d0e9-457f-aa74-6d159e7c6009", "a31c35e6-bb4e-4807-ad11-4dc9b09d976b");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: java.lang.ClassNotFoundException: ffa6f6cf-d0e9-457f-aa74-6d159e7c6009");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03966");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        reportConfiguration2.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level5 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration2.logFamilyCollisions(level5);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier7 = reportConfiguration2.getOutput();
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        reportConfiguration9.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration13.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet16 = reportConfiguration13.getLicenses(licenseFilter15);
        reportConfiguration9.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet45 = reportConfiguration20.getLicenseFamilies(licenseFilter42);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration9, licenseFilter42);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet47 = reportConfiguration2.getLicenseFamilies(licenseFilter42);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter48 = reportConfiguration2.getDirectoryFilter();
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.utils.ReportingSet.Options options51 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        java.io.FilenameFilter filenameFilter55 = reportConfiguration54.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet57 = reportConfiguration54.getLicenses(licenseFilter56);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders58 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration54.setAddLicenseHeaders(addLicenseHeaders58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter63 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration61, licenseFilter63);
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter63);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        java.io.FilenameFilter filenameFilter68 = reportConfiguration67.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter69 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet70 = reportConfiguration67.getLicenses(licenseFilter69);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders71 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration67.setAddLicenseHeaders(addLicenseHeaders71);
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic75 = org.apache.rat.Reporter.report(reportConfiguration74);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter76 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration74, licenseFilter76);
        org.apache.rat.Reporter.listLicenses(reportConfiguration67, licenseFilter76);
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter76);
        org.apache.rat.utils.Log log80 = null;
        org.apache.rat.ReportConfiguration reportConfiguration81 = new org.apache.rat.ReportConfiguration(log80);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier82 = reportConfiguration81.getOutput();
        reportConfiguration54.setOut(outputStreamIOSupplier82);
        org.apache.rat.utils.Log.Level level84 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration54.logLicenseCollisions(level84);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter86 = reportConfiguration54.getDirectoryFilter();
        reportConfiguration50.setInputFileFilter((java.io.FilenameFilter) iOFileFilter86);
        java.nio.file.Path path88 = null;
        boolean boolean89 = iOFileFilter86.matches(path88);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter90 = iOFileFilter48.or(iOFileFilter86);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker91 = new org.apache.rat.walker.DirectoryWalker(file0, iOFileFilter90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + level5 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level5.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier7);
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet16);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet45);
        org.junit.Assert.assertNotNull(iLicenseFamilySet47);
        org.junit.Assert.assertNotNull(iOFileFilter48);
        org.junit.Assert.assertTrue("'" + options51 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options51.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet57);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders58 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders58.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertTrue("'" + licenseFilter63 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter63.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter68);
        org.junit.Assert.assertTrue("'" + licenseFilter69 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter69.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet70);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders71 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders71.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic75);
        org.junit.Assert.assertTrue("'" + licenseFilter76 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter76.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier82);
        org.junit.Assert.assertTrue("'" + level84 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level84.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(iOFileFilter90);
    }

    @Test
    public void test03967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03967");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinary("Copyright Builder: s:null e:null o:a1abad46-6a98-44f8-aa20-7839919a8270");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03968");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        java.lang.Object obj55 = null;
        defaultLog0.debug(obj55);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender57 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender59 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        java.io.File file60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = apacheV2LicenseAppender59.getLicenseHeader(file60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test03969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03969");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        java.lang.String str4 = copyrightMatcher3.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state5 = copyrightMatcher3.finalizeState();
        java.lang.String str6 = copyrightMatcher3.toString();
        copyrightMatcher3.reset();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "6f2b4022-35cc-4b09-8df5-79e286566ad3" + "'", str4, "6f2b4022-35cc-4b09-8df5-79e286566ad3");
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6f2b4022-35cc-4b09-8df5-79e286566ad3" + "'", str6, "6f2b4022-35cc-4b09-8df5-79e286566ad3");
    }

    @Test
    public void test03970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03970");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense0.setFullText("W3C  ");
        java.lang.String str11 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str12 = fullTextMatchingLicense0.getLicenseFamilyName();
        java.lang.String str13 = fullTextMatchingLicense0.getLicenseFamilyName();
        java.lang.String str14 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "TMF" + "'", str11, "TMF");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "SpdxBuilder: null" + "'", str12, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "SpdxBuilder: null" + "'", str13, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "TMF" + "'", str14, "TMF");
    }

    @Test
    public void test03971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03971");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = reportConfiguration1.getDirectoryFilter();
        java.lang.String[] strArray12 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean16 = strSet13.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean18 = strSet13.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction19 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet20 = strSet13.setMsgFormat(strFunction19);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily23 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet22);
        boolean boolean24 = strSet13.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet13);
        org.apache.rat.report.IReportable iReportable26 = null;
        reportConfiguration1.setReportable(iReportable26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray30 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList31 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList31, iLicenseFamilyArray30);
        reportConfiguration29.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList31);
        reportConfiguration29.addApprovedLicenseCategory("http://org/apache/rat/meta-data");
        org.apache.rat.report.IReportable iReportable36 = reportConfiguration29.getReportable();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter37 = reportConfiguration29.getDirectoryFilter();
        reportConfiguration1.setDirectoryFilter(iOFileFilter37);
        org.apache.rat.report.IReportable iReportable39 = null;
        reportConfiguration1.setReportable(iReportable39);
        java.lang.String str41 = reportConfiguration1.getCopyrightMessage();
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertNull(iLicenseFamily23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(iReportable36);
        org.junit.Assert.assertNotNull(iOFileFilter37);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test03972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03972");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher3 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("641dafc1-13c3-45d4-8272-f36f10392c53", "8f82a952-5bfd-446b-ac79-15beef5b3f17");
        boolean boolean5 = simpleTextMatcher3.doMatch("The MIT License");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher("", (org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher3);
        boolean boolean8 = simpleTextMatcher3.doMatch("REGEXBUILDER: NULL");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test03973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03973");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        simpleLicenseFamily0.setFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        simpleLicenseFamily0.setFamilyName("f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        java.lang.String str5 = simpleLicenseFamily0.toString();
        java.lang.String str6 = simpleLicenseFamily0.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c" + "'", str5, "null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c" + "'", str6, "null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
    }

    @Test
    public void test03974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03974");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        org.apache.rat.utils.Log.Level level47 = defaultLog0.getLevel();
        defaultLog0.warn((java.lang.Object) 0);
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily50 = new org.apache.rat.license.SimpleLicenseFamily();
        simpleLicenseFamily50.setFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str53 = simpleLicenseFamily50.toString();
        defaultLog0.warn((java.lang.Object) simpleLicenseFamily50);
        simpleLicenseFamily50.setFamilyCategory("SPDX:.cvsignore");
        simpleLicenseFamily50.setFamilyCategory("standard");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertTrue("'" + level47 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level47.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "null http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str53, "null http://org/apache/rat/meta-data#LicenseFamilyName");
    }

    @Test
    public void test03975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03975");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        reportConfiguration1.addApprovedLicenseCategory("http://org/apache/rat/meta-data");
        org.apache.rat.report.IReportable iReportable8 = reportConfiguration1.getReportable();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter9 = reportConfiguration1.getDirectoryFilter();
        reportConfiguration1.removeApprovedLicenseCategory("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.apache.rat.license.ILicense[] iLicenseArray13 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet14 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet14, iLicenseArray13);
        java.lang.String[] strArray28 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory31 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet14, (java.util.Collection<java.lang.String>) strList29);
        org.apache.rat.license.ILicense iLicense32 = org.apache.rat.license.LicenseSetFactory.search("binary", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet14);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet33 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet14);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet34 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet33);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet33);
        org.apache.rat.report.IReportable iReportable36 = null;
        reportConfiguration1.setReportable(iReportable36);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iReportable8);
        org.junit.Assert.assertNotNull(iOFileFilter9);
        org.junit.Assert.assertNotNull(iLicenseArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(iLicense32);
    }

    @Test
    public void test03976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03976");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        reportConfiguration3.logFamilyCollisions(level16);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder20 = builder19.noDefault();
        defaultLog0.log(level16, (java.lang.Object) builder19);
        org.apache.rat.Defaults.Builder builder22 = builder19.noDefault();
        java.net.URL uRL23 = null;
        org.apache.rat.Defaults.Builder builder24 = builder22.remove(uRL23);
        org.apache.rat.Defaults defaults25 = builder24.build();
        java.net.URL uRL26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder27 = builder24.add(uRL26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(defaults25);
    }

    @Test
    public void test03977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03977");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        boolean boolean3 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier4 = reportConfiguration1.getOutput();
        org.apache.rat.utils.Log log5 = reportConfiguration1.getLog();
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic8 = org.apache.rat.Reporter.report(reportConfiguration7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.utils.ReportingSet.Options options12 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration10.licenseDuplicateOption(options12);
        reportConfiguration7.familyDuplicateOption(options12);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier15 = reportConfiguration7.getWriter();
        boolean boolean16 = reportConfiguration7.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter17 = reportConfiguration7.getInputFileFilter();
        java.io.FilenameFilter filenameFilter18 = reportConfiguration7.getInputFileFilter();
        boolean boolean19 = reportConfiguration7.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier20 = reportConfiguration7.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter21 = reportConfiguration7.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter22 = reportConfiguration7.getDirectoryFilter();
        reportConfiguration1.setDirectoryFilter(iOFileFilter22);
        boolean boolean24 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.DefaultLog defaultLog25 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder26 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder28 = builder26.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher32 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state33 = copyrightMatcher32.finalizeState();
        org.apache.rat.license.ILicense.Builder builder34 = builder28.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher32);
        org.apache.rat.license.ILicense.Builder builder36 = builder34.setLicenseFamilyCategory("");
        defaultLog25.error((java.lang.Object) builder36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        java.io.FilenameFilter filenameFilter40 = reportConfiguration39.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet42 = reportConfiguration39.getLicenses(licenseFilter41);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders43 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration39.setAddLicenseHeaders(addLicenseHeaders43);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic47 = org.apache.rat.Reporter.report(reportConfiguration46);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter48);
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter48);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        java.io.FilenameFilter filenameFilter53 = reportConfiguration52.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration52.getLicenses(licenseFilter54);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders56 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration52.setAddLicenseHeaders(addLicenseHeaders56);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic60 = org.apache.rat.Reporter.report(reportConfiguration59);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter61 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter61);
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter61);
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter61);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier67 = reportConfiguration66.getOutput();
        reportConfiguration39.setOut(outputStreamIOSupplier67);
        org.apache.rat.utils.Log.Level level69 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration39.logLicenseCollisions(level69);
        defaultLog25.warn((java.lang.Object) level69);
        defaultLog25.info((java.lang.Object) "TextBuilder: Datum [ name ='http:...");
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        java.io.FilenameFilter filenameFilter76 = reportConfiguration75.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter77 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet78 = reportConfiguration75.getLicenses(licenseFilter77);
        org.apache.rat.license.ILicenseFamily iLicenseFamily79 = null;
        reportConfiguration75.addFamily(iLicenseFamily79);
        reportConfiguration75.setCopyrightMessage("hi!");
        defaultLog25.error((java.lang.Object) reportConfiguration75);
        org.apache.rat.utils.Log.Level level84 = defaultLog25.getLevel();
        reportConfiguration1.logLicenseCollisions(level84);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(claimStatistic8);
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + options12 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options12.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier20);
        org.junit.Assert.assertNotNull(iOFileFilter21);
        org.junit.Assert.assertNotNull(iOFileFilter22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(defaultLog25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state33.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(filenameFilter40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet42);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders43 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders43.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders56 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders56.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic60);
        org.junit.Assert.assertTrue("'" + licenseFilter61 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter61.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier67);
        org.junit.Assert.assertTrue("'" + level69 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level69.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNull(filenameFilter76);
        org.junit.Assert.assertTrue("'" + licenseFilter77 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter77.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet78);
        org.junit.Assert.assertTrue("'" + level84 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level84.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test03978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03978");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender65 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender68 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "MathcerRefBuilder: RegexBuilder: null");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender69 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        java.lang.String[] strArray75 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet76 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        boolean boolean79 = strSet76.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor80 = strSet76.iterator();
        java.lang.Object[] objArray81 = strSet76.toArray();
        java.lang.String[] strArray87 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet88 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet88, strArray87);
        boolean boolean91 = strSet88.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet92 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean93 = strSet88.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet92);
        boolean boolean94 = strSet76.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet92);
        java.util.Spliterator<java.lang.String> strSpliterator95 = strSet76.spliterator();
        boolean boolean97 = strSet76.addIfNotPresent("RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.Throwable throwable98 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.info((java.lang.Object) strSet76, throwable98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strItor80);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(strSpliterator95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test03979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03979");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum4 = metaData0.get("Copyright Builder: s:null e:.cvsignore o:null");
        java.lang.String str6 = metaData0.value("W3C Software Copyright");
        java.lang.String str8 = metaData0.value("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.api.MetaData.Datum datum9 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATUM_FALSE;
        metaData0.add(datum9);
        java.lang.String str12 = metaData0.value("ece24682-3459-4761-bb85-7fc8538fa181");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(datum4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(datum9);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test03980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03980");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender66 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        java.io.File file69 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration68.setStyleSheet(file69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
    }

    @Test
    public void test03981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03981");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.license.ILicense.Builder builder7 = builder0.setDerivedFrom("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher10 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state11 = fullTextMatcher10.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher12 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher10);
        boolean boolean14 = fullTextMatcher10.doMatch("JAVA");
        org.apache.rat.license.ILicense.Builder builder15 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher10);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = org.apache.rat.Reporter.report(reportConfiguration17);
        org.apache.rat.utils.ReportingSet.Options options19 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration17.licenseDuplicateOption(options19);
        org.apache.rat.license.ILicenseFamily iLicenseFamily21 = null;
        reportConfiguration17.addFamily(iLicenseFamily21);
        org.apache.rat.Defaults.Builder builder23 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults24 = builder23.build();
        org.apache.rat.license.ILicense[] iLicenseArray25 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet26 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet26, iLicenseArray25);
        java.lang.String[] strArray40 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory43 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet26, (java.util.Collection<java.lang.String>) strList41);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration45.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet48 = reportConfiguration45.getLicenses(licenseFilter47);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders49 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration45.setAddLicenseHeaders(addLicenseHeaders49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter54);
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter54);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        java.io.FilenameFilter filenameFilter59 = reportConfiguration58.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet61 = reportConfiguration58.getLicenses(licenseFilter60);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders62 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration58.setAddLicenseHeaders(addLicenseHeaders62);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter67 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration65, licenseFilter67);
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter67);
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter67);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet71 = licenseSetFactory43.getLicenses(licenseFilter67);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet72 = defaults24.getLicenseFamilies(licenseFilter67);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet73 = reportConfiguration17.getLicenseFamilies(licenseFilter67);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense74 = builder0.build(iLicenseFamilySet73);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state11.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(claimStatistic18);
        org.junit.Assert.assertTrue("'" + options19 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options19.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(defaults24);
        org.junit.Assert.assertNotNull(iLicenseArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet48);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders49 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders49.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet61);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders62 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders62.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertTrue("'" + licenseFilter67 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter67.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet71);
        org.junit.Assert.assertNotNull(iLicenseFamilySet72);
        org.junit.Assert.assertNotNull(iLicenseFamilySet73);
    }

    @Test
    public void test03982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03982");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = allBuilder1.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder3 = anyBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder1);
        java.lang.String str4 = anyBuilder0.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = anyBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = anyBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = anyBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher.State state8 = iHeaderMatcher7.finalizeState();
        java.lang.String str9 = iHeaderMatcher7.getId();
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(abstractBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AnyBuilder:\nAllBuilder:" + "'", str4, "AnyBuilder:\nAllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fe1443e4-8fdf-4a11-a787-3f57d63a08dd" + "'", str9, "fe1443e4-8fdf-4a11-a787-3f57d63a08dd");
    }

    @Test
    public void test03983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03983");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration1.getLicenses(licenseFilter51);
        boolean boolean56 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.utils.ReportingSet.Options options63 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration61.licenseDuplicateOption(options63);
        reportConfiguration58.familyDuplicateOption(options63);
        reportConfiguration1.familyDuplicateOption(options63);
        java.util.SortedSet<java.lang.String> strSet67 = reportConfiguration1.getApprovedLicenseCategories();
        java.lang.String[] strArray73 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet74 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        boolean boolean77 = strSet74.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean79 = strSet74.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction80 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet81 = strSet74.setMsgFormat(strFunction80);
        java.lang.String str82 = strSet74.last();
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet74);
        java.util.SortedSet<java.lang.String> strSet84 = reportConfiguration1.getApprovedLicenseCategories();
        java.lang.String str85 = reportConfiguration1.getCopyrightMessage();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertTrue("'" + options63 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options63.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str82, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test03984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03984");
        boolean boolean1 = org.apache.rat.document.impl.guesser.NoteGuesser.isNote("NOTBU");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03985");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder5 = builder4.noDefault();
        org.apache.rat.Defaults.Builder builder7 = builder4.remove("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.Defaults.Builder builder9 = builder4.add("0925e382-79b7-417a-85be-aed683d949e2");
        java.net.URL uRL10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder11 = builder9.add(uRL10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test03986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03986");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.license.ILicense.Builder builder11 = builder4.setNotes("http:");
        org.apache.rat.license.ILicense.Builder builder13 = builder11.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder15 = builder11.setName("a8ad4");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test03987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03987");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("binary");
        simpleTextMatcher1.reset();
        java.lang.String str3 = simpleTextMatcher1.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = simpleTextMatcher1.currentState();
        boolean boolean6 = simpleTextMatcher1.doMatch("standard");
        org.apache.rat.analysis.IHeaderMatcher.State state7 = simpleTextMatcher1.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state8 = simpleTextMatcher1.finalizeState();
        boolean boolean9 = state8.asBoolean();
        boolean boolean10 = state8.asBoolean();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "688df92f-f2ac-4527-846e-6d6bf8643eb7" + "'", str3, "688df92f-f2ac-4527-846e-6d6bf8643eb7");
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test03988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03988");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("f02d0cdc36424583b71fdd84a120752c", "org/apache/rat/plain-rat.xsl");
    }

    @Test
    public void test03989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03989");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("GPL3 ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = sPDXMatcherFactory0.create("6620e9ee-d651-4c18-8162-edad6d18368e");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = sPDXMatcherFactory0.create("Copyright Builder: s:null e:null o:null");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher(iHeaderMatcher6);
        org.apache.rat.analysis.IHeaderMatcher.State state8 = iHeaderMatcher6.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state9 = iHeaderMatcher6.finalizeState();
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test03990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03990");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder14 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str15 = iLicenseFamilyBuilder14.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder17 = iLicenseFamilyBuilder14.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder19 = iLicenseFamilyBuilder14.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder21 = iLicenseFamilyBuilder14.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str22 = iLicenseFamilyBuilder14.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder24 = iLicenseFamilyBuilder14.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily25 = iLicenseFamilyBuilder14.build();
        java.lang.String str26 = iLicenseFamilyBuilder14.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder28 = iLicenseFamilyBuilder14.setLicenseFamilyName("?????");
        java.lang.String str29 = iLicenseFamilyBuilder14.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder31 = iLicenseFamilyBuilder14.setLicenseFamilyName("f02d0cdc-3642-4583-b71f-dd84a120752c");
        reportConfiguration13.addFamily(builder31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        reportConfiguration34.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        java.io.FilenameFilter filenameFilter39 = reportConfiguration38.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet41 = reportConfiguration38.getLicenses(licenseFilter40);
        reportConfiguration34.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet41);
        reportConfiguration34.setCopyrightMessage("MathcerRefBuilder: null");
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        reportConfiguration46.addApprovedLicenseCategory(".cvsignore");
        boolean boolean49 = reportConfiguration46.isStyleReport();
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier53 = reportConfiguration51.getOutput();
        org.apache.rat.license.ILicense iLicense54 = null;
        reportConfiguration51.addLicense(iLicense54);
        org.apache.rat.Defaults.Builder builder56 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults57 = builder56.build();
        reportConfiguration51.setFrom(defaults57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray61 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList62 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList62, iLicenseFamilyArray61);
        reportConfiguration60.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList62);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense65 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense65.setLicenseFamilyName("hi!");
        java.lang.String str68 = fullTextMatchingLicense65.getLicenseFamilyCategory();
        java.lang.String str69 = fullTextMatchingLicense65.getLicenseFamilyName();
        fullTextMatchingLicense65.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense65.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily74 = fullTextMatchingLicense65.getLicenseFamily();
        reportConfiguration60.addFamily(iLicenseFamily74);
        java.lang.String str76 = iLicenseFamily74.getFamilyName();
        java.lang.String str77 = iLicenseFamily74.getFamilyName();
        reportConfiguration51.addApprovedLicenseCategory(iLicenseFamily74);
        reportConfiguration46.addApprovedLicenseCategory(iLicenseFamily74);
        java.lang.String str80 = iLicenseFamily74.getFamilyCategory();
        java.lang.String str81 = iLicenseFamily74.getFamilyName();
        java.lang.String str82 = iLicenseFamily74.getFamilyName();
        reportConfiguration34.addFamily(iLicenseFamily74);
        reportConfiguration13.addFamily(iLicenseFamily74);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MIT  " + "'", str22, "MIT  ");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(iLicenseFamily25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "MIT  " + "'", str26, "MIT  ");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "MIT  " + "'", str29, "MIT  ");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(filenameFilter39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet41);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(defaults57);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "SpdxBuilder: null" + "'", str76, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "SpdxBuilder: null" + "'", str77, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "TMF  " + "'", str80, "TMF  ");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "SpdxBuilder: null" + "'", str81, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "SpdxBuilder: null" + "'", str82, "SpdxBuilder: null");
    }

    @Test
    public void test03991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03991");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense3 = null;
        reportConfiguration1.addLicense(iLicense3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier7 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier7);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier9 = reportConfiguration1.getStyleSheet();
        java.lang.String str10 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder11 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str12 = iLicenseFamilyBuilder11.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder14 = iLicenseFamilyBuilder11.setLicenseFamilyName("W3C Document Copyright");
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.addFamily((org.apache.rat.license.ILicenseFamily.Builder) iLicenseFamilyBuilder11);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier7);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test03992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03992");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isKeystore("f5f3fb9b-540a-43ef-a018-8ce5779e23f4");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test03993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03993");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = copyrightBuilder7.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setOwner("TextBuilder: Datum [ name ='http:...");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder14 = copyrightBuilder12.setStart("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher15 = copyrightBuilder12.build();
            org.junit.Assert.fail("Expected exception of type java.util.regex.PatternSyntaxException; message: Unclosed character class near index 175?\\s+((\\([Cc]\\)|?)\\s+)?Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 '],?\\s+TextBuilder: Datum [ name ='http:...?                                                                                                                                                                               ^");
        } catch (java.util.regex.PatternSyntaxException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(copyrightBuilder14);
    }

    @Test
    public void test03994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03994");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("false");
        java.lang.String str4 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder6 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("GPL3 ");
        org.apache.rat.license.ILicenseFamily.Builder builder8 = builder6.setLicenseFamilyCategory("33ac78df-d24f-43c9-beeb-83abf1fa7aa0");
        java.lang.String str9 = builder6.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "false" + "'", str4, "false");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "33ac78df-d24f-43c9-beeb-83abf1fa7aa0" + "'", str9, "33ac78df-d24f-43c9-beeb-83abf1fa7aa0");
    }

    @Test
    public void test03995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03995");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.report.IReportable iReportable3 = null;
        reportConfiguration1.setReportable(iReportable3);
        org.apache.rat.license.ILicense iLicense5 = null;
        reportConfiguration1.addLicense(iLicense5);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray8 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList9 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList9, iLicenseFamilyArray8);
        org.apache.rat.policy.DefaultPolicy defaultPolicy11 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList9);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet12 = defaultPolicy11.getApprovedLicenseNames();
        org.apache.rat.license.ILicenseFamily iLicenseFamily13 = org.apache.rat.license.LicenseFamilySetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", iLicenseFamilySet12);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet12);
        java.lang.Class<?> wildcardClass15 = iLicenseFamilySet12.getClass();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet12);
        org.junit.Assert.assertNull(iLicenseFamily13);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test03996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03996");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration1.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.license.ILicenseFamily iLicenseFamily6 = null;
        reportConfiguration1.addFamily(iLicenseFamily6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.rat.utils.ReportingSet.Options options14 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration12.licenseDuplicateOption(options14);
        reportConfiguration9.familyDuplicateOption(options14);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier17 = reportConfiguration9.getWriter();
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        reportConfiguration19.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level22 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration19.logFamilyCollisions(level22);
        reportConfiguration9.logFamilyCollisions(level22);
        java.io.FilenameFilter filenameFilter25 = reportConfiguration9.getInputFileFilter();
        reportConfiguration9.setCopyrightMessage("7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        java.io.FilenameFilter filenameFilter55 = reportConfiguration29.getInputFileFilter();
        reportConfiguration29.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable58 = null;
        reportConfiguration29.setReportable(iReportable58);
        org.apache.rat.Defaults.Builder builder61 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults62 = builder61.build();
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        java.io.FilenameFilter filenameFilter65 = reportConfiguration64.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet67 = reportConfiguration64.getLicenses(licenseFilter66);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders68 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration64.setAddLicenseHeaders(addLicenseHeaders68);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic72 = org.apache.rat.Reporter.report(reportConfiguration71);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter73 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration71, licenseFilter73);
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter73);
        org.apache.rat.utils.Log log76 = null;
        org.apache.rat.ReportConfiguration reportConfiguration77 = new org.apache.rat.ReportConfiguration(log76);
        java.io.FilenameFilter filenameFilter78 = reportConfiguration77.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter79 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet80 = reportConfiguration77.getLicenses(licenseFilter79);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders81 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration77.setAddLicenseHeaders(addLicenseHeaders81);
        org.apache.rat.utils.Log log83 = null;
        org.apache.rat.ReportConfiguration reportConfiguration84 = new org.apache.rat.ReportConfiguration(log83);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic85 = org.apache.rat.Reporter.report(reportConfiguration84);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter86 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration84, licenseFilter86);
        org.apache.rat.Reporter.listLicenses(reportConfiguration77, licenseFilter86);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet89 = reportConfiguration64.getLicenseFamilies(licenseFilter86);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet90 = defaults62.getLicenses(licenseFilter86);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet91 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet90);
        org.apache.rat.license.ILicense iLicense92 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet90);
        reportConfiguration29.addLicense(iLicense92);
        java.lang.String str94 = iLicense92.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily95 = iLicense92.getLicenseFamily();
        org.apache.rat.license.ILicenseFamily iLicenseFamily96 = iLicense92.getLicenseFamily();
        org.apache.rat.license.ILicenseFamily iLicenseFamily97 = iLicense92.getLicenseFamily();
        reportConfiguration9.addLicense(iLicense92);
        reportConfiguration1.addLicense(iLicense92);
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertTrue("'" + options14 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options14.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier17);
        org.junit.Assert.assertTrue("'" + level22 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level22.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter25);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter55);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(defaults62);
        org.junit.Assert.assertNull(filenameFilter65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet67);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders68 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders68.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic72);
        org.junit.Assert.assertTrue("'" + licenseFilter73 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter73.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter78);
        org.junit.Assert.assertTrue("'" + licenseFilter79 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter79.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet80);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders81 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders81.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic85);
        org.junit.Assert.assertTrue("'" + licenseFilter86 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter86.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet89);
        org.junit.Assert.assertNotNull(iLicenseSet90);
        org.junit.Assert.assertNotNull(iLicense92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "BSD-3" + "'", str94, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily95);
        org.junit.Assert.assertNotNull(iLicenseFamily96);
        org.junit.Assert.assertNotNull(iLicenseFamily97);
    }

    @Test
    public void test03997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03997");
        java.lang.String[] strArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("f96ad0b6-2267-4692-93e4-227659f9d621", strArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03998");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter3 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.license.ILicense.Builder builder4 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setLicenseFamilyCategory("W3CD ");
        org.apache.rat.license.ILicense.Builder builder8 = builder6.setDerivedFrom("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.apache.rat.license.ILicense.Builder builder10 = builder6.setName("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense11 = reportConfiguration1.addLicense(builder10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Matcher must not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNotNull(iOFileFilter3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test03999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03999");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder2 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("Modified BSD License");
        java.lang.String str3 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("SpdxBuilder: 7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        java.lang.String str6 = builder5.getCategory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Modified BSD License" + "'", str3, "Modified BSD License");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Modified BSD License" + "'", str6, "Modified BSD License");
    }

    @Test
    public void test04000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test04000");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinary("7480723c65a64470aa58975de51fe7c5");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }
}
