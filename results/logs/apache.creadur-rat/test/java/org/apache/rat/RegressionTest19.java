package org.apache.rat;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest19 {

    public static boolean debug = false;

    @Test
    public void test09501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09501");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap1 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = matcherRefBuilder0.setMatchers(strMap1);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder4 = matcherRefBuilder0.setRefId("38e4211d-0f24-4ec0-aa5c-260c68412f39");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = matcherRefBuilder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertNotNull(matcherRefBuilder4);
    }

    @Test
    public void test09502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09502");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("t true");
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder4 = textBuilder0.setText("c523095e-4421-4cc4-93e2-039f23b91f76");
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder0.setText("TMF  ");
        java.lang.String str7 = textBuilder6.toString();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textCaptureBuilder4);
        org.junit.Assert.assertNotNull(textBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "TextBuilder: TMF  " + "'", str7, "TextBuilder: TMF  ");
    }

    @Test
    public void test09503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09503");
        java.lang.String[] strArray3 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean4 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("Copyright Builder: s:null e:.cvsignore o:null", strArray3);
        boolean boolean5 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("CopyrightBuildersarchiveenullonull", strArray3);
        boolean boolean6 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("AllBuilder:\nSpdxBuilder: 7d01b1b3-e7b9-4f85-b3dd-e0334dea8844\nMathcerRefBuilder: null\nAllBuilder:\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nMathcerRefBuilder: null\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nCopyright Builder: s:null e:null o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:OASIS e:null o:null\nAnyBuilder:\nMathcerRefBuilder: null\nCopyright Builder: s:null e:null o:null\nMathcerRefBuilder: null", strArray3);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09504");
        java.io.File file0 = null;
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) 0, (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.impl.ArchiveEntryDocument archiveEntryDocument7 = new org.apache.rat.document.impl.ArchiveEntryDocument(file0, byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, 1, 0, 1]");
    }

    @Test
    public void test09505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09505");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        defaultLog0.info((java.lang.Object) "TextBuilder: Datum [ name ='http:...");
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders54 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration50.setAddLicenseHeaders(addLicenseHeaders54);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = org.apache.rat.Reporter.report(reportConfiguration57);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter59);
        org.apache.rat.report.IReportable iReportable62 = null;
        reportConfiguration50.setReportable(iReportable62);
        java.lang.String str64 = reportConfiguration50.getCopyrightMessage();
        defaultLog0.warn((java.lang.Object) reportConfiguration50);
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders54 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders54.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test09506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09506");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet7 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = strSet7.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray10 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray11 = strSet9.toArray(licenseReaderArray10);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic14 = org.apache.rat.Reporter.report(reportConfiguration13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.utils.ReportingSet.Options options18 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration16.licenseDuplicateOption(options18);
        reportConfiguration13.familyDuplicateOption(options18);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet9.setDuplicateOption(options18);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet9);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.utils.ReportingSet.Options options29 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration27.licenseDuplicateOption(options29);
        reportConfiguration24.familyDuplicateOption(options29);
        boolean boolean32 = reportConfiguration24.isStyleReport();
        boolean boolean33 = reportConfiguration24.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter34 = reportConfiguration24.getInputFileFilter();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier35 = reportConfiguration24.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        java.io.FilenameFilter filenameFilter39 = reportConfiguration38.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet41 = reportConfiguration38.getLicenses(licenseFilter40);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders42 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration38.setAddLicenseHeaders(addLicenseHeaders42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic46 = org.apache.rat.Reporter.report(reportConfiguration45);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter47);
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter47);
        reportConfiguration38.addApprovedLicenseCategory("W3C Software Copyright");
        org.apache.rat.report.IReportable iReportable52 = null;
        reportConfiguration38.setReportable(iReportable52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray56 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList57 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList57, iLicenseFamilyArray56);
        reportConfiguration55.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList57);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense60 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense60.setLicenseFamilyName("hi!");
        java.lang.String str63 = fullTextMatchingLicense60.getLicenseFamilyCategory();
        java.lang.String str64 = fullTextMatchingLicense60.getLicenseFamilyName();
        fullTextMatchingLicense60.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense60.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily69 = fullTextMatchingLicense60.getLicenseFamily();
        reportConfiguration55.addFamily(iLicenseFamily69);
        reportConfiguration38.addApprovedLicenseCategory(iLicenseFamily69);
        org.apache.rat.utils.Log log72 = reportConfiguration38.getLog();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter73 = reportConfiguration38.getDirectoryFilter();
        reportConfiguration1.setInputFileFilter((java.io.FilenameFilter) iOFileFilter73);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter75 = reportConfiguration1.getDirectoryFilter();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(licenseReaderArray10);
        org.junit.Assert.assertNotNull(licenseReaderArray11);
        org.junit.Assert.assertNull(claimStatistic14);
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + options18 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options18.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + options29 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options29.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier35);
        org.junit.Assert.assertNull(filenameFilter39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet41);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders42 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders42.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilyArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily69);
        org.junit.Assert.assertNull(log72);
        org.junit.Assert.assertNotNull(iOFileFilter73);
        org.junit.Assert.assertNotNull(iOFileFilter75);
    }

    @Test
    public void test09507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09507");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("W3CD ");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setName("true|false|forced");
        org.apache.rat.license.ILicense.Builder builder8 = builder6.setLicenseFamilyCategory("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.apache.rat.license.ILicense.Builder builder10 = builder8.setNotes("");
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setNotes("Apache License Version 2.0");
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder15 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder17 = builder15.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher21 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state22 = copyrightMatcher21.finalizeState();
        org.apache.rat.license.ILicense.Builder builder23 = builder17.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher21);
        org.apache.rat.license.ILicense.Builder builder25 = builder23.setLicenseFamilyCategory("");
        defaultLog14.error((java.lang.Object) builder25);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher30 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher30.reset();
        org.apache.rat.license.ILicense.Builder builder32 = builder25.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher30);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher33 = new org.apache.rat.analysis.matchers.NotMatcher("AnyBuilder:\nAllBuilder:", (org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher30);
        org.apache.rat.analysis.IHeaderMatcher.State state34 = notMatcher33.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state35 = notMatcher33.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state36 = notMatcher33.currentState();
        org.apache.rat.license.ILicense.Builder builder37 = builder10.setMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher33);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state22.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state34.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state35 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state35.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state36 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state36.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test09508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09508");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder2 = regexBuilder0.setExpr("67eb96c2-83b2-456d-bfb0-23ff916bf212");
        java.lang.String str3 = regexBuilder2.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder5 = regexBuilder2.setExpr("3af3d9f1-2089-4a2b-bde3-3e80aa30f07f");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder7 = regexBuilder5.setId("REGEXBUILDER: NULL");
        org.junit.Assert.assertNotNull(regexBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "RegexBuilder: 67eb96c2-83b2-456d-bfb0-23ff916bf212" + "'", str3, "RegexBuilder: 67eb96c2-83b2-456d-bfb0-23ff916bf212");
        org.junit.Assert.assertNotNull(regexBuilder5);
        org.junit.Assert.assertNotNull(abstractBuilder7);
    }

    @Test
    public void test09509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09509");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet8 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray9 = strSet8.toArray();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.utils.ReportingSet.Options options16 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration14.licenseDuplicateOption(options16);
        reportConfiguration11.familyDuplicateOption(options16);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier19 = reportConfiguration11.getWriter();
        boolean boolean20 = reportConfiguration11.isAddingLicensesForced();
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        reportConfiguration22.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level25 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration22.logFamilyCollisions(level25);
        reportConfiguration11.logLicenseCollisions(level25);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet28 = strSet8.setLogLevel(level25);
        java.util.stream.Stream<java.lang.String> strStream29 = strSet28.stream();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.report.IReportable iReportable34 = null;
        reportConfiguration32.setReportable(iReportable34);
        org.apache.rat.license.ILicense iLicense36 = null;
        reportConfiguration32.addLicense(iLicense36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.utils.ReportingSet.Options options40 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration39.licenseDuplicateOption(options40);
        reportConfiguration32.familyDuplicateOption(options40);
        reportConfiguration1.familyDuplicateOption(options40);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier44 = org.apache.rat.Defaults.getUnapprovedLicensesStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier44);
        java.lang.String[] strArray51 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet52 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        boolean boolean55 = strSet52.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean57 = strSet52.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.stream.Stream<java.lang.String> strStream58 = strSet52.stream();
        org.apache.rat.utils.DefaultLog defaultLog59 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        reportConfiguration61.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level64 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration61.logFamilyCollisions(level64);
        defaultLog59.setLevel(level64);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet67 = strSet52.setLogLevel(level64);
        boolean boolean68 = strSet67.isEmpty();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet67);
        java.lang.String str70 = strSet67.first();
        int int71 = strSet67.size();
        boolean boolean73 = strSet67.addIfNotPresent("6f2b4022-35cc-4b09-8df5-79e286566ad3");
        boolean boolean74 = strSet67.isEmpty();
        java.util.Comparator<? super java.lang.String> wildcardComparator75 = strSet67.comparator();
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertTrue("'" + options16 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options16.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + level25 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level25.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertTrue("'" + options40 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options40.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(inputStreamIOSupplier44);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strStream58);
        org.junit.Assert.assertNotNull(defaultLog59);
        org.junit.Assert.assertTrue("'" + level64 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level64.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "AllBuilder:" + "'", str70, "AllBuilder:");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 7 + "'", int71 == 7);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(wildcardComparator75);
    }

    @Test
    public void test09510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09510");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = fullTextMatchingLicense0.getLicenseFamily();
        fullTextMatchingLicense0.setFullText("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        java.lang.String str12 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("Datum [ name ='http://org/apache/rat/meta-data#FileCategory',value ='standard ']");
        fullTextMatchingLicense0.setLicenseFamilyName("RegexBuilder: 67eb96c2-83b2-456d-bfb0-23ff916bf212");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "TMF" + "'", str12, "TMF");
    }

    @Test
    public void test09511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09511");
        boolean boolean1 = org.apache.rat.document.impl.guesser.NoteGuesser.isNote("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09512");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder0.remove("GNU General Public License, version 2");
        org.apache.rat.Defaults.Builder builder8 = builder0.remove("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.Defaults.Builder builder10 = builder0.remove("MathcerRefBuilder: t true");
        org.apache.rat.Defaults.Builder builder11 = builder10.noDefault();
        org.apache.rat.Defaults.Builder builder13 = builder11.add("8F0EE536-38AE-476A-A728-DE95E24C13C3");
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder15 = builder13.remove(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test09513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09513");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("987586d0-619c-4912-a291-bfbb4a7014f9", "b1db9857-a506-44af-b49f-cf1fc4c885c7", "c523095e-4421-4cc4-93e2-039f23b91f76 http://org/apache/rat/meta-data#ApprovedLicense");
    }

    @Test
    public void test09514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09514");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        reportConfiguration65.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level68 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration65.logFamilyCollisions(level68);
        defaultLog0.setLevel(level68);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender72 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        java.io.FilenameFilter filenameFilter76 = reportConfiguration75.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter77 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet78 = reportConfiguration75.getLicenses(licenseFilter77);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders79 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration75.setAddLicenseHeaders(addLicenseHeaders79);
        org.apache.rat.utils.Log log81 = null;
        org.apache.rat.ReportConfiguration reportConfiguration82 = new org.apache.rat.ReportConfiguration(log81);
        reportConfiguration82.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level85 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration82.logLicenseCollisions(level85);
        reportConfiguration75.logFamilyCollisions(level85);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier88 = reportConfiguration75.getStyleSheet();
        org.apache.rat.utils.Log log89 = null;
        org.apache.rat.ReportConfiguration reportConfiguration90 = new org.apache.rat.ReportConfiguration(log89);
        reportConfiguration90.addApprovedLicenseCategory(".cvsignore");
        boolean boolean93 = reportConfiguration90.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier94 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration90.setStyleSheet(inputStreamIOSupplier94);
        reportConfiguration75.setStyleSheet(inputStreamIOSupplier94);
        reportConfiguration73.setStyleSheet(inputStreamIOSupplier94);
        org.apache.rat.utils.Log log98 = reportConfiguration73.getLog();
        boolean boolean99 = reportConfiguration73.isStyleReport();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertTrue("'" + level68 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level68.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter76);
        org.junit.Assert.assertTrue("'" + licenseFilter77 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter77.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet78);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders79 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders79.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertTrue("'" + level85 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level85.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(inputStreamIOSupplier88);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier94);
        org.junit.Assert.assertNotNull(log98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test09515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09515");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        fullTextMatchingLicense0.setFullText("MANIFEST.MF");
        fullTextMatchingLicense0.setFullText("JAVA");
        fullTextMatchingLicense0.setFullText("8128040d-ca94-4f3f-9deb-6252acd449bd");
        java.lang.String str9 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setNotes("MathcerRefBuilder: ");
        java.lang.String str12 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test09516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09516");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender65 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender67 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "NotBuilder: null");
        java.io.File file68 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = apacheV2LicenseAppender67.getLicenseHeader(file68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
    }

    @Test
    public void test09517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09517");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = null;
        claimStatistic0.setLicenseFileNameMap(strMap5);
        int int7 = claimStatistic0.getNumUnknown();
        claimStatistic0.setNumUnknown(6);
        int int10 = claimStatistic0.getNumUnknown();
        claimStatistic0.setNumGenerated(14);
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null;
        claimStatistic0.setLicenseFileNameMap(strMap13);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
    }

    @Test
    public void test09518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09518");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        reportConfiguration1.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log5 = reportConfiguration1.getLog();
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier8 = reportConfiguration7.getOutput();
        reportConfiguration7.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log11 = reportConfiguration7.getLog();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier12 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration7.setStyleSheet(inputStreamIOSupplier12);
        java.lang.String str14 = reportConfiguration7.getCopyrightMessage();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter15 = reportConfiguration7.getDirectoryFilter();
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.license.ILicenseFamily iLicenseFamily21 = null;
        reportConfiguration17.addFamily(iLicenseFamily21);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter23 = reportConfiguration17.getDirectoryFilter();
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        java.io.FilenameFilter filenameFilter26 = reportConfiguration25.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet28 = reportConfiguration25.getLicenses(licenseFilter27);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders29 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration25.setAddLicenseHeaders(addLicenseHeaders29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter34);
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter34);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        java.io.FilenameFilter filenameFilter39 = reportConfiguration38.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet41 = reportConfiguration38.getLicenses(licenseFilter40);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders42 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration38.setAddLicenseHeaders(addLicenseHeaders42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic46 = org.apache.rat.Reporter.report(reportConfiguration45);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter47);
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter47);
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter47);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier53 = reportConfiguration52.getOutput();
        reportConfiguration25.setOut(outputStreamIOSupplier53);
        org.apache.rat.utils.Log.Level level55 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration25.logLicenseCollisions(level55);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter57 = reportConfiguration25.getDirectoryFilter();
        java.nio.file.Path path58 = null;
        boolean boolean59 = iOFileFilter57.matches(path58);
        java.nio.file.Path path60 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes61 = null;
        java.nio.file.FileVisitResult fileVisitResult62 = iOFileFilter57.accept(path60, basicFileAttributes61);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter63 = iOFileFilter23.or(iOFileFilter57);
        java.nio.file.Path path64 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes65 = null;
        java.nio.file.FileVisitResult fileVisitResult66 = iOFileFilter63.accept(path64, basicFileAttributes65);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter67 = iOFileFilter63.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter68 = iOFileFilter15.or(iOFileFilter67);
        reportConfiguration1.setDirectoryFilter(iOFileFilter15);
        java.net.URI uRI70 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRI70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier8);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MANIFEST.MF" + "'", str14, "MANIFEST.MF");
        org.junit.Assert.assertNotNull(iOFileFilter15);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertNotNull(iOFileFilter23);
        org.junit.Assert.assertNull(filenameFilter26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet28);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders29 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders29.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet41);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders42 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders42.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier53);
        org.junit.Assert.assertTrue("'" + level55 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level55.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult62 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult62.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter63);
        org.junit.Assert.assertTrue("'" + fileVisitResult66 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult66.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter67);
        org.junit.Assert.assertNotNull(iOFileFilter68);
    }

    @Test
    public void test09519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09519");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        boolean boolean2 = metaData0.clear("MANIFEST.MF");
        metaData0.clear();
        org.apache.rat.api.MetaData.Datum datum4 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_GPL1;
        java.lang.String str5 = datum4.getValue();
        metaData0.set(datum4);
        org.apache.rat.api.MetaData metaData7 = new org.apache.rat.api.MetaData();
        java.lang.String str9 = metaData7.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str11 = metaData7.value("W3C Document Copyright");
        boolean boolean13 = metaData7.clear("hi!");
        java.lang.String str15 = metaData7.value("true");
        org.apache.rat.api.MetaData.Datum datum17 = metaData7.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum19 = metaData7.get("http:");
        org.apache.rat.api.MetaData.Datum datum20 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATIM_TRUE;
        metaData7.add(datum20);
        java.lang.String str22 = datum20.toString();
        metaData0.add(datum20);
        org.apache.rat.api.MetaData.Datum datum26 = new org.apache.rat.api.MetaData.Datum("GNU General Public License, version 2", "021187d7-27c2-4fd9-bc74-8cc00413ee52");
        java.lang.String str27 = datum26.toString();
        metaData0.add(datum26);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(datum4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GPL1 " + "'", str5, "GPL1 ");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(datum17);
        org.junit.Assert.assertNull(datum19);
        org.junit.Assert.assertNotNull(datum20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='true ']" + "'", str22, "Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='true ']");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Datum [ name ='GNU General Public License, version 2',value ='021187d7-27c2-4fd9-bc74-8cc00413ee52 ']" + "'", str27, "Datum [ name ='GNU General Public License, version 2',value ='021187d7-27c2-4fd9-bc74-8cc00413ee52 ']");
    }

    @Test
    public void test09520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09520");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher14 = new org.apache.rat.analysis.matchers.FullTextMatcher("notice", "3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.analysis.IHeaderMatcher.State state16 = fullTextMatcher14.matches("The MIT License");
        boolean boolean17 = strSet6.equals((java.lang.Object) state16);
        org.apache.rat.utils.DefaultLog defaultLog18 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender19 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.utils.ReportingSet.Options options26 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration24.licenseDuplicateOption(options26);
        reportConfiguration21.familyDuplicateOption(options26);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier29 = reportConfiguration21.getWriter();
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        reportConfiguration31.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level34 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration31.logFamilyCollisions(level34);
        reportConfiguration21.logFamilyCollisions(level34);
        org.apache.rat.Defaults.Builder builder37 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder38 = builder37.noDefault();
        defaultLog18.log(level34, (java.lang.Object) builder37);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet40 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog18);
        java.lang.Object obj41 = null;
        defaultLog18.debug(obj41);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state16.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(defaultLog18);
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + options26 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options26.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier29);
        org.junit.Assert.assertTrue("'" + level34 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level34.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strSet40);
    }

    @Test
    public void test09521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09521");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher6 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state7 = copyrightMatcher6.finalizeState();
        org.apache.rat.license.ILicense.Builder builder8 = builder2.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher6);
        org.apache.rat.license.ILicense.Builder builder10 = builder8.setNotes("8f0ee536-38ae-476a-a728-de95e24c13c3");
        org.apache.rat.license.ILicense.Builder builder12 = builder8.setDerivedFrom("274c6a15-09f6-4bfd-ac53-1827770eb507");
        java.util.regex.Pattern pattern14 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher15 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern14);
        java.lang.String str16 = simpleRegexMatcher15.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state17 = simpleRegexMatcher15.currentState();
        org.apache.rat.license.ILicense.Builder builder18 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher15);
        org.apache.rat.license.ILicense.Builder builder20 = builder12.setName("f629778c-c97c-4f52-a91a-ec6e154d2523");
        org.apache.rat.license.ILicense.Builder builder22 = builder12.setLicenseFamilyCategory("0925e382-79b7-417a-85be-aed683d949e2");
        org.apache.rat.Defaults.Builder builder23 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults24 = builder23.build();
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet30 = defaults24.getLicenseFamilies(licenseFilter28);
        org.apache.rat.policy.DefaultPolicy defaultPolicy31 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet30);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet32 = defaultPolicy31.getApprovedLicenseNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense33 = builder12.build(iLicenseFamilySet32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: License family 0925e382-79b7-417a-85be-aed683d949e2 not found.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "d77edee3-77dc-4a1b-ad35-3e6a769286e5" + "'", str16, "d77edee3-77dc-4a1b-ad35-3e6a769286e5");
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state17.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(defaults24);
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet30);
        org.junit.Assert.assertNotNull(iLicenseFamilySet32);
    }

    @Test
    public void test09522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09522");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration1.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.List<java.lang.String> strList6 = org.apache.rat.config.SourceCodeManagementSystems.getPluginExclusions();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList6);
        org.apache.rat.Defaults.Builder builder8 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder9 = builder8.noDefault();
        org.apache.rat.Defaults defaults10 = builder9.build();
        org.apache.rat.Defaults.Builder builder11 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults12 = builder11.build();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet14 = defaults12.getLicenseFamilies(licenseFilter13);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet15 = defaults10.getLicenseFamilies(licenseFilter13);
        org.apache.rat.license.ILicense[] iLicenseArray17 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet18 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet18, iLicenseArray17);
        java.lang.String[] strArray32 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory35 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet18, (java.util.Collection<java.lang.String>) strList33);
        org.apache.rat.license.ILicense iLicense36 = org.apache.rat.license.LicenseSetFactory.search("GNU General Public License, version 1", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet18);
        org.apache.rat.configuration.Format format38 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader39 = format38.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader40 = format38.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader41 = format38.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet42 = licenseReader41.readLicenses();
        org.apache.rat.license.ILicense iLicense43 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet42);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet44 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        int int45 = strSet44.size();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory46 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet42, (java.util.Collection<java.lang.String>) strSet44);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory47 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet18, (java.util.Collection<java.lang.String>) strSet44);
        org.apache.rat.license.ILicense[] iLicenseArray48 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet49 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet49, iLicenseArray48);
        java.lang.String[] strArray63 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory66 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet49, (java.util.Collection<java.lang.String>) strList64);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        java.io.FilenameFilter filenameFilter69 = reportConfiguration68.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter70 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet71 = reportConfiguration68.getLicenses(licenseFilter70);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders72 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration68.setAddLicenseHeaders(addLicenseHeaders72);
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic76 = org.apache.rat.Reporter.report(reportConfiguration75);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter77 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration75, licenseFilter77);
        org.apache.rat.Reporter.listLicenses(reportConfiguration68, licenseFilter77);
        org.apache.rat.utils.Log log80 = null;
        org.apache.rat.ReportConfiguration reportConfiguration81 = new org.apache.rat.ReportConfiguration(log80);
        java.io.FilenameFilter filenameFilter82 = reportConfiguration81.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter83 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet84 = reportConfiguration81.getLicenses(licenseFilter83);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders85 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration81.setAddLicenseHeaders(addLicenseHeaders85);
        org.apache.rat.utils.Log log87 = null;
        org.apache.rat.ReportConfiguration reportConfiguration88 = new org.apache.rat.ReportConfiguration(log87);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic89 = org.apache.rat.Reporter.report(reportConfiguration88);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter90 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration88, licenseFilter90);
        org.apache.rat.Reporter.listLicenses(reportConfiguration81, licenseFilter90);
        org.apache.rat.Reporter.listLicenses(reportConfiguration68, licenseFilter90);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet94 = licenseSetFactory66.getLicenses(licenseFilter90);
        java.util.SortedSet<java.lang.String> strSet95 = licenseSetFactory47.getLicenseFamilyIds(licenseFilter90);
        java.util.SortedSet<java.lang.String> strSet96 = defaults10.getLicenseIds(licenseFilter90);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet97 = reportConfiguration1.getLicenseFamilies(licenseFilter90);
        java.net.URI uRI98 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRI98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(defaults10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(defaults12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet14);
        org.junit.Assert.assertNotNull(iLicenseFamilySet15);
        org.junit.Assert.assertNotNull(iLicenseArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(iLicense36);
        org.junit.Assert.assertTrue("'" + format38 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format38.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader39);
        org.junit.Assert.assertNotNull(matcherReader40);
        org.junit.Assert.assertNotNull(licenseReader41);
        org.junit.Assert.assertNotNull(iLicenseSet42);
        org.junit.Assert.assertNull(iLicense43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(iLicenseArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(filenameFilter69);
        org.junit.Assert.assertTrue("'" + licenseFilter70 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter70.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet71);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders72 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders72.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic76);
        org.junit.Assert.assertTrue("'" + licenseFilter77 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter77.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter82);
        org.junit.Assert.assertTrue("'" + licenseFilter83 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter83.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet84);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders85 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders85.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic89);
        org.junit.Assert.assertTrue("'" + licenseFilter90 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter90.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet94);
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertNotNull(iLicenseFamilySet97);
    }

    @Test
    public void test09523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09523");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setNotes("TextBuilder: true");
        java.lang.String str6 = fullTextMatchingLicense0.getNotes();
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "TextBuilder: true" + "'", str6, "TextBuilder: true");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test09524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09524");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense0.setFullText("W3C  ");
        java.lang.String str11 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setNotes("7e27cd62-4403-40ab-a9f5-16e7c59ab2f1");
        org.apache.rat.license.ILicense.Builder builder14 = fullTextMatchingLicense0.getLicense();
        org.apache.rat.license.ILicense.Builder builder16 = builder14.setLicenseFamilyCategory("6d0dc81b-a121-4b6e-985f-5f9a42eb3c51");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test09525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09525");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray0 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList1 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1, iLicenseFamilyArray0);
        org.apache.rat.policy.DefaultPolicy defaultPolicy3 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet4 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.license.ILicense[] iLicenseArray5 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet6 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet6, iLicenseArray5);
        java.lang.String[] strArray20 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory23 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet6, (java.util.Collection<java.lang.String>) strList21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet25 = licenseSetFactory23.getLicenseFamilies(licenseFilter24);
        org.apache.rat.license.ILicense[] iLicenseArray26 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet27 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet27, iLicenseArray26);
        java.lang.String[] strArray41 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory44 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet27, (java.util.Collection<java.lang.String>) strList42);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration46.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = reportConfiguration46.getLicenses(licenseFilter48);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders50 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration46.setAddLicenseHeaders(addLicenseHeaders50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter55);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        java.io.FilenameFilter filenameFilter60 = reportConfiguration59.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter61 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = reportConfiguration59.getLicenses(licenseFilter61);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders63 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration59.setAddLicenseHeaders(addLicenseHeaders63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter68);
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter68);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter68);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet72 = licenseSetFactory44.getLicenses(licenseFilter68);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet73 = licenseSetFactory23.getLicenseFamilies(licenseFilter68);
        org.apache.rat.policy.DefaultPolicy defaultPolicy74 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet73);
        org.apache.rat.api.Document document75 = null;
        defaultPolicy74.analyse(document75);
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray77 = new org.apache.rat.document.IDocumentAnalyser[] {};
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer78 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray77);
        org.apache.rat.api.Document document79 = null;
        documentAnalyserMultiplexer78.analyse(document79);
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray81 = new org.apache.rat.document.IDocumentAnalyser[] { defaultPolicy3, defaultPolicy74, documentAnalyserMultiplexer78 };
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer82 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray81);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer83 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray81);
        org.apache.rat.api.Document document84 = null;
        documentAnalyserMultiplexer83.analyse(document84);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet4);
        org.junit.Assert.assertNotNull(iLicenseArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet25);
        org.junit.Assert.assertNotNull(iLicenseArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders50 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders50.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter60);
        org.junit.Assert.assertTrue("'" + licenseFilter61 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter61.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders63 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders63.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet72);
        org.junit.Assert.assertNotNull(iLicenseFamilySet73);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray77);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray81);
    }

    @Test
    public void test09526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09526");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data#FileCategory", "8f82a952-5bfd-446b-ac79-15beef5b3f17");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.finalizeState();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test09527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09527");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state5 = simpleRegexMatcher3.currentState();
        simpleRegexMatcher3.reset();
        java.lang.String str7 = simpleRegexMatcher3.getId();
        simpleRegexMatcher3.reset();
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "d4f6416e-0a4d-499c-a651-afd7d5197091" + "'", str7, "d4f6416e-0a4d-499c-a651-afd7d5197091");
    }

    @Test
    public void test09528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09528");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("AnyBuilder:\nMathcerRefBuilder: null\nAllBuilder:\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nMathcerRefBuilder: null\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nCopyright Builder: s:null e:null o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:OASIS e:null o:null\nAnyBuilder:\nMathcerRefBuilder: null\nCopyright Builder: s:null e:null o:null\nMathcerRefBuilder: null");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09529");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.license.ILicense[] iLicenseArray13 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet14 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet14, iLicenseArray13);
        java.lang.String[] strArray28 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory31 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet14, (java.util.Collection<java.lang.String>) strList29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration46.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = reportConfiguration46.getLicenses(licenseFilter48);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders50 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration46.setAddLicenseHeaders(addLicenseHeaders50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter55);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet59 = licenseSetFactory31.getLicenses(licenseFilter55);
        defaultLog0.warn((java.lang.Object) licenseSetFactory31);
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher63 = new org.apache.rat.analysis.matchers.FullTextMatcher("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "hi!");
        boolean boolean65 = fullTextMatcher63.doMatch("AnyBuilder:\nAllBuilder:");
        defaultLog0.error((java.lang.Object) "AnyBuilder:\nAllBuilder:");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender68 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "http://org/apache/rat/meta-data#HeaderSample");
        apacheV2LicenseAppender68.setForce(false);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(iLicenseArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders50 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders50.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test09530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09530");
        boolean boolean1 = org.apache.rat.document.impl.guesser.ArchiveGuesser.isArchive("58a74a86-23a5-4705-bb36-2d667e35fb54");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09531");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet6.spliterator();
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        defaultLog26.setLevel(level31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration48.getLicenses(licenseFilter50);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders52 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration48.setAddLicenseHeaders(addLicenseHeaders52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter57);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier63 = reportConfiguration62.getOutput();
        reportConfiguration35.setOut(outputStreamIOSupplier63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.utils.ReportingSet.Options options71 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration69.licenseDuplicateOption(options71);
        reportConfiguration66.familyDuplicateOption(options71);
        reportConfiguration35.licenseDuplicateOption(options71);
        reportConfiguration35.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logLicenseCollisions(level81);
        reportConfiguration35.logLicenseCollisions(level81);
        defaultLog26.log(level81, "GNU General Public License, version 1");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog26);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet88 = strSet86.tailSet("TextBuilder: 90663eff7ed841bd85a8...");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet90 = strSet88.headSet("META-DATA#LICENSEFAMILYNAME',VALUE ='GNU GENERAL PUBLIC LICENSE, VERSION 1 ']");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: toKey out of range");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders52 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders52.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier63);
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + options71 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options71.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(strSet88);
    }

    @Test
    public void test09532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09532");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("null t true", pattern1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = simpleRegexMatcher2.doMatch("8db879cc-ee3e-4155-b6f2-7a5caecabc30");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09533");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("688df92f-f2ac-4527-846e-6d6bf8643eb7");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09534");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.rat.license.ILicense[] iLicenseArray7 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet8 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8, iLicenseArray7);
        java.lang.String[] strArray22 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory25 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet8, (java.util.Collection<java.lang.String>) strList23);
        org.apache.rat.license.ILicense iLicense26 = org.apache.rat.license.LicenseSetFactory.search("binary", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet8);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        org.apache.rat.license.ILicense[] iLicenseArray29 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet30 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet30, iLicenseArray29);
        java.lang.String[] strArray44 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory47 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet30, (java.util.Collection<java.lang.String>) strList45);
        org.apache.rat.license.ILicense iLicense48 = org.apache.rat.license.LicenseSetFactory.search("GNU General Public License, version 1", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet30);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet49 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet30);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet50 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet30);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet30);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter52 = reportConfiguration1.getDirectoryFilter();
        reportConfiguration1.setStyleReport(true);
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iLicenseArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(iLicense26);
        org.junit.Assert.assertNotNull(iLicenseArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(iLicense48);
        org.junit.Assert.assertNotNull(iOFileFilter52);
    }

    @Test
    public void test09535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09535");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder3);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder3.setRefId("TMF");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder6.setRefId("58515fd1-71f9-42a1-b033-b509624129a7");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap9 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder8.setMatchers(strMap9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = matcherRefBuilder8.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
    }

    @Test
    public void test09536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09536");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.lang.String str2 = allBuilder0.toString();
        java.lang.String str3 = allBuilder0.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = allBuilder0.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder5.setStart("OASIS");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder9 = copyrightBuilder5.setId("");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder11 = abstractBuilder9.setId("AL   ");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder12 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) abstractBuilder11);
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList13 = allBuilder0.getChildren();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AllBuilder:" + "'", str2, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "AllBuilder:" + "'", str3, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(copyrightBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(abstractBuilder9);
        org.junit.Assert.assertNotNull(abstractBuilder11);
        org.junit.Assert.assertNotNull(abstractBuilder12);
        org.junit.Assert.assertNotNull(iHeaderMatcherList13);
    }

    @Test
    public void test09537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09537");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter16 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter18 = xmlWriter1.openElement((java.lang.CharSequence) "dcae14f6-99fc-4a48-a420-37c965fde608");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: 'dcae14f6-99fc-4a48-a420-37c965fde608' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09538");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum4 = metaData0.get("Copyright Builder: s:null e:.cvsignore o:null");
        java.lang.String str6 = metaData0.value("W3C Software Copyright");
        java.lang.String str8 = metaData0.value("null http://org/apache/rat/meta-data#LicenseFamilyName");
        metaData0.clear();
        org.apache.rat.api.MetaData.Datum datum11 = metaData0.get("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        org.apache.rat.api.MetaData.Datum datum13 = metaData0.get("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        boolean boolean15 = metaData0.clear("f96ad0b6-2267-4692-93e4-227659f9d621");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection16 = metaData0.getData();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection17 = metaData0.getData();
        metaData0.clear();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(datum4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum11);
        org.junit.Assert.assertNull(datum13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(datumCollection16);
        org.junit.Assert.assertNotNull(datumCollection17);
    }

    @Test
    public void test09539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09539");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setNotes(".cvsignore");
        fullTextMatchingLicense0.setLicenseFamilyName("MATHCERREFBUILDER: TMF");
        fullTextMatchingLicense0.setLicenseFamilyCategory("SpdxBuilder: t true");
        java.lang.String str10 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "SpdxBuilder: t true" + "'", str10, "SpdxBuilder: t true");
    }

    @Test
    public void test09540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09540");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = spdxBuilder0.build();
        java.lang.String str6 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder8 = spdxBuilder0.setName("1ad6cb79-d53b-4fb6-aaca-d2e955fc3605");
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str6, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(spdxBuilder8);
    }

    @Test
    public void test09541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09541");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic1 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic1.setNumApproved((int) (short) 10);
        claimStatistic1.setNumUnknown(30);
        java.lang.Object obj6 = toNameTransformer0.transform((java.lang.Object) claimStatistic1);
        int int7 = claimStatistic1.getNumUnknown();
        int int8 = claimStatistic1.getNumApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic1.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic1.getDocumentCategoryMap();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 30 + "'", int7 == 30);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test09542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09542");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier6 = reportConfiguration1.getOutput();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        java.io.FilenameFilter filenameFilter9 = reportConfiguration8.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet11 = reportConfiguration8.getLicenses(licenseFilter10);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders12 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration8.setAddLicenseHeaders(addLicenseHeaders12);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration15);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter17);
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter17);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        java.io.FilenameFilter filenameFilter22 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet24 = reportConfiguration21.getLicenses(licenseFilter23);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders25 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration21.setAddLicenseHeaders(addLicenseHeaders25);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic29 = org.apache.rat.Reporter.report(reportConfiguration28);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter30);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier36 = reportConfiguration35.getOutput();
        reportConfiguration8.setOut(outputStreamIOSupplier36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.utils.ReportingSet.Options options44 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration42.licenseDuplicateOption(options44);
        reportConfiguration39.familyDuplicateOption(options44);
        reportConfiguration8.licenseDuplicateOption(options44);
        reportConfiguration1.familyDuplicateOption(options44);
        org.apache.rat.document.ToNameTransformer toNameTransformer49 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog50 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder51 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder53 = builder51.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher57 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state58 = copyrightMatcher57.finalizeState();
        org.apache.rat.license.ILicense.Builder builder59 = builder53.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher57);
        org.apache.rat.license.ILicense.Builder builder61 = builder59.setLicenseFamilyCategory("");
        defaultLog50.error((java.lang.Object) builder61);
        java.lang.Object obj63 = toNameTransformer49.transform((java.lang.Object) defaultLog50);
        org.apache.rat.utils.DefaultLog defaultLog64 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder65 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder67 = builder65.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher71 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state72 = copyrightMatcher71.finalizeState();
        org.apache.rat.license.ILicense.Builder builder73 = builder67.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher71);
        org.apache.rat.license.ILicense.Builder builder75 = builder73.setLicenseFamilyCategory("");
        defaultLog64.error((java.lang.Object) builder75);
        java.lang.Object obj77 = toNameTransformer49.transform((java.lang.Object) builder75);
        org.apache.rat.license.ILicense.Builder builder79 = builder75.setLicenseFamilyCategory("22d821a7-325b-4a40-8f38-f9cfc616d71a");
        org.apache.rat.configuration.builders.TextBuilder textBuilder80 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder82 = textBuilder80.setText("true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher83 = textBuilder80.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder85 = textBuilder80.setText("SpdxBuilder: null");
        org.apache.rat.configuration.builders.TextBuilder textBuilder87 = textBuilder85.setText("Apache License Version 2.0");
        org.apache.rat.license.ILicense.Builder builder88 = builder75.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) textBuilder87);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense89 = reportConfiguration1.addLicense(builder88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: License family 22d821a7-325b-4a40-8f38-f9cfc616d71a not found.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier6);
        org.junit.Assert.assertNull(filenameFilter9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet11);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders12 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders12.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet24);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders25 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders25.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier36);
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + options44 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options44.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(defaultLog50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + state58 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state58.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(defaultLog64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + state72 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state72.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(textBuilder82);
        org.junit.Assert.assertNotNull(iHeaderMatcher83);
        org.junit.Assert.assertNotNull(textBuilder85);
        org.junit.Assert.assertNotNull(textBuilder87);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test09543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09543");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        int int1 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap2 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = claimStatistic0.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap4 = claimStatistic0.getLicenseFileNameMap();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
    }

    @Test
    public void test09544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09544");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.lang.String str14 = strSet13.first();
        java.util.Spliterator<java.lang.String> strSpliterator15 = strSet13.spliterator();
        java.lang.String str16 = strSet13.first();
        java.lang.String str17 = strSet13.first();
        boolean boolean19 = strSet13.addIfNotPresent("Datum [ name ='021187d7-27c2-4fd9-bc74-8cc00413ee52',value ='094643d4-94c6-478a-b861-15e14bd2e656 ']");
        boolean boolean21 = strSet13.addIfNotPresent("f489c72e-9df8-4339-86cc-35c229864db7");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AllBuilder:" + "'", str14, "AllBuilder:");
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AllBuilder:" + "'", str16, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AllBuilder:" + "'", str17, "AllBuilder:");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test09545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09545");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection3 = metaData0.getData();
        java.lang.String str5 = metaData0.value("hi!");
        metaData0.clear();
        boolean boolean8 = metaData0.clear("7E27CD62-4403-40AB-A9F5-16E7C59AB2F1");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("Copyright Builder: s:90663eff-7ed8-41bd-85a8-e8f189198bc6 e:null o:null");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection11 = metaData0.getData();
        org.apache.rat.api.MetaData.Datum datum13 = metaData0.get("notic");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(datumCollection3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNotNull(datumCollection11);
        org.junit.Assert.assertNull(datum13);
    }

    @Test
    public void test09546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09546");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense0.setLicenseFamilyCategory("d25f13bc-1910-4451-97b5-b72663551a5d");
        java.lang.String str11 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setNotes("GPL3 ");
        fullTextMatchingLicense0.setNotes("8F0EE536-38AE-476A-A728-DE95E24C13C3");
        java.lang.String str16 = fullTextMatchingLicense0.getNotes();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "SpdxBuilder: null" + "'", str11, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "8F0EE536-38AE-476A-A728-DE95E24C13C3" + "'", str16, "8F0EE536-38AE-476A-A728-DE95E24C13C3");
    }

    @Test
    public void test09547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09547");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("W3C  ");
        java.lang.String str5 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyCategory("http://org/apache/rat/meta-data#HeaderSample");
        simpleLicenseFamily0.setFamilyCategory("W3C Software Copyright");
        java.lang.String str10 = simpleLicenseFamily0.toString();
        simpleLicenseFamily0.setFamilyCategory("4fcae176-e574-46ed-b9e4-dea2e2f3b458 http://org/apache/rat/meta-data#LicenseFamilyName");
        simpleLicenseFamily0.setFamilyCategory("");
        java.lang.String str15 = simpleLicenseFamily0.getFamilyCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "W3C Software Copyright null" + "'", str10, "W3C Software Copyright null");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test09548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09548");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("SpdxBuilder: TextBuilder: true http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09549");
        java.util.regex.Pattern pattern3 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher4 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern3);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher5 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher4);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher("stand", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher4);
        java.lang.String str7 = simpleRegexMatcher4.getId();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = simpleRegexMatcher4.doMatch("fe6be119-8817-4567-8d33-352365bfa7c8");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "f20d7d1c-c692-4e91-bdc8-f56c13961b03" + "'", str7, "f20d7d1c-c692-4e91-bdc8-f56c13961b03");
    }

    @Test
    public void test09550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09550");
        org.apache.commons.cli.CommandLine commandLine1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.ReportConfiguration reportConfiguration2 = org.apache.rat.Report.createConfiguration("73fbee1b-7ed9-442a-968e-b2b525ca688f", commandLine1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09551");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setStart("archive");
        java.lang.String str4 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder6 = copyrightBuilder0.setId("255ef7d8-e270-4908-9de7-bebc7df6eb88");
        java.lang.String str7 = copyrightBuilder0.toString();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Copyright Builder: s:archive e:null o:null" + "'", str4, "Copyright Builder: s:archive e:null o:null");
        org.junit.Assert.assertNotNull(abstractBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Copyright Builder: s:archive e:null o:null" + "'", str7, "Copyright Builder: s:archive e:null o:null");
    }

    @Test
    public void test09552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09552");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher16 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher16.reset();
        org.apache.rat.license.ILicense.Builder builder18 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher16);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str20 = spdxBuilder19.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder22 = spdxBuilder19.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder23 = builder18.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder19);
        org.apache.rat.license.ILicense.Builder builder25 = builder23.setName("DOJO ");
        org.apache.rat.license.ILicense.Builder builder27 = builder25.setLicenseFamilyCategory("RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean29 = matcherRefBuilder28.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap30 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder31 = matcherRefBuilder28.setMatchers(strMap30);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap32 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder33 = matcherRefBuilder31.setMatchers(strMap32);
        org.apache.rat.license.ILicense.Builder builder34 = builder27.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder31);
        org.apache.rat.license.ILicense.Builder builder36 = builder34.setLicenseFamilyCategory("Datum");
        org.apache.rat.license.ILicense.Builder builder38 = builder34.setNotes("c6108888-bbb8-4ac0-8e5f-6bc60ab81eda");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(spdxBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "SpdxBuilder: null" + "'", str20, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(matcherRefBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder31);
        org.junit.Assert.assertNotNull(matcherRefBuilder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test09553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09553");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.stream.Stream<java.lang.String> strStream12 = strSet6.stream();
        org.apache.rat.utils.DefaultLog defaultLog13 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        reportConfiguration15.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level18 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration15.logFamilyCollisions(level18);
        defaultLog13.setLevel(level18);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet6.setLogLevel(level18);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet23 = strSet6.headSet("d4148d3a-edbc-4672-b347-0fa619553f91");
        java.util.stream.Stream<java.lang.String> strStream24 = strSet23.stream();
        java.util.stream.Stream<java.lang.String> strStream25 = strSet23.stream();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(defaultLog13);
        org.junit.Assert.assertTrue("'" + level18 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level18.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertNotNull(strStream25);
    }

    @Test
    public void test09554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09554");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) '4');
        claimStatistic0.setNumUnknown((int) (byte) 0);
        claimStatistic0.setNumUnknown((int) (byte) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = claimStatistic0.getLicenseFileCodeMap();
        int int13 = claimStatistic0.getNumUnknown();
        int int14 = claimStatistic0.getNumUnknown();
        int int15 = claimStatistic0.getNumGenerated();
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test09555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09555");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("RegexBuilder: a3b9f6f5-22c8-487e-8289-73eb5482e732");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09556");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        java.lang.Object[] objArray13 = strSet6.toArray();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet6.parallelStream();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet6.tailSet("AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24");
        boolean boolean18 = strSet6.addIfNotPresent("77e26c88-e393-4983-916b-adc59fc1b78e");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test09557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09557");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        org.apache.rat.report.IReportable iReportable10 = null;
        reportConfiguration1.setReportable(iReportable10);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder12 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str13 = iLicenseFamilyBuilder12.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder15 = iLicenseFamilyBuilder12.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder17 = iLicenseFamilyBuilder12.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder19 = iLicenseFamilyBuilder12.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.apache.rat.license.ILicenseFamily.Builder builder21 = iLicenseFamilyBuilder12.setLicenseFamilyCategory("b2eafdef-0477-406a-8b6d-8d332a86679e");
        org.apache.rat.license.ILicenseFamily.Builder builder23 = iLicenseFamilyBuilder12.setLicenseFamilyName("d0774232-cdef-4507-a8b6-ac22a273dde3");
        org.apache.rat.license.ILicenseFamily iLicenseFamily24 = iLicenseFamilyBuilder12.build();
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily24);
        java.io.File file26 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(file26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(iLicenseFamily24);
    }

    @Test
    public void test09558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09558");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration1.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder6 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults7 = builder6.build();
        reportConfiguration1.setFrom(defaults7);
        boolean boolean9 = reportConfiguration1.isStyleReport();
        java.io.FilenameFilter filenameFilter10 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        java.io.FilenameFilter filenameFilter13 = reportConfiguration12.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet15 = reportConfiguration12.getLicenses(licenseFilter14);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders16 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration12.setAddLicenseHeaders(addLicenseHeaders16);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic20 = org.apache.rat.Reporter.report(reportConfiguration19);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter21);
        org.apache.rat.Reporter.listLicenses(reportConfiguration12, licenseFilter21);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        java.io.FilenameFilter filenameFilter26 = reportConfiguration25.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet28 = reportConfiguration25.getLicenses(licenseFilter27);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders29 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration25.setAddLicenseHeaders(addLicenseHeaders29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter34);
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter34);
        org.apache.rat.Reporter.listLicenses(reportConfiguration12, licenseFilter34);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier40 = reportConfiguration39.getOutput();
        reportConfiguration12.setOut(outputStreamIOSupplier40);
        org.apache.rat.utils.Log.Level level42 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration12.logLicenseCollisions(level42);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter44 = reportConfiguration12.getDirectoryFilter();
        java.nio.file.Path path45 = null;
        boolean boolean46 = iOFileFilter44.matches(path45);
        java.nio.file.Path path47 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes48 = null;
        java.nio.file.FileVisitResult fileVisitResult49 = iOFileFilter44.accept(path47, basicFileAttributes48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        java.io.FilenameFilter filenameFilter52 = reportConfiguration51.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet54 = reportConfiguration51.getLicenses(licenseFilter53);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders55 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration51.setAddLicenseHeaders(addLicenseHeaders55);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter60);
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter60);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        java.io.FilenameFilter filenameFilter65 = reportConfiguration64.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet67 = reportConfiguration64.getLicenses(licenseFilter66);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders68 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration64.setAddLicenseHeaders(addLicenseHeaders68);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic72 = org.apache.rat.Reporter.report(reportConfiguration71);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter73 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration71, licenseFilter73);
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter73);
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter73);
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier79 = reportConfiguration78.getOutput();
        reportConfiguration51.setOut(outputStreamIOSupplier79);
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration51.logLicenseCollisions(level81);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter83 = reportConfiguration51.getDirectoryFilter();
        java.nio.file.Path path84 = null;
        boolean boolean85 = iOFileFilter83.matches(path84);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter86 = iOFileFilter44.and(iOFileFilter83);
        java.nio.file.Path path87 = null;
        boolean boolean88 = iOFileFilter83.matches(path87);
        reportConfiguration1.addDirectoryFilter(iOFileFilter83);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaults7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertNull(filenameFilter13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet15);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders16 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders16.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet28);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders29 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders29.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier40);
        org.junit.Assert.assertTrue("'" + level42 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level42.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult49 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult49.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNull(filenameFilter52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet54);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders55 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders55.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet67);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders68 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders68.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic72);
        org.junit.Assert.assertTrue("'" + licenseFilter73 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter73.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier79);
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level81.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(iOFileFilter86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test09559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09559");
        org.apache.rat.config.ReportFormat reportFormat0 = org.apache.rat.config.ReportFormat.XML;
        boolean boolean2 = reportFormat0.is("RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        boolean boolean4 = reportFormat0.is("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        boolean boolean6 = reportFormat0.is("W3CD ");
        boolean boolean8 = reportFormat0.is("TextBuilder: d25f13bc-1910-4451-9...");
        boolean boolean10 = reportFormat0.is("TextBuilder: f5f3fb9b-540a-43ef-a...");
        org.junit.Assert.assertTrue("'" + reportFormat0 + "' != '" + org.apache.rat.config.ReportFormat.XML + "'", reportFormat0.equals(org.apache.rat.config.ReportFormat.XML));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09560");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = textBuilder0.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder5 = textBuilder0.setText("SpdxBuilder: null");
        org.apache.rat.configuration.builders.TextBuilder textBuilder7 = textBuilder5.setText("d25f13bc-1910-4451-97b5-b72663551a5d");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = textBuilder5.build();
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder10 = textBuilder5.setText("RegexBuilder: GNU General Public License, version 1");
        java.lang.String str11 = textBuilder5.toString();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(textBuilder5);
        org.junit.Assert.assertNotNull(textBuilder7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(textCaptureBuilder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "TextBuilder: RegexBuilder: GNU Ge..." + "'", str11, "TextBuilder: RegexBuilder: GNU Ge...");
    }

    @Test
    public void test09561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09561");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense0.setFullText("W3C  ");
        java.lang.String str11 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str12 = fullTextMatchingLicense0.getLicenseFamilyName();
        java.lang.String str13 = fullTextMatchingLicense0.getLicenseFamilyName();
        org.apache.rat.license.ILicense.Builder builder14 = fullTextMatchingLicense0.getLicense();
        org.apache.rat.license.ILicense.Builder builder16 = builder14.setId("ccda37f8-8aec-461c-a257-84923fc7818c");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "TMF" + "'", str11, "TMF");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "SpdxBuilder: null" + "'", str12, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "SpdxBuilder: null" + "'", str13, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test09562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09562");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.report.IReportable iReportable3 = null;
        reportConfiguration1.setReportable(iReportable3);
        boolean boolean5 = reportConfiguration1.isAddingLicensesForced();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.report.IReportable iReportable7 = null;
        reportConfiguration1.setReportable(iReportable7);
        java.util.function.Consumer<java.lang.String> strConsumer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.validate(strConsumer9);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: Reportable may not be null");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(iOFileFilter6);
    }

    @Test
    public void test09563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09563");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        int int12 = strSet6.size();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction13 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet14 = strSet6.setMsgFormat(strFunction13);
        boolean boolean15 = strSet6.isEmpty();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = strSet6.subSet("AnyBuilder:", "Copyright Builder: s:W3CD  e:null o:Copyright Builder: s:null e:274c6a15-09f6-4bfd-ac53-1827770eb507 o:null");
        boolean boolean20 = strSet6.addIfNotPresent("NOTBUILDER: NULL");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test09564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09564");
        java.lang.String[] strArray5 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean6 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Copyright Builder: s:null e:.cvsignore o:null", strArray5);
        boolean boolean7 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("http://org/apache/rat/meta-data#HeaderCategory", strArray5);
        boolean boolean8 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("http://org/apache/rat/meta-data#HeaderSample", strArray5);
        boolean boolean9 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("ffalse", strArray5);
        boolean boolean10 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("i indeterminent", strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09565");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("89662180-a89f-497b-9301-227d494d2bae", "");
        fullTextMatcher2.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = fullTextMatcher2.finalizeState();
        java.lang.String str5 = state4.toString();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "f false" + "'", str5, "f false");
    }

    @Test
    public void test09566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09566");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("276901ae-dc23-48d7-86f1-6abbe32a92ea");
    }

    @Test
    public void test09567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09567");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log.Level level32 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration2.logLicenseCollisions(level32);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter34 = reportConfiguration2.getDirectoryFilter();
        java.nio.file.Path path35 = null;
        boolean boolean36 = iOFileFilter34.matches(path35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        java.io.FilenameFilter filenameFilter39 = reportConfiguration38.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet41 = reportConfiguration38.getLicenses(licenseFilter40);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders42 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration38.setAddLicenseHeaders(addLicenseHeaders42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic46 = org.apache.rat.Reporter.report(reportConfiguration45);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter47);
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter47);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        java.io.FilenameFilter filenameFilter52 = reportConfiguration51.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet54 = reportConfiguration51.getLicenses(licenseFilter53);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders55 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration51.setAddLicenseHeaders(addLicenseHeaders55);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter60);
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter60);
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter60);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier66 = reportConfiguration65.getOutput();
        reportConfiguration38.setOut(outputStreamIOSupplier66);
        org.apache.rat.utils.Log.Level level68 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration38.logLicenseCollisions(level68);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter70 = reportConfiguration38.getDirectoryFilter();
        java.nio.file.Path path71 = null;
        boolean boolean72 = iOFileFilter70.matches(path71);
        java.nio.file.Path path73 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes74 = null;
        java.nio.file.FileVisitResult fileVisitResult75 = iOFileFilter70.accept(path73, basicFileAttributes74);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter76 = iOFileFilter34.or(iOFileFilter70);
        java.nio.file.Path path77 = null;
        boolean boolean78 = iOFileFilter34.matches(path77);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        reportConfiguration80.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration80.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.license.ILicenseFamily iLicenseFamily85 = null;
        reportConfiguration80.addFamily(iLicenseFamily85);
        boolean boolean87 = reportConfiguration80.isStyleReport();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter88 = reportConfiguration80.getDirectoryFilter();
        java.nio.file.Path path89 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes90 = null;
        java.nio.file.FileVisitResult fileVisitResult91 = iOFileFilter88.accept(path89, basicFileAttributes90);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker92 = new org.apache.rat.walker.DirectoryWalker(file0, (java.io.FilenameFilter) iOFileFilter34, iOFileFilter88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertTrue("'" + level32 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level32.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(filenameFilter39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet41);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders42 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders42.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet54);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders55 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders55.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier66);
        org.junit.Assert.assertTrue("'" + level68 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level68.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult75 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult75.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(iOFileFilter88);
        org.junit.Assert.assertTrue("'" + fileVisitResult91 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult91.equals(java.nio.file.FileVisitResult.TERMINATE));
    }

    @Test
    public void test09568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09568");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder1.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = allBuilder1.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList4 = allBuilder1.getChildren();
        java.lang.Object obj5 = toNameTransformer0.transform((java.lang.Object) allBuilder1);
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = org.apache.rat.analysis.IHeaderMatcher.Builder.not();
        boolean boolean7 = notBuilder6.hasId();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList8 = notBuilder6.getChildren();
        org.apache.rat.configuration.builders.AllBuilder allBuilder9 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean11 = matcherRefBuilder10.hasId();
        java.lang.String str12 = matcherRefBuilder10.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder14 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str15 = notBuilder14.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder16 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean17 = matcherRefBuilder16.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap18 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = matcherRefBuilder16.setMatchers(strMap18);
        org.apache.rat.configuration.builders.AllBuilder allBuilder20 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean28 = matcherRefBuilder27.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder29 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder29.setStart("OASIS");
        java.lang.String str32 = copyrightBuilder29.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder34 = copyrightBuilder29.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str37 = copyrightBuilder36.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = copyrightBuilder36.setEnd(".cvsignore");
        boolean boolean40 = copyrightBuilder36.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str42 = copyrightBuilder41.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder44 = copyrightBuilder41.setEnd(".cvsignore");
        boolean boolean45 = copyrightBuilder41.hasId();
        java.lang.String str46 = copyrightBuilder41.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder49 = copyrightBuilder47.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder50 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder51 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean52 = matcherRefBuilder51.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap53 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder54 = matcherRefBuilder51.setMatchers(strMap53);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder55 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder56 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean57 = matcherRefBuilder56.hasId();
        java.lang.String str58 = matcherRefBuilder56.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap59 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder60 = matcherRefBuilder56.setMatchers(strMap59);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray61 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder16, allBuilder20, copyrightBuilder26, matcherRefBuilder27, copyrightBuilder29, copyrightBuilder35, copyrightBuilder36, copyrightBuilder41, copyrightBuilder47, anyBuilder50, matcherRefBuilder51, copyrightBuilder55, matcherRefBuilder56 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList62 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList62, builderArray61);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder64 = notBuilder14.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList62);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder65 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray66 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder10, anyBuilder13, notBuilder14, matcherRefBuilder65 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList67 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList67, builderArray66);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder69 = allBuilder9.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList67);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder70 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList67);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder71 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList67);
        org.junit.Assert.assertNotNull(allBuilder1);
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcherList4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(notBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(iHeaderMatcherList8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MathcerRefBuilder: null" + "'", str12, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NotBuilder: null" + "'", str15, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(matcherRefBuilder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder29);
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str32, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder34);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str37, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str42, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str46, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(copyrightBuilder49);
        org.junit.Assert.assertNotNull(anyBuilder50);
        org.junit.Assert.assertNotNull(matcherRefBuilder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder54);
        org.junit.Assert.assertNotNull(copyrightBuilder55);
        org.junit.Assert.assertNotNull(matcherRefBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "MathcerRefBuilder: null" + "'", str58, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder60);
        org.junit.Assert.assertNotNull(builderArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(abstractBuilder64);
        org.junit.Assert.assertNotNull(builderArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(abstractBuilder69);
        org.junit.Assert.assertNotNull(abstractBuilder70);
        org.junit.Assert.assertNotNull(abstractBuilder71);
    }

    @Test
    public void test09569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09569");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter10 = xmlWriter1.attribute((java.lang.CharSequence) "a3b53609-8989-4241-8aa6-1cc947f0d382", (java.lang.CharSequence) "42a1c");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09570");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        metaData0.clear();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection8 = metaData0.getData();
        org.apache.rat.api.MetaData.Datum datum11 = new org.apache.rat.api.MetaData.Datum("3c840dc2-bef0-42b5-b26c-35a568d53a24", "NotBuilder: null");
        metaData0.set(datum11);
        boolean boolean14 = metaData0.clear("804cbd55d8ca4b15b3a8d94b4c47af38");
        org.apache.rat.api.MetaData metaData15 = new org.apache.rat.api.MetaData();
        java.lang.String str17 = metaData15.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str19 = metaData15.value("W3C Document Copyright");
        boolean boolean21 = metaData15.clear("hi!");
        java.lang.String str23 = metaData15.value("true");
        org.apache.rat.api.MetaData.Datum datum25 = metaData15.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum27 = metaData15.get("http:");
        org.apache.rat.api.MetaData.Datum datum28 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATIM_TRUE;
        metaData15.add(datum28);
        boolean boolean31 = metaData15.clear("");
        org.apache.rat.api.MetaData.Datum datum32 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_W3C;
        metaData15.add(datum32);
        metaData0.set(datum32);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(datumCollection8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(datum25);
        org.junit.Assert.assertNull(datum27);
        org.junit.Assert.assertNotNull(datum28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(datum32);
    }

    @Test
    public void test09571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09571");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        fullTextMatchingLicense0.setFullText("MANIFEST.MF");
        fullTextMatchingLicense0.setFullText("JAVA");
        fullTextMatchingLicense0.setNotes("MathcerRefBuilder: t true");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily9 = fullTextMatchingLicense0.getLicenseFamily();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09572");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        reportConfiguration1.removeApprovedLicenseCategory("The MIT License");
        org.apache.rat.license.ILicense iLicense12 = null;
        reportConfiguration1.addLicense(iLicense12);
        org.apache.rat.license.ILicense iLicense14 = null;
        reportConfiguration1.addLicense(iLicense14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.license.ILicenseFamily iLicenseFamily21 = null;
        reportConfiguration17.addFamily(iLicenseFamily21);
        reportConfiguration17.setCopyrightMessage("hi!");
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        reportConfiguration26.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        reportConfiguration26.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet33);
        reportConfiguration26.setCopyrightMessage("MathcerRefBuilder: null");
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier37 = org.apache.rat.Defaults.getUnapprovedLicensesStyleSheet();
        reportConfiguration26.setStyleSheet(inputStreamIOSupplier37);
        reportConfiguration17.setStyleSheet(inputStreamIOSupplier37);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier37);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense41 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense41.setLicenseFamilyName("hi!");
        java.lang.String str44 = fullTextMatchingLicense41.getLicenseFamilyCategory();
        java.lang.String str45 = fullTextMatchingLicense41.getLicenseFamilyName();
        fullTextMatchingLicense41.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense41.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily50 = fullTextMatchingLicense41.getLicenseFamily();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet51 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily52 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily50, iLicenseFamilySet51);
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily50);
        java.net.URL uRL54 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier37);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily50);
        org.junit.Assert.assertNotNull(iLicenseFamilySet51);
        org.junit.Assert.assertNull(iLicenseFamily52);
    }

    @Test
    public void test09573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09573");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        reportConfiguration1.addApprovedLicenseCategory("W3C Software Copyright");
        java.lang.String str15 = reportConfiguration1.getCopyrightMessage();
        java.lang.String[] strArray21 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet22 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        boolean boolean25 = strSet22.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor26 = strSet22.iterator();
        strSet22.clear();
        strSet22.clear();
        java.util.Comparator<? super java.lang.String> wildcardComparator29 = strSet22.comparator();
        boolean boolean31 = strSet22.add("archive");
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet22);
        org.apache.rat.Defaults.Builder builder33 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder34 = builder33.noDefault();
        org.apache.rat.Defaults defaults35 = builder34.build();
        reportConfiguration1.setFrom(defaults35);
        org.apache.rat.Defaults.Builder builder37 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults38 = builder37.build();
        org.apache.rat.Defaults defaults39 = builder37.build();
        org.apache.rat.Defaults.Builder builder40 = builder37.noDefault();
        org.apache.rat.Defaults defaults41 = builder40.build();
        org.apache.rat.Defaults defaults42 = builder40.build();
        reportConfiguration1.setFrom(defaults42);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNull(wildcardComparator29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(defaults35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(defaults38);
        org.junit.Assert.assertNotNull(defaults39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(defaults41);
        org.junit.Assert.assertNotNull(defaults42);
    }

    @Test
    public void test09574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09574");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("GPL3 ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = sPDXMatcherFactory0.create("6620e9ee-d651-4c18-8162-edad6d18368e");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = sPDXMatcherFactory0.create("JAVA");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = sPDXMatcherFactory0.create("RegexBuilder: d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = sPDXMatcherFactory0.create("f489c72e-9df8-4339-86cc-35c229864db7");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = sPDXMatcherFactory0.create("2cffedb5-8720-453e-b5f1-f53defc86eef");
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcher12);
    }

    @Test
    public void test09575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09575");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet1 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        int int2 = strSet1.size();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet4 = strSet1.headSet("?????");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = strSet1.tailSet("W3C Document Copyright");
        java.util.stream.Stream<java.lang.String> strStream7 = strSet1.parallelStream();
        boolean boolean9 = strSet1.addIfNotPresent("2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet11 = strSet1.tailSet("01e3a8ec-2dad-483e-bb8e-20f7738c8a71");
        java.lang.String[] strArray15 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean16 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Copyright Builder: s:null e:.cvsignore o:null", strArray15);
        boolean boolean17 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("03f7b314-6887-4617-9c7e-bf1600b331cd", strArray15);
        boolean boolean18 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("", strArray15);
        boolean boolean19 = strSet11.equals((java.lang.Object) strArray15);
        boolean boolean20 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("5468dfca-418b-481e-9825-7ead41f3b2a0", strArray15);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09576");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        fullTextMatchingLicense0.setLicenseFamilyCategory("binary");
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = fullTextMatchingLicense0.getLicenseFamily();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense6 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense6.setLicenseFamilyName("hi!");
        java.lang.String str9 = fullTextMatchingLicense6.getLicenseFamilyCategory();
        java.lang.String str10 = fullTextMatchingLicense6.getLicenseFamilyName();
        fullTextMatchingLicense6.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense6.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily15 = fullTextMatchingLicense6.getLicenseFamily();
        int int16 = iLicenseFamily5.compareTo(iLicenseFamily15);
        java.lang.String str17 = iLicenseFamily15.getFamilyName();
        org.junit.Assert.assertNotNull(iLicenseFamily5);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 14 + "'", int16 == 14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "SpdxBuilder: null" + "'", str17, "SpdxBuilder: null");
    }

    @Test
    public void test09577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09577");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        defaultLog0.info((java.lang.Object) "Modified BSD License");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender4 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "W3CD ");
        apacheV2LicenseAppender4.setForce(false);
        apacheV2LicenseAppender4.setForce(false);
        apacheV2LicenseAppender4.setForce(true);
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = apacheV2LicenseAppender4.getLicenseHeader(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
    }

    @Test
    public void test09578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09578");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        reportConfiguration2.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level5 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration2.logFamilyCollisions(level5);
        defaultLog0.setLevel(level5);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier37 = reportConfiguration36.getOutput();
        reportConfiguration9.setOut(outputStreamIOSupplier37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.utils.ReportingSet.Options options45 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration43.licenseDuplicateOption(options45);
        reportConfiguration40.familyDuplicateOption(options45);
        reportConfiguration9.licenseDuplicateOption(options45);
        reportConfiguration9.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        reportConfiguration52.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level55 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration52.logLicenseCollisions(level55);
        reportConfiguration9.logLicenseCollisions(level55);
        defaultLog0.log(level55, "GNU General Public License, version 1");
        defaultLog0.debug((java.lang.Object) "archive");
        org.apache.rat.utils.Log.Level level62 = defaultLog0.getLevel();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder63 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str64 = copyrightBuilder63.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder66 = copyrightBuilder63.setEnd("W3C Software Copyright");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder68 = copyrightBuilder63.setStart("RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder70 = copyrightBuilder68.setStart("TextBuilder: AL   ");
        defaultLog0.warn((java.lang.Object) copyrightBuilder70);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender72 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher75 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state76 = fullTextMatcher75.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher77 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher75);
        org.apache.rat.analysis.IHeaderMatcher.State state79 = notMatcher77.matches("2b7a7df2-0dac-406a-96b5-ea6b08e88337");
        org.apache.rat.analysis.IHeaderMatcher.State state80 = notMatcher77.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state81 = notMatcher77.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state82 = notMatcher77.currentState();
        defaultLog0.debug((java.lang.Object) notMatcher77);
        org.apache.rat.analysis.IHeaderMatcher.State state84 = notMatcher77.currentState();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + level5 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level5.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier37);
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + options45 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options45.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level55 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level55.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(copyrightBuilder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str64, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder66);
        org.junit.Assert.assertNotNull(copyrightBuilder68);
        org.junit.Assert.assertNotNull(copyrightBuilder70);
        org.junit.Assert.assertTrue("'" + state76 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state76.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state79 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state79.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state80 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state80.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state81 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state81.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state82 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state82.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state84 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state84.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test09579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09579");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("1e96b21e-f913-4d52-87cc-09323c460281");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher1.matches("eba9cdef-527a-48ca-947b-897e2e06ea31");
        org.apache.rat.analysis.IHeaderMatcher.State state5 = fullTextMatcher1.matches("");
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test09580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09580");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.ReportingSet.Options options52 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options52);
        reportConfiguration47.familyDuplicateOption(options52);
        reportConfiguration16.licenseDuplicateOption(options52);
        reportConfiguration16.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration16.logLicenseCollisions(level62);
        defaultLog14.setLevel(level62);
        defaultLog14.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog14);
        org.apache.rat.utils.DefaultLog defaultLog69 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logFamilyCollisions(level74);
        defaultLog69.setLevel(level74);
        defaultLog14.debug((java.lang.Object) level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet13.setLogLevel(level74);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        reportConfiguration80.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level83 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration80.logFamilyCollisions(level83);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet85 = strSet78.setLogLevel(level83);
        java.util.Spliterator<java.lang.String> strSpliterator86 = strSet78.spliterator();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction87 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet88 = strSet78.setMsgFormat(strFunction87);
        strSet78.clear();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet92 = strSet78.subSet("Copyright Builder: s:null e:.cvsignore o:5fec021b-b12e-48c3-a002-3eea7a06339a", "a2146a70-f79e-482c-93ff-b6b4a5e049ae");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = strSet78.last();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + options52 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options52.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog69);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + level83 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level83.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strSpliterator86);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(strSet92);
    }

    @Test
    public void test09581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09581");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("W3C  ");
        simpleLicenseFamily0.setFamilyName("GEN  ");
        java.lang.String str7 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyCategory("true|false|forced");
        simpleLicenseFamily0.setFamilyName("RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GEN  " + "'", str7, "GEN  ");
    }

    @Test
    public void test09582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09582");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter10 = xmlWriter1.content((java.lang.CharSequence) "9840e036-761e-48cc-9e26-9f86fbc734b2");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09583");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.rat.utils.ReportingSet.Options options14 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration13.licenseDuplicateOption(options14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders21 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration17.setAddLicenseHeaders(addLicenseHeaders21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter26);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter39);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier45 = reportConfiguration44.getOutput();
        reportConfiguration17.setOut(outputStreamIOSupplier45);
        org.apache.rat.utils.Log.Level level47 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration17.logLicenseCollisions(level47);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter49 = reportConfiguration17.getDirectoryFilter();
        reportConfiguration13.setInputFileFilter((java.io.FilenameFilter) iOFileFilter49);
        reportConfiguration1.setInputFileFilter((java.io.FilenameFilter) iOFileFilter49);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter52 = reportConfiguration1.getDirectoryFilter();
        java.nio.file.Path path53 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes54 = null;
        java.nio.file.FileVisitResult fileVisitResult55 = iOFileFilter52.accept(path53, basicFileAttributes54);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter56 = iOFileFilter52.negate();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertTrue("'" + options14 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options14.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders21 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders21.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier45);
        org.junit.Assert.assertTrue("'" + level47 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level47.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter49);
        org.junit.Assert.assertNotNull(iOFileFilter52);
        org.junit.Assert.assertTrue("'" + fileVisitResult55 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult55.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter56);
    }

    @Test
    public void test09584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09584");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern1);
        simpleRegexMatcher2.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = simpleRegexMatcher2.finalizeState();
        java.lang.String str5 = simpleRegexMatcher2.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = simpleRegexMatcher2.currentState();
        java.lang.String str7 = simpleRegexMatcher2.getId();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = simpleRegexMatcher2.doMatch("Copyright Builder: s:223f0 e:W3C Software Copyright o:3a01ef2a-65ad-4697-a3a7-bb504d3c1921");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "68f51453-7b86-4037-a32c-80200e1aeeea" + "'", str5, "68f51453-7b86-4037-a32c-80200e1aeeea");
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "68f51453-7b86-4037-a32c-80200e1aeeea" + "'", str7, "68f51453-7b86-4037-a32c-80200e1aeeea");
    }

    @Test
    public void test09585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09585");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection3 = metaData0.getData();
        java.lang.String str5 = metaData0.value("hi!");
        metaData0.clear();
        boolean boolean8 = metaData0.clear("90663eff-7ed8-41bd-85a8-e8f189198bc6");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("65e454b8-bebb-40d5-ad86-7e925a25b8d1");
        java.lang.String str12 = metaData0.value("i ind");
        org.apache.rat.api.MetaData.Datum datum14 = metaData0.get("67f4ee73-0b29-40fd-b100-eb4a09e17011");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(datumCollection3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(datum14);
    }

    @Test
    public void test09586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09586");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str3 = spdxBuilder2.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder5 = spdxBuilder2.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = spdxBuilder2.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder11 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder2);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder12 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str13 = anyBuilder12.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList14 = anyBuilder12.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher15 = anyBuilder12.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher16 = anyBuilder12.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList17 = anyBuilder12.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder18 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str19 = notBuilder18.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder20 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean21 = matcherRefBuilder20.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap22 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder23 = matcherRefBuilder20.setMatchers(strMap22);
        org.apache.rat.configuration.builders.AllBuilder allBuilder24 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = copyrightBuilder25.setStart("OASIS");
        java.lang.String str28 = copyrightBuilder25.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder25.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder31 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean32 = matcherRefBuilder31.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        java.lang.String str36 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder38 = copyrightBuilder33.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder40 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str41 = copyrightBuilder40.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder43 = copyrightBuilder40.setEnd(".cvsignore");
        boolean boolean44 = copyrightBuilder40.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder45 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str46 = copyrightBuilder45.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder48 = copyrightBuilder45.setEnd(".cvsignore");
        boolean boolean49 = copyrightBuilder45.hasId();
        java.lang.String str50 = copyrightBuilder45.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder51 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder53 = copyrightBuilder51.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder54 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder55 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean56 = matcherRefBuilder55.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap57 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder58 = matcherRefBuilder55.setMatchers(strMap57);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder59 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder60 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean61 = matcherRefBuilder60.hasId();
        java.lang.String str62 = matcherRefBuilder60.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap63 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder64 = matcherRefBuilder60.setMatchers(strMap63);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray65 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder20, allBuilder24, copyrightBuilder30, matcherRefBuilder31, copyrightBuilder33, copyrightBuilder39, copyrightBuilder40, copyrightBuilder45, copyrightBuilder51, anyBuilder54, matcherRefBuilder55, copyrightBuilder59, matcherRefBuilder60 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList66 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList66, builderArray65);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder68 = notBuilder18.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList66);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder69 = anyBuilder12.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList66);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder70 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList66);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder71 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str72 = copyrightBuilder71.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder74 = copyrightBuilder71.setEnd(".cvsignore");
        boolean boolean75 = copyrightBuilder71.hasId();
        boolean boolean76 = copyrightBuilder71.hasId();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder77 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder71);
        boolean boolean78 = abstractBuilder77.hasId();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "SpdxBuilder: null" + "'", str3, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(abstractBuilder11);
        org.junit.Assert.assertNotNull(anyBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AnyBuilder:" + "'", str13, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList14);
        org.junit.Assert.assertNotNull(iHeaderMatcher15);
        org.junit.Assert.assertNotNull(iHeaderMatcher16);
        org.junit.Assert.assertNotNull(iHeaderMatcherList17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NotBuilder: null" + "'", str19, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder23);
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str28, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertNotNull(matcherRefBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str36, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder38);
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str41, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str46, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str50, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder51);
        org.junit.Assert.assertNotNull(copyrightBuilder53);
        org.junit.Assert.assertNotNull(anyBuilder54);
        org.junit.Assert.assertNotNull(matcherRefBuilder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder58);
        org.junit.Assert.assertNotNull(copyrightBuilder59);
        org.junit.Assert.assertNotNull(matcherRefBuilder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "MathcerRefBuilder: null" + "'", str62, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder64);
        org.junit.Assert.assertNotNull(builderArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(abstractBuilder68);
        org.junit.Assert.assertNotNull(abstractBuilder69);
        org.junit.Assert.assertNotNull(abstractBuilder70);
        org.junit.Assert.assertNotNull(copyrightBuilder71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str72, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(abstractBuilder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test09587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09587");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder3);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder3.setRefId("http:");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder6.setMatchers(strMap7);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder8.setRefId("b2eafdef-0477-406a-8b6d-8d332a86679e");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
    }

    @Test
    public void test09588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09588");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("NotBuilder: null", "http://org/apache/rat/meta-data#LicenseFamilyName", "http://org/apache/rat/meta-data");
        java.lang.String str4 = copyrightMatcher3.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = copyrightMatcher3.matches("Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state9 = notMatcher7.matches("The MIT License");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "902d119b-8109-446b-807f-4c6b5ad0e05d" + "'", str4, "902d119b-8109-446b-807f-4c6b5ad0e05d");
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test09589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09589");
        org.apache.rat.license.ILicense iLicense0 = null;
        org.apache.rat.license.ILicense[] iLicenseArray3 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet4 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet4, iLicenseArray3);
        java.lang.String[] strArray18 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory21 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4, (java.util.Collection<java.lang.String>) strList19);
        org.apache.rat.license.ILicense iLicense22 = org.apache.rat.license.LicenseSetFactory.search("binary", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4);
        org.apache.rat.license.ILicense iLicense23 = org.apache.rat.license.LicenseSetFactory.search("http://org/apache/rat/meta-data", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet24 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense25 = org.apache.rat.license.LicenseSetFactory.search(iLicense0, (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(iLicense22);
        org.junit.Assert.assertNull(iLicense23);
    }

    @Test
    public void test09590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09590");
        org.apache.commons.cli.CommandLine commandLine1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.ReportConfiguration reportConfiguration2 = org.apache.rat.Report.createConfiguration("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='The MIT License ']", commandLine1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09591");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection3 = metaData0.getData();
        java.lang.String str5 = metaData0.value("hi!");
        metaData0.clear();
        boolean boolean8 = metaData0.clear("7E27CD62-4403-40AB-A9F5-16E7C59AB2F1");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("Copyright Builder: s:90663eff-7ed8-41bd-85a8-e8f189198bc6 e:null o:null");
        org.apache.rat.api.MetaData.Datum datum12 = metaData0.get("26befe44-3963-441c-b461-10e25182f535");
        org.apache.rat.api.MetaData metaData13 = new org.apache.rat.api.MetaData();
        java.lang.String str15 = metaData13.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str17 = metaData13.value("W3C Document Copyright");
        boolean boolean19 = metaData13.clear("hi!");
        java.lang.String str21 = metaData13.value("true");
        org.apache.rat.api.MetaData.Datum datum23 = metaData13.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum25 = metaData13.get("http:");
        org.apache.rat.api.MetaData.Datum datum27 = metaData13.get("TextBuilder: ");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection28 = metaData13.getData();
        org.apache.rat.api.MetaData metaData29 = new org.apache.rat.api.MetaData();
        java.lang.String str31 = metaData29.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum33 = metaData29.get("Copyright Builder: s:null e:.cvsignore o:null");
        java.lang.String str35 = metaData29.value("W3C Software Copyright");
        java.lang.String str37 = metaData29.value("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.api.MetaData.Datum datum38 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATUM_FALSE;
        metaData29.add(datum38);
        metaData13.set(datum38);
        metaData0.set(datum38);
        org.apache.rat.api.MetaData.Datum datum44 = new org.apache.rat.api.MetaData.Datum("641dafc1-13c3-45d4-8272-f36f10392c53", "Datum [ name ='http://org/apache/rat/meta-data#FileCategory',value ='archive ']");
        metaData0.set(datum44);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(datumCollection3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNull(datum12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(datum23);
        org.junit.Assert.assertNull(datum25);
        org.junit.Assert.assertNull(datum27);
        org.junit.Assert.assertNotNull(datumCollection28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(datum33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(datum38);
    }

    @Test
    public void test09592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09592");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isNonBinary("Copyright Builder: s:null e:a1d7a6cd-e548-4846-82aa-06426863977c o:TextBuilder: Datum [ name ='http:...");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09593");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        boolean boolean19 = strSet9.isEmpty();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet9.tailSet("MANIFEST.MF");
        java.util.Comparator<? super java.lang.String> wildcardComparator22 = strSet9.comparator();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet9.headSet("c819f60c-c781-49b6-ae3a-5a74de014a4d");
        java.util.Iterator<java.lang.String> strItor25 = strSet24.iterator();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(wildcardComparator22);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strItor25);
    }

    @Test
    public void test09594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09594");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("");
        org.apache.rat.Defaults.Builder builder10 = builder8.remove("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder12 = builder10.remove("2f88b0fb-cbe0-494f-a237-c14d76af3d76");
        org.apache.rat.Defaults.Builder builder13 = builder10.noDefault();
        org.apache.rat.Defaults.Builder builder15 = builder13.add("a49970c4-ad7c-456c-a950-28a9913fec59");
        java.net.URL uRL16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder17 = builder15.add(uRL16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test09595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09595");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        reportConfiguration1.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.utils.ReportingSet.Options options11 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration9.licenseDuplicateOption(options11);
        reportConfiguration6.familyDuplicateOption(options11);
        boolean boolean14 = reportConfiguration6.isStyleReport();
        boolean boolean15 = reportConfiguration6.isAddingLicensesForced();
        boolean boolean16 = reportConfiguration6.isAddingLicenses();
        reportConfiguration6.setStyleReport(true);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter42);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier48 = reportConfiguration47.getOutput();
        reportConfiguration20.setOut(outputStreamIOSupplier48);
        org.apache.rat.utils.Log.Level level50 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration20.logLicenseCollisions(level50);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter52 = reportConfiguration20.getDirectoryFilter();
        java.nio.file.Path path53 = null;
        boolean boolean54 = iOFileFilter52.matches(path53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        java.io.FilenameFilter filenameFilter57 = reportConfiguration56.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet59 = reportConfiguration56.getLicenses(licenseFilter58);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders60 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration56.setAddLicenseHeaders(addLicenseHeaders60);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic64 = org.apache.rat.Reporter.report(reportConfiguration63);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter65 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration63, licenseFilter65);
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter65);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        java.io.FilenameFilter filenameFilter70 = reportConfiguration69.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter71 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet72 = reportConfiguration69.getLicenses(licenseFilter71);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders73 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration69.setAddLicenseHeaders(addLicenseHeaders73);
        org.apache.rat.utils.Log log75 = null;
        org.apache.rat.ReportConfiguration reportConfiguration76 = new org.apache.rat.ReportConfiguration(log75);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic77 = org.apache.rat.Reporter.report(reportConfiguration76);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter78 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration76, licenseFilter78);
        org.apache.rat.Reporter.listLicenses(reportConfiguration69, licenseFilter78);
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter78);
        org.apache.rat.utils.Log log82 = null;
        org.apache.rat.ReportConfiguration reportConfiguration83 = new org.apache.rat.ReportConfiguration(log82);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier84 = reportConfiguration83.getOutput();
        reportConfiguration56.setOut(outputStreamIOSupplier84);
        org.apache.rat.utils.Log.Level level86 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration56.logLicenseCollisions(level86);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter88 = reportConfiguration56.getDirectoryFilter();
        java.nio.file.Path path89 = null;
        boolean boolean90 = iOFileFilter88.matches(path89);
        java.nio.file.Path path91 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes92 = null;
        java.nio.file.FileVisitResult fileVisitResult93 = iOFileFilter88.accept(path91, basicFileAttributes92);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter94 = iOFileFilter52.or(iOFileFilter88);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter95 = iOFileFilter94.negate();
        reportConfiguration6.addDirectoryFilter(iOFileFilter95);
        reportConfiguration1.setInputFileFilter((java.io.FilenameFilter) iOFileFilter95);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + options11 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options11.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier48);
        org.junit.Assert.assertTrue("'" + level50 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level50.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(filenameFilter57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet59);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders60 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders60.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic64);
        org.junit.Assert.assertTrue("'" + licenseFilter65 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter65.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter70);
        org.junit.Assert.assertTrue("'" + licenseFilter71 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter71.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet72);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders73 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders73.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic77);
        org.junit.Assert.assertTrue("'" + licenseFilter78 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter78.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier84);
        org.junit.Assert.assertTrue("'" + level86 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level86.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult93 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult93.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter94);
        org.junit.Assert.assertNotNull(iOFileFilter95);
    }

    @Test
    public void test09596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09596");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null;
        claimStatistic0.setDocumentCategoryMap(strMap1);
        int int3 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap4 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumUnApproved((int) (byte) 1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        claimStatistic0.setLicenseFileNameMap(strMap7);
        claimStatistic0.setNumApproved(3);
        claimStatistic0.setNumUnknown(0);
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null;
        claimStatistic0.setDocumentCategoryMap(strMap13);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strMap4);
    }

    @Test
    public void test09597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09597");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet15 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet15);
        boolean boolean17 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet15);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.utils.ReportingSet.Options options22 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration21.licenseDuplicateOption(options22);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet19.setDuplicateOption(options22);
        java.lang.String str25 = strSet19.last();
        org.apache.rat.document.ToNameTransformer toNameTransformer26 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog27 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder28 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder30 = builder28.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher34 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state35 = copyrightMatcher34.finalizeState();
        org.apache.rat.license.ILicense.Builder builder36 = builder30.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher34);
        org.apache.rat.license.ILicense.Builder builder38 = builder36.setLicenseFamilyCategory("");
        defaultLog27.error((java.lang.Object) builder38);
        java.lang.Object obj40 = toNameTransformer26.transform((java.lang.Object) defaultLog27);
        java.lang.Object obj41 = null;
        defaultLog27.warn(obj41);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet43 = strSet19.setLog((org.apache.rat.utils.Log) defaultLog27);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender44 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog27);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder45 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.AllBuilder allBuilder46 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher47 = allBuilder46.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder48 = anyBuilder45.add((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder46);
        java.lang.String str49 = anyBuilder45.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher50 = anyBuilder45.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher51 = anyBuilder45.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher52 = anyBuilder45.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher53 = anyBuilder45.build();
        defaultLog27.info((java.lang.Object) anyBuilder45);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender55 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog27);
        apacheV2LicenseAppender55.setForce(true);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(iLicenseFamilySet15);
        org.junit.Assert.assertNull(iLicenseFamily16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + options22 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options22.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str25, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(defaultLog27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + state35 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state35.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(anyBuilder45);
        org.junit.Assert.assertNotNull(iHeaderMatcher47);
        org.junit.Assert.assertNotNull(abstractBuilder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "AnyBuilder:\nAllBuilder:" + "'", str49, "AnyBuilder:\nAllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher50);
        org.junit.Assert.assertNotNull(iHeaderMatcher51);
        org.junit.Assert.assertNotNull(iHeaderMatcher52);
        org.junit.Assert.assertNotNull(iHeaderMatcher53);
    }

    @Test
    public void test09598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09598");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter1 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.fromText("1c811654-2294-4c6c-9ed9-06ae9a7a75af");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.rat.license.LicenseSetFactory.LicenseFilter.1c811654-2294-4c6c-9ed9-06ae9a7a75af");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09599");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet2 = strSet0.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray3 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray4 = strSet2.toArray(licenseReaderArray3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet7 = strSet2.subSet("d5b3cead3d0743ee903a1e1ba144eb11", ".cvsignore http://org/apache/rat/meta-data#LicenseFamilyName");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey out of range");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(licenseReaderArray3);
        org.junit.Assert.assertNotNull(licenseReaderArray4);
    }

    @Test
    public void test09600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09600");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd("W3C Software Copyright");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder5 = copyrightBuilder0.setStart("RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder5.setOwner("RegexBuilder: JAVA");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setOwner("COPYRIGHT BUILDER: S:90663EFF-7ED8-41BD-85A8-E8F189198BC6 E:NULL O:NULL");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertNotNull(copyrightBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
    }

    @Test
    public void test09601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09601");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("ed0faf32-f32c-46f1-a629-4fe87704cb0e");
    }

    @Test
    public void test09602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09602");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = allBuilder1.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder3 = anyBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder1);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = allBuilder1.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = allBuilder1.build();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = iHeaderMatcher5.finalizeState();
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(abstractBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test09603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09603");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter4 = xmlWriter1.attribute((java.lang.CharSequence) "fe6be119881745678d33352365bfa7c8", (java.lang.CharSequence) "Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09604");
        boolean boolean1 = org.apache.rat.document.impl.guesser.NoteGuesser.isNote("0356753D-7389-48E7-8D63-056FD4C4548C");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09605");
        org.apache.rat.api.MetaData.Datum datum0 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_CDDL1;
        java.lang.String str1 = datum0.getValue();
        java.lang.String str2 = datum0.toString();
        java.lang.String str3 = datum0.getValue();
        java.lang.String str4 = datum0.getValue();
        org.junit.Assert.assertNotNull(datum0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0" + "'", str1, "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0 ']" + "'", str2, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0 ']");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0" + "'", str3, "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0" + "'", str4, "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
    }

    @Test
    public void test09606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09606");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("TextBuilder: 4fcae176-e574-46ed-b...");
    }

    @Test
    public void test09607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09607");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        boolean boolean19 = strSet9.isEmpty();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet9.tailSet("MANIFEST.MF");
        org.apache.rat.utils.DefaultLog defaultLog22 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder23 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder24 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean25 = matcherRefBuilder24.hasId();
        java.lang.String str26 = matcherRefBuilder24.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder28 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str29 = notBuilder28.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder30 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean31 = matcherRefBuilder30.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap32 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder33 = matcherRefBuilder30.setMatchers(strMap32);
        org.apache.rat.configuration.builders.AllBuilder allBuilder34 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder37 = copyrightBuilder35.setStart("OASIS");
        java.lang.String str38 = copyrightBuilder35.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder40 = copyrightBuilder35.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean42 = matcherRefBuilder41.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder45 = copyrightBuilder43.setStart("OASIS");
        java.lang.String str46 = copyrightBuilder43.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder48 = copyrightBuilder43.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder49 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder50 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str51 = copyrightBuilder50.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder53 = copyrightBuilder50.setEnd(".cvsignore");
        boolean boolean54 = copyrightBuilder50.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder55 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str56 = copyrightBuilder55.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder58 = copyrightBuilder55.setEnd(".cvsignore");
        boolean boolean59 = copyrightBuilder55.hasId();
        java.lang.String str60 = copyrightBuilder55.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder61 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder63 = copyrightBuilder61.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder64 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder65 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean66 = matcherRefBuilder65.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap67 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder68 = matcherRefBuilder65.setMatchers(strMap67);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder69 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder70 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean71 = matcherRefBuilder70.hasId();
        java.lang.String str72 = matcherRefBuilder70.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap73 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder74 = matcherRefBuilder70.setMatchers(strMap73);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray75 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder30, allBuilder34, copyrightBuilder40, matcherRefBuilder41, copyrightBuilder43, copyrightBuilder49, copyrightBuilder50, copyrightBuilder55, copyrightBuilder61, anyBuilder64, matcherRefBuilder65, copyrightBuilder69, matcherRefBuilder70 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList76 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList76, builderArray75);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder78 = notBuilder28.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList76);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder79 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray80 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder24, anyBuilder27, notBuilder28, matcherRefBuilder79 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList81 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList81, builderArray80);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder83 = allBuilder23.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList81);
        defaultLog22.info((java.lang.Object) allBuilder23);
        org.apache.rat.ReportConfiguration reportConfiguration85 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog22);
        org.apache.rat.ReportConfiguration reportConfiguration86 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog22);
        org.apache.rat.utils.Log.Level level87 = defaultLog22.getLevel();
        defaultLog22.info((java.lang.Object) "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder90 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str91 = regexBuilder90.toString();
        java.lang.String str92 = regexBuilder90.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder94 = regexBuilder90.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        java.lang.String str95 = regexBuilder94.toString();
        java.lang.String str96 = regexBuilder94.toString();
        boolean boolean97 = regexBuilder94.hasId();
        defaultLog22.debug((java.lang.Object) regexBuilder94);
        boolean boolean99 = strSet21.equals((java.lang.Object) regexBuilder94);
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(defaultLog22);
        org.junit.Assert.assertNotNull(matcherRefBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "MathcerRefBuilder: null" + "'", str26, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NotBuilder: null" + "'", str29, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(copyrightBuilder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str38, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder40);
        org.junit.Assert.assertNotNull(matcherRefBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder43);
        org.junit.Assert.assertNotNull(copyrightBuilder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str46, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder48);
        org.junit.Assert.assertNotNull(copyrightBuilder49);
        org.junit.Assert.assertNotNull(copyrightBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str51, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str56, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str60, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder61);
        org.junit.Assert.assertNotNull(copyrightBuilder63);
        org.junit.Assert.assertNotNull(anyBuilder64);
        org.junit.Assert.assertNotNull(matcherRefBuilder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder68);
        org.junit.Assert.assertNotNull(copyrightBuilder69);
        org.junit.Assert.assertNotNull(matcherRefBuilder70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "MathcerRefBuilder: null" + "'", str72, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder74);
        org.junit.Assert.assertNotNull(builderArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(abstractBuilder78);
        org.junit.Assert.assertNotNull(builderArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(abstractBuilder83);
        org.junit.Assert.assertTrue("'" + level87 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level87.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "RegexBuilder: null" + "'", str91, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "RegexBuilder: null" + "'", str92, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae" + "'", str95, "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae" + "'", str96, "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test09608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09608");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("JAVA");
        java.lang.String str6 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder8 = iLicenseFamilyBuilder0.setLicenseFamilyName("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyName("a80aad6c-340e-4343-88df-efe4fdbf9c47");
        java.lang.String str11 = iLicenseFamilyBuilder0.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JAVA" + "'", str6, "JAVA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JAVA" + "'", str11, "JAVA");
    }

    @Test
    public void test09609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09609");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder1 = org.apache.rat.configuration.MatcherBuilderTracker.getMatcherBuilder("COPYRIGHT BUILDER: S:ARCHIVE E:NULL O:NULL");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: ?Valid builders?all?matcherRef?copyright?not?regex?spdx?text?any?ERROR MSG?No matcher builder named COPYRIGHT BUILDER: S:ARCHIVE E:NULL O:NULL");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09610");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str8 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setLicenseFamilyName("W3C Document Copyright");
        fullTextMatchingLicense0.setNotes("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        fullTextMatchingLicense0.setFullText("http://org/apache/rat/meta-data");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test09611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09611");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.lang.String str14 = strSet6.last();
        java.lang.Object[] objArray15 = strSet6.toArray();
        int int16 = strSet6.size();
        int int17 = strSet6.size();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet20 = strSet6.subSet("SPDX:ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "bd015714-405b-4304-9faa-36efad80e6e6 GEN  ");
        java.lang.Object[] objArray21 = strSet6.toArray();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str14, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
    }

    @Test
    public void test09612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09612");
        java.lang.String[] strArray7 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean8 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Copyright Builder: s:null e:.cvsignore o:null", strArray7);
        boolean boolean9 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("03f7b314-6887-4617-9c7e-bf1600b331cd", strArray7);
        boolean boolean10 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("", strArray7);
        boolean boolean11 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("MATHCERREFBUILDER: TMF", strArray7);
        boolean boolean12 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("TextBuilder: true|false|forced", strArray7);
        boolean boolean13 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("00186ad8-9b49-4e79-b8f0-40326f09c054", strArray7);
        boolean boolean14 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("d5b3cead3d0743ee903a1e1ba144eb11", strArray7);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09613");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.lang.String[] strArray45 = new java.lang.String[] { "http://org/apache/rat/meta-data", "GNU General Public License, version 2", "Modified BSD License", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "The MIT License", "OASIS", "?????", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "6486879f-fc81-4b57-aec7-c4c77d540c30", "MANIFEST.MF", "?????", "GEN  ", "GPL3 ", "http://org/apache/rat/meta-data#HeaderCategory", "DOJO ", "true", "GPL2 ", "?????", "Apache License Version 2.0", "OASIS", "W3CD ", "OASIS", "?????", "OASIS Open License", "", "standard", "GPL2 ", "GEN  ", "W3CD ", "TMF  ", ".cvsignore", "Copyright Builder: s:null e:null o:null", "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 2", "W3CD ", ".cvsignore", "Apache License Version 2.0", "GEN  ", "W3C Software Copyright", "Modified BSD License", "GPL2 ", "JAVA" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList46);
        java.lang.String str49 = reportConfiguration1.getCopyrightMessage();
        java.util.SortedSet<java.lang.String> strSet50 = reportConfiguration1.getApprovedLicenseCategories();
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier54 = reportConfiguration52.getOutput();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders55 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration52.setAddLicenseHeaders(addLicenseHeaders55);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders55);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier60 = reportConfiguration59.getOutput();
        reportConfiguration59.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        java.io.FilenameFilter filenameFilter65 = reportConfiguration64.getInputFileFilter();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders66 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration64.setAddLicenseHeaders(addLicenseHeaders66);
        reportConfiguration59.setAddLicenseHeaders(addLicenseHeaders66);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders66);
        boolean boolean70 = reportConfiguration1.isStyleReport();
        org.apache.rat.utils.Log log71 = reportConfiguration1.getLog();
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier54);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders55 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders55.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier60);
        org.junit.Assert.assertNull(filenameFilter65);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders66 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders66.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(log71);
    }

    @Test
    public void test09614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09614");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray19 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList20 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20, iLicenseFamilyArray19);
        org.apache.rat.policy.DefaultPolicy defaultPolicy22 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        boolean boolean23 = strSet9.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        org.apache.rat.policy.DefaultPolicy defaultPolicy24 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        org.apache.rat.api.Document document25 = null;
        defaultPolicy24.analyse(document25);
        org.apache.rat.api.Document document27 = null;
        defaultPolicy24.analyse(document27);
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test09615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09615");
        java.lang.String str1 = org.apache.rat.license.ILicenseFamily.makeCategory("f8093bcf-43a3-4a5b-be84-29012f362173");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "f8093" + "'", str1, "f8093");
    }

    @Test
    public void test09616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09616");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("MIT  ");
        java.lang.String str6 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder8 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("NotBuilder: null");
        java.lang.String str9 = iLicenseFamilyBuilder0.getCategory();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily10 = iLicenseFamilyBuilder0.build();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Name must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MIT  " + "'", str6, "MIT  ");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NotBuilder: null" + "'", str9, "NotBuilder: null");
    }

    @Test
    public void test09617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09617");
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray0 = new org.apache.rat.document.IDocumentAnalyser[] {};
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer1 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer2 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer3 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer4 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer5 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer6 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer7 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.api.Document document8 = null;
        documentAnalyserMultiplexer7.analyse(document8);
        org.apache.rat.api.Document document10 = null;
        documentAnalyserMultiplexer7.analyse(document10);
        org.apache.rat.api.Document document12 = null;
        documentAnalyserMultiplexer7.analyse(document12);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray0);
    }

    @Test
    public void test09618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09618");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        java.util.regex.Pattern pattern2 = null;
        headerBean0.setHeaderPattern(pattern2);
        boolean boolean4 = headerBean0.isMatch();
        java.util.regex.Pattern pattern5 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern6 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern7 = headerBean0.getHeaderPattern();
        boolean boolean8 = headerBean0.isMatch();
        java.util.regex.Pattern pattern9 = null;
        headerBean0.setHeaderPattern(pattern9);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(pattern5);
        org.junit.Assert.assertNull(pattern6);
        org.junit.Assert.assertNull(pattern7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09619");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = reportConfiguration57.getLicenses(licenseFilter59);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders61 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration57.setAddLicenseHeaders(addLicenseHeaders61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter66);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter66);
        org.apache.rat.report.IReportable iReportable69 = null;
        reportConfiguration57.setReportable(iReportable69);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter71 = reportConfiguration57.getDirectoryFilter();
        java.nio.file.Path path72 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes73 = null;
        java.nio.file.FileVisitResult fileVisitResult74 = iOFileFilter71.accept(path72, basicFileAttributes73);
        reportConfiguration55.setInputFileFilter((java.io.FilenameFilter) iOFileFilter71);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders61 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders61.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iOFileFilter71);
        org.junit.Assert.assertTrue("'" + fileVisitResult74 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult74.equals(java.nio.file.FileVisitResult.TERMINATE));
    }

    @Test
    public void test09620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09620");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("094643d4-94c6-478a-b861-15e14bd2e656", pattern1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = simpleRegexMatcher2.doMatch("6385b116-d4dd-485c-836f-45703c366b71");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09621");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray3 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList4 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList4, iLicenseFamilyArray3);
        reportConfiguration2.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList4);
        org.apache.rat.report.IReportable iReportable7 = null;
        reportConfiguration2.setReportable(iReportable7);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray10 = strSet9.toArray();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration15);
        org.apache.rat.utils.ReportingSet.Options options17 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration15.licenseDuplicateOption(options17);
        reportConfiguration12.familyDuplicateOption(options17);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier20 = reportConfiguration12.getWriter();
        boolean boolean21 = reportConfiguration12.isAddingLicensesForced();
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        reportConfiguration23.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level26 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration23.logFamilyCollisions(level26);
        reportConfiguration12.logLicenseCollisions(level26);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet29 = strSet9.setLogLevel(level26);
        java.util.stream.Stream<java.lang.String> strStream30 = strSet29.stream();
        reportConfiguration2.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet29);
        org.apache.rat.utils.ReportingSet.Options options32 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet33 = strSet29.setDuplicateOption(options32);
        java.util.Comparator<? super java.lang.String> wildcardComparator34 = strSet33.comparator();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory35 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet0, (java.util.Collection<java.lang.String>) strSet33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet37 = licenseFamilySetFactory35.getFamilies(licenseFilter36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilyArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertTrue("'" + options17 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options17.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + level26 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level26.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(strStream30);
        org.junit.Assert.assertTrue("'" + options32 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options32.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNull(wildcardComparator34);
    }

    @Test
    public void test09622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09622");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logLicenseCollisions(level4);
        reportConfiguration1.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration9.getInputFileFilter();
        reportConfiguration9.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable38 = null;
        reportConfiguration9.setReportable(iReportable38);
        org.apache.rat.Defaults.Builder builder41 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults42 = builder41.build();
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        java.io.FilenameFilter filenameFilter45 = reportConfiguration44.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet47 = reportConfiguration44.getLicenses(licenseFilter46);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders48 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration44.setAddLicenseHeaders(addLicenseHeaders48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter53);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = reportConfiguration57.getLicenses(licenseFilter59);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders61 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration57.setAddLicenseHeaders(addLicenseHeaders61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter66);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = reportConfiguration44.getLicenseFamilies(licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet70 = defaults42.getLicenses(licenseFilter66);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet71 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet70);
        org.apache.rat.license.ILicense iLicense72 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet70);
        reportConfiguration9.addLicense(iLicense72);
        java.lang.String str74 = iLicense72.derivedFrom();
        reportConfiguration1.addLicense(iLicense72);
        java.lang.String str76 = iLicense72.getNotes();
        java.lang.String str77 = iLicense72.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily78 = iLicense72.getLicenseFamily();
        java.lang.String str79 = iLicense72.derivedFrom();
        java.lang.String str80 = iLicense72.getName();
        java.lang.String str81 = iLicense72.getName();
        java.lang.String str82 = iLicense72.getName();
        java.lang.String str83 = iLicense72.getNotes();
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(defaults42);
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet47);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders48 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders48.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders61 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders61.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNotNull(iLicenseSet70);
        org.junit.Assert.assertNotNull(iLicense72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "BSD-3" + "'", str74, "BSD-3");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "BSD-3" + "'", str77, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "BSD-3" + "'", str79, "BSD-3");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "The Telemanagement Forum License" + "'", str80, "The Telemanagement Forum License");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "The Telemanagement Forum License" + "'", str81, "The Telemanagement Forum License");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "The Telemanagement Forum License" + "'", str82, "The Telemanagement Forum License");
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test09623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09623");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum3 = org.apache.rat.api.MetaData.RAT_DOCUMENT_CATEGORY_DATUM_STANDARD;
        metaData0.add(datum3);
        java.lang.String str5 = datum3.getValue();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(datum3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "standard" + "'", str5, "standard");
    }

    @Test
    public void test09624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09624");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        org.apache.rat.license.ILicenseFamily iLicenseFamily10 = null;
        reportConfiguration1.addFamily(iLicenseFamily10);
        java.lang.String str12 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier16 = reportConfiguration14.getOutput();
        org.apache.rat.license.ILicense iLicense17 = null;
        reportConfiguration14.addLicense(iLicense17);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults20 = builder19.build();
        reportConfiguration14.setFrom(defaults20);
        org.apache.rat.license.ILicense[] iLicenseArray22 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet23 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet23, iLicenseArray22);
        java.lang.String[] strArray37 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory40 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet23, (java.util.Collection<java.lang.String>) strList38);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet42 = licenseSetFactory40.getLicenseFamilies(licenseFilter41);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = defaults20.getLicenses(licenseFilter41);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic46 = org.apache.rat.Reporter.report(reportConfiguration45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.utils.ReportingSet.Options options50 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration48.licenseDuplicateOption(options50);
        reportConfiguration45.familyDuplicateOption(options50);
        boolean boolean53 = reportConfiguration45.isStyleReport();
        org.apache.rat.license.ILicense[] iLicenseArray54 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet55 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet55, iLicenseArray54);
        java.lang.String[] strArray69 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory72 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet55, (java.util.Collection<java.lang.String>) strList70);
        java.io.FilenameFilter filenameFilter73 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList70);
        java.io.FilenameFilter filenameFilter74 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList70);
        reportConfiguration45.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList70);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory76 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet43, (java.util.Collection<java.lang.String>) strList70);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet43);
        reportConfiguration1.addApprovedLicenseCategory("9ec38a8d-0e0f-4c31-8d12-d6138412a101");
        java.lang.String[] strArray85 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet86, strArray85);
        boolean boolean89 = strSet86.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.api.MetaData.Datum datum90 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_2;
        boolean boolean91 = strSet86.equals((java.lang.Object) datum90);
        strSet86.clear();
        boolean boolean94 = strSet86.addIfNotPresent("641dafc1-13c3-45d4-8272-f36f10392c53");
        boolean boolean96 = strSet86.addIfNotPresent("7e27cd62-4403-40ab-a9f5-16e7c59ab2f1");
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet86);
        reportConfiguration1.removeApprovedLicenseCategory(".cvsignore");
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(defaults20);
        org.junit.Assert.assertNotNull(iLicenseArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet42);
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertNull(claimStatistic46);
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + options50 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options50.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(iLicenseArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(filenameFilter73);
        org.junit.Assert.assertNotNull(filenameFilter74);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(datum90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test09625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09625");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null;
        claimStatistic0.setDocumentCategoryMap(strMap1);
        claimStatistic0.setNumApproved((int) (short) -1);
        int int5 = claimStatistic0.getNumGenerated();
        claimStatistic0.setNumUnknown((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test09626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09626");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isStyleReport();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        reportConfiguration12.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level15 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration12.logFamilyCollisions(level15);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter17 = reportConfiguration12.getDirectoryFilter();
        java.lang.String[] strArray23 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        boolean boolean27 = strSet24.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean29 = strSet24.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction30 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet31 = strSet24.setMsgFormat(strFunction30);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet33 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily34 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet33);
        boolean boolean35 = strSet24.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet33);
        reportConfiguration12.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet24);
        org.apache.rat.report.IReportable iReportable37 = null;
        reportConfiguration12.setReportable(iReportable37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray41 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList42 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList42, iLicenseFamilyArray41);
        reportConfiguration40.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList42);
        reportConfiguration40.addApprovedLicenseCategory("http://org/apache/rat/meta-data");
        org.apache.rat.report.IReportable iReportable47 = reportConfiguration40.getReportable();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter48 = reportConfiguration40.getDirectoryFilter();
        reportConfiguration12.setDirectoryFilter(iOFileFilter48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic55 = org.apache.rat.Reporter.report(reportConfiguration54);
        org.apache.rat.utils.ReportingSet.Options options56 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration54.licenseDuplicateOption(options56);
        reportConfiguration51.familyDuplicateOption(options56);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier59 = reportConfiguration51.getWriter();
        boolean boolean60 = reportConfiguration51.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter61 = reportConfiguration51.getInputFileFilter();
        java.io.FilenameFilter filenameFilter62 = reportConfiguration51.getInputFileFilter();
        boolean boolean63 = reportConfiguration51.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier64 = reportConfiguration51.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter65 = reportConfiguration51.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter66 = reportConfiguration51.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter67 = iOFileFilter48.or(iOFileFilter66);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter68 = iOFileFilter66.negate();
        reportConfiguration1.addDirectoryFilter(iOFileFilter68);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + level15 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level15.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(iLicenseFamilySet33);
        org.junit.Assert.assertNull(iLicenseFamily34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(iReportable47);
        org.junit.Assert.assertNotNull(iOFileFilter48);
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertNull(claimStatistic55);
        org.junit.Assert.assertTrue("'" + options56 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options56.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(filenameFilter61);
        org.junit.Assert.assertNull(filenameFilter62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier64);
        org.junit.Assert.assertNotNull(iOFileFilter65);
        org.junit.Assert.assertNotNull(iOFileFilter66);
        org.junit.Assert.assertNotNull(iOFileFilter67);
        org.junit.Assert.assertNotNull(iOFileFilter68);
    }

    @Test
    public void test09627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09627");
        java.io.File file0 = null;
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 100 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.impl.ArchiveEntryDocument archiveEntryDocument6 = new org.apache.rat.document.impl.ArchiveEntryDocument(file0, byteArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, 0, 100]");
    }

    @Test
    public void test09628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09628");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders7 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration3.setAddLicenseHeaders(addLicenseHeaders7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter12);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter12);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter25);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier31 = reportConfiguration30.getOutput();
        reportConfiguration3.setOut(outputStreamIOSupplier31);
        org.apache.rat.utils.Log.Level level33 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration3.logLicenseCollisions(level33);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter35 = reportConfiguration3.getDirectoryFilter();
        java.nio.file.Path path36 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes37 = null;
        java.nio.file.FileVisitResult fileVisitResult38 = iOFileFilter35.accept(path36, basicFileAttributes37);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter39 = iOFileFilter35.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter40 = iOFileFilter39.negate();
        java.nio.file.Path path41 = null;
        boolean boolean42 = iOFileFilter40.matches(path41);
        java.nio.file.Path path43 = null;
        boolean boolean44 = iOFileFilter40.matches(path43);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter45 = iOFileFilter40.negate();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker46 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders7 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders7.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier31);
        org.junit.Assert.assertTrue("'" + level33 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level33.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter35);
        org.junit.Assert.assertTrue("'" + fileVisitResult38 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult38.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter39);
        org.junit.Assert.assertNotNull(iOFileFilter40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(iOFileFilter45);
    }

    @Test
    public void test09629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09629");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str1 = anyBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = anyBuilder0.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = anyBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = anyBuilder0.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList5 = anyBuilder0.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str8 = anyBuilder7.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList9 = anyBuilder7.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = anyBuilder7.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder11 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str12 = anyBuilder11.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList13 = anyBuilder11.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher14 = anyBuilder11.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher15 = anyBuilder11.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList16 = anyBuilder11.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder17 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str18 = notBuilder17.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap21 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder22 = matcherRefBuilder19.setMatchers(strMap21);
        org.apache.rat.configuration.builders.AllBuilder allBuilder23 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder24 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder24.setStart("OASIS");
        java.lang.String str27 = copyrightBuilder24.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder29 = copyrightBuilder24.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder30 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean31 = matcherRefBuilder30.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder32 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder34 = copyrightBuilder32.setStart("OASIS");
        java.lang.String str35 = copyrightBuilder32.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder37 = copyrightBuilder32.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder38 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str40 = copyrightBuilder39.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder42 = copyrightBuilder39.setEnd(".cvsignore");
        boolean boolean43 = copyrightBuilder39.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder44 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str45 = copyrightBuilder44.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = copyrightBuilder44.setEnd(".cvsignore");
        boolean boolean48 = copyrightBuilder44.hasId();
        java.lang.String str49 = copyrightBuilder44.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder50 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder52 = copyrightBuilder50.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder53 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder54 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean55 = matcherRefBuilder54.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap56 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = matcherRefBuilder54.setMatchers(strMap56);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder58 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder59 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean60 = matcherRefBuilder59.hasId();
        java.lang.String str61 = matcherRefBuilder59.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap62 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder63 = matcherRefBuilder59.setMatchers(strMap62);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray64 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder19, allBuilder23, copyrightBuilder29, matcherRefBuilder30, copyrightBuilder32, copyrightBuilder38, copyrightBuilder39, copyrightBuilder44, copyrightBuilder50, anyBuilder53, matcherRefBuilder54, copyrightBuilder58, matcherRefBuilder59 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList65 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList65, builderArray64);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder67 = notBuilder17.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList65);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder68 = anyBuilder11.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList65);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder69 = anyBuilder7.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList65);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder70 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList65);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder71 = anyBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) notBuilder6);
        java.lang.String str72 = notBuilder6.toString();
        java.lang.String str73 = notBuilder6.toString();
        java.lang.String str74 = notBuilder6.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher75 = notBuilder6.build();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: 'not' type matcher requires one and only one enclosed matcher");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AnyBuilder:" + "'", str1, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcherList5);
        org.junit.Assert.assertNotNull(anyBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "AnyBuilder:" + "'", str8, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(anyBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AnyBuilder:" + "'", str12, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList13);
        org.junit.Assert.assertNotNull(iHeaderMatcher14);
        org.junit.Assert.assertNotNull(iHeaderMatcher15);
        org.junit.Assert.assertNotNull(iHeaderMatcherList16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NotBuilder: null" + "'", str18, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder22);
        org.junit.Assert.assertNotNull(copyrightBuilder24);
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str27, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder29);
        org.junit.Assert.assertNotNull(matcherRefBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder32);
        org.junit.Assert.assertNotNull(copyrightBuilder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str35, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder37);
        org.junit.Assert.assertNotNull(copyrightBuilder38);
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str40, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str45, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str49, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder50);
        org.junit.Assert.assertNotNull(copyrightBuilder52);
        org.junit.Assert.assertNotNull(anyBuilder53);
        org.junit.Assert.assertNotNull(matcherRefBuilder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder57);
        org.junit.Assert.assertNotNull(copyrightBuilder58);
        org.junit.Assert.assertNotNull(matcherRefBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "MathcerRefBuilder: null" + "'", str61, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder63);
        org.junit.Assert.assertNotNull(builderArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(abstractBuilder67);
        org.junit.Assert.assertNotNull(abstractBuilder68);
        org.junit.Assert.assertNotNull(abstractBuilder69);
        org.junit.Assert.assertNotNull(abstractBuilder70);
        org.junit.Assert.assertNotNull(abstractBuilder71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str72, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str73, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str74, "NotBuilder: MathcerRefBuilder: null");
    }

    @Test
    public void test09630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09630");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder3);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder3.setRefId("http:");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder6.setMatchers(strMap7);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder8.setRefId("");
        java.lang.String str11 = matcherRefBuilder10.toString();
        java.lang.String str12 = matcherRefBuilder10.toString();
        java.lang.String str13 = matcherRefBuilder10.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap14 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder15 = matcherRefBuilder10.setMatchers(strMap14);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap16 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder17 = matcherRefBuilder10.setMatchers(strMap16);
        boolean boolean18 = matcherRefBuilder10.hasId();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder20 = matcherRefBuilder10.setRefId("11370891-c763-426b-9547-57e87d991d61");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MathcerRefBuilder: " + "'", str11, "MathcerRefBuilder: ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MathcerRefBuilder: " + "'", str12, "MathcerRefBuilder: ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MathcerRefBuilder: " + "'", str13, "MathcerRefBuilder: ");
        org.junit.Assert.assertNotNull(matcherRefBuilder15);
        org.junit.Assert.assertNotNull(matcherRefBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder20);
    }

    @Test
    public void test09631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09631");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder6 = builder0.add("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder7 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder9 = builder7.remove("SPDX:ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.Defaults.Builder builder11 = builder7.add("736352aa-a974-4b58-b2f1-4caa6178920b");
        org.apache.rat.Defaults.Builder builder13 = builder11.add("4f6baee5-accf-42cc-adfd-2bd688852a2e");
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder15 = builder11.add(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test09632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09632");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.apache.rat.license.ILicenseFamily iLicenseFamily8 = iLicenseFamilyBuilder0.build();
        java.lang.String str9 = iLicenseFamilyBuilder0.getCategory();
        java.lang.String str10 = iLicenseFamilyBuilder0.getCategory();
        java.lang.String str11 = iLicenseFamilyBuilder0.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(iLicenseFamily8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AL   " + "'", str9, "AL   ");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AL   " + "'", str10, "AL   ");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AL   " + "'", str11, "AL   ");
    }

    @Test
    public void test09633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09633");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder0.setName("archive");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setName("67eb96c2-83b2-456d-bfb0-23ff916bf212");
        org.apache.rat.license.ILicense.Builder builder8 = builder4.setNotes("904bc88b-928c-4c8f-95f7-0cc95faab098");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test09634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09634");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray0 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList1 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1, iLicenseFamilyArray0);
        org.apache.rat.policy.DefaultPolicy defaultPolicy3 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1);
        org.apache.rat.api.Document document4 = null;
        defaultPolicy3.analyse(document4);
        org.apache.rat.api.Document document6 = null;
        defaultPolicy3.analyse(document6);
        org.apache.rat.api.Document document8 = null;
        defaultPolicy3.analyse(document8);
        org.apache.rat.api.Document document10 = null;
        defaultPolicy3.analyse(document10);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet12 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.api.Document document13 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy3.reportLicenseApprovalClaim(document13, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilyArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet12);
    }

    @Test
    public void test09635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09635");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isKeystore("64868");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09636");
        org.apache.rat.api.MetaData metaData1 = new org.apache.rat.api.MetaData();
        java.lang.String str3 = metaData1.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str5 = metaData1.value("W3C Document Copyright");
        boolean boolean7 = metaData1.clear("hi!");
        metaData1.clear();
        metaData1.clear();
        metaData1.clear();
        metaData1.clear();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection12 = metaData1.getData();
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        java.io.FilenameFilter filenameFilter40 = reportConfiguration14.getInputFileFilter();
        reportConfiguration14.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable43 = null;
        reportConfiguration14.setReportable(iReportable43);
        org.apache.rat.Defaults.Builder builder46 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults47 = builder46.build();
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = reportConfiguration49.getLicenses(licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter58);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        java.io.FilenameFilter filenameFilter63 = reportConfiguration62.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet65 = reportConfiguration62.getLicenses(licenseFilter64);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders66 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration62.setAddLicenseHeaders(addLicenseHeaders66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter71 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration69, licenseFilter71);
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter71);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet74 = reportConfiguration49.getLicenseFamilies(licenseFilter71);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet75 = defaults47.getLicenses(licenseFilter71);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet76 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet75);
        org.apache.rat.license.ILicense iLicense77 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet75);
        reportConfiguration14.addLicense(iLicense77);
        java.lang.String str79 = iLicense77.derivedFrom();
        java.lang.String str80 = iLicense77.getName();
        java.lang.String str81 = iLicense77.derivedFrom();
        metaData1.reportOnLicense(iLicense77);
        java.lang.String str83 = iLicense77.getName();
        java.lang.String str84 = iLicense77.getName();
        java.lang.String str85 = iLicense77.derivedFrom();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher86 = new org.apache.rat.analysis.matchers.NotMatcher("96ba4e3b-7c1a-47bf-88c5-78860245a028", (org.apache.rat.analysis.IHeaderMatcher) iLicense77);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(datumCollection12);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter40);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(defaults47);
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet65);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders66 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders66.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + licenseFilter71 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter71.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet74);
        org.junit.Assert.assertNotNull(iLicenseSet75);
        org.junit.Assert.assertNotNull(iLicense77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "BSD-3" + "'", str79, "BSD-3");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "The Telemanagement Forum License" + "'", str80, "The Telemanagement Forum License");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "BSD-3" + "'", str81, "BSD-3");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "The Telemanagement Forum License" + "'", str83, "The Telemanagement Forum License");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "The Telemanagement Forum License" + "'", str84, "The Telemanagement Forum License");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "BSD-3" + "'", str85, "BSD-3");
    }

    @Test
    public void test09637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09637");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet2 = strSet0.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray3 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray4 = strSet2.toArray(licenseReaderArray3);
        strSet2.clear();
        boolean boolean6 = strSet2.isEmpty();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction7 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet8 = strSet2.setMsgFormat(strFunction7);
        java.lang.Object[] objArray9 = strSet8.toArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet11 = strSet8.headSet("FFALSE");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: toKey out of range");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(licenseReaderArray3);
        org.junit.Assert.assertNotNull(licenseReaderArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    }

    @Test
    public void test09638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09638");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("t true");
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder4 = textBuilder0.setText("c523095e-4421-4cc4-93e2-039f23b91f76");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = textBuilder0.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder7 = textBuilder0.setText("Copyright Builder: s:null e:null o:a1abad46-6a98-44f8-aa20-7839919a8270");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textCaptureBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(textBuilder7);
    }

    @Test
    public void test09639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09639");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher1 = allBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = allBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = allBuilder0.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder4 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str5 = copyrightBuilder4.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder4.setEnd(".cvsignore");
        boolean boolean8 = copyrightBuilder4.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = copyrightBuilder4.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder11 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder4);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = copyrightBuilder4.build();
        org.apache.rat.analysis.IHeaderMatcher.State state13 = iHeaderMatcher12.finalizeState();
        boolean boolean14 = state13.asBoolean();
        org.junit.Assert.assertNotNull(iHeaderMatcher1);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(copyrightBuilder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str5, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder10);
        org.junit.Assert.assertNotNull(abstractBuilder11);
        org.junit.Assert.assertNotNull(iHeaderMatcher12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state13.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09640");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str1 = anyBuilder0.toString();
        java.lang.String str2 = anyBuilder0.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = anyBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = anyBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = anyBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = anyBuilder0.build();
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AnyBuilder:" + "'", str1, "AnyBuilder:");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AnyBuilder:" + "'", str2, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
    }

    @Test
    public void test09641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09641");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("c6439e17-b289-4e1a-a191-0a99e37e0519");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09642");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("null http://org/apache/rat/meta-data#LicenseFamilyName", "Copyright Builder: s:.cvsignore e:standard o:b9d57440-4b03-461e-a164-b29e1341bbc8");
    }

    @Test
    public void test09643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09643");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.fromName("2ed68e58-7824-4cb9-a7a0-1fdc42449c68");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: 2ed68e58-7824-4cb9-a7a0-1fdc42449c68");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09644");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration1.getLicenses(licenseFilter51);
        org.apache.rat.license.ILicense iLicense56 = null;
        reportConfiguration1.addLicense(iLicense56);
        reportConfiguration1.setStyleReport(false);
        reportConfiguration1.addApprovedLicenseCategory("d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertNull(claimStatistic62);
    }

    @Test
    public void test09645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09645");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults defaults2 = builder0.build();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults defaults4 = builder3.build();
        org.apache.rat.Defaults defaults5 = builder3.build();
        java.net.URL uRL6 = null;
        org.apache.rat.Defaults.Builder builder7 = builder3.remove(uRL6);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(defaults2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(defaults4);
        org.junit.Assert.assertNotNull(defaults5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test09646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09646");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("GPL2 ");
        org.apache.rat.analysis.IHeaderMatcher.State state2 = fullTextMatcher1.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = fullTextMatcher1.matches("RegexBuilder: null");
        java.lang.String str5 = fullTextMatcher1.toString();
        fullTextMatcher1.reset();
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state2.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ecad20a4-0574-4e26-b870-392031a7983e" + "'", str5, "ecad20a4-0574-4e26-b870-392031a7983e");
    }

    @Test
    public void test09647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09647");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        org.apache.rat.Defaults.Builder builder47 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults48 = builder47.build();
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders54 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration50.setAddLicenseHeaders(addLicenseHeaders54);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = org.apache.rat.Reporter.report(reportConfiguration57);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter59);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        java.io.FilenameFilter filenameFilter64 = reportConfiguration63.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter65 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet66 = reportConfiguration63.getLicenses(licenseFilter65);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders67 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration63.setAddLicenseHeaders(addLicenseHeaders67);
        org.apache.rat.utils.Log log69 = null;
        org.apache.rat.ReportConfiguration reportConfiguration70 = new org.apache.rat.ReportConfiguration(log69);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic71 = org.apache.rat.Reporter.report(reportConfiguration70);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter72 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration70, licenseFilter72);
        org.apache.rat.Reporter.listLicenses(reportConfiguration63, licenseFilter72);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet75 = reportConfiguration50.getLicenseFamilies(licenseFilter72);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet76 = defaults48.getLicenses(licenseFilter72);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet77 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet76);
        org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser78 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog0, (java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet76);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet79 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet76);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(defaults48);
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders54 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders54.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter64);
        org.junit.Assert.assertTrue("'" + licenseFilter65 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter65.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet66);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders67 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders67.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic71);
        org.junit.Assert.assertTrue("'" + licenseFilter72 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter72.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet75);
        org.junit.Assert.assertNotNull(iLicenseSet76);
        org.junit.Assert.assertNotNull(iDocumentAnalyser78);
    }

    @Test
    public void test09648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09648");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("archive");
        simpleLicenseFamily0.setFamilyName("W3CD ");
        java.lang.String str7 = simpleLicenseFamily0.toString();
        simpleLicenseFamily0.setFamilyCategory("bd015714-405b-4304-9faa-36efad80e6e6");
        simpleLicenseFamily0.setFamilyCategory("ece24682-3459-4761-bb85-7fc8538fa181");
        simpleLicenseFamily0.setFamilyName("09515582-f498-42b1-81db-55dad652cc61");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "archive W3CD " + "'", str7, "archive W3CD ");
    }

    @Test
    public void test09649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09649");
        org.apache.rat.api.MetaData.Datum datum0 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_ACADEMIC_FREE_LICENSE_VERSION_2_1;
        java.lang.String str1 = datum0.toString();
        java.lang.String str2 = datum0.getValue();
        java.lang.String str3 = datum0.getValue();
        org.junit.Assert.assertNotNull(datum0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str1, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Academic Free License, Version 2.1" + "'", str2, "Academic Free License, Version 2.1");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Academic Free License, Version 2.1" + "'", str3, "Academic Free License, Version 2.1");
    }

    @Test
    public void test09650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09650");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.license.ILicense.Builder builder8 = builder6.setName("GPL3 ");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher12 = new org.apache.rat.analysis.matchers.CopyrightMatcher("NotBuilder: null", "http://org/apache/rat/meta-data#LicenseFamilyName", "http://org/apache/rat/meta-data");
        java.lang.String str13 = copyrightMatcher12.getId();
        org.apache.rat.license.ILicense.Builder builder14 = builder6.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher12);
        org.apache.rat.license.ILicense.Builder builder16 = builder6.setLicenseFamilyCategory("Copyright Builder: s:null e:6486879ffc814b57aec7c4c77d540c30 o:null");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "612e023b-62e5-4367-9b41-bc8d5c1d03ac" + "'", str13, "612e023b-62e5-4367-9b41-bc8d5c1d03ac");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test09651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09651");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems0 = org.apache.rat.config.SourceCodeManagementSystems.CVS;
        java.util.List<java.lang.String> strList1 = sourceCodeManagementSystems0.getExclusions();
        boolean boolean2 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.lang.String str3 = sourceCodeManagementSystems0.getIgnoreFile();
        java.lang.String str4 = sourceCodeManagementSystems0.getIgnoreFile();
        java.util.List<java.lang.String> strList5 = sourceCodeManagementSystems0.getExclusions();
        java.lang.String str6 = sourceCodeManagementSystems0.getIgnoreFile();
        java.util.List<java.lang.String> strList7 = sourceCodeManagementSystems0.getExclusions();
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems0 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.CVS + "'", sourceCodeManagementSystems0.equals(org.apache.rat.config.SourceCodeManagementSystems.CVS));
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + ".cvsignore" + "'", str3, ".cvsignore");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + ".cvsignore" + "'", str4, ".cvsignore");
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + ".cvsignore" + "'", str6, ".cvsignore");
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test09652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09652");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems0 = org.apache.rat.config.SourceCodeManagementSystems.CVS;
        java.util.List<java.lang.String> strList1 = sourceCodeManagementSystems0.getExclusions();
        java.lang.String str2 = sourceCodeManagementSystems0.getIgnoreFile();
        boolean boolean3 = sourceCodeManagementSystems0.hasIgnoreFile();
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems0 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.CVS + "'", sourceCodeManagementSystems0.equals(org.apache.rat.config.SourceCodeManagementSystems.CVS));
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + ".cvsignore" + "'", str2, ".cvsignore");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test09653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09653");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration1.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.List<java.lang.String> strList6 = org.apache.rat.config.SourceCodeManagementSystems.getPluginExclusions();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.rat.utils.ReportingSet.Options options14 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration12.licenseDuplicateOption(options14);
        reportConfiguration9.familyDuplicateOption(options14);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier17 = reportConfiguration9.getWriter();
        boolean boolean18 = reportConfiguration9.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter19 = reportConfiguration9.getInputFileFilter();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier20 = reportConfiguration9.getStyleSheet();
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter44);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier50 = reportConfiguration49.getOutput();
        reportConfiguration22.setOut(outputStreamIOSupplier50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.utils.ReportingSet.Options options58 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration56.licenseDuplicateOption(options58);
        reportConfiguration53.familyDuplicateOption(options58);
        reportConfiguration22.licenseDuplicateOption(options58);
        reportConfiguration22.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        reportConfiguration65.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level68 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration65.logLicenseCollisions(level68);
        reportConfiguration22.logLicenseCollisions(level68);
        reportConfiguration9.logLicenseCollisions(level68);
        reportConfiguration1.logFamilyCollisions(level68);
        reportConfiguration1.removeApprovedLicenseCategory("Copyright Builder: s:null e:d25f13bc-1910-4451-97b5-b72663551a5d o:null");
        java.io.File file75 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(file75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertTrue("'" + options14 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options14.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertNull(inputStreamIOSupplier20);
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier50);
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + options58 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options58.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level68 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level68.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test09654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09654");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder1.setStart("OASIS");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = copyrightBuilder1.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder6 = copyrightBuilder1.setStart(".cvsignore");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder8 = copyrightBuilder1.setOwner("W3C  ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = copyrightBuilder1.setEnd("standard");
        java.lang.Object obj11 = toNameTransformer0.transform((java.lang.Object) copyrightBuilder1);
        java.util.regex.Pattern pattern14 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher15 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern14);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher16 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher15);
        org.apache.rat.analysis.IHeaderMatcher.State state17 = notMatcher16.finalizeState();
        java.lang.String str18 = notMatcher16.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state19 = notMatcher16.currentState();
        notMatcher16.reset();
        notMatcher16.reset();
        java.lang.Object obj22 = toNameTransformer0.transform((java.lang.Object) notMatcher16);
        org.apache.rat.Defaults.Builder builder24 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults25 = builder24.build();
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        java.io.FilenameFilter filenameFilter41 = reportConfiguration40.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = reportConfiguration40.getLicenses(licenseFilter42);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders44 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration40.setAddLicenseHeaders(addLicenseHeaders44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter49);
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter49);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet52 = reportConfiguration27.getLicenseFamilies(licenseFilter49);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = defaults25.getLicenses(licenseFilter49);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet54 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet53);
        org.apache.rat.license.ILicense iLicense55 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet53);
        org.apache.rat.license.ILicenseFamily iLicenseFamily56 = iLicense55.getLicenseFamily();
        java.lang.String str57 = iLicense55.getName();
        java.lang.Object obj58 = toNameTransformer0.transform((java.lang.Object) str57);
        java.io.Writer writer59 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter60 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer59);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter61 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter60);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter62 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter60);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter63 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter60);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter64 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter60);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter65 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter60);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter66 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter60);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter67 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter60);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter68 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter60);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter69 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter60);
        java.lang.Object obj70 = toNameTransformer0.transform((java.lang.Object) simpleXmlClaimReporter69);
        org.apache.rat.api.Document document71 = null;
        // The following exception was thrown during execution in test generation
        try {
            simpleXmlClaimReporter69.report(document71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copyrightBuilder1);
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(copyrightBuilder6);
        org.junit.Assert.assertNotNull(copyrightBuilder8);
        org.junit.Assert.assertNotNull(copyrightBuilder10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state17.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GNU General Public License, version 2" + "'", str18, "GNU General Public License, version 2");
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state19.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(defaults25);
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders44 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders44.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet52);
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertNotNull(iLicense55);
        org.junit.Assert.assertNotNull(iLicenseFamily56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "The Telemanagement Forum License" + "'", str57, "The Telemanagement Forum License");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj70);
    }

    @Test
    public void test09655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09655");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.license.ILicense[] iLicenseArray13 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet14 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet14, iLicenseArray13);
        java.lang.String[] strArray28 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory31 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet14, (java.util.Collection<java.lang.String>) strList29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration46.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = reportConfiguration46.getLicenses(licenseFilter48);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders50 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration46.setAddLicenseHeaders(addLicenseHeaders50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter55);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet59 = licenseSetFactory31.getLicenses(licenseFilter55);
        defaultLog0.warn((java.lang.Object) licenseSetFactory31);
        org.apache.rat.utils.DefaultLog defaultLog61 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder62 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder64 = builder62.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher68 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state69 = copyrightMatcher68.finalizeState();
        org.apache.rat.license.ILicense.Builder builder70 = builder64.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher68);
        org.apache.rat.license.ILicense.Builder builder72 = builder70.setLicenseFamilyCategory("");
        defaultLog61.error((java.lang.Object) builder72);
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog61.log(level74, "JAVA");
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier79 = reportConfiguration78.getOutput();
        reportConfiguration78.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log82 = reportConfiguration78.getLog();
        org.apache.rat.utils.Log.Level level83 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration78.logFamilyCollisions(level83);
        defaultLog61.setLevel(level83);
        org.apache.rat.utils.Log.Level level86 = defaultLog61.getLevel();
        defaultLog0.log(level86, "GPL1 ");
        org.apache.rat.ReportConfiguration reportConfiguration89 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender91 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "36f60d10a0bd4355a2a63635adf29872");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(iLicenseArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders50 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders50.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet59);
        org.junit.Assert.assertNotNull(defaultLog61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + state69 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state69.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level74.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier79);
        org.junit.Assert.assertNull(log82);
        org.junit.Assert.assertTrue("'" + level83 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level83.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + level86 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level86.equals(org.apache.rat.utils.Log.Level.INFO));
    }

    @Test
    public void test09656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09656");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.TXT;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader2 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader4 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader5 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader6 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader7 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader8 = format0.licenseReader();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.TXT + "'", format0.equals(org.apache.rat.configuration.Format.TXT));
        org.junit.Assert.assertNull(licenseReader1);
        org.junit.Assert.assertNull(licenseReader2);
        org.junit.Assert.assertNull(licenseReader3);
        org.junit.Assert.assertNull(matcherReader4);
        org.junit.Assert.assertNull(matcherReader5);
        org.junit.Assert.assertNull(matcherReader6);
        org.junit.Assert.assertNull(licenseReader7);
        org.junit.Assert.assertNull(licenseReader8);
    }

    @Test
    public void test09657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09657");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter6 = xmlWriter1.attribute((java.lang.CharSequence) "NotBuilder: MathcerRefBuilder: null", (java.lang.CharSequence) "RegexBuilder: f5f3fb9b-540a-43ef-a018-8ce5779e23f4");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09658");
        java.lang.String str1 = org.apache.rat.document.impl.guesser.GuessUtils.normalise("ApacheLicenseVersion20");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "APACHELICENSEVERSION20" + "'", str1, "APACHELICENSEVERSION20");
    }

    @Test
    public void test09659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09659");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder2.setText("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = textBuilder4.build();
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder7 = textBuilder4.setText("W3C  ");
        org.apache.rat.configuration.builders.TextBuilder textBuilder9 = textBuilder4.setText("4fcae176-e574-46ed-b9e4-dea2e2f3b458");
        org.apache.rat.configuration.builders.TextBuilder textBuilder11 = textBuilder4.setText("3e2b228d-d5ff-4444-8d8c-d614494b2426 null");
        org.apache.rat.configuration.builders.TextBuilder textBuilder13 = textBuilder11.setText("Apache License Version 2.0");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(textCaptureBuilder7);
        org.junit.Assert.assertNotNull(textBuilder9);
        org.junit.Assert.assertNotNull(textBuilder11);
        org.junit.Assert.assertNotNull(textBuilder13);
    }

    @Test
    public void test09660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09660");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder0.setId("GPL2 ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setName("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.license.ILicense.Builder builder8 = builder4.setName("11bf2ebc-dd8a-491c-822b-286b67ff9520");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test09661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09661");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = allBuilder1.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder3 = anyBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder1);
        java.lang.String str4 = anyBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList5 = anyBuilder0.getChildren();
        java.lang.String str6 = anyBuilder0.toString();
        java.lang.String str7 = anyBuilder0.toString();
        org.apache.rat.configuration.builders.AllBuilder allBuilder8 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = allBuilder8.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = allBuilder8.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder11 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = copyrightBuilder11.setStart("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher14 = copyrightBuilder11.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher15 = copyrightBuilder11.build();
        java.lang.String str16 = copyrightBuilder11.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder17 = allBuilder8.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder11);
        org.apache.rat.configuration.builders.NotBuilder notBuilder18 = org.apache.rat.analysis.IHeaderMatcher.Builder.not();
        boolean boolean19 = notBuilder18.hasId();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList20 = notBuilder18.getChildren();
        org.apache.rat.configuration.builders.AllBuilder allBuilder21 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean23 = matcherRefBuilder22.hasId();
        java.lang.String str24 = matcherRefBuilder22.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder25 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder26 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str27 = notBuilder26.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean29 = matcherRefBuilder28.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap30 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder31 = matcherRefBuilder28.setMatchers(strMap30);
        org.apache.rat.configuration.builders.AllBuilder allBuilder32 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        java.lang.String str36 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder38 = copyrightBuilder33.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean40 = matcherRefBuilder39.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder43 = copyrightBuilder41.setStart("OASIS");
        java.lang.String str44 = copyrightBuilder41.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder46 = copyrightBuilder41.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str49 = copyrightBuilder48.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder51 = copyrightBuilder48.setEnd(".cvsignore");
        boolean boolean52 = copyrightBuilder48.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder53 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str54 = copyrightBuilder53.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder56 = copyrightBuilder53.setEnd(".cvsignore");
        boolean boolean57 = copyrightBuilder53.hasId();
        java.lang.String str58 = copyrightBuilder53.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder59 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder61 = copyrightBuilder59.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder62 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder63 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean64 = matcherRefBuilder63.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap65 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder66 = matcherRefBuilder63.setMatchers(strMap65);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder67 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder68 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean69 = matcherRefBuilder68.hasId();
        java.lang.String str70 = matcherRefBuilder68.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap71 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder72 = matcherRefBuilder68.setMatchers(strMap71);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray73 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder28, allBuilder32, copyrightBuilder38, matcherRefBuilder39, copyrightBuilder41, copyrightBuilder47, copyrightBuilder48, copyrightBuilder53, copyrightBuilder59, anyBuilder62, matcherRefBuilder63, copyrightBuilder67, matcherRefBuilder68 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList74 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList74, builderArray73);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder76 = notBuilder26.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList74);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder77 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray78 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder22, anyBuilder25, notBuilder26, matcherRefBuilder77 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList79 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79, builderArray78);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder81 = allBuilder21.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder82 = notBuilder18.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder83 = allBuilder8.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder84 = anyBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList79);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher85 = anyBuilder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(abstractBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AnyBuilder:\nAllBuilder:" + "'", str4, "AnyBuilder:\nAllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "AnyBuilder:\nAllBuilder:" + "'", str6, "AnyBuilder:\nAllBuilder:");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AnyBuilder:\nAllBuilder:" + "'", str7, "AnyBuilder:\nAllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(copyrightBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(iHeaderMatcher14);
        org.junit.Assert.assertNotNull(iHeaderMatcher15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null" + "'", str16, "Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null");
        org.junit.Assert.assertNotNull(abstractBuilder17);
        org.junit.Assert.assertNotNull(notBuilder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(iHeaderMatcherList20);
        org.junit.Assert.assertNotNull(matcherRefBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "MathcerRefBuilder: null" + "'", str24, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NotBuilder: null" + "'", str27, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder31);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str36, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder38);
        org.junit.Assert.assertNotNull(matcherRefBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(copyrightBuilder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str44, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(copyrightBuilder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str49, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str54, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str58, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder59);
        org.junit.Assert.assertNotNull(copyrightBuilder61);
        org.junit.Assert.assertNotNull(anyBuilder62);
        org.junit.Assert.assertNotNull(matcherRefBuilder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder66);
        org.junit.Assert.assertNotNull(copyrightBuilder67);
        org.junit.Assert.assertNotNull(matcherRefBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "MathcerRefBuilder: null" + "'", str70, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder72);
        org.junit.Assert.assertNotNull(builderArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(abstractBuilder76);
        org.junit.Assert.assertNotNull(builderArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(abstractBuilder81);
        org.junit.Assert.assertNotNull(abstractBuilder82);
        org.junit.Assert.assertNotNull(abstractBuilder83);
        org.junit.Assert.assertNotNull(abstractBuilder84);
    }

    @Test
    public void test09662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09662");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter17 = xmlWriter1.attribute((java.lang.CharSequence) "15ff671b-67b8-4791-9e1e-208f319fb7e2", (java.lang.CharSequence) "29b5b71b-6a8a-4bb9-9a4b-127b599f4091");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09663");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.TXT;
        org.apache.rat.configuration.MatcherReader matcherReader1 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader4 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader5 = format0.matcherReader();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.TXT + "'", format0.equals(org.apache.rat.configuration.Format.TXT));
        org.junit.Assert.assertNull(matcherReader1);
        org.junit.Assert.assertNull(matcherReader2);
        org.junit.Assert.assertNull(licenseReader3);
        org.junit.Assert.assertNull(matcherReader4);
        org.junit.Assert.assertNull(matcherReader5);
    }

    @Test
    public void test09664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09664");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration1.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier6 = reportConfiguration1.getOutput();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier7 = reportConfiguration1.getOutput();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier8 = reportConfiguration1.getOutput();
        org.apache.rat.report.IReportable iReportable9 = reportConfiguration1.getReportable();
        reportConfiguration1.removeApprovedLicenseCategory("MathcerRefBuilder: 3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.junit.Assert.assertNotNull(outputStreamIOSupplier6);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier7);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier8);
        org.junit.Assert.assertNull(iReportable9);
    }

    @Test
    public void test09665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09665");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.TXT;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader2 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader4 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader5 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader6 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader7 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader8 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader9 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader10 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader11 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader12 = format0.matcherReader();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.TXT + "'", format0.equals(org.apache.rat.configuration.Format.TXT));
        org.junit.Assert.assertNull(licenseReader1);
        org.junit.Assert.assertNull(licenseReader2);
        org.junit.Assert.assertNull(licenseReader3);
        org.junit.Assert.assertNull(matcherReader4);
        org.junit.Assert.assertNull(matcherReader5);
        org.junit.Assert.assertNull(licenseReader6);
        org.junit.Assert.assertNull(matcherReader7);
        org.junit.Assert.assertNull(matcherReader8);
        org.junit.Assert.assertNull(matcherReader9);
        org.junit.Assert.assertNull(matcherReader10);
        org.junit.Assert.assertNull(matcherReader11);
        org.junit.Assert.assertNull(matcherReader12);
    }

    @Test
    public void test09666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09666");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet8 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray9 = strSet8.toArray();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.utils.ReportingSet.Options options16 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration14.licenseDuplicateOption(options16);
        reportConfiguration11.familyDuplicateOption(options16);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier19 = reportConfiguration11.getWriter();
        boolean boolean20 = reportConfiguration11.isAddingLicensesForced();
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        reportConfiguration22.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level25 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration22.logFamilyCollisions(level25);
        reportConfiguration11.logLicenseCollisions(level25);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet28 = strSet8.setLogLevel(level25);
        java.util.stream.Stream<java.lang.String> strStream29 = strSet28.stream();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet28);
        org.apache.rat.report.IReportable iReportable31 = null;
        reportConfiguration1.setReportable(iReportable31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet37 = reportConfiguration34.getLicenses(licenseFilter36);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders38 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration34.setAddLicenseHeaders(addLicenseHeaders38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter43);
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter43);
        org.apache.rat.report.IReportable iReportable46 = null;
        reportConfiguration34.setReportable(iReportable46);
        java.lang.String str48 = reportConfiguration34.getCopyrightMessage();
        org.apache.rat.report.IReportable iReportable49 = reportConfiguration34.getReportable();
        org.apache.rat.license.ILicenseFamily.Builder builder50 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str51 = builder50.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder53 = builder50.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder55 = builder53.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder57 = builder55.setLicenseFamilyName("6620e9ee-d651-4c18-8162-edad6d18368e");
        reportConfiguration34.addFamily(builder57);
        reportConfiguration1.addFamily(builder57);
        org.apache.rat.utils.DefaultLog defaultLog60 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder61 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder63 = builder61.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher67 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state68 = copyrightMatcher67.finalizeState();
        org.apache.rat.license.ILicense.Builder builder69 = builder63.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher67);
        org.apache.rat.license.ILicense.Builder builder71 = builder69.setLicenseFamilyCategory("");
        defaultLog60.error((java.lang.Object) builder71);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher76 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher76.reset();
        org.apache.rat.license.ILicense.Builder builder78 = builder71.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher76);
        java.util.regex.Pattern pattern81 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher82 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern81);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher83 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher82);
        org.apache.rat.license.ILicense.Builder builder84 = builder71.setMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher83);
        org.apache.rat.license.ILicense.Builder builder86 = builder71.setLicenseFamilyCategory("ed42033c-bb2d-4a0c-b6fe-b912f4d3a137");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense87 = reportConfiguration1.addLicense(builder71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: License family ed42033c-bb2d-4a0c-b6fe-b912f4d3a137 not found.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertTrue("'" + options16 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options16.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + level25 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level25.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet37);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders38 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders38.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(iReportable49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(defaultLog60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + state68 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state68.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test09667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09667");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        java.lang.Object[] objArray13 = strSet6.toArray();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet6.stream();
        java.util.Iterator<java.lang.String> strItor15 = strSet6.iterator();
        boolean boolean17 = strSet6.addIfNotPresent("9b58713f-df10-4eb5-a5e7-b2e82c48d768");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.headSet("736352AA-A974-4B58-B2F1-4CAA6178920B");
        org.apache.rat.configuration.builders.TextBuilder textBuilder20 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder22 = textBuilder20.setText("t true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher23 = textBuilder20.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher24 = textBuilder20.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder26 = textBuilder20.setText("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher27 = textBuilder26.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder29 = textBuilder26.setText(".giti");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher30 = textBuilder29.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder32 = textBuilder29.setText("AllBu");
        org.apache.rat.configuration.builders.TextBuilder textBuilder34 = textBuilder32.setText("c4c4fff5-2656-471f-bd41-62e472c2ca7b");
        boolean boolean35 = strSet19.equals((java.lang.Object) textBuilder34);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(textBuilder22);
        org.junit.Assert.assertNotNull(iHeaderMatcher23);
        org.junit.Assert.assertNotNull(iHeaderMatcher24);
        org.junit.Assert.assertNotNull(textBuilder26);
        org.junit.Assert.assertNotNull(iHeaderMatcher27);
        org.junit.Assert.assertNotNull(textBuilder29);
        org.junit.Assert.assertNotNull(iHeaderMatcher30);
        org.junit.Assert.assertNotNull(textBuilder32);
        org.junit.Assert.assertNotNull(textBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test09668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09668");
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher17 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher17.reset();
        org.apache.rat.license.ILicense.Builder builder19 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher17);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher20 = new org.apache.rat.analysis.matchers.NotMatcher("AnyBuilder:\nAllBuilder:", (org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher17);
        org.apache.rat.analysis.IHeaderMatcher.State state21 = notMatcher20.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state23 = notMatcher20.matches("Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state25 = notMatcher20.matches("W3CD ");
        java.lang.String str26 = notMatcher20.getId();
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state21.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state23.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state25.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AnyBuilder:\nAllBuilder:" + "'", str26, "AnyBuilder:\nAllBuilder:");
    }

    @Test
    public void test09669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09669");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder2.setText("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = textBuilder4.build();
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder7 = textBuilder4.setText("W3C  ");
        org.apache.rat.configuration.builders.TextBuilder textBuilder9 = textBuilder4.setText("4fcae176-e574-46ed-b9e4-dea2e2f3b458");
        boolean boolean10 = textBuilder4.hasId();
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder12 = textBuilder4.setText("null ?????");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(textCaptureBuilder7);
        org.junit.Assert.assertNotNull(textBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(textCaptureBuilder12);
    }

    @Test
    public void test09670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09670");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = fullTextMatchingLicense0.getLicenseFamily();
        fullTextMatchingLicense0.setNotes("AnyBuilder:");
        fullTextMatchingLicense0.setNotes("Copyright Builder: s:null e:.cvsignore o:GPL1  null");
        java.lang.String str14 = fullTextMatchingLicense0.getNotes();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:GPL1  null" + "'", str14, "Copyright Builder: s:null e:.cvsignore o:GPL1  null");
    }

    @Test
    public void test09671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09671");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder2 = regexBuilder0.setExpr("67eb96c2-83b2-456d-bfb0-23ff916bf212");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder4 = regexBuilder0.setExpr("e4d4f386-58d5-436d-b6b6-756c5c96f2f5");
        org.junit.Assert.assertNotNull(regexBuilder2);
        org.junit.Assert.assertNotNull(regexBuilder4);
    }

    @Test
    public void test09672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09672");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.report.IReportable iReportable3 = null;
        reportConfiguration1.setReportable(iReportable3);
        boolean boolean5 = reportConfiguration1.isAddingLicensesForced();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.report.IReportable iReportable7 = null;
        reportConfiguration1.setReportable(iReportable7);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder9 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str10 = iLicenseFamilyBuilder9.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder12 = iLicenseFamilyBuilder9.setLicenseFamilyCategory("false");
        org.apache.rat.license.ILicenseFamily.Builder builder14 = iLicenseFamilyBuilder9.setLicenseFamilyName("Copyright Builder: s:null e:.cvsignore o:null");
        org.apache.rat.license.ILicenseFamily iLicenseFamily15 = iLicenseFamilyBuilder9.build();
        java.lang.String str16 = iLicenseFamily15.getFamilyCategory();
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily15);
        java.util.SortedSet<java.lang.String> strSet18 = reportConfiguration1.getApprovedLicenseCategories();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(iOFileFilter6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(iLicenseFamily15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "false" + "'", str16, "false");
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test09673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09673");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        int int14 = strSet13.size();
        java.util.stream.Stream<java.lang.String> strStream15 = strSet13.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator16 = strSet13.spliterator();
        java.lang.String str17 = strSet13.first();
        org.apache.rat.utils.DefaultLog defaultLog18 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender19 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.utils.ReportingSet.Options options26 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration24.licenseDuplicateOption(options26);
        reportConfiguration21.familyDuplicateOption(options26);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier29 = reportConfiguration21.getWriter();
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        reportConfiguration31.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level34 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration31.logFamilyCollisions(level34);
        reportConfiguration21.logFamilyCollisions(level34);
        org.apache.rat.Defaults.Builder builder37 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder38 = builder37.noDefault();
        defaultLog18.log(level34, (java.lang.Object) builder37);
        org.apache.rat.utils.DefaultLog defaultLog40 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder41 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder43 = builder41.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher47 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state48 = copyrightMatcher47.finalizeState();
        org.apache.rat.license.ILicense.Builder builder49 = builder43.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher47);
        org.apache.rat.license.ILicense.Builder builder51 = builder49.setLicenseFamilyCategory("");
        defaultLog40.error((java.lang.Object) builder51);
        org.apache.rat.utils.Log.Level level53 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog40.setLevel(level53);
        defaultLog18.log(level53, "The MIT License");
        org.apache.rat.utils.Log.Level level57 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog18.log(level57, "W3C Document Copyright");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet60 = strSet13.setLogLevel(level57);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
        org.junit.Assert.assertNotNull(strStream15);
        org.junit.Assert.assertNotNull(strSpliterator16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "AllBuilder:" + "'", str17, "AllBuilder:");
        org.junit.Assert.assertNotNull(defaultLog18);
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + options26 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options26.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier29);
        org.junit.Assert.assertTrue("'" + level34 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level34.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(defaultLog40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + state48 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state48.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + level53 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level53.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertTrue("'" + level57 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level57.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNotNull(strSet60);
    }

    @Test
    public void test09674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09674");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("Copyright Builder: s:null e:null o:null");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher1.matches("f false");
        fullTextMatcher1.reset();
        java.lang.String str5 = fullTextMatcher1.toString();
        fullTextMatcher1.reset();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "6cc7090c-201b-4699-97eb-f75addf855b0" + "'", str5, "6cc7090c-201b-4699-97eb-f75addf855b0");
    }

    @Test
    public void test09675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09675");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isKeystore("Datum [ name ='GNU General Public License, version 3',value ='021187d7-27c2-4fd9-bc74-8cc00413ee52 ']");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09676");
        java.lang.String str1 = org.apache.rat.document.impl.guesser.GuessUtils.normalise("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE VERSION 1.0" + "'", str1, "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE VERSION 1.0");
    }

    @Test
    public void test09677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09677");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", pattern2);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher("7480723c65a64470aa58975de51fe7c5", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher.State state6 = notMatcher4.matches("0f7d67d2-60f6-4745-9e42-b443ea57d602");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09678");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration1.getLicenses(licenseFilter51);
        boolean boolean56 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense57 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense57.setLicenseFamilyName("hi!");
        java.lang.String str60 = fullTextMatchingLicense57.getLicenseFamilyCategory();
        java.lang.String str61 = fullTextMatchingLicense57.getLicenseFamilyName();
        fullTextMatchingLicense57.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense57.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily66 = fullTextMatchingLicense57.getLicenseFamily();
        java.lang.String str67 = iLicenseFamily66.getFamilyName();
        java.lang.String str68 = iLicenseFamily66.getFamilyName();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder69 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str70 = iLicenseFamilyBuilder69.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder72 = iLicenseFamilyBuilder69.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder74 = iLicenseFamilyBuilder69.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder76 = iLicenseFamilyBuilder69.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str77 = iLicenseFamilyBuilder69.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder79 = iLicenseFamilyBuilder69.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily80 = iLicenseFamilyBuilder69.build();
        int int81 = iLicenseFamily66.compareTo(iLicenseFamily80);
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily66);
        boolean boolean83 = reportConfiguration1.isAddingLicensesForced();
        reportConfiguration1.addApprovedLicenseCategory("af506");
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "SpdxBuilder: null" + "'", str67, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "SpdxBuilder: null" + "'", str68, "SpdxBuilder: null");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "MIT  " + "'", str77, "MIT  ");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(iLicenseFamily80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 7 + "'", int81 == 7);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test09679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09679");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("Copyright Builder: s:null e:null o:null");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher1.matches("f false");
        fullTextMatcher1.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state5 = fullTextMatcher1.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = fullTextMatcher1.finalizeState();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test09680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09680");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isKeystore("9df69ca9-2229-47b6-966b-221652fd7d08");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09681");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
        java.lang.String str6 = iLicenseFamilyBuilder0.getCategory();
        java.lang.String str7 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily iLicenseFamily8 = iLicenseFamilyBuilder0.build();
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("TextBuilder: 90663eff7ed841bd85a8...");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3e2b228d-d5ff-4444-8d8c-d614494b2426" + "'", str6, "3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "3e2b228d-d5ff-4444-8d8c-d614494b2426" + "'", str7, "3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.junit.Assert.assertNotNull(iLicenseFamily8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test09682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09682");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        claimStatistic0.setNumGenerated((int) (short) 10);
        claimStatistic0.setNumGenerated((int) (byte) -1);
        int int12 = claimStatistic0.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap13);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test09683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09683");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder0.setId("GPL2 ");
        java.util.regex.Pattern pattern7 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher8 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern7);
        simpleRegexMatcher8.reset();
        java.lang.String str10 = simpleRegexMatcher8.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher11 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 1", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher8);
        org.apache.rat.analysis.IHeaderMatcher.State state12 = notMatcher11.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state13 = notMatcher11.finalizeState();
        org.apache.rat.license.ILicense.Builder builder14 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher11);
        org.apache.rat.license.ILicense.Builder builder16 = builder0.setDerivedFrom("89662180a89f497b9301227d494d2bae");
        org.apache.rat.license.ILicense.Builder builder18 = builder16.setDerivedFrom("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "17bfd5c7-2f9f-4f3d-bf66-58a0bed90bd9" + "'", str10, "17bfd5c7-2f9f-4f3d-bf66-58a0bed90bd9");
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state12.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state13.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test09684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09684");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setFullText("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.license.ILicense.Builder builder7 = fullTextMatchingLicense0.getLicense();
        org.apache.rat.license.ILicense.Builder builder8 = fullTextMatchingLicense0.getLicense();
        java.lang.String str9 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setNotes("Copyright Builder: s:null e:274c6a15-09f6-4bfd-ac53-1827770eb507 o:null");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily12 = fullTextMatchingLicense0.getLicenseFamily();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test09685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09685");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.configuration.Format format7 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader8 = format7.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet9 = licenseReader8.readLicenses();
        java.lang.String[] strArray15 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        boolean boolean19 = strSet16.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean21 = strSet16.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction22 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet23 = strSet16.setMsgFormat(strFunction22);
        boolean boolean24 = strSet16.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory25 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet9, (java.util.Collection<java.lang.String>) strSet16);
        org.apache.rat.api.MetaData.Datum datum26 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_1;
        java.lang.String str27 = datum26.toString();
        boolean boolean28 = strSet16.equals((java.lang.Object) datum26);
        boolean boolean30 = strSet16.addIfNotPresent("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet32 = strSet16.headSet("notice");
        org.apache.rat.utils.Log.Level level33 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet34 = strSet32.setLogLevel(level33);
        java.util.Comparator<? super java.lang.String> wildcardComparator35 = strSet32.comparator();
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet32);
        java.util.Iterator<java.lang.String> strItor37 = strSet32.iterator();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + format7 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format7.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader8);
        org.junit.Assert.assertNotNull(iLicenseSet9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(datum26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']" + "'", str27, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNull(wildcardComparator35);
        org.junit.Assert.assertNotNull(strItor37);
    }

    @Test
    public void test09686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09686");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        java.lang.String str2 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder4 = regexBuilder0.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder6 = regexBuilder4.setExpr("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder8 = regexBuilder4.setExpr("ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = regexBuilder4.build();
        java.lang.String str10 = regexBuilder4.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder12 = regexBuilder4.setExpr("TMF");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RegexBuilder: null" + "'", str2, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder4);
        org.junit.Assert.assertNotNull(regexBuilder6);
        org.junit.Assert.assertNotNull(regexBuilder8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RegexBuilder: ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5" + "'", str10, "RegexBuilder: ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        org.junit.Assert.assertNotNull(regexBuilder12);
    }

    @Test
    public void test09687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09687");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        reportConfiguration1.setStyleReport(false);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        java.lang.String[] strArray75 = new java.lang.String[] { "http://org/apache/rat/meta-data", "GNU General Public License, version 2", "Modified BSD License", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "The MIT License", "OASIS", "?????", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "6486879f-fc81-4b57-aec7-c4c77d540c30", "MANIFEST.MF", "?????", "GEN  ", "GPL3 ", "http://org/apache/rat/meta-data#HeaderCategory", "DOJO ", "true", "GPL2 ", "?????", "Apache License Version 2.0", "OASIS", "W3CD ", "OASIS", "?????", "OASIS Open License", "", "standard", "GPL2 ", "GEN  ", "W3CD ", "TMF  ", ".cvsignore", "Copyright Builder: s:null e:null o:null", "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 2", "W3CD ", ".cvsignore", "Apache License Version 2.0", "GEN  ", "W3C Software Copyright", "Modified BSD License", "GPL2 ", "JAVA" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        reportConfiguration31.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList76);
        java.lang.String str79 = reportConfiguration31.getCopyrightMessage();
        org.apache.rat.utils.Log log80 = null;
        org.apache.rat.ReportConfiguration reportConfiguration81 = new org.apache.rat.ReportConfiguration(log80);
        reportConfiguration81.addApprovedLicenseCategory(".cvsignore");
        boolean boolean84 = reportConfiguration81.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier85 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration81.setStyleSheet(inputStreamIOSupplier85);
        reportConfiguration31.setStyleSheet(inputStreamIOSupplier85);
        java.util.SortedSet<java.lang.String> strSet88 = reportConfiguration31.getApprovedLicenseCategories();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet88);
        java.lang.String str90 = reportConfiguration1.getCopyrightMessage();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier85);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test09688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09688");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setFullText("f03158f7-b7b2-4d1f-90b1-98481344f604");
        fullTextMatchingLicense0.setFullText("http://org/apache/rat/meta-data#LicenseFamilyName");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily5 = fullTextMatchingLicense0.getLicenseFamily();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09689");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logLicenseCollisions(level4);
        reportConfiguration1.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration9.getInputFileFilter();
        reportConfiguration9.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable38 = null;
        reportConfiguration9.setReportable(iReportable38);
        org.apache.rat.Defaults.Builder builder41 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults42 = builder41.build();
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        java.io.FilenameFilter filenameFilter45 = reportConfiguration44.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet47 = reportConfiguration44.getLicenses(licenseFilter46);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders48 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration44.setAddLicenseHeaders(addLicenseHeaders48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter53);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = reportConfiguration57.getLicenses(licenseFilter59);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders61 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration57.setAddLicenseHeaders(addLicenseHeaders61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter66);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = reportConfiguration44.getLicenseFamilies(licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet70 = defaults42.getLicenses(licenseFilter66);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet71 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet70);
        org.apache.rat.license.ILicense iLicense72 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet70);
        reportConfiguration9.addLicense(iLicense72);
        java.lang.String str74 = iLicense72.derivedFrom();
        reportConfiguration1.addLicense(iLicense72);
        java.lang.String str76 = iLicense72.getNotes();
        java.lang.String str77 = iLicense72.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily78 = iLicense72.getLicenseFamily();
        java.lang.String str79 = iLicense72.derivedFrom();
        java.lang.String str80 = iLicense72.getNotes();
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(defaults42);
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet47);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders48 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders48.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders61 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders61.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNotNull(iLicenseSet70);
        org.junit.Assert.assertNotNull(iLicense72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "BSD-3" + "'", str74, "BSD-3");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "BSD-3" + "'", str77, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "BSD-3" + "'", str79, "BSD-3");
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test09690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09690");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.lang.String[] strArray45 = new java.lang.String[] { "http://org/apache/rat/meta-data", "GNU General Public License, version 2", "Modified BSD License", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "The MIT License", "OASIS", "?????", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "6486879f-fc81-4b57-aec7-c4c77d540c30", "MANIFEST.MF", "?????", "GEN  ", "GPL3 ", "http://org/apache/rat/meta-data#HeaderCategory", "DOJO ", "true", "GPL2 ", "?????", "Apache License Version 2.0", "OASIS", "W3CD ", "OASIS", "?????", "OASIS Open License", "", "standard", "GPL2 ", "GEN  ", "W3CD ", "TMF  ", ".cvsignore", "Copyright Builder: s:null e:null o:null", "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 2", "W3CD ", ".cvsignore", "Apache License Version 2.0", "GEN  ", "W3C Software Copyright", "Modified BSD License", "GPL2 ", "JAVA" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList46);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier51 = reportConfiguration50.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier51);
        reportConfiguration1.removeApprovedLicenseCategory("");
        org.apache.rat.license.ILicense iLicense55 = null;
        reportConfiguration1.addLicense(iLicense55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        boolean boolean62 = reportConfiguration59.isStyleReport();
        org.apache.rat.license.ILicense iLicense63 = null;
        reportConfiguration59.addLicense(iLicense63);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders65 = org.apache.rat.config.AddLicenseHeaders.FORCED;
        reportConfiguration59.setAddLicenseHeaders(addLicenseHeaders65);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders65);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier51);
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders65 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FORCED + "'", addLicenseHeaders65.equals(org.apache.rat.config.AddLicenseHeaders.FORCED));
    }

    @Test
    public void test09691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09691");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        boolean boolean12 = strSet6.isEmpty();
        org.apache.rat.utils.DefaultLog defaultLog13 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        reportConfiguration15.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level18 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration15.logFamilyCollisions(level18);
        defaultLog13.setLevel(level18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter44);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier50 = reportConfiguration49.getOutput();
        reportConfiguration22.setOut(outputStreamIOSupplier50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.utils.ReportingSet.Options options58 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration56.licenseDuplicateOption(options58);
        reportConfiguration53.familyDuplicateOption(options58);
        reportConfiguration22.licenseDuplicateOption(options58);
        reportConfiguration22.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        reportConfiguration65.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level68 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration65.logLicenseCollisions(level68);
        reportConfiguration22.logLicenseCollisions(level68);
        defaultLog13.log(level68, "GNU General Public License, version 1");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender74 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog13, "W3C  ");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender75 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog13);
        java.lang.Object obj76 = null;
        defaultLog13.info(obj76);
        org.apache.rat.utils.Log.Level level78 = defaultLog13.getLevel();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet79 = strSet6.setLogLevel(level78);
        java.lang.String str80 = strSet79.first();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(defaultLog13);
        org.junit.Assert.assertTrue("'" + level18 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level18.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier50);
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + options58 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options58.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level68 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level68.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level78 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level78.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "AllBuilder:" + "'", str80, "AllBuilder:");
    }

    @Test
    public void test09692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09692");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = fullTextMatchingLicense0.getLicenseFamily();
        fullTextMatchingLicense0.setNotes("AnyBuilder:");
        java.lang.String str12 = fullTextMatchingLicense0.getNotes();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AnyBuilder:" + "'", str12, "AnyBuilder:");
    }

    @Test
    public void test09693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09693");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder2 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("Modified BSD License");
        java.lang.String str3 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("SpdxBuilder: 7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("AnyBuilder:\nMathcerRefBuilder: null\nAllBuilder:\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nMathcerRefBuilder: null\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nCopyright Builder: s:null e:null o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:OASIS e:null o:null\nAnyBuilder:\nMathcerRefBuilder: null\nCopyright Builder: s:null e:null o:null\nMathcerRefBuilder: null");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyName("e5db6f8b-ccf3-4bcb-9cbb-c820866ea6ce");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Modified BSD License" + "'", str3, "Modified BSD License");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Modified BSD License" + "'", str8, "Modified BSD License");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test09694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09694");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap3);
        int int5 = claimStatistic0.getNumUnknown();
        claimStatistic0.setNumUnApproved((int) (byte) 100);
        claimStatistic0.setNumApproved(4);
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test09695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09695");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        headerBean0.setMatch(false);
        headerBean0.setMatch(false);
        java.util.regex.Pattern pattern6 = null;
        headerBean0.setHeaderPattern(pattern6);
        java.util.regex.Pattern pattern8 = null;
        headerBean0.setHeaderPattern(pattern8);
        java.util.regex.Pattern pattern10 = null;
        headerBean0.setHeaderPattern(pattern10);
        java.util.regex.Pattern pattern12 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern13 = headerBean0.getHeaderPattern();
        boolean boolean14 = headerBean0.isMatch();
        headerBean0.setMatch(false);
        java.util.regex.Pattern pattern17 = null;
        headerBean0.setHeaderPattern(pattern17);
        java.util.regex.Pattern pattern19 = null;
        headerBean0.setHeaderPattern(pattern19);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(pattern12);
        org.junit.Assert.assertNull(pattern13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09696");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder1.setStart("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        java.lang.String str4 = copyrightBuilder3.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = copyrightBuilder3.build();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher("TextBuilder: true|false|forced", iHeaderMatcher5);
        org.apache.rat.analysis.IHeaderMatcher.State state7 = notMatcher6.currentState();
        org.junit.Assert.assertNotNull(copyrightBuilder1);
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null" + "'", str4, "Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null");
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test09697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09697");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder3.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder6 = spdxBuilder3.setName("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = spdxBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = spdxBuilder3.build();
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(spdxBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
    }

    @Test
    public void test09698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09698");
        org.apache.rat.configuration.Format format2 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader3 = format2.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format2.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader5 = format2.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet6 = licenseReader5.readFamilies();
        org.apache.rat.license.ILicenseFamily iLicenseFamily7 = org.apache.rat.license.LicenseFamilySetFactory.search("6232a9af-c312-410c-9bbb-6b12d7725116", iLicenseFamilySet6);
        org.apache.rat.license.ILicenseFamily iLicenseFamily8 = org.apache.rat.license.LicenseFamilySetFactory.search("Copyright Builder: s:W3CD  e:null o:Copyright Builder: s:null e:274c6a15-09f6-4bfd-ac53-1827770eb507 o:null", iLicenseFamilySet6);
        org.junit.Assert.assertTrue("'" + format2 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format2.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(licenseReader4);
        org.junit.Assert.assertNotNull(licenseReader5);
        org.junit.Assert.assertNotNull(iLicenseFamilySet6);
        org.junit.Assert.assertNull(iLicenseFamily7);
        org.junit.Assert.assertNull(iLicenseFamily8);
    }

    @Test
    public void test09699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09699");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str8 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setLicenseFamilyName("W3C Document Copyright");
        fullTextMatchingLicense0.setLicenseFamilyName("CDDL1");
        java.lang.String str13 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("COMMO");
        fullTextMatchingLicense0.setNotes("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CDDL1" + "'", str13, "CDDL1");
    }

    @Test
    public void test09700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09700");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            xmlWriter1.close();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09701");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder1.setStart("OASIS");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = copyrightBuilder1.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder6 = copyrightBuilder1.setStart(".cvsignore");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder8 = copyrightBuilder1.setOwner("W3C  ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = copyrightBuilder1.setEnd("standard");
        java.lang.Object obj11 = toNameTransformer0.transform((java.lang.Object) copyrightBuilder1);
        java.util.regex.Pattern pattern14 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher15 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern14);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher16 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher15);
        org.apache.rat.analysis.IHeaderMatcher.State state17 = notMatcher16.finalizeState();
        java.lang.String str18 = notMatcher16.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state19 = notMatcher16.currentState();
        notMatcher16.reset();
        notMatcher16.reset();
        java.lang.Object obj22 = toNameTransformer0.transform((java.lang.Object) notMatcher16);
        org.apache.rat.Defaults.Builder builder24 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults25 = builder24.build();
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        java.io.FilenameFilter filenameFilter41 = reportConfiguration40.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = reportConfiguration40.getLicenses(licenseFilter42);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders44 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration40.setAddLicenseHeaders(addLicenseHeaders44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter49);
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter49);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet52 = reportConfiguration27.getLicenseFamilies(licenseFilter49);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = defaults25.getLicenses(licenseFilter49);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet54 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet53);
        org.apache.rat.license.ILicense iLicense55 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet53);
        org.apache.rat.license.ILicenseFamily iLicenseFamily56 = iLicense55.getLicenseFamily();
        java.lang.String str57 = iLicense55.getName();
        java.lang.Object obj58 = toNameTransformer0.transform((java.lang.Object) str57);
        java.io.Writer writer59 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter60 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer59);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter61 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter60);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter62 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter60);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter63 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter60);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter64 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter60);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter65 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter60);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter66 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter60);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter67 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter60);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter68 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter60);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter69 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter60);
        java.lang.Object obj70 = toNameTransformer0.transform((java.lang.Object) simpleXmlClaimReporter69);
        org.apache.rat.api.Document document71 = null;
        // The following exception was thrown during execution in test generation
        try {
            simpleXmlClaimReporter69.report(document71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copyrightBuilder1);
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(copyrightBuilder6);
        org.junit.Assert.assertNotNull(copyrightBuilder8);
        org.junit.Assert.assertNotNull(copyrightBuilder10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state17.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GNU General Public License, version 2" + "'", str18, "GNU General Public License, version 2");
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state19.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(defaults25);
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders44 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders44.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet52);
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertNotNull(iLicense55);
        org.junit.Assert.assertNotNull(iLicenseFamily56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "The Telemanagement Forum License" + "'", str57, "The Telemanagement Forum License");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(obj70);
    }

    @Test
    public void test09702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09702");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("W3C  ");
        simpleLicenseFamily0.setFamilyName("GEN  ");
        simpleLicenseFamily0.setFamilyName("http://org/apache/rat/meta-data#ApprovedLicense");
        simpleLicenseFamily0.setFamilyCategory("3d991e2c-784f-42cc-b325-5e0f3d5c47e9");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test09703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09703");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender2 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "2953e6cb-20a5-4dcf-a9f5-85c51cc8c635");
        org.apache.rat.utils.Log.Level level3 = defaultLog0.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender4 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        apacheV2LicenseAppender4.setForce(false);
        java.io.File file7 = null;
        // The following exception was thrown during execution in test generation
        try {
            apacheV2LicenseAppender4.append(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + level3 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level3.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test09704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09704");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder2.setText("http://org/apache/rat/meta-data#HeaderSample");
        boolean boolean5 = textBuilder2.hasId();
        org.apache.rat.configuration.builders.TextBuilder textBuilder7 = textBuilder2.setText("926d91f2-b796-4973-9500-471c4a650c96");
        java.lang.String str8 = textBuilder7.toString();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(textBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "TextBuilder: 926d91f2-b796-4973-9..." + "'", str8, "TextBuilder: 926d91f2-b796-4973-9...");
    }

    @Test
    public void test09705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09705");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.ReportingSet.Options options52 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options52);
        reportConfiguration47.familyDuplicateOption(options52);
        reportConfiguration16.licenseDuplicateOption(options52);
        reportConfiguration16.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration16.logLicenseCollisions(level62);
        defaultLog14.setLevel(level62);
        defaultLog14.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog14);
        org.apache.rat.utils.DefaultLog defaultLog69 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logFamilyCollisions(level74);
        defaultLog69.setLevel(level74);
        defaultLog14.debug((java.lang.Object) level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet13.setLogLevel(level74);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        reportConfiguration80.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level83 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration80.logFamilyCollisions(level83);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet85 = strSet78.setLogLevel(level83);
        java.util.stream.Stream<java.lang.String> strStream86 = strSet78.stream();
        boolean boolean88 = strSet78.addIfNotPresent("CDDL1");
        java.util.Spliterator<java.lang.String> strSpliterator89 = strSet78.spliterator();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + options52 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options52.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog69);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + level83 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level83.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strStream86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(strSpliterator89);
    }

    @Test
    public void test09706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09706");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration1.logLicenseCollisions(level31);
        reportConfiguration1.setStyleReport(false);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.utils.ReportingSet.Options options41 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration39.licenseDuplicateOption(options41);
        reportConfiguration36.familyDuplicateOption(options41);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier44 = reportConfiguration36.getWriter();
        boolean boolean45 = reportConfiguration36.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter46 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.utils.ReportingSet.Options options49 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration48.licenseDuplicateOption(options49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        java.io.FilenameFilter filenameFilter53 = reportConfiguration52.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration52.getLicenses(licenseFilter54);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders56 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration52.setAddLicenseHeaders(addLicenseHeaders56);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic60 = org.apache.rat.Reporter.report(reportConfiguration59);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter61 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter61);
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter61);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        java.io.FilenameFilter filenameFilter66 = reportConfiguration65.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter67 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet68 = reportConfiguration65.getLicenses(licenseFilter67);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders69 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration65.setAddLicenseHeaders(addLicenseHeaders69);
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic73 = org.apache.rat.Reporter.report(reportConfiguration72);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter74 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration72, licenseFilter74);
        org.apache.rat.Reporter.listLicenses(reportConfiguration65, licenseFilter74);
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter74);
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier80 = reportConfiguration79.getOutput();
        reportConfiguration52.setOut(outputStreamIOSupplier80);
        org.apache.rat.utils.Log.Level level82 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration52.logLicenseCollisions(level82);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter84 = reportConfiguration52.getDirectoryFilter();
        reportConfiguration48.setInputFileFilter((java.io.FilenameFilter) iOFileFilter84);
        reportConfiguration36.setInputFileFilter((java.io.FilenameFilter) iOFileFilter84);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter87 = reportConfiguration36.getDirectoryFilter();
        reportConfiguration1.setDirectoryFilter(iOFileFilter87);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter89 = iOFileFilter87.negate();
        java.nio.file.Path path90 = null;
        boolean boolean91 = iOFileFilter89.matches(path90);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level31.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + options41 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options41.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertTrue("'" + options49 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options49.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders56 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders56.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic60);
        org.junit.Assert.assertTrue("'" + licenseFilter61 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter61.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter66);
        org.junit.Assert.assertTrue("'" + licenseFilter67 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter67.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet68);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders69 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders69.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic73);
        org.junit.Assert.assertTrue("'" + licenseFilter74 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter74.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier80);
        org.junit.Assert.assertTrue("'" + level82 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level82.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter84);
        org.junit.Assert.assertNotNull(iOFileFilter87);
        org.junit.Assert.assertNotNull(iOFileFilter89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test09707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09707");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        reportConfiguration11.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level14 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration11.logFamilyCollisions(level14);
        reportConfiguration1.logFamilyCollisions(level14);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter17 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        reportConfiguration19.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level22 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration19.logFamilyCollisions(level22);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter24 = reportConfiguration19.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter25 = iOFileFilter17.or(iOFileFilter24);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter26 = iOFileFilter17.negate();
        java.nio.file.Path path27 = null;
        boolean boolean28 = iOFileFilter17.matches(path27);
        java.nio.file.Path path29 = null;
        boolean boolean30 = iOFileFilter17.matches(path29);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + level14 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level14.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter17);
        org.junit.Assert.assertTrue("'" + level22 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level22.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter24);
        org.junit.Assert.assertNotNull(iOFileFilter25);
        org.junit.Assert.assertNotNull(iOFileFilter26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test09708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09708");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder6 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str7 = anyBuilder6.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList8 = anyBuilder6.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = anyBuilder6.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = anyBuilder6.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList11 = anyBuilder6.getChildren();
        org.apache.rat.license.ILicense.Builder builder12 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) anyBuilder6);
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher14 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("binary");
        org.apache.rat.analysis.IHeaderMatcher.State state15 = simpleTextMatcher14.finalizeState();
        boolean boolean17 = simpleTextMatcher14.doMatch("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicense.Builder builder18 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher14);
        org.apache.rat.license.ILicense.Builder builder20 = builder18.setDerivedFrom("COPYRIGHT BUILDER: S:OASIS E:NULL O:NULL");
        org.apache.rat.license.ILicense.Builder builder22 = builder18.setId("B5CB0999-B639-4E9C-AB9C-268137BC8846");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(anyBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AnyBuilder:" + "'", str7, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcherList11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state15.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test09709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09709");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("ec5a07f8-ab4b-461b-b442-d3aebb576815");
    }

    @Test
    public void test09710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09710");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log.Level level2 = defaultLog0.getLevel();
        java.lang.Object obj3 = null;
        defaultLog0.warn(obj3);
        org.apache.rat.configuration.Format format5 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader6 = format5.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader7 = format5.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader8 = format5.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader9 = format5.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet10 = licenseReader9.readLicenses();
        java.lang.String[] strArray16 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        boolean boolean20 = strSet17.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean22 = strSet17.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet17.setMsgFormat(strFunction23);
        java.lang.String str25 = strSet24.first();
        java.util.Spliterator<java.lang.String> strSpliterator26 = strSet24.spliterator();
        java.lang.String str27 = strSet24.first();
        java.lang.String str28 = strSet24.first();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet30 = strSet24.tailSet("MathcerRefBuildernull");
        strSet24.clear();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory32 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet10, (java.util.Collection<java.lang.String>) strSet24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser33 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog0, (java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + level2 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level2.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + format5 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format5.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader6);
        org.junit.Assert.assertNotNull(licenseReader7);
        org.junit.Assert.assertNotNull(licenseReader8);
        org.junit.Assert.assertNotNull(licenseReader9);
        org.junit.Assert.assertNotNull(iLicenseSet10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AllBuilder:" + "'", str25, "AllBuilder:");
        org.junit.Assert.assertNotNull(strSpliterator26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AllBuilder:" + "'", str27, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "AllBuilder:" + "'", str28, "AllBuilder:");
        org.junit.Assert.assertNotNull(strSet30);
    }

    @Test
    public void test09711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09711");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter1 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.fromText("TextBuilder: fe6be119-8817-4567-8...");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.rat.license.LicenseSetFactory.LicenseFilter.textbuilder: fe6be119-8817-4567-8...");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09712");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("357bf79d-4123-4d3b-a061-96986cdaedaa");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09713");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern1);
        org.apache.rat.analysis.IHeaderMatcher.State state3 = simpleRegexMatcher2.finalizeState();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = simpleRegexMatcher2.doMatch("cea7b150-41ff-497b-bbd8-4de9e0a2fa0a");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test09714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09714");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense0.setLicenseFamilyCategory("d25f13bc-1910-4451-97b5-b72663551a5d");
        fullTextMatchingLicense0.setLicenseFamilyName("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']");
        java.lang.String str13 = fullTextMatchingLicense0.getNotes();
        java.lang.String str14 = fullTextMatchingLicense0.getLicenseFamilyName();
        org.apache.rat.license.ILicenseFamily iLicenseFamily15 = fullTextMatchingLicense0.getLicenseFamily();
        java.lang.String str16 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']" + "'", str14, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']");
        org.junit.Assert.assertNotNull(iLicenseFamily15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "d25f13bc-1910-4451-97b5-b72663551a5d" + "'", str16, "d25f13bc-1910-4451-97b5-b72663551a5d");
    }

    @Test
    public void test09715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09715");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        int int12 = strSet6.size();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction13 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet14 = strSet6.setMsgFormat(strFunction13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet6.setLog(log15);
        java.util.Iterator<java.lang.String> strItor17 = strSet16.iterator();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strItor17);
    }

    @Test
    public void test09716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09716");
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.api.ContentType contentType3 = new org.apache.rat.api.ContentType("a01d0592-1bc2-4ba6-9f0d-d5a765002396", "1d64bc94-91e2-431e-825c-364812741297", strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09717");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic1 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic1.setNumApproved((int) (short) 10);
        claimStatistic1.setNumUnknown(30);
        java.lang.Object obj6 = toNameTransformer0.transform((java.lang.Object) claimStatistic1);
        claimStatistic1.setNumGenerated((int) (short) 100);
        int int9 = claimStatistic1.getNumApproved();
        claimStatistic1.setNumApproved((int) (byte) 1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = claimStatistic1.getDocumentCategoryMap();
        claimStatistic1.setNumGenerated(8);
        claimStatistic1.setNumUnApproved((int) '#');
        int int17 = claimStatistic1.getNumGenerated();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
    }

    @Test
    public void test09718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09718");
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder3.setName("hi!");
        java.util.regex.Pattern pattern14 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher15 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern14);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher16 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher15);
        org.apache.rat.analysis.IHeaderMatcher.State state17 = notMatcher16.finalizeState();
        java.lang.String str18 = notMatcher16.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state19 = notMatcher16.currentState();
        notMatcher16.reset();
        org.apache.rat.license.ILicense.Builder builder21 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher16);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher22 = new org.apache.rat.analysis.matchers.NotMatcher("TextBuilder: fe6be119-8817-4567-8...", (org.apache.rat.analysis.IHeaderMatcher) notMatcher16);
        org.apache.rat.analysis.IHeaderMatcher.State state23 = notMatcher16.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state24 = notMatcher16.finalizeState();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state17.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GNU General Public License, version 2" + "'", str18, "GNU General Public License, version 2");
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state19.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state23.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state24.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test09719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09719");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null;
        claimStatistic0.setDocumentCategoryMap(strMap1);
        int int3 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap4 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumUnApproved((int) (byte) 1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        claimStatistic0.setLicenseFileNameMap(strMap7);
        claimStatistic0.setNumApproved(3);
        int int11 = claimStatistic0.getNumApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = claimStatistic0.getDocumentCategoryMap();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNull(strMap12);
    }

    @Test
    public void test09720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09720");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        org.apache.rat.api.MetaData.Datum datum19 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_1;
        java.lang.String str20 = datum19.toString();
        boolean boolean21 = strSet9.equals((java.lang.Object) datum19);
        boolean boolean23 = strSet9.addIfNotPresent("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet25 = strSet9.headSet("notice");
        java.util.Spliterator<java.lang.String> strSpliterator26 = strSet25.spliterator();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet28 = strSet25.tailSet("5229ae24-2b36-466b-8ff4-f67a7c68ef04");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems29 = org.apache.rat.config.SourceCodeManagementSystems.BAZAAR;
        boolean boolean30 = sourceCodeManagementSystems29.hasIgnoreFile();
        boolean boolean31 = sourceCodeManagementSystems29.hasIgnoreFile();
        java.util.List<java.lang.String> strList32 = sourceCodeManagementSystems29.getExclusions();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = strSet25.remove((java.lang.Object) strList32);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(datum19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']" + "'", str20, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strSpliterator26);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems29 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.BAZAAR + "'", sourceCodeManagementSystems29.equals(org.apache.rat.config.SourceCodeManagementSystems.BAZAAR));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strList32);
    }

    @Test
    public void test09721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09721");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder0.build();
        java.lang.String str7 = spdxBuilder0.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = spdxBuilder0.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder10 = spdxBuilder0.setName("SpdxB");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder12 = spdxBuilder0.setName("RegexBuilder: MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str7, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(spdxBuilder10);
        org.junit.Assert.assertNotNull(spdxBuilder12);
    }

    @Test
    public void test09722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09722");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("notice", "3c840dc2-bef0-42b5-b26c-35a568d53a24");
        boolean boolean4 = fullTextMatcher2.doMatch("RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str5 = fullTextMatcher2.getId();
        boolean boolean7 = fullTextMatcher2.doMatch("TextBuilder: 926d91f2-b796-4973-9...");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "notice" + "'", str5, "notice");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09723");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern1);
        simpleRegexMatcher2.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = simpleRegexMatcher2.finalizeState();
        java.lang.String str5 = simpleRegexMatcher2.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = simpleRegexMatcher2.currentState();
        java.lang.String str7 = simpleRegexMatcher2.getId();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = simpleRegexMatcher2.doMatch("null d4148d3a-edbc-4672-b347-0fa619553f91");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "d25cb087-dfe2-475d-8561-271235f4758f" + "'", str5, "d25cb087-dfe2-475d-8561-271235f4758f");
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "d25cb087-dfe2-475d-8561-271235f4758f" + "'", str7, "d25cb087-dfe2-475d-8561-271235f4758f");
    }

    @Test
    public void test09724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09724");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        java.lang.Object[] objArray13 = strSet6.toArray();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet6.stream();
        java.util.Comparator<? super java.lang.String> wildcardComparator15 = strSet6.comparator();
        org.apache.rat.utils.DefaultLog defaultLog16 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet21 = reportConfiguration18.getLicenses(licenseFilter20);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders22 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration18.setAddLicenseHeaders(addLicenseHeaders22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter27);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration31.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet34 = reportConfiguration31.getLicenses(licenseFilter33);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders35 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration31.setAddLicenseHeaders(addLicenseHeaders35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter40);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier46 = reportConfiguration45.getOutput();
        reportConfiguration18.setOut(outputStreamIOSupplier46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.utils.ReportingSet.Options options54 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration52.licenseDuplicateOption(options54);
        reportConfiguration49.familyDuplicateOption(options54);
        reportConfiguration18.licenseDuplicateOption(options54);
        reportConfiguration18.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        reportConfiguration61.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level64 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration61.logLicenseCollisions(level64);
        reportConfiguration18.logLicenseCollisions(level64);
        defaultLog16.setLevel(level64);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet68 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog16);
        java.util.stream.Stream<java.lang.String> strStream69 = strSet68.stream();
        strStream69.close();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNull(wildcardComparator15);
        org.junit.Assert.assertNotNull(defaultLog16);
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet21);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders22 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders22.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet34);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders35 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders35.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier46);
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertTrue("'" + options54 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options54.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level64 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level64.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(strStream69);
    }

    @Test
    public void test09725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09725");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        java.lang.Object[] objArray13 = strSet6.toArray();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet6.stream();
        java.util.Iterator<java.lang.String> strItor15 = strSet6.iterator();
        boolean boolean16 = strSet6.isEmpty();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test09726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09726");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter3 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        reportConfiguration5.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        reportConfiguration5.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet41 = reportConfiguration16.getLicenseFamilies(licenseFilter38);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration5, licenseFilter38);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet43 = reportConfiguration1.getLicenseFamilies(licenseFilter38);
        org.apache.rat.policy.DefaultPolicy defaultPolicy44 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet43);
        org.apache.rat.api.Document document45 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy44.reportLicenseApprovalClaim(document45, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNotNull(iOFileFilter3);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet41);
        org.junit.Assert.assertNotNull(iLicenseFamilySet43);
    }

    @Test
    public void test09727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09727");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        java.lang.String str2 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder4 = regexBuilder0.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder6 = regexBuilder4.setExpr("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder8 = regexBuilder4.setExpr("ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = regexBuilder8.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = regexBuilder8.build();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RegexBuilder: null" + "'", str2, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder4);
        org.junit.Assert.assertNotNull(regexBuilder6);
        org.junit.Assert.assertNotNull(regexBuilder8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
    }

    @Test
    public void test09728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09728");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.MatcherBuilderTracker.addBuilder("9e61083a-6568-4c3f-b7d9-f502a517d761", "e4d4f386-58d5-436d-b6b6-756c5c96f2f5");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: java.lang.ClassNotFoundException: 9e61083a-6568-4c3f-b7d9-f502a517d761");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09729");
        java.lang.String[] strArray3 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean4 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("Copyright Builder: s:null e:.cvsignore o:null", strArray3);
        boolean boolean5 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("GNU General Public License, version 3", strArray3);
        boolean boolean6 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("f8ffb5f5-053b-4c2d-b24f-60f90a9ced52", strArray3);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09730");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = copyrightBuilder7.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = copyrightBuilder7.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = copyrightBuilder7.setStart("RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder7.setEnd("11370891-c763-426b-9547-57e87d991d61");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder7.setStart("a3e11a81-9a98-401d-8ec7-2ff3ae515be9");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder19 = copyrightBuilder7.setStart("2e3deed3-f517-459b-ae48-d6ddb543fe1f");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcher11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertNotNull(copyrightBuilder19);
    }

    @Test
    public void test09731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09731");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("archive");
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
    }

    @Test
    public void test09732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09732");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter8 = xmlWriter1.content((java.lang.CharSequence) "TextBuilder: 4a00cf7d-fe76-423e-9...");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09733");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.lang.String[] strArray45 = new java.lang.String[] { "http://org/apache/rat/meta-data", "GNU General Public License, version 2", "Modified BSD License", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "The MIT License", "OASIS", "?????", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "6486879f-fc81-4b57-aec7-c4c77d540c30", "MANIFEST.MF", "?????", "GEN  ", "GPL3 ", "http://org/apache/rat/meta-data#HeaderCategory", "DOJO ", "true", "GPL2 ", "?????", "Apache License Version 2.0", "OASIS", "W3CD ", "OASIS", "?????", "OASIS Open License", "", "standard", "GPL2 ", "GEN  ", "W3CD ", "TMF  ", ".cvsignore", "Copyright Builder: s:null e:null o:null", "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 2", "W3CD ", ".cvsignore", "Apache License Version 2.0", "GEN  ", "W3C Software Copyright", "Modified BSD License", "GPL2 ", "JAVA" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList46);
        java.lang.String str49 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        reportConfiguration51.addApprovedLicenseCategory(".cvsignore");
        boolean boolean54 = reportConfiguration51.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier55 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration51.setStyleSheet(inputStreamIOSupplier55);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier55);
        boolean boolean58 = reportConfiguration1.isAddingLicensesForced();
        java.lang.String str59 = reportConfiguration1.getCopyrightMessage();
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test09734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09734");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration1.getLicenses(licenseFilter51);
        boolean boolean56 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.utils.ReportingSet.Options options63 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration61.licenseDuplicateOption(options63);
        reportConfiguration58.familyDuplicateOption(options63);
        reportConfiguration1.familyDuplicateOption(options63);
        org.apache.rat.license.ILicenseFamily.Builder builder67 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str68 = builder67.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder70 = builder67.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder72 = builder70.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder74 = builder72.setLicenseFamilyName("6620e9ee-d651-4c18-8162-edad6d18368e");
        reportConfiguration1.addFamily(builder72);
        org.apache.rat.license.ILicenseFamily.Builder builder77 = builder72.setLicenseFamilyCategory("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.license.ILicenseFamily.Builder builder79 = builder77.setLicenseFamilyCategory("58515fd1-71f9-42a1-b033-b509624129a7");
        org.apache.rat.license.ILicenseFamily.Builder builder81 = builder77.setLicenseFamilyName("SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicenseFamily.Builder builder83 = builder77.setLicenseFamilyName("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.license.ILicenseFamily.Builder builder85 = builder83.setLicenseFamilyCategory("ba161dc5-d7db-46fd-8c6a-96c390170cb8");
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertTrue("'" + options63 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options63.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test09735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09735");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder2.setMatchers(strMap4);
        org.apache.rat.configuration.builders.AllBuilder allBuilder6 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setStart("OASIS");
        java.lang.String str10 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder15.setStart("OASIS");
        java.lang.String str18 = copyrightBuilder15.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder15.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str23 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = copyrightBuilder22.setEnd(".cvsignore");
        boolean boolean26 = copyrightBuilder22.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str28 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder27.setEnd(".cvsignore");
        boolean boolean31 = copyrightBuilder27.hasId();
        java.lang.String str32 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean38 = matcherRefBuilder37.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap39 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = matcherRefBuilder37.setMatchers(strMap39);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.lang.String str44 = matcherRefBuilder42.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder42.setMatchers(strMap45);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray47 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, allBuilder6, copyrightBuilder12, matcherRefBuilder13, copyrightBuilder15, copyrightBuilder21, copyrightBuilder22, copyrightBuilder27, copyrightBuilder33, anyBuilder36, matcherRefBuilder37, copyrightBuilder41, matcherRefBuilder42 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList48 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48, builderArray47);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder50 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48);
        java.lang.String str51 = notBuilder0.toString();
        java.lang.String str52 = notBuilder0.toString();
        java.lang.String str53 = notBuilder0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str10, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str18, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str23, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str28, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str32, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(anyBuilder36);
        org.junit.Assert.assertNotNull(matcherRefBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MathcerRefBuilder: null" + "'", str44, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(builderArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(abstractBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str51, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str52, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str53, "NotBuilder: MathcerRefBuilder: null");
    }

    @Test
    public void test09736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09736");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.not();
        java.lang.String str1 = notBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = notBuilder0.getChildren();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = notBuilder0.build();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: 'not' type matcher requires one and only one enclosed matcher");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(notBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
    }

    @Test
    public void test09737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09737");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        java.lang.String str2 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder4 = regexBuilder0.setExpr("d4148d3a-edbc-4672-b347-0fa619553f91");
        java.lang.String str5 = regexBuilder0.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = regexBuilder0.build();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder8 = regexBuilder0.setExpr("8925ba14-6c7c-466e-9335-5528e02df2c5");
        java.lang.String str9 = regexBuilder8.toString();
        java.lang.String str10 = regexBuilder8.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RegexBuilder: null" + "'", str2, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RegexBuilder: d4148d3a-edbc-4672-b347-0fa619553f91" + "'", str5, "RegexBuilder: d4148d3a-edbc-4672-b347-0fa619553f91");
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(regexBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "RegexBuilder: 8925ba14-6c7c-466e-9335-5528e02df2c5" + "'", str9, "RegexBuilder: 8925ba14-6c7c-466e-9335-5528e02df2c5");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "RegexBuilder: 8925ba14-6c7c-466e-9335-5528e02df2c5" + "'", str10, "RegexBuilder: 8925ba14-6c7c-466e-9335-5528e02df2c5");
    }

    @Test
    public void test09738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09738");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        reportConfiguration8.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level11 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration8.logLicenseCollisions(level11);
        reportConfiguration1.logFamilyCollisions(level11);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier14 = reportConfiguration1.getStyleSheet();
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        reportConfiguration16.addApprovedLicenseCategory(".cvsignore");
        boolean boolean19 = reportConfiguration16.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier20 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration16.setStyleSheet(inputStreamIOSupplier20);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier20);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration1.getInputFileFilter();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertTrue("'" + level11 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level11.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(inputStreamIOSupplier14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier20);
        org.junit.Assert.assertNull(filenameFilter23);
    }

    @Test
    public void test09739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09739");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("GEN  ", "c523095e-4421-4cc4-93e2-039f23b91f76", "META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = copyrightMatcher3.finalizeState();
        boolean boolean5 = state4.asBoolean();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09740");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter15 = xmlWriter1.closeDocument();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09741");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isImage("573b0ddb-33d3-4ad4-8bf0-9d0c8cb22b1d");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09742");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic8 = org.apache.rat.Reporter.report(reportConfiguration1);
        reportConfiguration1.setCopyrightMessage("MathcerRefBuilder: TMF");
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(claimStatistic8);
    }

    @Test
    public void test09743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09743");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder0.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder6 = spdxBuilder0.setName("641dafc1-13c3-45d4-8272-f36f10392c53");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder6.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder9 = spdxBuilder6.setName("a1abad46-6a98-44f8-aa20-7839919a8270");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder11 = spdxBuilder9.setName("03F7B314-6887-4617-9C7E-BF1600B331CD");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder13 = spdxBuilder9.setName("ae1d3f1b-6a63-45e7-a11c-0cd273efa3f6");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder15 = spdxBuilder9.setName("Copyright Builder: s:.cvsignore e:null o:null");
        java.lang.String str16 = spdxBuilder9.toString();
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(spdxBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(spdxBuilder9);
        org.junit.Assert.assertNotNull(spdxBuilder11);
        org.junit.Assert.assertNotNull(spdxBuilder13);
        org.junit.Assert.assertNotNull(spdxBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "SpdxBuilder: Copyright Builder: s:.cvsignore e:null o:null" + "'", str16, "SpdxBuilder: Copyright Builder: s:.cvsignore e:null o:null");
    }

    @Test
    public void test09744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09744");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        boolean boolean14 = strSet6.isEmpty();
        boolean boolean16 = strSet6.addIfNotPresent("OASIS Open License");
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic19 = org.apache.rat.Reporter.report(reportConfiguration18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.utils.ReportingSet.Options options23 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration21.licenseDuplicateOption(options23);
        reportConfiguration18.familyDuplicateOption(options23);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier26 = reportConfiguration18.getWriter();
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        reportConfiguration18.logFamilyCollisions(level31);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet34 = strSet6.setLogLevel(level31);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet36 = strSet6.tailSet("bd015714-405b-4304-9faa-36efad80e6e6 GEN  ");
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders43 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders43);
        reportConfiguration38.setAddLicenseHeaders(addLicenseHeaders43);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        java.io.FilenameFilter filenameFilter48 = reportConfiguration47.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet50 = reportConfiguration47.getLicenses(licenseFilter49);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders51 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration47.setAddLicenseHeaders(addLicenseHeaders51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic55 = org.apache.rat.Reporter.report(reportConfiguration54);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter56);
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter56);
        org.apache.rat.report.IReportable iReportable59 = null;
        reportConfiguration47.setReportable(iReportable59);
        java.lang.String str61 = reportConfiguration47.getCopyrightMessage();
        org.apache.rat.report.IReportable iReportable62 = reportConfiguration47.getReportable();
        org.apache.rat.license.ILicenseFamily.Builder builder63 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str64 = builder63.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder66 = builder63.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder68 = builder66.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder70 = builder68.setLicenseFamilyName("6620e9ee-d651-4c18-8162-edad6d18368e");
        reportConfiguration47.addFamily(builder70);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.utils.Log log75 = null;
        org.apache.rat.ReportConfiguration reportConfiguration76 = new org.apache.rat.ReportConfiguration(log75);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic77 = org.apache.rat.Reporter.report(reportConfiguration76);
        org.apache.rat.utils.ReportingSet.Options options78 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration76.licenseDuplicateOption(options78);
        reportConfiguration73.familyDuplicateOption(options78);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier81 = reportConfiguration73.getWriter();
        org.apache.rat.utils.Log log82 = null;
        org.apache.rat.ReportConfiguration reportConfiguration83 = new org.apache.rat.ReportConfiguration(log82);
        reportConfiguration83.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level86 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration83.logFamilyCollisions(level86);
        reportConfiguration73.logFamilyCollisions(level86);
        reportConfiguration47.logLicenseCollisions(level86);
        reportConfiguration38.logFamilyCollisions(level86);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders91 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration38.setAddLicenseHeaders(addLicenseHeaders91);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = strSet6.contains((java.lang.Object) addLicenseHeaders91);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(claimStatistic19);
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + options23 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options23.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier26);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders43 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders43.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
        org.junit.Assert.assertNull(filenameFilter48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet50);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders51 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders51.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(iReportable62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertNull(claimStatistic77);
        org.junit.Assert.assertTrue("'" + options78 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options78.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier81);
        org.junit.Assert.assertTrue("'" + level86 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level86.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + addLicenseHeaders91 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders91.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
    }

    @Test
    public void test09745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09745");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        boolean boolean14 = strSet6.isEmpty();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = strSet6.subSet("GNU General Public License, version 2", "d25f13bc-1910-4451-97b5-b72663551a5d");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder18 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str19 = anyBuilder18.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList20 = anyBuilder18.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher21 = anyBuilder18.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str23 = anyBuilder22.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList24 = anyBuilder22.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher25 = anyBuilder22.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher26 = anyBuilder22.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList27 = anyBuilder22.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder28 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str29 = notBuilder28.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder30 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean31 = matcherRefBuilder30.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap32 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder33 = matcherRefBuilder30.setMatchers(strMap32);
        org.apache.rat.configuration.builders.AllBuilder allBuilder34 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder37 = copyrightBuilder35.setStart("OASIS");
        java.lang.String str38 = copyrightBuilder35.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder40 = copyrightBuilder35.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean42 = matcherRefBuilder41.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder45 = copyrightBuilder43.setStart("OASIS");
        java.lang.String str46 = copyrightBuilder43.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder48 = copyrightBuilder43.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder49 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder50 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str51 = copyrightBuilder50.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder53 = copyrightBuilder50.setEnd(".cvsignore");
        boolean boolean54 = copyrightBuilder50.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder55 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str56 = copyrightBuilder55.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder58 = copyrightBuilder55.setEnd(".cvsignore");
        boolean boolean59 = copyrightBuilder55.hasId();
        java.lang.String str60 = copyrightBuilder55.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder61 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder63 = copyrightBuilder61.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder64 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder65 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean66 = matcherRefBuilder65.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap67 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder68 = matcherRefBuilder65.setMatchers(strMap67);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder69 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder70 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean71 = matcherRefBuilder70.hasId();
        java.lang.String str72 = matcherRefBuilder70.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap73 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder74 = matcherRefBuilder70.setMatchers(strMap73);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray75 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder30, allBuilder34, copyrightBuilder40, matcherRefBuilder41, copyrightBuilder43, copyrightBuilder49, copyrightBuilder50, copyrightBuilder55, copyrightBuilder61, anyBuilder64, matcherRefBuilder65, copyrightBuilder69, matcherRefBuilder70 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList76 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList76, builderArray75);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder78 = notBuilder28.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList76);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder79 = anyBuilder22.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList76);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder80 = anyBuilder18.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList76);
        boolean boolean81 = strSet17.equals((java.lang.Object) abstractBuilder80);
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher84 = new org.apache.rat.analysis.matchers.FullTextMatcher("3e2b228d-d5ff-4444-8d8c-d614494b2426", "d25f13bc-1910-4451-97b5-b72663551a5d");
        org.apache.rat.analysis.IHeaderMatcher.State state86 = fullTextMatcher84.matches("f96ad0b6-2267-4692-93e4-227659f9d621");
        java.lang.String str87 = fullTextMatcher84.getId();
        fullTextMatcher84.reset();
        java.lang.String str89 = fullTextMatcher84.getId();
        boolean boolean90 = strSet17.equals((java.lang.Object) str89);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(anyBuilder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "AnyBuilder:" + "'", str19, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList20);
        org.junit.Assert.assertNotNull(iHeaderMatcher21);
        org.junit.Assert.assertNotNull(anyBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AnyBuilder:" + "'", str23, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList24);
        org.junit.Assert.assertNotNull(iHeaderMatcher25);
        org.junit.Assert.assertNotNull(iHeaderMatcher26);
        org.junit.Assert.assertNotNull(iHeaderMatcherList27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NotBuilder: null" + "'", str29, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(copyrightBuilder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str38, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder40);
        org.junit.Assert.assertNotNull(matcherRefBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder43);
        org.junit.Assert.assertNotNull(copyrightBuilder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str46, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder48);
        org.junit.Assert.assertNotNull(copyrightBuilder49);
        org.junit.Assert.assertNotNull(copyrightBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str51, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str56, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str60, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder61);
        org.junit.Assert.assertNotNull(copyrightBuilder63);
        org.junit.Assert.assertNotNull(anyBuilder64);
        org.junit.Assert.assertNotNull(matcherRefBuilder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder68);
        org.junit.Assert.assertNotNull(copyrightBuilder69);
        org.junit.Assert.assertNotNull(matcherRefBuilder70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "MathcerRefBuilder: null" + "'", str72, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder74);
        org.junit.Assert.assertNotNull(builderArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(abstractBuilder78);
        org.junit.Assert.assertNotNull(abstractBuilder79);
        org.junit.Assert.assertNotNull(abstractBuilder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + state86 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state86.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "3e2b228d-d5ff-4444-8d8c-d614494b2426" + "'", str87, "3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "3e2b228d-d5ff-4444-8d8c-d614494b2426" + "'", str89, "3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test09746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09746");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.stream.Stream<java.lang.String> strStream12 = strSet6.stream();
        org.apache.rat.utils.DefaultLog defaultLog13 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        reportConfiguration15.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level18 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration15.logFamilyCollisions(level18);
        defaultLog13.setLevel(level18);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet6.setLogLevel(level18);
        boolean boolean23 = strSet21.addIfNotPresent("OASIS Open License");
        java.util.Iterator<java.lang.String> strItor24 = strSet21.iterator();
        boolean boolean26 = strSet21.addIfNotPresent("13c0fdea-2f39-4bd6-8af3-7e9b1c47258a");
        strSet21.clear();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(defaultLog13);
        org.junit.Assert.assertTrue("'" + level18 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level18.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test09747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09747");
        java.lang.String[] strArray5 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean6 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Copyright Builder: s:null e:.cvsignore o:null", strArray5);
        boolean boolean7 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("e5b7b7d630de49728c78a5e3e85d54e0", strArray5);
        boolean boolean8 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("RegexBuilder: b1db9857-a506-44af-b49f-cf1fc4c885c7", strArray5);
        boolean boolean9 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("00186", strArray5);
        boolean boolean10 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("2f61fc99-c655-43e3-a548-fa8ccadafe5e", strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09748");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum12 = metaData0.get("http:");
        org.apache.rat.api.MetaData.Datum datum13 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATIM_TRUE;
        metaData0.add(datum13);
        boolean boolean16 = metaData0.clear("");
        org.apache.rat.api.MetaData.Datum datum18 = metaData0.get("6fbe8280-d578-4ea3-a1a8-34d68e85abc2");
        org.apache.rat.api.MetaData metaData19 = new org.apache.rat.api.MetaData();
        java.lang.String str21 = metaData19.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str23 = metaData19.value("W3C Document Copyright");
        boolean boolean25 = metaData19.clear("hi!");
        metaData19.clear();
        org.apache.rat.api.MetaData.Datum datum29 = new org.apache.rat.api.MetaData.Datum("b2eafdef-0477-406a-8b6d-8d332a86679e", ".cvsignore");
        metaData19.add(datum29);
        metaData0.set(datum29);
        org.apache.rat.api.MetaData.Datum datum32 = null;
        // The following exception was thrown during execution in test generation
        try {
            metaData0.set(datum32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNull(datum12);
        org.junit.Assert.assertNotNull(datum13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(datum18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09749");
        org.apache.rat.license.ILicense[] iLicenseArray2 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet3 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet3, iLicenseArray2);
        java.lang.String[] strArray17 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory20 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet3, (java.util.Collection<java.lang.String>) strList18);
        org.apache.rat.license.ILicense iLicense21 = org.apache.rat.license.LicenseSetFactory.search("binary", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet3);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet22 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet3);
        org.apache.rat.license.ILicense iLicense23 = org.apache.rat.license.LicenseSetFactory.search("a1abad46-6a98-44f8-aa20-7839919a8270", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        reportConfiguration25.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet29 = reportConfiguration25.getApprovedLicenseCategories();
        java.io.FilenameFilter filenameFilter30 = reportConfiguration25.getInputFileFilter();
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.utils.ReportingSet.Options options34 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration32.licenseDuplicateOption(options34);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet37 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily38 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet37);
        org.apache.rat.policy.DefaultPolicy defaultPolicy39 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet37);
        reportConfiguration32.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet37);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet41 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray42 = strSet41.toArray();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory43 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet37, (java.util.Collection<java.lang.String>) strSet41);
        reportConfiguration25.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet41);
        java.util.stream.Stream<java.lang.String> strStream45 = strSet41.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator46 = strSet41.spliterator();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory47 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet22, (java.util.Collection<java.lang.String>) strSet41);
        org.junit.Assert.assertNotNull(iLicenseArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(iLicense21);
        org.junit.Assert.assertNull(iLicense23);
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertTrue("'" + options34 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options34.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilySet37);
        org.junit.Assert.assertNull(iLicenseFamily38);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(strStream45);
        org.junit.Assert.assertNotNull(strSpliterator46);
    }

    @Test
    public void test09750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09750");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet1 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        int int2 = strSet1.size();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet4 = strSet1.headSet("?????");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = strSet1.tailSet("W3C Document Copyright");
        java.util.stream.Stream<java.lang.String> strStream7 = strSet1.parallelStream();
        boolean boolean9 = strSet1.addIfNotPresent("2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet11 = strSet1.tailSet("01e3a8ec-2dad-483e-bb8e-20f7738c8a71");
        java.lang.String[] strArray15 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean16 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Copyright Builder: s:null e:.cvsignore o:null", strArray15);
        boolean boolean17 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("03f7b314-6887-4617-9c7e-bf1600b331cd", strArray15);
        boolean boolean18 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("", strArray15);
        boolean boolean19 = strSet11.equals((java.lang.Object) strArray15);
        boolean boolean20 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("fef8ca38d00648b8922122b2d87fc230", strArray15);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09751");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("7480723c-65a6-4470-aa58-975de51fe7c5");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09752");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        claimStatistic0.setNumGenerated((int) '#');
    }

    @Test
    public void test09753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09753");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader5 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader6 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader7 = format0.matcherReader();
        java.net.URL uRL8 = null;
        // The following exception was thrown during execution in test generation
        try {
            matcherReader7.addMatchers(uRL8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(matcherReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(licenseReader4);
        org.junit.Assert.assertNotNull(matcherReader5);
        org.junit.Assert.assertNotNull(licenseReader6);
        org.junit.Assert.assertNotNull(matcherReader7);
    }

    @Test
    public void test09754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09754");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration2.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter4 = reportConfiguration2.getDirectoryFilter();
        java.nio.file.Path path5 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes6 = null;
        java.nio.file.FileVisitResult fileVisitResult7 = iOFileFilter4.accept(path5, basicFileAttributes6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier37 = reportConfiguration36.getOutput();
        reportConfiguration9.setOut(outputStreamIOSupplier37);
        org.apache.rat.utils.Log.Level level39 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration9.logLicenseCollisions(level39);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter41 = reportConfiguration9.getDirectoryFilter();
        java.nio.file.Path path42 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes43 = null;
        java.nio.file.FileVisitResult fileVisitResult44 = iOFileFilter41.accept(path42, basicFileAttributes43);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter45 = iOFileFilter41.negate();
        java.nio.file.Path path46 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes47 = null;
        java.nio.file.FileVisitResult fileVisitResult48 = iOFileFilter41.accept(path46, basicFileAttributes47);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker49 = new org.apache.rat.walker.DirectoryWalker(file0, (java.io.FilenameFilter) iOFileFilter4, iOFileFilter41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNotNull(iOFileFilter4);
        org.junit.Assert.assertTrue("'" + fileVisitResult7 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult7.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier37);
        org.junit.Assert.assertTrue("'" + level39 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level39.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter41);
        org.junit.Assert.assertTrue("'" + fileVisitResult44 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult44.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter45);
        org.junit.Assert.assertTrue("'" + fileVisitResult48 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult48.equals(java.nio.file.FileVisitResult.TERMINATE));
    }

    @Test
    public void test09755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09755");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("Copyright Builder: s:null e:.cvsignore o:GPL1 ", "CDDL1", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0 ']");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = copyrightMatcher3.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state5 = copyrightMatcher3.currentState();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test09756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09756");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder6 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str7 = anyBuilder6.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList8 = anyBuilder6.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = anyBuilder6.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = anyBuilder6.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList11 = anyBuilder6.getChildren();
        org.apache.rat.license.ILicense.Builder builder12 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) anyBuilder6);
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher14 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("binary");
        org.apache.rat.analysis.IHeaderMatcher.State state15 = simpleTextMatcher14.finalizeState();
        boolean boolean17 = simpleTextMatcher14.doMatch("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicense.Builder builder18 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher14);
        org.apache.rat.license.ILicense.Builder builder20 = builder18.setDerivedFrom("COPYRIGHT BUILDER: S:OASIS E:NULL O:NULL");
        org.apache.rat.license.ILicense.Builder builder22 = builder20.setDerivedFrom("b5db6c34-5b1c-41fd-a4cc-888dda28cf4e");
        org.apache.rat.license.ILicense.Builder builder24 = builder20.setDerivedFrom("28dca3d8-d654-4253-aa51-1b1f7affbc28");
        org.apache.rat.license.ILicense.Builder builder26 = builder20.setDerivedFrom("d8d2dbc5-dfb4-44f5-bfba-1260a4a118a6");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(anyBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AnyBuilder:" + "'", str7, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcherList11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state15.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test09757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09757");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd(".cvsignore");
        boolean boolean4 = copyrightBuilder0.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder6 = copyrightBuilder0.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder8 = copyrightBuilder6.setOwner("GPL1 ");
        java.lang.String str9 = copyrightBuilder6.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder11 = copyrightBuilder6.setOwner("5fec021b-b12e-48c3-a002-3eea7a06339a");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder13 = copyrightBuilder6.setId("535b5d01-f553-45e5-bb29-a646e4b8b66f");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder6.setEnd("f6c7d16f90d4435db9d9a9f6c196d56a");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder6);
        org.junit.Assert.assertNotNull(copyrightBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:GPL1 " + "'", str9, "Copyright Builder: s:null e:.cvsignore o:GPL1 ");
        org.junit.Assert.assertNotNull(copyrightBuilder11);
        org.junit.Assert.assertNotNull(abstractBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
    }

    @Test
    public void test09758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09758");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("TextBuilder: http://org/apache/ra...", "73fbee1b-7ed9-442a-968e-b2b525ca688f");
        java.lang.String str3 = datum2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Datum [ name ='TextBuilder: http://org/apache/ra...',value ='73fbee1b-7ed9-442a-968e-b2b525ca688f ']" + "'", str3, "Datum [ name ='TextBuilder: http://org/apache/ra...',value ='73fbee1b-7ed9-442a-968e-b2b525ca688f ']");
    }

    @Test
    public void test09759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09759");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("67b44bc4-b185-4d72-b595-a65129c9638b", "8ECB8CCE-06E4-400F-84D9-AD1CF6289FDA");
    }

    @Test
    public void test09760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09760");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.fromName("SpdxBuilder: t true");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: SpdxBuilder: t true");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09761");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder3 = regexBuilder0.setExpr("GNU General Public License, version 1");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder5 = regexBuilder3.setExpr("d0774232cdef4507a8b6ac22a273dde3");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder7 = regexBuilder5.setExpr("c4c4fff5-2656-471f-bd41-62e472c2ca7b");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder3);
        org.junit.Assert.assertNotNull(regexBuilder5);
        org.junit.Assert.assertNotNull(regexBuilder7);
    }

    @Test
    public void test09762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09762");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray1 = strSet0.toArray();
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        reportConfiguration3.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level6 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration3.logFamilyCollisions(level6);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier8 = reportConfiguration3.getOutput();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        reportConfiguration10.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        reportConfiguration10.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration10.getInputFileFilter();
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        java.io.FilenameFilter filenameFilter22 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet24 = reportConfiguration21.getLicenses(licenseFilter23);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders25 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration21.setAddLicenseHeaders(addLicenseHeaders25);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic29 = org.apache.rat.Reporter.report(reportConfiguration28);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter30);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet37 = reportConfiguration34.getLicenses(licenseFilter36);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders38 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration34.setAddLicenseHeaders(addLicenseHeaders38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter43);
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter43);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet46 = reportConfiguration21.getLicenseFamilies(licenseFilter43);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration10, licenseFilter43);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet48 = reportConfiguration3.getLicenseFamilies(licenseFilter43);
        java.util.Collection<java.lang.String> strCollection49 = null;
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory50 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet48, strCollection49);
        boolean boolean51 = strSet0.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet48);
        org.apache.rat.policy.DefaultPolicy defaultPolicy52 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet48);
        org.apache.rat.api.Document document53 = null;
        defaultPolicy52.analyse(document53);
        org.apache.rat.api.Document document55 = null;
        defaultPolicy52.analyse(document55);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet57 = defaultPolicy52.getApprovedLicenseNames();
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + level6 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level6.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier8);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertNull(filenameFilter22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet24);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders25 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders25.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet37);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders38 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders38.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet46);
        org.junit.Assert.assertNotNull(iLicenseFamilySet48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet57);
    }

    @Test
    public void test09763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09763");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log.Level level32 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration2.logLicenseCollisions(level32);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter34 = reportConfiguration2.getDirectoryFilter();
        java.nio.file.Path path35 = null;
        boolean boolean36 = iOFileFilter34.matches(path35);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter37 = iOFileFilter34.negate();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker38 = new org.apache.rat.walker.ArchiveWalker(file0, (java.io.FilenameFilter) iOFileFilter34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertTrue("'" + level32 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level32.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(iOFileFilter37);
    }

    @Test
    public void test09764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09764");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        reportConfiguration1.setStyleReport(false);
        org.apache.rat.license.ILicense iLicense30 = null;
        reportConfiguration1.addLicense(iLicense30);
        boolean boolean32 = reportConfiguration1.isStyleReport();
        reportConfiguration1.removeApprovedLicenseCategory("0f7d6");
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test09765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09765");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("W3C  ");
        simpleLicenseFamily0.setFamilyName("GEN  ");
        simpleLicenseFamily0.setFamilyCategory("b5cb0999-b639-4e9c-ab9c-268137bc8846");
        simpleLicenseFamily0.setFamilyCategory("bd015714-405b-4304-9faa-36efad80e6e6");
        java.lang.String str11 = simpleLicenseFamily0.toString();
        java.lang.String str12 = simpleLicenseFamily0.toString();
        java.lang.String str13 = simpleLicenseFamily0.toString();
        java.lang.String str14 = simpleLicenseFamily0.getFamilyCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bd015714-405b-4304-9faa-36efad80e6e6 GEN  " + "'", str11, "bd015714-405b-4304-9faa-36efad80e6e6 GEN  ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "bd015714-405b-4304-9faa-36efad80e6e6 GEN  " + "'", str12, "bd015714-405b-4304-9faa-36efad80e6e6 GEN  ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "bd015714-405b-4304-9faa-36efad80e6e6 GEN  " + "'", str13, "bd015714-405b-4304-9faa-36efad80e6e6 GEN  ");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "bd015714-405b-4304-9faa-36efad80e6e6" + "'", str14, "bd015714-405b-4304-9faa-36efad80e6e6");
    }

    @Test
    public void test09766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09766");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        java.util.regex.Pattern pattern2 = null;
        headerBean0.setHeaderPattern(pattern2);
        boolean boolean4 = headerBean0.isMatch();
        java.util.regex.Pattern pattern5 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern6 = headerBean0.getHeaderPattern();
        headerBean0.setMatch(false);
        boolean boolean9 = headerBean0.isMatch();
        headerBean0.setMatch(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(pattern5);
        org.junit.Assert.assertNull(pattern6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09767");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration1.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder6 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults7 = builder6.build();
        reportConfiguration1.setFrom(defaults7);
        boolean boolean9 = reportConfiguration1.isAddingLicenses();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        reportConfiguration11.addApprovedLicenseCategory(".cvsignore");
        boolean boolean14 = reportConfiguration11.isStyleReport();
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier18 = reportConfiguration16.getOutput();
        org.apache.rat.license.ILicense iLicense19 = null;
        reportConfiguration16.addLicense(iLicense19);
        org.apache.rat.Defaults.Builder builder21 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults22 = builder21.build();
        reportConfiguration16.setFrom(defaults22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray26 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList27 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList27, iLicenseFamilyArray26);
        reportConfiguration25.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList27);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense30 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense30.setLicenseFamilyName("hi!");
        java.lang.String str33 = fullTextMatchingLicense30.getLicenseFamilyCategory();
        java.lang.String str34 = fullTextMatchingLicense30.getLicenseFamilyName();
        fullTextMatchingLicense30.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense30.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily39 = fullTextMatchingLicense30.getLicenseFamily();
        reportConfiguration25.addFamily(iLicenseFamily39);
        java.lang.String str41 = iLicenseFamily39.getFamilyName();
        java.lang.String str42 = iLicenseFamily39.getFamilyName();
        reportConfiguration16.addApprovedLicenseCategory(iLicenseFamily39);
        reportConfiguration11.addApprovedLicenseCategory(iLicenseFamily39);
        java.lang.String str45 = iLicenseFamily39.getFamilyCategory();
        java.lang.String str46 = iLicenseFamily39.getFamilyName();
        java.lang.String str47 = iLicenseFamily39.getFamilyCategory();
        java.lang.String str48 = iLicenseFamily39.getFamilyName();
        reportConfiguration1.addFamily(iLicenseFamily39);
        java.lang.String str50 = reportConfiguration1.getCopyrightMessage();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaults7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(defaults22);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "SpdxBuilder: null" + "'", str41, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "SpdxBuilder: null" + "'", str42, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "TMF  " + "'", str45, "TMF  ");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "SpdxBuilder: null" + "'", str46, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "TMF  " + "'", str47, "TMF  ");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "SpdxBuilder: null" + "'", str48, "SpdxBuilder: null");
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test09768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09768");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.stream.Stream<java.lang.String> strStream12 = strSet6.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator13 = strSet6.spliterator();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(strSpliterator13);
    }

    @Test
    public void test09769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09769");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("false");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("Copyright Builder: s:null e:.cvsignore o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("GNUGeneralPublicLicenseversion2");
        org.apache.rat.license.ILicenseFamily iLicenseFamily8 = iLicenseFamilyBuilder0.build();
        java.lang.String str9 = iLicenseFamilyBuilder0.getCategory();
        java.lang.String str10 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder12 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("64868");
        java.lang.String str13 = iLicenseFamilyBuilder0.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(iLicenseFamily8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GNUGeneralPublicLicenseversion2" + "'", str9, "GNUGeneralPublicLicenseversion2");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GNUGeneralPublicLicenseversion2" + "'", str10, "GNUGeneralPublicLicenseversion2");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "64868" + "'", str13, "64868");
    }

    @Test
    public void test09770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09770");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher5 = new org.apache.rat.analysis.matchers.CopyrightMatcher("535b5d01-f553-45e5-bb29-a646e4b8b66f", "a7913c10-8476-4fa4-ad98-2c9ab822f086", "36f60d10a0bd4355a2a63635adf29872", "hi!");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher("80a37e08-094f-40f5-b511-64b9bf0aa418", (org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher5);
    }

    @Test
    public void test09771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09771");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.TXT;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader2 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader4 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader5 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader6 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader7 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader8 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader9 = format0.licenseReader();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.TXT + "'", format0.equals(org.apache.rat.configuration.Format.TXT));
        org.junit.Assert.assertNull(licenseReader1);
        org.junit.Assert.assertNull(licenseReader2);
        org.junit.Assert.assertNull(licenseReader3);
        org.junit.Assert.assertNull(matcherReader4);
        org.junit.Assert.assertNull(matcherReader5);
        org.junit.Assert.assertNull(licenseReader6);
        org.junit.Assert.assertNull(licenseReader7);
        org.junit.Assert.assertNull(matcherReader8);
        org.junit.Assert.assertNull(licenseReader9);
    }

    @Test
    public void test09772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09772");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("641dafc1-13c3-45d4-8272-f36f10392c53", "0356753d-7389-48e7-8d63-056fd4c4548c");
        fullTextMatcher2.reset();
    }

    @Test
    public void test09773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09773");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        int int12 = strSet6.size();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction13 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet14 = strSet6.setMsgFormat(strFunction13);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet14.headSet("");
        boolean boolean17 = strSet16.isEmpty();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test09774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09774");
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.api.ContentType contentType3 = new org.apache.rat.api.ContentType("W3C Software Copyright", "", strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09775");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender16 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog1, "");
        java.io.Writer writer17 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter18 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer17);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter19 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter20 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter21 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter22 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter23 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter24 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter25 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter26 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter27 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter28 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter29 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        defaultLog1.error((java.lang.Object) xmlWriter18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter32 = xmlWriter18.content((java.lang.CharSequence) "7e4f7d59-fe21-4470-9676-dacf1ee22e5d");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test09776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09776");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.ReportingSet.Options options52 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options52);
        reportConfiguration47.familyDuplicateOption(options52);
        reportConfiguration16.licenseDuplicateOption(options52);
        reportConfiguration16.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration16.logLicenseCollisions(level62);
        defaultLog14.setLevel(level62);
        defaultLog14.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog14);
        org.apache.rat.utils.DefaultLog defaultLog69 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logFamilyCollisions(level74);
        defaultLog69.setLevel(level74);
        defaultLog14.debug((java.lang.Object) level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet13.setLogLevel(level74);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        reportConfiguration80.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level83 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration80.logFamilyCollisions(level83);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet85 = strSet78.setLogLevel(level83);
        java.util.Spliterator<java.lang.String> strSpliterator86 = strSet78.spliterator();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet88 = strSet78.headSet("274c6a15-09f6-4bfd-ac53-1827770eb507");
        boolean boolean89 = strSet88.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream90 = strSet88.stream();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + options52 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options52.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog69);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + level83 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level83.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strSpliterator86);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(strStream90);
    }

    @Test
    public void test09777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09777");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("W3C  ");
        simpleLicenseFamily0.setFamilyName("GEN  ");
        java.lang.String str7 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyCategory("true|false|forced");
        java.lang.String str10 = simpleLicenseFamily0.getFamilyName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GEN  " + "'", str7, "GEN  ");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GEN  " + "'", str10, "GEN  ");
    }

    @Test
    public void test09778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09778");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.utils.Log.Level level54 = defaultLog0.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender55 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic56.setNumApproved((int) (short) 10);
        claimStatistic56.setNumUnknown(30);
        java.util.Map<java.lang.String, java.lang.Integer> strMap61 = null;
        claimStatistic56.setLicenseFileNameMap(strMap61);
        claimStatistic56.setNumUnknown(35);
        defaultLog0.debug((java.lang.Object) 35);
        org.apache.rat.utils.Log.Level level66 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog0.log(level66, "TMF PLAIN-RAT.XSL");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level54 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level54.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level66 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level66.equals(org.apache.rat.utils.Log.Level.DEBUG));
    }

    @Test
    public void test09779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09779");
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log.Level level32 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration2.logLicenseCollisions(level32);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter34 = reportConfiguration2.getDirectoryFilter();
        org.apache.rat.configuration.Format format36 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader37 = format36.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader38 = format36.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader39 = format36.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = licenseReader39.readLicenses();
        org.apache.rat.license.ILicense iLicense41 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet40);
        reportConfiguration2.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet40);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet43 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet40);
        org.apache.rat.license.ILicense iLicense44 = org.apache.rat.license.LicenseSetFactory.search("f5f3fb9b-540a-43ef-a018-8ce5779e23f4", iLicenseSet40);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet45 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet40);
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems46 = org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION;
        boolean boolean47 = sourceCodeManagementSystems46.hasIgnoreFile();
        java.util.List<java.lang.String> strList48 = sourceCodeManagementSystems46.getExclusions();
        java.util.List<java.lang.String> strList49 = sourceCodeManagementSystems46.getExclusions();
        java.util.List<java.lang.String> strList50 = sourceCodeManagementSystems46.getExclusions();
        java.util.List<java.lang.String> strList51 = sourceCodeManagementSystems46.getExclusions();
        java.util.List<java.lang.String> strList52 = sourceCodeManagementSystems46.getExclusions();
        java.io.FilenameFilter filenameFilter53 = org.apache.rat.Report.parseExclusions(strList52);
        java.io.FilenameFilter filenameFilter54 = org.apache.rat.Report.parseExclusions(strList52);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory55 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet40, (java.util.Collection<java.lang.String>) strList52);
        org.apache.rat.Defaults.Builder builder56 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder57 = builder56.noDefault();
        org.apache.rat.Defaults.Builder builder59 = builder57.remove("org/apache/rat/plain-rat.xsl");
        org.apache.rat.Defaults.Builder builder61 = builder57.remove("38e4211d-0f24-4ec0-aa5c-260c68412f39");
        org.apache.rat.Defaults defaults62 = builder57.build();
        org.apache.rat.Defaults.Builder builder63 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults64 = builder63.build();
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        java.io.FilenameFilter filenameFilter67 = reportConfiguration66.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet69 = reportConfiguration66.getLicenses(licenseFilter68);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders70 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration66.setAddLicenseHeaders(addLicenseHeaders70);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter75);
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        java.io.FilenameFilter filenameFilter80 = reportConfiguration79.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter81 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet82 = reportConfiguration79.getLicenses(licenseFilter81);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders83 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration79.setAddLicenseHeaders(addLicenseHeaders83);
        org.apache.rat.utils.Log log85 = null;
        org.apache.rat.ReportConfiguration reportConfiguration86 = new org.apache.rat.ReportConfiguration(log85);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic87 = org.apache.rat.Reporter.report(reportConfiguration86);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter88 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration86, licenseFilter88);
        org.apache.rat.Reporter.listLicenses(reportConfiguration79, licenseFilter88);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet91 = reportConfiguration66.getLicenseFamilies(licenseFilter88);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet92 = defaults64.getLicenses(licenseFilter88);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet93 = defaults62.getLicenses(licenseFilter88);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet94 = licenseSetFactory55.getLicenses(licenseFilter88);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertTrue("'" + level32 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level32.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter34);
        org.junit.Assert.assertTrue("'" + format36 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format36.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader37);
        org.junit.Assert.assertNotNull(matcherReader38);
        org.junit.Assert.assertNotNull(licenseReader39);
        org.junit.Assert.assertNotNull(iLicenseSet40);
        org.junit.Assert.assertNull(iLicense41);
        org.junit.Assert.assertNull(iLicense44);
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems46 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION + "'", sourceCodeManagementSystems46.equals(org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(filenameFilter53);
        org.junit.Assert.assertNotNull(filenameFilter54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(defaults62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(defaults64);
        org.junit.Assert.assertNull(filenameFilter67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet69);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders70 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders70.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter80);
        org.junit.Assert.assertTrue("'" + licenseFilter81 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter81.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet82);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders83 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders83.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic87);
        org.junit.Assert.assertTrue("'" + licenseFilter88 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter88.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet91);
        org.junit.Assert.assertNotNull(iLicenseSet92);
        org.junit.Assert.assertNotNull(iLicenseSet93);
        org.junit.Assert.assertNotNull(iLicenseSet94);
    }

    @Test
    public void test09780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09780");
        org.apache.rat.license.ILicense[] iLicenseArray0 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet1 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet1, iLicenseArray0);
        java.lang.String[] strArray15 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, (java.util.Collection<java.lang.String>) strList16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet20 = licenseSetFactory18.getLicenseFamilies(licenseFilter19);
        org.apache.rat.license.ILicense[] iLicenseArray21 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet22 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet22, iLicenseArray21);
        java.lang.String[] strArray36 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory39 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet22, (java.util.Collection<java.lang.String>) strList37);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = reportConfiguration41.getLicenses(licenseFilter43);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders45 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter50);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        java.io.FilenameFilter filenameFilter55 = reportConfiguration54.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet57 = reportConfiguration54.getLicenses(licenseFilter56);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders58 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration54.setAddLicenseHeaders(addLicenseHeaders58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter63 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration61, licenseFilter63);
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter63);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter63);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet67 = licenseSetFactory39.getLicenses(licenseFilter63);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet68 = licenseSetFactory18.getLicenseFamilies(licenseFilter63);
        org.apache.rat.policy.DefaultPolicy defaultPolicy69 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet68);
        org.apache.rat.api.Document document70 = null;
        defaultPolicy69.analyse(document70);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet72 = defaultPolicy69.getApprovedLicenseNames();
        org.apache.rat.policy.DefaultPolicy defaultPolicy73 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet72);
        org.apache.rat.api.Document document74 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy73.reportLicenseApprovalClaim(document74, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet20);
        org.junit.Assert.assertNotNull(iLicenseArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders45 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders45.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet57);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders58 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders58.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertTrue("'" + licenseFilter63 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter63.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet67);
        org.junit.Assert.assertNotNull(iLicenseFamilySet68);
        org.junit.Assert.assertNotNull(iLicenseFamilySet72);
    }

    @Test
    public void test09781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09781");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.report.IReportable iReportable3 = null;
        reportConfiguration1.setReportable(iReportable3);
        org.apache.rat.license.ILicense iLicense5 = null;
        reportConfiguration1.addLicense(iLicense5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.utils.ReportingSet.Options options9 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration8.licenseDuplicateOption(options9);
        reportConfiguration1.familyDuplicateOption(options9);
        boolean boolean12 = reportConfiguration1.isStyleReport();
        org.apache.rat.license.ILicenseFamily.Builder builder13 = null;
        reportConfiguration1.addFamily(builder13);
        java.lang.String[] strArray20 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        boolean boolean24 = strSet21.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean26 = strSet21.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.stream.Stream<java.lang.String> strStream27 = strSet21.stream();
        org.apache.rat.utils.DefaultLog defaultLog28 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        reportConfiguration30.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level33 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration30.logFamilyCollisions(level33);
        defaultLog28.setLevel(level33);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet36 = strSet21.setLogLevel(level33);
        reportConfiguration1.logFamilyCollisions(level33);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier38 = reportConfiguration1.getWriter();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + options9 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options9.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strStream27);
        org.junit.Assert.assertNotNull(defaultLog28);
        org.junit.Assert.assertTrue("'" + level33 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level33.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(printWriterIOSupplier38);
    }

    @Test
    public void test09782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09782");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter16 = xmlWriter1.content((java.lang.CharSequence) "Copyright Builder: s:BSD-3 e:null o:null");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09783");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier27 = reportConfiguration1.getOutput();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = reportConfiguration43.getLicenses(licenseFilter45);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter52);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier58 = reportConfiguration57.getOutput();
        reportConfiguration30.setOut(outputStreamIOSupplier58);
        org.apache.rat.utils.Log.Level level60 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration30.logLicenseCollisions(level60);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter62 = reportConfiguration30.getDirectoryFilter();
        java.nio.file.Path path63 = null;
        boolean boolean64 = iOFileFilter62.matches(path63);
        java.nio.file.Path path65 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes66 = null;
        java.nio.file.FileVisitResult fileVisitResult67 = iOFileFilter62.accept(path65, basicFileAttributes66);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter68 = iOFileFilter62.negate();
        reportConfiguration1.setDirectoryFilter(iOFileFilter62);
        java.nio.file.Path path70 = null;
        boolean boolean71 = iOFileFilter62.matches(path70);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter72 = iOFileFilter62.negate();
        java.nio.file.Path path73 = null;
        boolean boolean74 = iOFileFilter72.matches(path73);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier27);
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier58);
        org.junit.Assert.assertTrue("'" + level60 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level60.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult67 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult67.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(iOFileFilter72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test09784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09784");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern1);
        simpleRegexMatcher2.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = simpleRegexMatcher2.finalizeState();
        java.lang.String str5 = simpleRegexMatcher2.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = simpleRegexMatcher2.currentState();
        simpleRegexMatcher2.reset();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher8 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher2);
        simpleRegexMatcher2.reset();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "f0e63aab-6bbb-429b-a543-8d03caca5b69" + "'", str5, "f0e63aab-6bbb-429b-a543-8d03caca5b69");
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test09785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09785");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("notice");
        boolean boolean4 = fullTextMatcher2.doMatch("2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher5 = new org.apache.rat.analysis.matchers.NotMatcher("notice", (org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        notMatcher5.reset();
        java.lang.Class<?> wildcardClass7 = notMatcher5.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test09786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09786");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str1 = anyBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = anyBuilder0.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = anyBuilder0.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder4 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str5 = anyBuilder4.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList6 = anyBuilder4.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = anyBuilder4.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = anyBuilder4.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList9 = anyBuilder4.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder10 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str11 = notBuilder10.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder12 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean13 = matcherRefBuilder12.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap14 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder15 = matcherRefBuilder12.setMatchers(strMap14);
        org.apache.rat.configuration.builders.AllBuilder allBuilder16 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder19 = copyrightBuilder17.setStart("OASIS");
        java.lang.String str20 = copyrightBuilder17.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = copyrightBuilder17.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder23 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean24 = matcherRefBuilder23.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = copyrightBuilder25.setStart("OASIS");
        java.lang.String str28 = copyrightBuilder25.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder25.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder32 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str33 = copyrightBuilder32.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder32.setEnd(".cvsignore");
        boolean boolean36 = copyrightBuilder32.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str38 = copyrightBuilder37.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder40 = copyrightBuilder37.setEnd(".cvsignore");
        boolean boolean41 = copyrightBuilder37.hasId();
        java.lang.String str42 = copyrightBuilder37.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder45 = copyrightBuilder43.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder46 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean48 = matcherRefBuilder47.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap49 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder50 = matcherRefBuilder47.setMatchers(strMap49);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder51 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean53 = matcherRefBuilder52.hasId();
        java.lang.String str54 = matcherRefBuilder52.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap55 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder56 = matcherRefBuilder52.setMatchers(strMap55);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray57 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder12, allBuilder16, copyrightBuilder22, matcherRefBuilder23, copyrightBuilder25, copyrightBuilder31, copyrightBuilder32, copyrightBuilder37, copyrightBuilder43, anyBuilder46, matcherRefBuilder47, copyrightBuilder51, matcherRefBuilder52 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList58 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList58, builderArray57);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder60 = notBuilder10.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = anyBuilder4.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder62 = anyBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList58);
        java.lang.String str63 = anyBuilder0.toString();
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AnyBuilder:" + "'", str1, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(anyBuilder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AnyBuilder:" + "'", str5, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcherList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NotBuilder: null" + "'", str11, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertNotNull(copyrightBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str20, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertNotNull(matcherRefBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str28, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertNotNull(copyrightBuilder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str33, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str38, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str42, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder43);
        org.junit.Assert.assertNotNull(copyrightBuilder45);
        org.junit.Assert.assertNotNull(anyBuilder46);
        org.junit.Assert.assertNotNull(matcherRefBuilder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder50);
        org.junit.Assert.assertNotNull(copyrightBuilder51);
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "MathcerRefBuilder: null" + "'", str54, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder56);
        org.junit.Assert.assertNotNull(builderArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(abstractBuilder60);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(abstractBuilder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "AnyBuilder:\nMathcerRefBuilder: null\nAllBuilder:\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nMathcerRefBuilder: null\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nCopyright Builder: s:null e:null o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:OASIS e:null o:null\nAnyBuilder:\nMathcerRefBuilder: null\nCopyright Builder: s:null e:null o:null\nMathcerRefBuilder: null" + "'", str63, "AnyBuilder:\nMathcerRefBuilder: null\nAllBuilder:\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nMathcerRefBuilder: null\nCopyright Builder: s:223f0aba-15d4-49e9-901e-5740c137aebf e:null o:null\nCopyright Builder: s:null e:null o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:null e:.cvsignore o:null\nCopyright Builder: s:OASIS e:null o:null\nAnyBuilder:\nMathcerRefBuilder: null\nCopyright Builder: s:null e:null o:null\nMathcerRefBuilder: null");
    }

    @Test
    public void test09787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09787");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog0.setLevel(level13);
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily15 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str16 = simpleLicenseFamily15.getFamilyName();
        java.lang.String str17 = simpleLicenseFamily15.getFamilyCategory();
        simpleLicenseFamily15.setFamilyCategory("W3C  ");
        simpleLicenseFamily15.setFamilyCategory("AllBuilder:");
        defaultLog0.info((java.lang.Object) simpleLicenseFamily15);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder23 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str24 = iLicenseFamilyBuilder23.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder26 = iLicenseFamilyBuilder23.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder28 = iLicenseFamilyBuilder23.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder30 = iLicenseFamilyBuilder23.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str31 = iLicenseFamilyBuilder23.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder33 = iLicenseFamilyBuilder23.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily.Builder builder35 = iLicenseFamilyBuilder23.setLicenseFamilyCategory("8f82a952-5bfd-446b-ac79-15beef5b3f17");
        defaultLog0.warn((java.lang.Object) iLicenseFamilyBuilder23);
        java.lang.String[] strArray42 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet43 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        boolean boolean46 = strSet43.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean48 = strSet43.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction49 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet50 = strSet43.setMsgFormat(strFunction49);
        int int51 = strSet50.size();
        java.util.stream.Stream<java.lang.String> strStream52 = strSet50.parallelStream();
        defaultLog0.error((java.lang.Object) strSet50);
        org.apache.rat.license.ILicense.Builder builder54 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder56 = builder54.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder58 = builder56.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder60 = builder58.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder61 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str62 = copyrightBuilder61.toString();
        org.apache.rat.license.ILicense.Builder builder63 = builder58.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder61);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher64 = copyrightBuilder61.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher65 = copyrightBuilder61.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder67 = copyrightBuilder61.setEnd("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher68 = copyrightBuilder67.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder70 = copyrightBuilder67.setEnd("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher71 = copyrightBuilder67.build();
        defaultLog0.debug((java.lang.Object) copyrightBuilder67);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level13.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "MIT  " + "'", str31, "MIT  ");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
        org.junit.Assert.assertNotNull(strStream52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(copyrightBuilder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str62, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(iHeaderMatcher64);
        org.junit.Assert.assertNotNull(iHeaderMatcher65);
        org.junit.Assert.assertNotNull(copyrightBuilder67);
        org.junit.Assert.assertNotNull(iHeaderMatcher68);
        org.junit.Assert.assertNotNull(copyrightBuilder70);
        org.junit.Assert.assertNotNull(iHeaderMatcher71);
    }

    @Test
    public void test09788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09788");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders7 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration3.setAddLicenseHeaders(addLicenseHeaders7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter12);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter12);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter25);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier31 = reportConfiguration30.getOutput();
        reportConfiguration3.setOut(outputStreamIOSupplier31);
        org.apache.rat.utils.Log.Level level33 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration3.logLicenseCollisions(level33);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter35 = reportConfiguration3.getDirectoryFilter();
        java.nio.file.Path path36 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes37 = null;
        java.nio.file.FileVisitResult fileVisitResult38 = iOFileFilter35.accept(path36, basicFileAttributes37);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter39 = iOFileFilter35.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter40 = iOFileFilter39.negate();
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.utils.ReportingSet.Options options44 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration42.licenseDuplicateOption(options44);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter46 = reportConfiguration42.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter47 = iOFileFilter39.and(iOFileFilter46);
        java.nio.file.Path path48 = null;
        boolean boolean49 = iOFileFilter46.matches(path48);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker50 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders7 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders7.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier31);
        org.junit.Assert.assertTrue("'" + level33 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level33.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter35);
        org.junit.Assert.assertTrue("'" + fileVisitResult38 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult38.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter39);
        org.junit.Assert.assertNotNull(iOFileFilter40);
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + options44 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options44.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iOFileFilter46);
        org.junit.Assert.assertNotNull(iOFileFilter47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test09789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09789");
        java.lang.String[] strArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("RegexBuilder: ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5", strArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09790");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap2 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = matcherRefBuilder0.setMatchers(strMap2);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder3.setMatchers(strMap4);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder7 = matcherRefBuilder5.setId("6620e9ee-d651-4c18-8162-edad6d18368e");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap8 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder9 = matcherRefBuilder5.setMatchers(strMap8);
        java.lang.String str10 = matcherRefBuilder9.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = matcherRefBuilder9.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder3);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertNotNull(abstractBuilder7);
        org.junit.Assert.assertNotNull(matcherRefBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MathcerRefBuilder: null" + "'", str10, "MathcerRefBuilder: null");
    }

    @Test
    public void test09791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09791");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyName("NotBuilder: MathcerRefBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyName("3a01ef2a-65ad-4697-a3a7-bb504d3c1921");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test09792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09792");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = null;
        org.apache.rat.license.ILicense.Builder builder8 = builder6.setMatcher(iHeaderMatcher7);
        org.apache.rat.license.ILicense.Builder builder10 = builder8.setName("AL   ");
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setDerivedFrom("");
        org.apache.rat.license.ILicense.Builder builder14 = builder10.setDerivedFrom("03F7B314-6887-4617-9C7E-BF1600B331CD");
        org.apache.rat.license.ILicense.Builder builder16 = builder10.setLicenseFamilyCategory("788fd438-864a-45bf-b3f2-b0665bd16acd");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test09793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09793");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder0.setId("GPL2 ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setLicenseFamilyCategory("GNU General Public License, version 2");
        org.apache.rat.license.ILicense.Builder builder8 = builder4.setName("255ef7d8-e270-4908-9de7-bebc7df6eb88");
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier12 = reportConfiguration10.getOutput();
        org.apache.rat.license.ILicense iLicense13 = null;
        reportConfiguration10.addLicense(iLicense13);
        org.apache.rat.Defaults.Builder builder15 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults16 = builder15.build();
        reportConfiguration10.setFrom(defaults16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = defaults16.getLicenses(licenseFilter18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        reportConfiguration21.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        java.io.FilenameFilter filenameFilter26 = reportConfiguration25.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet28 = reportConfiguration25.getLicenses(licenseFilter27);
        reportConfiguration21.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration32.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet35 = reportConfiguration32.getLicenses(licenseFilter34);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders36 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter41);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration45.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet48 = reportConfiguration45.getLicenses(licenseFilter47);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders49 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration45.setAddLicenseHeaders(addLicenseHeaders49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter54);
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter54);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet57 = reportConfiguration32.getLicenseFamilies(licenseFilter54);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration21, licenseFilter54);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet59 = defaults16.getLicenseFamilies(licenseFilter54);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense60 = builder8.build(iLicenseFamilySet59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Matcher must not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(defaults16);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertNull(filenameFilter26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet28);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet35);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders36 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders36.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet48);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders49 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders49.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet57);
        org.junit.Assert.assertNotNull(iLicenseFamilySet59);
    }

    @Test
    public void test09794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09794");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("e39d7", ".gitignore");
    }

    @Test
    public void test09795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09795");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        java.lang.String[] strArray51 = new java.lang.String[] { "274c6a15-09f6-4bfd-ac53-1827770eb507", "true|false|forced", "GEN  ", "Apache License Version 2.0", "OASIS", "Apache License Version 2.0", "hi!", "http://org/apache/rat/meta-data", "standard", "", "GEN  ", "W3C Document Copyright", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "Copyright Builder: s:null e:null o:null", "MANIFEST.MF", "Modified BSD License", "true|false|forced", "t true", "GPL2 ", "Modified BSD License", "hi!", "MANIFEST.MF", "GPL2 ", "W3C Software Copyright", "W3C Software Copyright", "021187d7-27c2-4fd9-bc74-8cc00413ee52", "Apache License Version 2.0", "W3C Software Copyright", ".cvsignore", "?????", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 1", "GNU General Public License, version 1", "TMF  ", "6486879f-fc81-4b57-aec7-c4c77d540c30", "org/apache/rat/plain-rat.xsl", "GNU General Public License, version 2", "?????" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList52);
        java.lang.String str55 = reportConfiguration1.getCopyrightMessage();
        java.net.URL uRL56 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test09796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09796");
        java.lang.String str1 = org.apache.rat.document.impl.guesser.GuessUtils.normalise("0efaf422-29df-4134-8f47-46a5265da7f4");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "0EFAF422-29DF-4134-8F47-46A5265DA7F4" + "'", str1, "0EFAF422-29DF-4134-8F47-46A5265DA7F4");
    }

    @Test
    public void test09797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09797");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) '4');
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        claimStatistic0.setLicenseFileNameMap(strMap7);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic0.getLicenseFileNameMap();
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test09798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09798");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log.Level level32 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration2.logLicenseCollisions(level32);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter34 = reportConfiguration2.getDirectoryFilter();
        java.nio.file.Path path35 = null;
        boolean boolean36 = iOFileFilter34.matches(path35);
        java.nio.file.Path path37 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes38 = null;
        java.nio.file.FileVisitResult fileVisitResult39 = iOFileFilter34.accept(path37, basicFileAttributes38);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter40 = iOFileFilter34.negate();
        java.nio.file.Path path41 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes42 = null;
        java.nio.file.FileVisitResult fileVisitResult43 = iOFileFilter34.accept(path41, basicFileAttributes42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker44 = new org.apache.rat.walker.ArchiveWalker(file0, (java.io.FilenameFilter) iOFileFilter34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertTrue("'" + level32 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level32.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult39 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult39.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter40);
        org.junit.Assert.assertTrue("'" + fileVisitResult43 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult43.equals(java.nio.file.FileVisitResult.TERMINATE));
    }

    @Test
    public void test09799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09799");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("GPL2", "Copyright Builder: s:W3CD  e:null o:Copyright Builder: s:null e:274c6a15-09f6-4bfd-ac53-1827770eb507 o:null", "GNUGeneralPublicLicenseversion2");
    }

    @Test
    public void test09800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09800");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier12 = reportConfiguration1.getStyleSheet();
        java.lang.String str13 = reportConfiguration1.getCopyrightMessage();
        boolean boolean14 = reportConfiguration1.isAddingLicenses();
        reportConfiguration1.addApprovedLicenseCategory("");
        org.apache.rat.utils.Log log17 = reportConfiguration1.getLog();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNull(inputStreamIOSupplier12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(log17);
    }

    @Test
    public void test09801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09801");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder0.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder9 = spdxBuilder0.setName("7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder11 = spdxBuilder0.setName("Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder13 = spdxBuilder11.setName("157e3054-ccda-4ff3-bd1b-33afd29e7035");
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(spdxBuilder9);
        org.junit.Assert.assertNotNull(spdxBuilder11);
        org.junit.Assert.assertNotNull(spdxBuilder13);
    }

    @Test
    public void test09802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09802");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.ReportingSet.Options options3 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration1.licenseDuplicateOption(options3);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter5 = reportConfiguration1.getDirectoryFilter();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier6 = null;
        reportConfiguration1.setOut(outputStreamIOSupplier6);
        java.io.File file8 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setOut(file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + options3 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options3.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iOFileFilter5);
    }

    @Test
    public void test09803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09803");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("NotBuilder: null", pattern1);
    }

    @Test
    public void test09804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09804");
        org.apache.rat.config.ReportFormat reportFormat0 = org.apache.rat.config.ReportFormat.XML;
        boolean boolean2 = reportFormat0.is("B2EAFDEF-0477-406A-8B6D-8D332A86679E");
        boolean boolean4 = reportFormat0.is("d13e4bcc-7d39-46ff-afd9-093527a31ca6");
        org.junit.Assert.assertTrue("'" + reportFormat0 + "' != '" + org.apache.rat.config.ReportFormat.XML + "'", reportFormat0.equals(org.apache.rat.config.ReportFormat.XML));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09805");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.license.ILicense.Builder builder4 = builder0.setDerivedFrom("MANIFEST.MF");
        org.apache.rat.license.ILicense.Builder builder6 = builder0.setId("ed0faf32-f32c-46f1-a629-4fe87704cb0e");
        org.apache.rat.license.ILicense.Builder builder8 = builder0.setDerivedFrom("01cd6410-ba98-464c-a66e-0b7190dd6096");
        org.apache.rat.license.ILicense.Builder builder10 = builder0.setName(".bzrignore");
        org.apache.rat.license.ILicense.Builder builder12 = builder0.setName("SpdxBuilder: SpdxB");
        org.apache.rat.license.ILicense.Builder builder14 = builder12.setDerivedFrom("TextBuilder: SpdxBuilder: null");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test09806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09806");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap1 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap2 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumApproved((int) 'a');
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = null;
        claimStatistic0.setDocumentCategoryMap(strMap5);
        claimStatistic0.setNumApproved((int) 'a');
        claimStatistic0.setNumGenerated(0);
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic0.getLicenseFileNameMap();
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test09807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09807");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration1.getLicenses(licenseFilter51);
        boolean boolean56 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.utils.ReportingSet.Options options63 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration61.licenseDuplicateOption(options63);
        reportConfiguration58.familyDuplicateOption(options63);
        reportConfiguration1.familyDuplicateOption(options63);
        java.util.SortedSet<java.lang.String> strSet67 = reportConfiguration1.getApprovedLicenseCategories();
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        java.io.FilenameFilter filenameFilter70 = reportConfiguration69.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter71 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet72 = reportConfiguration69.getLicenses(licenseFilter71);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders73 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration69.setAddLicenseHeaders(addLicenseHeaders73);
        org.apache.rat.utils.Log log75 = null;
        org.apache.rat.ReportConfiguration reportConfiguration76 = new org.apache.rat.ReportConfiguration(log75);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic77 = org.apache.rat.Reporter.report(reportConfiguration76);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter78 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration76, licenseFilter78);
        org.apache.rat.Reporter.listLicenses(reportConfiguration69, licenseFilter78);
        org.apache.rat.utils.Log log81 = null;
        org.apache.rat.ReportConfiguration reportConfiguration82 = new org.apache.rat.ReportConfiguration(log81);
        java.io.FilenameFilter filenameFilter83 = reportConfiguration82.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter84 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet85 = reportConfiguration82.getLicenses(licenseFilter84);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders86 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration82.setAddLicenseHeaders(addLicenseHeaders86);
        org.apache.rat.utils.Log log88 = null;
        org.apache.rat.ReportConfiguration reportConfiguration89 = new org.apache.rat.ReportConfiguration(log88);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic90 = org.apache.rat.Reporter.report(reportConfiguration89);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter91 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration89, licenseFilter91);
        org.apache.rat.Reporter.listLicenses(reportConfiguration82, licenseFilter91);
        org.apache.rat.Reporter.listLicenses(reportConfiguration69, licenseFilter91);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet95 = reportConfiguration1.getLicenses(licenseFilter91);
        java.io.FilenameFilter filenameFilter96 = reportConfiguration1.getInputFileFilter();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertTrue("'" + options63 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options63.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNull(filenameFilter70);
        org.junit.Assert.assertTrue("'" + licenseFilter71 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter71.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet72);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders73 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders73.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic77);
        org.junit.Assert.assertTrue("'" + licenseFilter78 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter78.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter83);
        org.junit.Assert.assertTrue("'" + licenseFilter84 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter84.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet85);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders86 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders86.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic90);
        org.junit.Assert.assertTrue("'" + licenseFilter91 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter91.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet95);
        org.junit.Assert.assertNull(filenameFilter96);
    }

    @Test
    public void test09808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09808");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration2.getOutput();
        reportConfiguration2.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log6 = reportConfiguration2.getLog();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier7 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration2.setStyleSheet(inputStreamIOSupplier7);
        java.lang.String str9 = reportConfiguration2.getCopyrightMessage();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter10 = reportConfiguration2.getDirectoryFilter();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        java.io.FilenameFilter filenameFilter13 = reportConfiguration12.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet15 = reportConfiguration12.getLicenses(licenseFilter14);
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = null;
        reportConfiguration12.addFamily(iLicenseFamily16);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter18 = reportConfiguration12.getDirectoryFilter();
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter42);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier48 = reportConfiguration47.getOutput();
        reportConfiguration20.setOut(outputStreamIOSupplier48);
        org.apache.rat.utils.Log.Level level50 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration20.logLicenseCollisions(level50);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter52 = reportConfiguration20.getDirectoryFilter();
        java.nio.file.Path path53 = null;
        boolean boolean54 = iOFileFilter52.matches(path53);
        java.nio.file.Path path55 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes56 = null;
        java.nio.file.FileVisitResult fileVisitResult57 = iOFileFilter52.accept(path55, basicFileAttributes56);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter58 = iOFileFilter18.or(iOFileFilter52);
        java.nio.file.Path path59 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes60 = null;
        java.nio.file.FileVisitResult fileVisitResult61 = iOFileFilter58.accept(path59, basicFileAttributes60);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter62 = iOFileFilter58.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter63 = iOFileFilter10.or(iOFileFilter62);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker64 = new org.apache.rat.walker.ArchiveWalker(file0, (java.io.FilenameFilter) iOFileFilter63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MANIFEST.MF" + "'", str9, "MANIFEST.MF");
        org.junit.Assert.assertNotNull(iOFileFilter10);
        org.junit.Assert.assertNull(filenameFilter13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet15);
        org.junit.Assert.assertNotNull(iOFileFilter18);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier48);
        org.junit.Assert.assertTrue("'" + level50 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level50.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult57 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult57.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter58);
        org.junit.Assert.assertTrue("'" + fileVisitResult61 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult61.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter62);
        org.junit.Assert.assertNotNull(iOFileFilter63);
    }

    @Test
    public void test09809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09809");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        reportConfiguration1.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable30 = null;
        reportConfiguration1.setReportable(iReportable30);
        org.apache.rat.Defaults.Builder builder33 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults34 = builder33.build();
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = reportConfiguration49.getLicenses(licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter58);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet61 = reportConfiguration36.getLicenseFamilies(licenseFilter58);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = defaults34.getLicenses(licenseFilter58);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet63 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet62);
        org.apache.rat.license.ILicense iLicense64 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet62);
        reportConfiguration1.addLicense(iLicense64);
        java.lang.String str66 = iLicense64.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily67 = iLicense64.getLicenseFamily();
        org.apache.rat.configuration.Format format68 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader69 = format68.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet70 = licenseReader69.readLicenses();
        org.apache.rat.license.ILicense iLicense71 = org.apache.rat.license.LicenseSetFactory.search(iLicense64, iLicenseSet70);
        java.lang.String str72 = iLicense64.getNotes();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher73 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) iLicense64);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(defaults34);
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet61);
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertNotNull(iLicense64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "BSD-3" + "'", str66, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily67);
        org.junit.Assert.assertTrue("'" + format68 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format68.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader69);
        org.junit.Assert.assertNotNull(iLicenseSet70);
        org.junit.Assert.assertNull(iLicense71);
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test09810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09810");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense7 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense7.setLicenseFamilyName("hi!");
        java.lang.String str10 = fullTextMatchingLicense7.getLicenseFamilyCategory();
        java.lang.String str11 = fullTextMatchingLicense7.getLicenseFamilyName();
        fullTextMatchingLicense7.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense7.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = fullTextMatchingLicense7.getLicenseFamily();
        java.lang.String str17 = iLicenseFamily16.getFamilyName();
        java.lang.String str18 = iLicenseFamily16.getFamilyName();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder19 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str20 = iLicenseFamilyBuilder19.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder22 = iLicenseFamilyBuilder19.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder24 = iLicenseFamilyBuilder19.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder26 = iLicenseFamilyBuilder19.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str27 = iLicenseFamilyBuilder19.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder29 = iLicenseFamilyBuilder19.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily30 = iLicenseFamilyBuilder19.build();
        int int31 = iLicenseFamily16.compareTo(iLicenseFamily30);
        java.lang.String str32 = iLicenseFamily30.getFamilyCategory();
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily30);
        reportConfiguration1.removeApprovedLicenseCategory("http:");
        org.apache.rat.report.IReportable iReportable36 = reportConfiguration1.getReportable();
        java.io.File file37 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(file37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "SpdxBuilder: null" + "'", str17, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "SpdxBuilder: null" + "'", str18, "SpdxBuilder: null");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "MIT  " + "'", str27, "MIT  ");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(iLicenseFamily30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "MIT  " + "'", str32, "MIT  ");
        org.junit.Assert.assertNull(iReportable36);
    }

    @Test
    public void test09811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09811");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter44 = reportConfiguration2.getDirectoryFilter();
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration46.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = reportConfiguration46.getLicenses(licenseFilter48);
        org.apache.rat.license.ILicenseFamily iLicenseFamily50 = null;
        reportConfiguration46.addFamily(iLicenseFamily50);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter52 = reportConfiguration46.getDirectoryFilter();
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        java.io.FilenameFilter filenameFilter55 = reportConfiguration54.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet57 = reportConfiguration54.getLicenses(licenseFilter56);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders58 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration54.setAddLicenseHeaders(addLicenseHeaders58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter63 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration61, licenseFilter63);
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter63);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        java.io.FilenameFilter filenameFilter68 = reportConfiguration67.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter69 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet70 = reportConfiguration67.getLicenses(licenseFilter69);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders71 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration67.setAddLicenseHeaders(addLicenseHeaders71);
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic75 = org.apache.rat.Reporter.report(reportConfiguration74);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter76 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration74, licenseFilter76);
        org.apache.rat.Reporter.listLicenses(reportConfiguration67, licenseFilter76);
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter76);
        org.apache.rat.utils.Log log80 = null;
        org.apache.rat.ReportConfiguration reportConfiguration81 = new org.apache.rat.ReportConfiguration(log80);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier82 = reportConfiguration81.getOutput();
        reportConfiguration54.setOut(outputStreamIOSupplier82);
        org.apache.rat.utils.Log.Level level84 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration54.logLicenseCollisions(level84);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter86 = reportConfiguration54.getDirectoryFilter();
        java.nio.file.Path path87 = null;
        boolean boolean88 = iOFileFilter86.matches(path87);
        java.nio.file.Path path89 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes90 = null;
        java.nio.file.FileVisitResult fileVisitResult91 = iOFileFilter86.accept(path89, basicFileAttributes90);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter92 = iOFileFilter52.or(iOFileFilter86);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter93 = iOFileFilter86.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter94 = iOFileFilter86.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter95 = iOFileFilter44.and(iOFileFilter94);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker96 = new org.apache.rat.walker.ArchiveWalker(file0, (java.io.FilenameFilter) iOFileFilter44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iOFileFilter44);
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertNotNull(iOFileFilter52);
        org.junit.Assert.assertNull(filenameFilter55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet57);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders58 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders58.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertTrue("'" + licenseFilter63 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter63.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter68);
        org.junit.Assert.assertTrue("'" + licenseFilter69 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter69.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet70);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders71 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders71.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic75);
        org.junit.Assert.assertTrue("'" + licenseFilter76 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter76.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier82);
        org.junit.Assert.assertTrue("'" + level84 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level84.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult91 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult91.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter92);
        org.junit.Assert.assertNotNull(iOFileFilter93);
        org.junit.Assert.assertNotNull(iOFileFilter94);
        org.junit.Assert.assertNotNull(iOFileFilter95);
    }

    @Test
    public void test09812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09812");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        java.util.regex.Pattern pattern7 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher8 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern7);
        java.lang.String str9 = simpleRegexMatcher8.toString();
        simpleRegexMatcher8.reset();
        java.lang.String str11 = simpleRegexMatcher8.getId();
        org.apache.rat.license.ILicense.Builder builder12 = builder5.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher8);
        org.apache.rat.license.ILicense.Builder builder14 = builder5.setId("MathcerRefBuildernull");
        org.apache.rat.analysis.IHeaderMatcher.Builder builder15 = null;
        org.apache.rat.license.ILicense.Builder builder16 = builder14.setMatcher(builder15);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "5eaa3dc6-8098-4373-beda-c95f14be8b17" + "'", str9, "5eaa3dc6-8098-4373-beda-c95f14be8b17");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "5eaa3dc6-8098-4373-beda-c95f14be8b17" + "'", str11, "5eaa3dc6-8098-4373-beda-c95f14be8b17");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test09813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09813");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier27 = reportConfiguration1.getOutput();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = reportConfiguration43.getLicenses(licenseFilter45);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter52);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier58 = reportConfiguration57.getOutput();
        reportConfiguration30.setOut(outputStreamIOSupplier58);
        org.apache.rat.utils.Log.Level level60 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration30.logLicenseCollisions(level60);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter62 = reportConfiguration30.getDirectoryFilter();
        java.nio.file.Path path63 = null;
        boolean boolean64 = iOFileFilter62.matches(path63);
        java.nio.file.Path path65 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes66 = null;
        java.nio.file.FileVisitResult fileVisitResult67 = iOFileFilter62.accept(path65, basicFileAttributes66);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter68 = iOFileFilter62.negate();
        reportConfiguration1.setDirectoryFilter(iOFileFilter62);
        java.nio.file.Path path70 = null;
        boolean boolean71 = iOFileFilter62.matches(path70);
        java.nio.file.Path path72 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes73 = null;
        java.nio.file.FileVisitResult fileVisitResult74 = iOFileFilter62.accept(path72, basicFileAttributes73);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier27);
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier58);
        org.junit.Assert.assertTrue("'" + level60 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level60.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult67 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult67.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult74 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult74.equals(java.nio.file.FileVisitResult.TERMINATE));
    }

    @Test
    public void test09814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09814");
        org.apache.rat.api.MetaData metaData1 = new org.apache.rat.api.MetaData();
        java.lang.String str3 = metaData1.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str5 = metaData1.value("W3C Document Copyright");
        boolean boolean7 = metaData1.clear("hi!");
        metaData1.clear();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        java.io.FilenameFilter filenameFilter11 = reportConfiguration10.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet13 = reportConfiguration10.getLicenses(licenseFilter12);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders14 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration10.setAddLicenseHeaders(addLicenseHeaders14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = org.apache.rat.Reporter.report(reportConfiguration17);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter19);
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter19);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter32);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration10.getInputFileFilter();
        reportConfiguration10.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable39 = null;
        reportConfiguration10.setReportable(iReportable39);
        org.apache.rat.Defaults.Builder builder42 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults43 = builder42.build();
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration45.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet48 = reportConfiguration45.getLicenses(licenseFilter47);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders49 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration45.setAddLicenseHeaders(addLicenseHeaders49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter54);
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter54);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        java.io.FilenameFilter filenameFilter59 = reportConfiguration58.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet61 = reportConfiguration58.getLicenses(licenseFilter60);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders62 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration58.setAddLicenseHeaders(addLicenseHeaders62);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter67 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration65, licenseFilter67);
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter67);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet70 = reportConfiguration45.getLicenseFamilies(licenseFilter67);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet71 = defaults43.getLicenses(licenseFilter67);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet72 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet71);
        org.apache.rat.license.ILicense iLicense73 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet71);
        reportConfiguration10.addLicense(iLicense73);
        java.lang.String str75 = iLicense73.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily76 = iLicense73.getLicenseFamily();
        org.apache.rat.license.ILicenseFamily iLicenseFamily77 = iLicense73.getLicenseFamily();
        org.apache.rat.license.ILicenseFamily iLicenseFamily78 = iLicense73.getLicenseFamily();
        metaData1.reportOnLicense(iLicense73);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher80 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 1", (org.apache.rat.analysis.IHeaderMatcher) iLicense73);
        org.apache.rat.license.ILicenseFamily iLicenseFamily81 = iLicense73.getLicenseFamily();
        java.lang.String str82 = iLicense73.getNotes();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet13);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders14 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders14.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(defaults43);
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet48);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders49 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders49.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet61);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders62 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders62.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertTrue("'" + licenseFilter67 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter67.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet70);
        org.junit.Assert.assertNotNull(iLicenseSet71);
        org.junit.Assert.assertNotNull(iLicense73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "BSD-3" + "'", str75, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily76);
        org.junit.Assert.assertNotNull(iLicenseFamily77);
        org.junit.Assert.assertNotNull(iLicenseFamily78);
        org.junit.Assert.assertNotNull(iLicenseFamily81);
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test09815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09815");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        java.lang.String str9 = iLicenseFamilyBuilder0.getCategory();
        java.lang.String str10 = iLicenseFamilyBuilder0.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MIT  " + "'", str8, "MIT  ");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MIT  " + "'", str9, "MIT  ");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MIT  " + "'", str10, "MIT  ");
    }

    @Test
    public void test09816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09816");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder11 = copyrightBuilder7.setEnd("d25f13bc-1910-4451-97b5-b72663551a5d");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder13 = copyrightBuilder7.setId("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher14 = copyrightBuilder7.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(copyrightBuilder11);
        org.junit.Assert.assertNotNull(abstractBuilder13);
        org.junit.Assert.assertNotNull(iHeaderMatcher14);
    }

    @Test
    public void test09817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09817");
        java.lang.String str1 = org.apache.rat.document.impl.guesser.GuessUtils.normalise("org/a");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "A" + "'", str1, "A");
    }

    @Test
    public void test09818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09818");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray0 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList1 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1, iLicenseFamilyArray0);
        org.apache.rat.policy.DefaultPolicy defaultPolicy3 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet4 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.api.Document document5 = null;
        defaultPolicy3.analyse(document5);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense7 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense7.setLicenseFamilyName("hi!");
        java.lang.String str10 = fullTextMatchingLicense7.getLicenseFamilyCategory();
        java.lang.String str11 = fullTextMatchingLicense7.getLicenseFamilyName();
        fullTextMatchingLicense7.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense7.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = fullTextMatchingLicense7.getLicenseFamily();
        defaultPolicy3.add(iLicenseFamily16);
        org.apache.rat.license.ILicense[] iLicenseArray18 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet19 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet19, iLicenseArray18);
        java.lang.String[] strArray33 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory36 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet19, (java.util.Collection<java.lang.String>) strList34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet38 = licenseSetFactory36.getLicenseFamilies(licenseFilter37);
        org.apache.rat.policy.DefaultPolicy defaultPolicy39 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet38);
        org.apache.rat.license.ILicenseFamily iLicenseFamily40 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily16, iLicenseFamilySet38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = iLicenseFamily40.getFamilyName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilyArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet4);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily16);
        org.junit.Assert.assertNotNull(iLicenseArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet38);
        org.junit.Assert.assertNull(iLicenseFamily40);
    }

    @Test
    public void test09819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09819");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("9340895e-47fd-411d-8917-58c71f9a32c4", "6486879ffc814b57aec7c4c77d540c30");
        boolean boolean4 = fullTextMatcher2.doMatch("Datum [ name ='http://org/apache/rat/meta-data#FileCategory',value ='standard ']");
        fullTextMatcher2.reset();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09820");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("d4148d3a-edbc-4672-b347-0fa619553f91", pattern1);
        simpleRegexMatcher2.reset();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = simpleRegexMatcher2.doMatch("f0e63aab-6bbb-429b-a543-8d03caca5b69");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09821");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("RegexBuilder: 255ef7d8-e270-4908-9de7-bebc7df6eb88");
    }

    @Test
    public void test09822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09822");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        java.util.regex.Pattern pattern2 = null;
        headerBean0.setHeaderPattern(pattern2);
        boolean boolean4 = headerBean0.isMatch();
        java.util.regex.Pattern pattern5 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern6 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern7 = headerBean0.getHeaderPattern();
        boolean boolean8 = headerBean0.isMatch();
        java.util.regex.Pattern pattern9 = headerBean0.getHeaderPattern();
        headerBean0.setMatch(true);
        java.util.regex.Pattern pattern12 = headerBean0.getHeaderPattern();
        headerBean0.setMatch(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(pattern5);
        org.junit.Assert.assertNull(pattern6);
        org.junit.Assert.assertNull(pattern7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(pattern9);
        org.junit.Assert.assertNull(pattern12);
    }

    @Test
    public void test09823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09823");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        simpleLicenseFamily0.setFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str3 = simpleLicenseFamily0.toString();
        simpleLicenseFamily0.setFamilyName("f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        simpleLicenseFamily0.setFamilyCategory("1c811654-2294-4c6c-9ed9-06ae9a7a75af");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "null http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str3, "null http://org/apache/rat/meta-data#LicenseFamilyName");
    }

    @Test
    public void test09824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09824");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinary("f7c80ac5-f6d7-4a47-993b-a27ea27d7efb");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09825");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        java.lang.String str2 = matcherRefBuilder0.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap3 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder4 = matcherRefBuilder0.setMatchers(strMap3);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap5 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder0.setMatchers(strMap5);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder0.setMatchers(strMap7);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder0.setRefId("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        java.lang.String str11 = matcherRefBuilder0.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = matcherRefBuilder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MathcerRefBuilder: null" + "'", str2, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str11, "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
    }

    @Test
    public void test09826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09826");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setNotes("d8d2dbc5-dfb4-44f5-bfba-1260a4a118a6");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    }

    @Test
    public void test09827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09827");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        simpleRegexMatcher3.reset();
        java.lang.String str5 = simpleRegexMatcher3.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 1", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = simpleRegexMatcher3.doMatch("Copyright Builder: s:OASIS e:null o:null");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "b3be50b8-754a-4bf7-8e52-feb5f82cde53" + "'", str5, "b3be50b8-754a-4bf7-8e52-feb5f82cde53");
    }

    @Test
    public void test09828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09828");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.license.ILicense[] iLicenseArray3 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet4 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet4, iLicenseArray3);
        java.lang.String[] strArray18 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory21 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4, (java.util.Collection<java.lang.String>) strList19);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = licenseSetFactory21.getLicenses(licenseFilter45);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet49);
        org.apache.rat.utils.Log log51 = reportConfiguration1.getLog();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration1);
        boolean boolean53 = reportConfiguration1.isAddingLicenses();
        org.apache.rat.report.IReportable iReportable54 = null;
        reportConfiguration1.setReportable(iReportable54);
        org.apache.rat.configuration.Format format56 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader57 = format56.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = licenseReader57.readLicenses();
        java.lang.String[] strArray64 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet65 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        boolean boolean68 = strSet65.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean70 = strSet65.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction71 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet72 = strSet65.setMsgFormat(strFunction71);
        boolean boolean73 = strSet65.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory74 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet58, (java.util.Collection<java.lang.String>) strSet65);
        java.lang.String[] strArray80 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet81 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        boolean boolean84 = strSet81.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean86 = strSet81.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction87 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet88 = strSet81.setMsgFormat(strFunction87);
        java.util.Spliterator<java.lang.String> strSpliterator89 = strSet81.spliterator();
        boolean boolean91 = strSet81.addIfNotPresent("");
        org.apache.rat.license.LicenseSetFactory licenseSetFactory92 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet58, (java.util.Collection<java.lang.String>) strSet81);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet58);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(iLicenseArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + format56 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format56.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader57);
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(strSpliterator89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test09829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09829");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("MIT  ");
        java.lang.String str6 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder8 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("f300711b-0269-45ff-a34e-20094c87f793");
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyName("W3CSoftwareCopyrightAC588FB847FF4C8AB1924B692AC6762C");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MIT  " + "'", str6, "MIT  ");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test09830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09830");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setNotes("Copyright Builder: s:null e:null o:null");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily10 = fullTextMatchingLicense0.getLicenseFamily();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test09831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09831");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.MatcherBuilderTracker.addBuilder("Copyright Builder: s:null e:ba9961f9-a0de-4a54-bd1f-a2e9df26a188 o:The MIT License", "98cc239df17244c194849e4e6c61c9dc");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: java.lang.ClassNotFoundException: Copyright Builder: s:null e:ba9961f9-a0de-4a54-bd1f-a2e9df26a188 o:The MIT License");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09832");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        java.io.FilenameFilter filenameFilter12 = reportConfiguration1.getInputFileFilter();
        boolean boolean13 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier14 = reportConfiguration1.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter15 = reportConfiguration1.getDirectoryFilter();
        java.net.URL uRL16 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier14);
        org.junit.Assert.assertNotNull(iOFileFilter15);
    }

    @Test
    public void test09833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09833");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        reportConfiguration1.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log5 = reportConfiguration1.getLog();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier6 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier6);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter8 = reportConfiguration1.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.filefilter.IOFileFilter iOFileFilter10 = iOFileFilter8.and(iOFileFilter9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: fileFilter");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier6);
        org.junit.Assert.assertNotNull(iOFileFilter8);
    }

    @Test
    public void test09834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09834");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        java.io.FilenameFilter filenameFilter5 = reportConfiguration4.getInputFileFilter();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration4.setAddLicenseHeaders(addLicenseHeaders6);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.configuration.Format format10 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader11 = format10.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader12 = format10.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader13 = format10.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = licenseReader13.readLicenses();
        org.apache.rat.license.ILicense iLicense15 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet14);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet16 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet14);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet14);
        org.apache.rat.report.IReportable iReportable18 = null;
        reportConfiguration1.setReportable(iReportable18);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(filenameFilter5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
        org.junit.Assert.assertTrue("'" + format10 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format10.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader11);
        org.junit.Assert.assertNotNull(matcherReader12);
        org.junit.Assert.assertNotNull(licenseReader13);
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertNull(iLicense15);
    }

    @Test
    public void test09835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09835");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        reportConfiguration2.addApprovedLicenseCategory("archi");
        reportConfiguration2.addApprovedLicenseCategory("null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        java.io.FilenameFilter filenameFilter7 = reportConfiguration2.getInputFileFilter();
        java.io.File file8 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration2.setOut(file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter7);
    }

    @Test
    public void test09836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09836");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.Spliterator<java.lang.String> strSpliterator14 = strSet6.spliterator();
        boolean boolean16 = strSet6.addIfNotPresent("");
        strSet6.clear();
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic20 = org.apache.rat.Reporter.report(reportConfiguration19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.utils.ReportingSet.Options options24 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration22.licenseDuplicateOption(options24);
        reportConfiguration19.familyDuplicateOption(options24);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier27 = reportConfiguration19.getWriter();
        boolean boolean28 = reportConfiguration19.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter29 = reportConfiguration19.getInputFileFilter();
        java.io.FilenameFilter filenameFilter30 = reportConfiguration19.getInputFileFilter();
        boolean boolean31 = reportConfiguration19.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier32 = reportConfiguration19.getStyleSheet();
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        reportConfiguration34.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet38 = reportConfiguration34.getApprovedLicenseCategories();
        java.io.FilenameFilter filenameFilter39 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.rat.utils.ReportingSet.Options options43 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration41.licenseDuplicateOption(options43);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet46 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily47 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet46);
        org.apache.rat.policy.DefaultPolicy defaultPolicy48 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet46);
        reportConfiguration41.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet46);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet50 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray51 = strSet50.toArray();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory52 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet46, (java.util.Collection<java.lang.String>) strSet50);
        reportConfiguration34.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet50);
        org.apache.rat.document.ToNameTransformer toNameTransformer54 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog55 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder56 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder58 = builder56.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher62 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state63 = copyrightMatcher62.finalizeState();
        org.apache.rat.license.ILicense.Builder builder64 = builder58.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher62);
        org.apache.rat.license.ILicense.Builder builder66 = builder64.setLicenseFamilyCategory("");
        defaultLog55.error((java.lang.Object) builder66);
        java.lang.Object obj68 = toNameTransformer54.transform((java.lang.Object) defaultLog55);
        org.apache.rat.utils.Log log69 = null;
        org.apache.rat.ReportConfiguration reportConfiguration70 = new org.apache.rat.ReportConfiguration(log69);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic71 = org.apache.rat.Reporter.report(reportConfiguration70);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.utils.ReportingSet.Options options75 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration73.licenseDuplicateOption(options75);
        reportConfiguration70.familyDuplicateOption(options75);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier78 = reportConfiguration70.getWriter();
        boolean boolean79 = reportConfiguration70.isAddingLicensesForced();
        org.apache.rat.utils.Log log80 = null;
        org.apache.rat.ReportConfiguration reportConfiguration81 = new org.apache.rat.ReportConfiguration(log80);
        reportConfiguration81.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level84 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration81.logFamilyCollisions(level84);
        reportConfiguration70.logLicenseCollisions(level84);
        defaultLog55.setLevel(level84);
        boolean boolean88 = strSet50.equals((java.lang.Object) level84);
        reportConfiguration19.logFamilyCollisions(level84);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet90 = strSet6.setLogLevel(level84);
        boolean boolean92 = strSet6.addIfNotPresent("39a7f852-2e6c-43df-83d1-8adf2fee5ca9");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(claimStatistic20);
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + options24 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options24.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(inputStreamIOSupplier32);
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNull(filenameFilter39);
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertTrue("'" + options43 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options43.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilySet46);
        org.junit.Assert.assertNull(iLicenseFamily47);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(defaultLog55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + state63 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state63.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNull(claimStatistic71);
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertTrue("'" + options75 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options75.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + level84 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level84.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test09837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09837");
        org.apache.rat.license.ILicenseFamily.Builder builder0 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str1 = builder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = builder0.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = builder3.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = builder5.setLicenseFamilyCategory("641dafc1-13c3-45d4-8272-f36f10392c53");
        org.apache.rat.license.ILicenseFamily.Builder builder9 = builder7.setLicenseFamilyCategory("ApacheLicenseVersion20");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test09838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09838");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null;
        claimStatistic0.setDocumentCategoryMap(strMap1);
        int int3 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap4 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumApproved(256);
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        claimStatistic0.setDocumentCategoryMap(strMap7);
        claimStatistic0.setNumGenerated(32);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strMap4);
    }

    @Test
    public void test09839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09839");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.api.MetaData.Datum datum10 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_2;
        boolean boolean11 = strSet6.equals((java.lang.Object) datum10);
        boolean boolean12 = strSet6.isEmpty();
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier16 = reportConfiguration14.getOutput();
        org.apache.rat.license.ILicense iLicense17 = null;
        reportConfiguration14.addLicense(iLicense17);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults20 = builder19.build();
        reportConfiguration14.setFrom(defaults20);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = defaults20.getLicenses(licenseFilter22);
        java.lang.String[] strArray29 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet30 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        boolean boolean33 = strSet30.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean35 = strSet30.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction36 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet37 = strSet30.setMsgFormat(strFunction36);
        java.util.Spliterator<java.lang.String> strSpliterator38 = strSet30.spliterator();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory39 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet23, (java.util.Collection<java.lang.String>) strSet30);
        java.lang.Object[] objArray40 = strSet30.toArray();
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.report.IReportable iReportable44 = null;
        reportConfiguration42.setReportable(iReportable44);
        org.apache.rat.license.ILicense iLicense46 = null;
        reportConfiguration42.addLicense(iLicense46);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray49 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList50 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList50, iLicenseFamilyArray49);
        org.apache.rat.policy.DefaultPolicy defaultPolicy52 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList50);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet53 = defaultPolicy52.getApprovedLicenseNames();
        org.apache.rat.license.ILicenseFamily iLicenseFamily54 = org.apache.rat.license.LicenseFamilySetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", iLicenseFamilySet53);
        reportConfiguration42.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet53);
        boolean boolean56 = strSet30.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet53);
        org.apache.rat.policy.DefaultPolicy defaultPolicy57 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet53);
        boolean boolean58 = strSet6.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet53);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(datum10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(defaults20);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(strSpliterator38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet53);
        org.junit.Assert.assertNull(iLicenseFamily54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test09840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09840");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter16 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter19 = xmlWriter1.attribute((java.lang.CharSequence) "9d334763-6150-4fa3-86d4-32f09aebbaad", (java.lang.CharSequence) "Copyright Builder: s:null e:6486879ffc814b57aec7c4c77d540c30 o:null");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09841");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getDocumentCategoryMap();
        int int10 = claimStatistic0.getNumGenerated();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = null;
        claimStatistic0.setDocumentCategoryMap(strMap11);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test09842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09842");
        java.lang.String[] strArray6 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean7 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Copyright Builder: s:null e:.cvsignore o:null", strArray6);
        boolean boolean8 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("http://org/apache/rat/meta-data#HeaderCategory", strArray6);
        boolean boolean9 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("NotBuilder: MathcerRefBuilder: null", strArray6);
        boolean boolean10 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", strArray6);
        boolean boolean11 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='W3C Software Copyright ']", strArray6);
        boolean boolean12 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("ARCHIVEW3CD", strArray6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09843");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str10 = metaData0.value("58515fd1-71f9-42a1-b033-b509624129a7");
        org.apache.rat.api.MetaData.Datum datum12 = metaData0.get("");
        org.apache.rat.api.MetaData.Datum datum14 = metaData0.get("Copyright Builder: s:.cvsignore e:.gitignore o:null");
        org.apache.rat.api.MetaData.Datum datum16 = metaData0.get("bd015714-405b-4304-9faa-36efad80e6e6 W3CD ");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(datum12);
        org.junit.Assert.assertNull(datum14);
        org.junit.Assert.assertNull(datum16);
    }

    @Test
    public void test09844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09844");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        metaData0.clear();
        org.apache.rat.api.MetaData.Datum datum8 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_1;
        metaData0.set(datum8);
        metaData0.clear();
        org.apache.rat.api.MetaData.Datum datum11 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_CDLL1;
        java.lang.String str12 = datum11.getName();
        metaData0.add(datum11);
        java.lang.String str14 = datum11.getName();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(datum8);
        org.junit.Assert.assertNotNull(datum11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyCategory" + "'", str12, "http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyCategory" + "'", str14, "http://org/apache/rat/meta-data#LicenseFamilyCategory");
    }

    @Test
    public void test09845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09845");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isKeystore("788fd438-864a-45bf-b3f2-b0665bd16acd");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09846");
        org.apache.rat.license.ILicense.Builder builder0 = new org.apache.rat.license.ILicense.Builder();
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder1);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = allBuilder1.setId("binary");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder6 = allBuilder1.setId("http://org/apache/rat/meta-data");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = allBuilder1.build();
        org.junit.Assert.assertNotNull(allBuilder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(abstractBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
    }

    @Test
    public void test09847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09847");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        java.lang.String str2 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder4 = regexBuilder0.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder6 = regexBuilder4.setExpr("AL   ");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder8 = regexBuilder4.setExpr("TextBuilder: true");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder10 = regexBuilder4.setExpr("dcae14f6-99fc-4a48-a420-37c965fde608");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RegexBuilder: null" + "'", str2, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder4);
        org.junit.Assert.assertNotNull(regexBuilder6);
        org.junit.Assert.assertNotNull(regexBuilder8);
        org.junit.Assert.assertNotNull(regexBuilder10);
    }

    @Test
    public void test09848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09848");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.utils.Log.Level level6 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logLicenseCollisions(level6);
        org.apache.rat.report.IReportable iReportable8 = reportConfiguration1.getReportable();
        org.apache.rat.report.IReportable iReportable9 = reportConfiguration1.getReportable();
        org.apache.rat.utils.ReportingSet.Options options10 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration1.licenseDuplicateOption(options10);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        boolean boolean16 = reportConfiguration13.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier17 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration13.setStyleSheet(inputStreamIOSupplier17);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier17);
        java.lang.String[] strArray25 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet26 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        boolean boolean29 = strSet26.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean31 = strSet26.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction32 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet33 = strSet26.setMsgFormat(strFunction32);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet35 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily36 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet35);
        boolean boolean37 = strSet26.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet35);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet39 = strSet26.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray40 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList41 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList41, iLicenseFamilyArray40);
        org.apache.rat.policy.DefaultPolicy defaultPolicy43 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList41);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet44 = defaultPolicy43.getApprovedLicenseNames();
        boolean boolean45 = strSet39.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet44);
        java.util.stream.Stream<java.lang.String> strStream46 = strSet39.stream();
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet39);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + level6 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level6.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(iReportable8);
        org.junit.Assert.assertNull(iReportable9);
        org.junit.Assert.assertTrue("'" + options10 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options10.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(iLicenseFamilySet35);
        org.junit.Assert.assertNull(iLicenseFamily36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strStream46);
    }

    @Test
    public void test09849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09849");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder2 = copyrightBuilder0.setStart("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        boolean boolean3 = copyrightBuilder2.hasId();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder5 = copyrightBuilder2.setId("6620e9ee-d651-4c18-8162-edad6d18368e");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder2.setEnd("MathcerRefBuilder: 3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setOwner("390c23ba-3dd0-46e7-95a7-28fcb417054c");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder11 = copyrightBuilder7.setStart("f0e63aab-6bbb-429b-a543-8d03caca5b69");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertNotNull(copyrightBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(abstractBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertNotNull(copyrightBuilder11);
    }

    @Test
    public void test09850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09850");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        simpleLicenseFamily0.setFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        simpleLicenseFamily0.setFamilyCategory("c523095e-4421-4cc4-93e2-039f23b91f76");
        simpleLicenseFamily0.setFamilyCategory(".cvsignore");
        simpleLicenseFamily0.setFamilyCategory("MathcerRefBuilder: AllBuilder:");
    }

    @Test
    public void test09851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09851");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader5 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet6 = licenseReader5.readFamilies();
        java.util.SortedSet<java.lang.String> strSet7 = licenseReader5.approvedLicenseId();
        java.net.URL uRL8 = null;
        // The following exception was thrown during execution in test generation
        try {
            licenseReader5.addLicenses(uRL8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(matcherReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(licenseReader4);
        org.junit.Assert.assertNotNull(licenseReader5);
        org.junit.Assert.assertNotNull(iLicenseFamilySet6);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test09852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09852");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        org.apache.rat.license.ILicenseFamily iLicenseFamily10 = null;
        reportConfiguration1.addFamily(iLicenseFamily10);
        java.lang.String str12 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier16 = reportConfiguration14.getOutput();
        org.apache.rat.license.ILicense iLicense17 = null;
        reportConfiguration14.addLicense(iLicense17);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults20 = builder19.build();
        reportConfiguration14.setFrom(defaults20);
        org.apache.rat.license.ILicense[] iLicenseArray22 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet23 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet23, iLicenseArray22);
        java.lang.String[] strArray37 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory40 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet23, (java.util.Collection<java.lang.String>) strList38);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet42 = licenseSetFactory40.getLicenseFamilies(licenseFilter41);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = defaults20.getLicenses(licenseFilter41);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic46 = org.apache.rat.Reporter.report(reportConfiguration45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.utils.ReportingSet.Options options50 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration48.licenseDuplicateOption(options50);
        reportConfiguration45.familyDuplicateOption(options50);
        boolean boolean53 = reportConfiguration45.isStyleReport();
        org.apache.rat.license.ILicense[] iLicenseArray54 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet55 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet55, iLicenseArray54);
        java.lang.String[] strArray69 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory72 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet55, (java.util.Collection<java.lang.String>) strList70);
        java.io.FilenameFilter filenameFilter73 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList70);
        java.io.FilenameFilter filenameFilter74 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList70);
        reportConfiguration45.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList70);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory76 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet43, (java.util.Collection<java.lang.String>) strList70);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet43);
        reportConfiguration1.addApprovedLicenseCategory("9ec38a8d-0e0f-4c31-8d12-d6138412a101");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense80 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense80.setLicenseFamilyName("hi!");
        java.lang.String str83 = fullTextMatchingLicense80.getLicenseFamilyCategory();
        java.lang.String str84 = fullTextMatchingLicense80.getLicenseFamilyName();
        fullTextMatchingLicense80.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense80.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense80.setLicenseFamilyCategory("d25f13bc-1910-4451-97b5-b72663551a5d");
        java.lang.String str91 = fullTextMatchingLicense80.getLicenseFamilyName();
        fullTextMatchingLicense80.setNotes("GPL3 ");
        java.lang.String str94 = fullTextMatchingLicense80.getNotes();
        fullTextMatchingLicense80.setNotes("F FALSE");
        org.apache.rat.license.ILicenseFamily iLicenseFamily97 = fullTextMatchingLicense80.getLicenseFamily();
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily97);
        java.lang.String str99 = iLicenseFamily97.getFamilyCategory();
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(defaults20);
        org.junit.Assert.assertNotNull(iLicenseArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet42);
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertNull(claimStatistic46);
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + options50 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options50.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(iLicenseArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(filenameFilter73);
        org.junit.Assert.assertNotNull(filenameFilter74);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "SpdxBuilder: null" + "'", str91, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "GPL3 " + "'", str94, "GPL3 ");
        org.junit.Assert.assertNotNull(iLicenseFamily97);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "d25f1" + "'", str99, "d25f1");
    }

    @Test
    public void test09853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09853");
        boolean boolean1 = org.apache.rat.document.impl.guesser.NoteGuesser.isNote("1ae8731f-79a7-4cad-acdb-c0d723cb01e2");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09854");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isAudio("e8abd0ba-267e-45d2-b832-2909d34ca0b2");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09855");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        reportConfiguration1.setCopyrightMessage("MANIFEST.MF");
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier5 = reportConfiguration1.getOutput();
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic8 = org.apache.rat.Reporter.report(reportConfiguration7);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier9 = reportConfiguration7.getOutput();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders10 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration7.setAddLicenseHeaders(addLicenseHeaders10);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders10);
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier5);
        org.junit.Assert.assertNull(claimStatistic8);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier9);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders10 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders10.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
    }

    @Test
    public void test09856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09856");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.utils.Log.Level level54 = defaultLog0.getLevel();
        org.apache.rat.utils.DefaultLog defaultLog55 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder56 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder58 = builder56.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher62 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state63 = copyrightMatcher62.finalizeState();
        org.apache.rat.license.ILicense.Builder builder64 = builder58.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher62);
        org.apache.rat.license.ILicense.Builder builder66 = builder64.setLicenseFamilyCategory("");
        defaultLog55.error((java.lang.Object) builder66);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher71 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher71.reset();
        org.apache.rat.license.ILicense.Builder builder73 = builder66.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher71);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder74 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str75 = spdxBuilder74.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder77 = spdxBuilder74.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder78 = builder73.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder74);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher79 = spdxBuilder74.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder81 = spdxBuilder74.setId("ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        java.lang.String str82 = spdxBuilder74.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder84 = spdxBuilder74.setName("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        java.lang.Throwable throwable85 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.warn((java.lang.Object) "http://org/apache/rat/meta-data#LicenseFamilyCategory", throwable85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level54 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level54.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + state63 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state63.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(spdxBuilder74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "SpdxBuilder: null" + "'", str75, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(iHeaderMatcher79);
        org.junit.Assert.assertNotNull(abstractBuilder81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str82, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(spdxBuilder84);
    }

    @Test
    public void test09857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09857");
        java.lang.String str1 = org.apache.rat.analysis.matchers.FullTextMatcher.prune("http:");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "http" + "'", str1, "http");
    }

    @Test
    public void test09858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09858");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray0 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList1 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1, iLicenseFamilyArray0);
        org.apache.rat.policy.DefaultPolicy defaultPolicy3 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet4 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.api.Document document5 = null;
        defaultPolicy3.analyse(document5);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense7 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense7.setLicenseFamilyName("hi!");
        java.lang.String str10 = fullTextMatchingLicense7.getLicenseFamilyCategory();
        java.lang.String str11 = fullTextMatchingLicense7.getLicenseFamilyName();
        fullTextMatchingLicense7.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense7.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = fullTextMatchingLicense7.getLicenseFamily();
        defaultPolicy3.add(iLicenseFamily16);
        org.apache.rat.api.Document document18 = null;
        defaultPolicy3.analyse(document18);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet20 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.api.Document document21 = null;
        defaultPolicy3.analyse(document21);
        org.apache.rat.api.Document document23 = null;
        defaultPolicy3.analyse(document23);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet25 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.api.Document document26 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy3.reportLicenseApprovalClaim(document26, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilyArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet4);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily16);
        org.junit.Assert.assertNotNull(iLicenseFamilySet20);
        org.junit.Assert.assertNotNull(iLicenseFamilySet25);
    }

    @Test
    public void test09859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09859");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("http://org/apache/rat/meta-data");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = sPDXMatcherFactory0.create("7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = sPDXMatcherFactory0.create("0c5b2bd2-284e-4146-88ab-f447552c02f1");
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
    }

    @Test
    public void test09860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09860");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic3 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic3.setNumUnApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = null;
        claimStatistic3.setDocumentCategoryMap(strMap6);
        int int8 = claimStatistic3.getNumApproved();
        claimStatistic3.setNumUnApproved((int) (short) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = null;
        claimStatistic3.setLicenseFileCodeMap(strMap11);
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null;
        claimStatistic3.setLicenseFileNameMap(strMap13);
        java.util.Map<java.lang.String, java.lang.Integer> strMap15 = claimStatistic3.getLicenseFileNameMap();
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = org.apache.rat.Reporter.report(reportConfiguration17);
        org.apache.rat.report.IReportable iReportable19 = null;
        reportConfiguration17.setReportable(iReportable19);
        org.apache.rat.license.ILicense iLicense21 = null;
        reportConfiguration17.addLicense(iLicense21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.utils.ReportingSet.Options options25 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration24.licenseDuplicateOption(options25);
        reportConfiguration17.familyDuplicateOption(options25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier55 = reportConfiguration29.getOutput();
        reportConfiguration17.setOut(outputStreamIOSupplier55);
        org.apache.rat.report.IReportable iReportable57 = null;
        reportConfiguration17.setReportable(iReportable57);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier59 = reportConfiguration17.getWriter();
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        java.io.FilenameFilter filenameFilter62 = reportConfiguration61.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter63 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet64 = reportConfiguration61.getLicenses(licenseFilter63);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders65 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration61.setAddLicenseHeaders(addLicenseHeaders65);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic69 = org.apache.rat.Reporter.report(reportConfiguration68);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter70 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration68, licenseFilter70);
        org.apache.rat.Reporter.listLicenses(reportConfiguration61, licenseFilter70);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders73 = org.apache.rat.config.AddLicenseHeaders.FORCED;
        reportConfiguration61.setAddLicenseHeaders(addLicenseHeaders73);
        reportConfiguration17.setAddLicenseHeaders(addLicenseHeaders73);
        boolean boolean76 = reportConfiguration17.isStyleReport();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.RatReport ratReport77 = org.apache.rat.report.xml.XmlReportFactory.createStandardReport((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1, claimStatistic3, reportConfiguration17);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(strMap15);
        org.junit.Assert.assertNull(claimStatistic18);
        org.junit.Assert.assertTrue("'" + options25 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options25.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier55);
        org.junit.Assert.assertNotNull(printWriterIOSupplier59);
        org.junit.Assert.assertNull(filenameFilter62);
        org.junit.Assert.assertTrue("'" + licenseFilter63 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter63.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet64);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders65 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders65.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic69);
        org.junit.Assert.assertTrue("'" + licenseFilter70 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter70.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertTrue("'" + addLicenseHeaders73 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FORCED + "'", addLicenseHeaders73.equals(org.apache.rat.config.AddLicenseHeaders.FORCED));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test09861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09861");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = spdxBuilder0.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder10 = spdxBuilder0.setName("AnyBuilder:\nAllBuilder:");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = spdxBuilder10.build();
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(spdxBuilder10);
        org.junit.Assert.assertNotNull(iHeaderMatcher11);
    }

    @Test
    public void test09862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09862");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter16 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            simpleXmlClaimReporter16.startReport();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09863");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense0.setFullText("W3C  ");
        java.lang.String str11 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("http://org/apache/rat/meta-data#ApprovedLicense");
        java.lang.String str14 = fullTextMatchingLicense0.getLicenseFamilyName();
        java.lang.String str15 = fullTextMatchingLicense0.getNotes();
        org.apache.rat.license.ILicense.Builder builder16 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("977800f8-89ee-4b1f-af98-751c845064fb");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "TMF" + "'", str11, "TMF");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "SpdxBuilder: null" + "'", str14, "SpdxBuilder: null");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test09864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09864");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("902d119b-8109-446b-807f-4c6b5ad0e05d", "4bc3a3d5-58d2-4ae6-a09c-2e73ed66c833");
    }

    @Test
    public void test09865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09865");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.license.ILicense[] iLicenseArray3 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet4 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet4, iLicenseArray3);
        java.lang.String[] strArray18 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory21 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4, (java.util.Collection<java.lang.String>) strList19);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = licenseSetFactory21.getLicenses(licenseFilter45);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration1.getInputFileFilter();
        reportConfiguration1.setCopyrightMessage("SpdxBuilder: null");
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.license.ILicenseFamily iLicenseFamily59 = null;
        reportConfiguration55.addFamily(iLicenseFamily59);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter61 = reportConfiguration55.getDirectoryFilter();
        reportConfiguration1.addDirectoryFilter(iOFileFilter61);
        java.util.SortedSet<java.lang.String> strSet63 = reportConfiguration1.getApprovedLicenseCategories();
        org.apache.rat.license.ILicense iLicense64 = null;
        reportConfiguration1.addLicense(iLicense64);
        boolean boolean66 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier67 = reportConfiguration1.getWriter();
        java.util.Collection<java.lang.String> strCollection68 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.removeApprovedLicenseCategories(strCollection68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(iLicenseArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertNotNull(iOFileFilter61);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(printWriterIOSupplier67);
    }

    @Test
    public void test09866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09866");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder2.setText("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = textBuilder4.build();
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder7 = textBuilder4.setText("W3C  ");
        org.apache.rat.configuration.builders.TextBuilder textBuilder9 = textBuilder4.setText("4fcae176-e574-46ed-b9e4-dea2e2f3b458");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = textBuilder9.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder12 = textBuilder9.setText("Copyright Builder: s:null e:274c6a15-09f6-4bfd-ac53-1827770eb507 o:null");
        org.apache.rat.configuration.builders.TextBuilder textBuilder14 = textBuilder12.setText("be2fb0fb-7d6f-4a4f-bfa0-73aab0c8f703");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(textCaptureBuilder7);
        org.junit.Assert.assertNotNull(textBuilder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(textBuilder12);
        org.junit.Assert.assertNotNull(textBuilder14);
    }

    @Test
    public void test09867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09867");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder65 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str66 = copyrightBuilder65.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder68 = copyrightBuilder65.setEnd(".cvsignore");
        boolean boolean69 = copyrightBuilder65.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder71 = copyrightBuilder65.setEnd("notice");
        defaultLog0.debug((java.lang.Object) "notice");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender73 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log.Level level74 = defaultLog0.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender76 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "50413ae6-037c-4fdd-a790-7c8514c95b09");
        org.apache.rat.ReportConfiguration reportConfiguration77 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        reportConfiguration77.removeApprovedLicenseCategory("01febb9b-15b8-4e6d-baab-05a93d5dc033");
        org.apache.rat.license.ILicense.Builder builder80 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder82 = builder80.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher84 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder85 = builder80.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher84);
        org.apache.rat.license.ILicense.Builder builder87 = builder85.setLicenseFamilyCategory("httporgapacheratmetadataLicenseFamilyName");
        org.apache.rat.license.ILicense.Builder builder89 = builder87.setId("4f6baee5-accf-42cc-adfd-2bd688852a2e");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense90 = reportConfiguration77.addLicense(builder89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: License family httporgapacheratmetadataLicenseFamilyName not found.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(copyrightBuilder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str66, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder71);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test09868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09868");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("GPL3 ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = sPDXMatcherFactory0.create("6620e9ee-d651-4c18-8162-edad6d18368e");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = sPDXMatcherFactory0.create("RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = sPDXMatcherFactory0.create("36ea766c-9e8a-44a2-b9f7-3d37940fd718");
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
    }

    @Test
    public void test09869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09869");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier16 = reportConfiguration15.getOutput();
        reportConfiguration15.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log19 = reportConfiguration15.getLog();
        org.apache.rat.utils.Log.Level level20 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration15.logFamilyCollisions(level20);
        defaultLog0.log(level20, "Copyright Builder: s:6481fb19-38f0-43f5-ab95-caf84a069ee1 e:null o:null");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory24 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher26 = sPDXMatcherFactory24.create("GPL3 ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher28 = sPDXMatcherFactory24.create("6620e9ee-d651-4c18-8162-edad6d18368e");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher30 = sPDXMatcherFactory24.create("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher32 = sPDXMatcherFactory24.create("f02d0cdc-3642-4583-b71f-dd84a120752c");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher34 = sPDXMatcherFactory24.create("223f0aba-15d4-49e9-901e-5740c137aebf null");
        java.lang.Throwable throwable35 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.error((java.lang.Object) sPDXMatcherFactory24, throwable35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier16);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + level20 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level20.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(sPDXMatcherFactory24);
        org.junit.Assert.assertNotNull(iHeaderMatcher26);
        org.junit.Assert.assertNotNull(iHeaderMatcher28);
        org.junit.Assert.assertNotNull(iHeaderMatcher30);
        org.junit.Assert.assertNotNull(iHeaderMatcher32);
        org.junit.Assert.assertNotNull(iHeaderMatcher34);
    }

    @Test
    public void test09870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09870");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        org.apache.rat.utils.Log.Level level47 = defaultLog0.getLevel();
        defaultLog0.warn((java.lang.Object) 0);
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily50 = new org.apache.rat.license.SimpleLicenseFamily();
        simpleLicenseFamily50.setFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str53 = simpleLicenseFamily50.toString();
        defaultLog0.warn((java.lang.Object) simpleLicenseFamily50);
        simpleLicenseFamily50.setFamilyCategory("SPDX:.cvsignore");
        simpleLicenseFamily50.setFamilyCategory("");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertTrue("'" + level47 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level47.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "null http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str53, "null http://org/apache/rat/meta-data#LicenseFamilyName");
    }

    @Test
    public void test09871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09871");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str2 = spdxBuilder1.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder4 = spdxBuilder1.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = spdxBuilder1.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder1.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder1.build();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher8 = new org.apache.rat.analysis.matchers.NotMatcher("TextBuilder: true", iHeaderMatcher7);
        java.lang.String str9 = notMatcher8.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state11 = notMatcher8.matches("stand");
        org.apache.rat.analysis.IHeaderMatcher.State state13 = notMatcher8.matches("SpdxBuilder: t true");
        org.apache.rat.analysis.IHeaderMatcher.State state14 = notMatcher8.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state15 = notMatcher8.finalizeState();
        org.junit.Assert.assertNotNull(spdxBuilder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "SpdxBuilder: null" + "'", str2, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "TextBuilder: true" + "'", str9, "TextBuilder: true");
// flaky:         org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state11.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
// flaky:         org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state13.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state14.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state15.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test09872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09872");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.license.ILicenseFamily iLicenseFamily7 = null;
        reportConfiguration3.addFamily(iLicenseFamily7);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter9 = reportConfiguration3.getDirectoryFilter();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        java.io.FilenameFilter filenameFilter12 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = reportConfiguration11.getLicenses(licenseFilter13);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders15 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration11.setAddLicenseHeaders(addLicenseHeaders15);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic19 = org.apache.rat.Reporter.report(reportConfiguration18);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter20);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter20);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        java.io.FilenameFilter filenameFilter25 = reportConfiguration24.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet27 = reportConfiguration24.getLicenses(licenseFilter26);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders28 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration24.setAddLicenseHeaders(addLicenseHeaders28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter33);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier39 = reportConfiguration38.getOutput();
        reportConfiguration11.setOut(outputStreamIOSupplier39);
        org.apache.rat.utils.Log.Level level41 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration11.logLicenseCollisions(level41);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter43 = reportConfiguration11.getDirectoryFilter();
        java.nio.file.Path path44 = null;
        boolean boolean45 = iOFileFilter43.matches(path44);
        java.nio.file.Path path46 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes47 = null;
        java.nio.file.FileVisitResult fileVisitResult48 = iOFileFilter43.accept(path46, basicFileAttributes47);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter49 = iOFileFilter9.or(iOFileFilter43);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter50 = iOFileFilter43.negate();
        java.nio.file.Path path51 = null;
        boolean boolean52 = iOFileFilter43.matches(path51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        java.io.FilenameFilter filenameFilter55 = reportConfiguration54.getInputFileFilter();
        boolean boolean56 = reportConfiguration54.isStyleReport();
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        reportConfiguration58.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level61 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration58.logLicenseCollisions(level61);
        reportConfiguration54.logLicenseCollisions(level61);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic69 = org.apache.rat.Reporter.report(reportConfiguration68);
        org.apache.rat.utils.ReportingSet.Options options70 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration68.licenseDuplicateOption(options70);
        reportConfiguration65.familyDuplicateOption(options70);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier73 = reportConfiguration65.getWriter();
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        reportConfiguration75.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level78 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration75.logFamilyCollisions(level78);
        reportConfiguration65.logFamilyCollisions(level78);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter81 = reportConfiguration65.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter82 = iOFileFilter81.negate();
        reportConfiguration54.setDirectoryFilter(iOFileFilter81);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter84 = iOFileFilter43.or(iOFileFilter81);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker85 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertNotNull(iOFileFilter9);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders15 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders15.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet27);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders28 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders28.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier39);
        org.junit.Assert.assertTrue("'" + level41 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level41.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult48 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult48.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter49);
        org.junit.Assert.assertNotNull(iOFileFilter50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(filenameFilter55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + level61 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level61.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertNull(claimStatistic69);
        org.junit.Assert.assertTrue("'" + options70 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options70.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier73);
        org.junit.Assert.assertTrue("'" + level78 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level78.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter81);
        org.junit.Assert.assertNotNull(iOFileFilter82);
        org.junit.Assert.assertNotNull(iOFileFilter84);
    }

    @Test
    public void test09873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09873");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap8);
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic0.getLicenseFileCodeMap();
        int int11 = claimStatistic0.getNumApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = claimStatistic0.getLicenseFileCodeMap();
        int int13 = claimStatistic0.getNumApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap14);
        java.util.Map<java.lang.String, java.lang.Integer> strMap16 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumApproved(35);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNull(strMap16);
    }

    @Test
    public void test09874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09874");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("", "META-DATA#LICENSEFAMILYNAME");
        boolean boolean4 = simpleTextMatcher2.doMatch("11370891-c763-426b-9547-57e87d991d61");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09875");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        boolean boolean4 = reportConfiguration1.isAddingLicensesForced();
        java.lang.String str5 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray6 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList7 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList7, iLicenseFamilyArray6);
        org.apache.rat.policy.DefaultPolicy defaultPolicy9 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList7);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet10 = defaultPolicy9.getApprovedLicenseNames();
        org.apache.rat.api.Document document11 = null;
        defaultPolicy9.analyse(document11);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense13 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense13.setLicenseFamilyName("hi!");
        java.lang.String str16 = fullTextMatchingLicense13.getLicenseFamilyCategory();
        java.lang.String str17 = fullTextMatchingLicense13.getLicenseFamilyName();
        fullTextMatchingLicense13.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense13.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily22 = fullTextMatchingLicense13.getLicenseFamily();
        defaultPolicy9.add(iLicenseFamily22);
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily22);
        boolean boolean25 = reportConfiguration1.isStyleReport();
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        reportConfiguration27.setStyleReport(true);
        reportConfiguration27.setStyleReport(true);
        org.apache.rat.Defaults.Builder builder35 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults36 = builder35.build();
        org.apache.rat.Defaults defaults37 = builder35.build();
        org.apache.rat.Defaults.Builder builder38 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder39 = builder38.noDefault();
        org.apache.rat.Defaults defaults40 = builder39.build();
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration55.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter64);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet68 = defaults40.getLicenses(licenseFilter64);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = defaults37.getLicenseFamilies(licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter64);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet71 = reportConfiguration1.getLicenses(licenseFilter64);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet10);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(defaults36);
        org.junit.Assert.assertNotNull(defaults37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(defaults40);
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet68);
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNotNull(iLicenseSet71);
    }

    @Test
    public void test09876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09876");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("2f61fc99-c655-43e3-a548-fa8ccadafe5e");
    }

    @Test
    public void test09877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09877");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder6 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str7 = anyBuilder6.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList8 = anyBuilder6.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = anyBuilder6.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = anyBuilder6.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList11 = anyBuilder6.getChildren();
        org.apache.rat.license.ILicense.Builder builder12 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) anyBuilder6);
        org.apache.rat.license.ILicense.Builder builder14 = builder0.setName("MathcerRefBuilder: F FALSE");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(anyBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AnyBuilder:" + "'", str7, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcherList11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test09878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09878");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter10 = xmlWriter1.openElement((java.lang.CharSequence) "bd591e20-3620-4c15-8a13-a01f851f7ec6");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: 'bd591e20-3620-4c15-8a13-a01f851f7ec6' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09879");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinary("00186AD8-9B49-4E79-B8F0-40326F09C054");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09880");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap3);
        int int5 = claimStatistic0.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = null;
        claimStatistic0.setDocumentCategoryMap(strMap6);
        int int8 = claimStatistic0.getNumGenerated();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getLicenseFileCodeMap();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test09881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09881");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher4 = new org.apache.rat.analysis.matchers.CopyrightMatcher("255ef7d8-e270-4908-9de7-bebc7df6eb88", "e484573a-f5dc-41c9-94d2-04bf4d4fa217", "390C23BA-3DD0-46E7-95A7-28FCB417054C", "Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']");
    }

    @Test
    public void test09882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09882");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str2 = spdxBuilder1.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder4 = spdxBuilder1.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = spdxBuilder1.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder1.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder1.build();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher8 = new org.apache.rat.analysis.matchers.NotMatcher("TextBuilder: true", iHeaderMatcher7);
        java.lang.String str9 = notMatcher8.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state11 = notMatcher8.matches("stand");
        java.lang.String str12 = state11.toString();
        org.junit.Assert.assertNotNull(spdxBuilder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "SpdxBuilder: null" + "'", str2, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "TextBuilder: true" + "'", str9, "TextBuilder: true");
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state11.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "t true" + "'", str12, "t true");
    }

    @Test
    public void test09883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09883");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) '4');
        int int7 = claimStatistic0.getNumApproved();
        claimStatistic0.setNumUnknown(52);
        claimStatistic0.setNumGenerated((-28));
        int int12 = claimStatistic0.getNumGenerated();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-28) + "'", int12 == (-28));
    }

    @Test
    public void test09884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09884");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("i indeterminent");
        org.apache.rat.license.ILicense.Builder builder8 = builder4.setId("a8ad4");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder9 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str10 = spdxBuilder9.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder12 = spdxBuilder9.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.lang.String str13 = spdxBuilder12.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder15 = spdxBuilder12.setName("9d334763-6150-4fa3-86d4-32f09aebbaad");
        org.apache.rat.license.ILicense.Builder builder16 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder15);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder18 = spdxBuilder15.setName("b0e37132-fd30-43ee-82db-bfeddc05a682");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(spdxBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "SpdxBuilder: null" + "'", str10, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str13, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(spdxBuilder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(spdxBuilder18);
    }

    @Test
    public void test09885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09885");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder1.setStart("OASIS");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = copyrightBuilder1.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder6 = copyrightBuilder1.setStart(".cvsignore");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder8 = copyrightBuilder1.setOwner("W3C  ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = copyrightBuilder1.setEnd("standard");
        java.lang.Object obj11 = toNameTransformer0.transform((java.lang.Object) copyrightBuilder1);
        java.util.regex.Pattern pattern14 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher15 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern14);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher16 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher15);
        org.apache.rat.analysis.IHeaderMatcher.State state17 = notMatcher16.finalizeState();
        java.lang.String str18 = notMatcher16.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state19 = notMatcher16.currentState();
        notMatcher16.reset();
        notMatcher16.reset();
        java.lang.Object obj22 = toNameTransformer0.transform((java.lang.Object) notMatcher16);
        notMatcher16.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state24 = notMatcher16.finalizeState();
        org.junit.Assert.assertNotNull(copyrightBuilder1);
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(copyrightBuilder6);
        org.junit.Assert.assertNotNull(copyrightBuilder8);
        org.junit.Assert.assertNotNull(copyrightBuilder10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state17.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GNU General Public License, version 2" + "'", str18, "GNU General Public License, version 2");
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state19.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state24.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test09886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09886");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        reportConfiguration52.removeApprovedLicenseCategory("RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.Defaults.Builder builder56 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults57 = builder56.build();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet59 = defaults57.getLicenseFamilies(licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter58);
        org.apache.rat.utils.Log log61 = reportConfiguration52.getLog();
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.utils.DefaultLog defaultLog64 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder65 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder67 = builder65.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher71 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state72 = copyrightMatcher71.finalizeState();
        org.apache.rat.license.ILicense.Builder builder73 = builder67.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher71);
        org.apache.rat.license.ILicense.Builder builder75 = builder73.setLicenseFamilyCategory("");
        defaultLog64.error((java.lang.Object) builder75);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher80 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher80.reset();
        org.apache.rat.license.ILicense.Builder builder82 = builder75.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher80);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher83 = new org.apache.rat.analysis.matchers.NotMatcher("AnyBuilder:\nAllBuilder:", (org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher80);
        org.apache.rat.analysis.IHeaderMatcher.State state84 = notMatcher83.finalizeState();
        java.lang.String str85 = notMatcher83.getId();
        notMatcher83.reset();
        log61.info((java.lang.Object) notMatcher83);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(defaults57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet59);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(defaultLog64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + state72 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state72.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + state84 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state84.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "AnyBuilder:\nAllBuilder:" + "'", str85, "AnyBuilder:\nAllBuilder:");
    }

    @Test
    public void test09887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09887");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder2.setId("GNU General Public License, version 2");
        org.apache.rat.license.ILicense.Builder builder8 = builder2.setLicenseFamilyCategory("ffa6f6cf-d0e9-457f-aa74-6d159e7c6009");
        org.apache.rat.license.ILicense.Builder builder10 = builder8.setId("bce2bde1-5081-4ff0-a8b8-c442a003d601");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test09888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09888");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        defaultLog0.info((java.lang.Object) "TextBuilder: Datum [ name ='http:...");
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.license.ILicenseFamily iLicenseFamily54 = null;
        reportConfiguration50.addFamily(iLicenseFamily54);
        reportConfiguration50.setCopyrightMessage("hi!");
        defaultLog0.error((java.lang.Object) reportConfiguration50);
        org.apache.rat.utils.Log log59 = reportConfiguration50.getLog();
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        reportConfiguration61.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet65 = reportConfiguration61.getApprovedLicenseCategories();
        boolean boolean66 = reportConfiguration61.isAddingLicensesForced();
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        java.io.FilenameFilter filenameFilter69 = reportConfiguration68.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter70 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet71 = reportConfiguration68.getLicenses(licenseFilter70);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders72 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration68.setAddLicenseHeaders(addLicenseHeaders72);
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic76 = org.apache.rat.Reporter.report(reportConfiguration75);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter77 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration75, licenseFilter77);
        org.apache.rat.Reporter.listLicenses(reportConfiguration68, licenseFilter77);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders80 = org.apache.rat.config.AddLicenseHeaders.FORCED;
        reportConfiguration68.setAddLicenseHeaders(addLicenseHeaders80);
        reportConfiguration61.setAddLicenseHeaders(addLicenseHeaders80);
        reportConfiguration50.setAddLicenseHeaders(addLicenseHeaders80);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic84 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier85 = reportConfiguration50.getWriter();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(filenameFilter69);
        org.junit.Assert.assertTrue("'" + licenseFilter70 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter70.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet71);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders72 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders72.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic76);
        org.junit.Assert.assertTrue("'" + licenseFilter77 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter77.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertTrue("'" + addLicenseHeaders80 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FORCED + "'", addLicenseHeaders80.equals(org.apache.rat.config.AddLicenseHeaders.FORCED));
        org.junit.Assert.assertNull(claimStatistic84);
        org.junit.Assert.assertNotNull(printWriterIOSupplier85);
    }

    @Test
    public void test09889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09889");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender16 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog1, "");
        java.io.Writer writer17 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter18 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer17);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter19 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter20 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter21 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter22 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter23 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter24 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter25 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter26 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter27 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter28 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter29 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter18);
        defaultLog1.error((java.lang.Object) xmlWriter18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter32 = xmlWriter18.content((java.lang.CharSequence) "e7c2816d-f550-482a-953f-5642846d0ebd");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test09890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09890");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender2 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "2953e6cb-20a5-4dcf-a9f5-85c51cc8c635");
        apacheV2LicenseAppender2.setForce(false);
        java.io.File file5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = apacheV2LicenseAppender2.getLicenseHeader(file5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
    }

    @Test
    public void test09891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09891");
        org.apache.rat.license.ILicense[] iLicenseArray0 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet1 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet1, iLicenseArray0);
        java.lang.String[] strArray15 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, (java.util.Collection<java.lang.String>) strList16);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet19 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1);
        java.util.Collection<java.lang.String> strCollection20 = null;
        org.apache.rat.license.LicenseSetFactory licenseSetFactory21 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, strCollection20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier51 = reportConfiguration50.getOutput();
        reportConfiguration23.setOut(outputStreamIOSupplier51);
        org.apache.rat.utils.Log.Level level53 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration23.logLicenseCollisions(level53);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter55 = reportConfiguration23.getDirectoryFilter();
        reportConfiguration23.setStyleReport(false);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier58 = reportConfiguration23.getOutput();
        java.lang.String[] strArray64 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet65 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        boolean boolean68 = strSet65.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean70 = strSet65.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction71 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet72 = strSet65.setMsgFormat(strFunction71);
        reportConfiguration23.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet72);
        org.apache.rat.Defaults.Builder builder74 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults75 = builder74.build();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter76 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet77 = defaults75.getLicenseFamilies(licenseFilter76);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter76);
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedSet<java.lang.String> strSet79 = licenseSetFactory21.getLicenseFamilyIds(licenseFilter76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier51);
        org.junit.Assert.assertTrue("'" + level53 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level53.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter55);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier58);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(defaults75);
        org.junit.Assert.assertTrue("'" + licenseFilter76 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter76.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseFamilySet77);
    }

    @Test
    public void test09892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09892");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("archive");
        simpleLicenseFamily0.setFamilyName("W3CD ");
        java.lang.String str7 = simpleLicenseFamily0.toString();
        simpleLicenseFamily0.setFamilyCategory("bd015714-405b-4304-9faa-36efad80e6e6");
        java.lang.String str10 = simpleLicenseFamily0.getFamilyCategory();
        java.lang.String str11 = simpleLicenseFamily0.getFamilyCategory();
        java.lang.Class<?> wildcardClass12 = simpleLicenseFamily0.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "archive W3CD " + "'", str7, "archive W3CD ");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bd015714-405b-4304-9faa-36efad80e6e6" + "'", str10, "bd015714-405b-4304-9faa-36efad80e6e6");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bd015714-405b-4304-9faa-36efad80e6e6" + "'", str11, "bd015714-405b-4304-9faa-36efad80e6e6");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test09893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09893");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter13 = xmlWriter1.content((java.lang.CharSequence) "ARCHIVEW3CD");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09894");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        reportConfiguration1.addApprovedLicenseCategory("http://org/apache/rat/meta-data");
        org.apache.rat.report.IReportable iReportable8 = reportConfiguration1.getReportable();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter9 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier13 = reportConfiguration11.getOutput();
        boolean boolean14 = reportConfiguration11.isAddingLicensesForced();
        org.apache.rat.license.ILicense[] iLicenseArray15 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet16 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet16, iLicenseArray15);
        java.lang.String[] strArray30 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory33 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet16, (java.util.Collection<java.lang.String>) strList31);
        reportConfiguration11.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet16);
        reportConfiguration11.setStyleReport(true);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier37 = reportConfiguration11.getOutput();
        reportConfiguration11.setStyleReport(false);
        boolean boolean40 = reportConfiguration11.isStyleReport();
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.report.IReportable iReportable44 = null;
        reportConfiguration42.setReportable(iReportable44);
        org.apache.rat.license.ILicense iLicense46 = null;
        reportConfiguration42.addLicense(iLicense46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.utils.ReportingSet.Options options50 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration49.licenseDuplicateOption(options50);
        reportConfiguration42.familyDuplicateOption(options50);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier55 = reportConfiguration54.getOutput();
        reportConfiguration54.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        java.io.FilenameFilter filenameFilter60 = reportConfiguration59.getInputFileFilter();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders61 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration59.setAddLicenseHeaders(addLicenseHeaders61);
        reportConfiguration54.setAddLicenseHeaders(addLicenseHeaders61);
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders61);
        reportConfiguration11.setAddLicenseHeaders(addLicenseHeaders61);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders61);
        reportConfiguration1.setStyleReport(false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iReportable8);
        org.junit.Assert.assertNotNull(iOFileFilter9);
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(iLicenseArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + options50 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options50.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier55);
        org.junit.Assert.assertNull(filenameFilter60);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders61 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders61.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
    }

    @Test
    public void test09895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09895");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("Datum [ name ='MANIFEST.MF',value ='GPL2  ']", "null null");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.currentState();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = state3.asBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 'asBoolean' should never be called on an indeterminate state");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test09896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09896");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("");
        org.apache.rat.Defaults.Builder builder10 = builder8.remove("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder12 = builder10.remove("2f88b0fb-cbe0-494f-a237-c14d76af3d76");
        org.apache.rat.Defaults.Builder builder13 = builder10.noDefault();
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder15 = builder13.remove(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test09897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09897");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        boolean boolean2 = matcherRefBuilder0.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap3 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder4 = matcherRefBuilder0.setMatchers(strMap3);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap5 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder0.setMatchers(strMap5);
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
    }

    @Test
    public void test09898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09898");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.TXT;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader2 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader4 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader5 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader6 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader7 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader8 = format0.matcherReader();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.TXT + "'", format0.equals(org.apache.rat.configuration.Format.TXT));
        org.junit.Assert.assertNull(licenseReader1);
        org.junit.Assert.assertNull(licenseReader2);
        org.junit.Assert.assertNull(licenseReader3);
        org.junit.Assert.assertNull(licenseReader4);
        org.junit.Assert.assertNull(licenseReader5);
        org.junit.Assert.assertNull(matcherReader6);
        org.junit.Assert.assertNull(matcherReader7);
        org.junit.Assert.assertNull(matcherReader8);
    }

    @Test
    public void test09899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09899");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.lang.String[] strArray45 = new java.lang.String[] { "http://org/apache/rat/meta-data", "GNU General Public License, version 2", "Modified BSD License", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "The MIT License", "OASIS", "?????", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "6486879f-fc81-4b57-aec7-c4c77d540c30", "MANIFEST.MF", "?????", "GEN  ", "GPL3 ", "http://org/apache/rat/meta-data#HeaderCategory", "DOJO ", "true", "GPL2 ", "?????", "Apache License Version 2.0", "OASIS", "W3CD ", "OASIS", "?????", "OASIS Open License", "", "standard", "GPL2 ", "GEN  ", "W3CD ", "TMF  ", ".cvsignore", "Copyright Builder: s:null e:null o:null", "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 2", "W3CD ", ".cvsignore", "Apache License Version 2.0", "GEN  ", "W3C Software Copyright", "Modified BSD License", "GPL2 ", "JAVA" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList46);
        java.lang.String str49 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        reportConfiguration51.addApprovedLicenseCategory(".cvsignore");
        boolean boolean54 = reportConfiguration51.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier55 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration51.setStyleSheet(inputStreamIOSupplier55);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier55);
        java.util.SortedSet<java.lang.String> strSet58 = reportConfiguration1.getApprovedLicenseCategories();
        reportConfiguration1.setStyleReport(false);
        java.io.File file61 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setOut(file61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier55);
        org.junit.Assert.assertNotNull(strSet58);
    }

    @Test
    public void test09900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09900");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder6 = builder0.add("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder7 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder9 = builder7.remove("SPDX:ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.Defaults.Builder builder11 = builder7.add("736352aa-a974-4b58-b2f1-4caa6178920b");
        org.apache.rat.Defaults.Builder builder13 = builder11.add("4f6baee5-accf-42cc-adfd-2bd688852a2e");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults defaults14 = builder11.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: /home/mopuser/workspace/creadur-rat/4f6baee5-accf-42cc-adfd-2bd688852a2e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test09901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09901");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        boolean boolean6 = fullTextMatcher2.doMatch("JAVA");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        org.apache.rat.analysis.IHeaderMatcher.State state8 = notMatcher7.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state10 = notMatcher7.matches("Copyright Builder: s:null e:notice o:null");
        org.apache.rat.analysis.IHeaderMatcher.State state11 = notMatcher7.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state13 = notMatcher7.matches("SpdxBuilder: true");
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state10.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state11.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state13.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test09902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09902");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap1 = claimStatistic0.getLicenseFileCodeMap();
        int int2 = claimStatistic0.getNumGenerated();
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap3);
        int int5 = claimStatistic0.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = null;
        claimStatistic0.setLicenseFileNameMap(strMap6);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test09903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09903");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.utils.ReportingSet.Options options4 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration3.licenseDuplicateOption(options4);
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        java.io.FilenameFilter filenameFilter8 = reportConfiguration7.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter9 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet10 = reportConfiguration7.getLicenses(licenseFilter9);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders11 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration7.setAddLicenseHeaders(addLicenseHeaders11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter16);
        org.apache.rat.Reporter.listLicenses(reportConfiguration7, licenseFilter16);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration7, licenseFilter29);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier35 = reportConfiguration34.getOutput();
        reportConfiguration7.setOut(outputStreamIOSupplier35);
        org.apache.rat.utils.Log.Level level37 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration7.logLicenseCollisions(level37);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter39 = reportConfiguration7.getDirectoryFilter();
        reportConfiguration3.setInputFileFilter((java.io.FilenameFilter) iOFileFilter39);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker41 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + options4 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options4.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter8);
        org.junit.Assert.assertTrue("'" + licenseFilter9 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter9.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet10);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders11 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders11.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier35);
        org.junit.Assert.assertTrue("'" + level37 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level37.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter39);
    }

    @Test
    public void test09904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09904");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        java.lang.Object[] objArray13 = strSet6.toArray();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet6.stream();
        java.util.Iterator<java.lang.String> strItor15 = strSet6.iterator();
        boolean boolean17 = strSet6.addIfNotPresent("9b58713f-df10-4eb5-a5e7-b2e82c48d768");
        strSet6.clear();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test09905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09905");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder2.setMatchers(strMap4);
        org.apache.rat.configuration.builders.AllBuilder allBuilder6 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setStart("OASIS");
        java.lang.String str10 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder15.setStart("OASIS");
        java.lang.String str18 = copyrightBuilder15.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder15.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str23 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = copyrightBuilder22.setEnd(".cvsignore");
        boolean boolean26 = copyrightBuilder22.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str28 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder27.setEnd(".cvsignore");
        boolean boolean31 = copyrightBuilder27.hasId();
        java.lang.String str32 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean38 = matcherRefBuilder37.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap39 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = matcherRefBuilder37.setMatchers(strMap39);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.lang.String str44 = matcherRefBuilder42.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder42.setMatchers(strMap45);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray47 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, allBuilder6, copyrightBuilder12, matcherRefBuilder13, copyrightBuilder15, copyrightBuilder21, copyrightBuilder22, copyrightBuilder27, copyrightBuilder33, anyBuilder36, matcherRefBuilder37, copyrightBuilder41, matcherRefBuilder42 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList48 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48, builderArray47);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder50 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder51 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str52 = copyrightBuilder51.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder53 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder51);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder55 = copyrightBuilder51.setEnd("64868");
        java.lang.String str56 = copyrightBuilder51.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder58 = copyrightBuilder51.setStart("788fd438-864a-45bf-b3f2-b0665bd16acd");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str10, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str18, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str23, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str28, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str32, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(anyBuilder36);
        org.junit.Assert.assertNotNull(matcherRefBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MathcerRefBuilder: null" + "'", str44, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(builderArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(abstractBuilder50);
        org.junit.Assert.assertNotNull(copyrightBuilder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str52, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(abstractBuilder53);
        org.junit.Assert.assertNotNull(copyrightBuilder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Copyright Builder: s:null e:64868 o:null" + "'", str56, "Copyright Builder: s:null e:64868 o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder58);
    }

    @Test
    public void test09906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09906");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher4 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state5 = copyrightMatcher4.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = copyrightMatcher4.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher("97f57b71-8f44-4dda-a148-19f50c572927", (org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher4);
        notMatcher7.reset();
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test09907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09907");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder0.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder8 = spdxBuilder0.setName("TextBuilder: true http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = spdxBuilder0.build();
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(spdxBuilder8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
    }

    @Test
    public void test09908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09908");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap8);
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic0.getLicenseFileCodeMap();
        claimStatistic0.setNumUnknown(0);
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = claimStatistic0.getDocumentCategoryMap();
        int int14 = claimStatistic0.getNumUnknown();
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test09909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09909");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setStart("archive");
        java.lang.String str4 = copyrightBuilder0.toString();
        java.lang.String str5 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder0.setStart("3e2b228d-d5ff-4444-8d8c-d614494b2426 null");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = copyrightBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher.State state9 = iHeaderMatcher8.finalizeState();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Copyright Builder: s:archive e:null o:null" + "'", str4, "Copyright Builder: s:archive e:null o:null");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Copyright Builder: s:archive e:null o:null" + "'", str5, "Copyright Builder: s:archive e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test09910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09910");
        org.apache.commons.cli.CommandLine commandLine1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.ReportConfiguration reportConfiguration2 = org.apache.rat.Report.createConfiguration("36f60d10-a0bd-4355-a2a6-3635adf29872", commandLine1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09911");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log.Level level32 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration2.logLicenseCollisions(level32);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter34 = reportConfiguration2.getDirectoryFilter();
        java.nio.file.Path path35 = null;
        boolean boolean36 = iOFileFilter34.matches(path35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        java.io.FilenameFilter filenameFilter39 = reportConfiguration38.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet41 = reportConfiguration38.getLicenses(licenseFilter40);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders42 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration38.setAddLicenseHeaders(addLicenseHeaders42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic46 = org.apache.rat.Reporter.report(reportConfiguration45);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter47);
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter47);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        java.io.FilenameFilter filenameFilter52 = reportConfiguration51.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet54 = reportConfiguration51.getLicenses(licenseFilter53);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders55 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration51.setAddLicenseHeaders(addLicenseHeaders55);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter60);
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter60);
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter60);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier66 = reportConfiguration65.getOutput();
        reportConfiguration38.setOut(outputStreamIOSupplier66);
        org.apache.rat.utils.Log.Level level68 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration38.logLicenseCollisions(level68);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter70 = reportConfiguration38.getDirectoryFilter();
        java.nio.file.Path path71 = null;
        boolean boolean72 = iOFileFilter70.matches(path71);
        java.nio.file.Path path73 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes74 = null;
        java.nio.file.FileVisitResult fileVisitResult75 = iOFileFilter70.accept(path73, basicFileAttributes74);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter76 = iOFileFilter34.or(iOFileFilter70);
        java.nio.file.Path path77 = null;
        boolean boolean78 = iOFileFilter34.matches(path77);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter79 = iOFileFilter34.negate();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker80 = new org.apache.rat.walker.ArchiveWalker(file0, (java.io.FilenameFilter) iOFileFilter79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertTrue("'" + level32 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level32.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(filenameFilter39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet41);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders42 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders42.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet54);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders55 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders55.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier66);
        org.junit.Assert.assertTrue("'" + level68 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level68.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult75 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult75.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(iOFileFilter79);
    }

    @Test
    public void test09912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09912");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("archive", "SpdxBuilder: null");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.currentState();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test09913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09913");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("ccda37f8-8aec-461c-a257-84923fc7818c", pattern1);
    }

    @Test
    public void test09914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09914");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("", "70c3a0ba-1174-4b62-ba88-76dbbb88e3b3");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = simpleTextMatcher2.matches("0356753D-7389-48E7-8D63-056FD4C4548C");
        java.lang.String str5 = state4.toString();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "i indeterminent" + "'", str5, "i indeterminent");
    }

    @Test
    public void test09915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09915");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("standard");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = sPDXMatcherFactory0.create("a3e11a81-9a98-401d-8ec7-2ff3ae515be9");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = sPDXMatcherFactory0.create("AllBuilder:\nMathcerRefBuilder: null\nAnyBuilder:\nNotBuilder: MathcerRefBuilder: null\nMathcerRefBuilder: null");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = sPDXMatcherFactory0.create("223f0aba-15d4-49e9-901e-5740c137aebf null");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = sPDXMatcherFactory0.create("1c811654-2294-4c6c-9ed9-06ae9a7a75af");
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
    }

    @Test
    public void test09916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09916");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher1 = allBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = allBuilder0.build();
        org.apache.rat.configuration.builders.AllBuilder allBuilder3 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = allBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = allBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = allBuilder3.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = copyrightBuilder7.setEnd(".cvsignore");
        boolean boolean11 = copyrightBuilder7.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = copyrightBuilder7.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder14 = allBuilder3.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder15 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        boolean boolean16 = allBuilder0.hasId();
        org.apache.rat.analysis.IHeaderMatcher.Builder builder17 = null;
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder18 = allBuilder0.add(builder17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher19 = allBuilder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iHeaderMatcher1);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(abstractBuilder14);
        org.junit.Assert.assertNotNull(abstractBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(abstractBuilder18);
    }

    @Test
    public void test09917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09917");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        reportConfiguration1.setStyleReport(false);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier30 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier30);
        boolean boolean32 = reportConfiguration1.isStyleReport();
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet37 = reportConfiguration34.getLicenses(licenseFilter36);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders38 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration34.setAddLicenseHeaders(addLicenseHeaders38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter43);
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter43);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        java.io.FilenameFilter filenameFilter48 = reportConfiguration47.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet50 = reportConfiguration47.getLicenses(licenseFilter49);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders51 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration47.setAddLicenseHeaders(addLicenseHeaders51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic55 = org.apache.rat.Reporter.report(reportConfiguration54);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter56);
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter56);
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter56);
        java.io.FilenameFilter filenameFilter60 = reportConfiguration34.getInputFileFilter();
        reportConfiguration34.setStyleReport(false);
        org.apache.rat.Defaults.Builder builder63 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder64 = builder63.noDefault();
        org.apache.rat.Defaults defaults65 = builder64.build();
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        java.io.FilenameFilter filenameFilter68 = reportConfiguration67.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter69 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet70 = reportConfiguration67.getLicenses(licenseFilter69);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders71 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration67.setAddLicenseHeaders(addLicenseHeaders71);
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic75 = org.apache.rat.Reporter.report(reportConfiguration74);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter76 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration74, licenseFilter76);
        org.apache.rat.Reporter.listLicenses(reportConfiguration67, licenseFilter76);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        java.io.FilenameFilter filenameFilter81 = reportConfiguration80.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter82 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet83 = reportConfiguration80.getLicenses(licenseFilter82);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders84 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration80.setAddLicenseHeaders(addLicenseHeaders84);
        org.apache.rat.utils.Log log86 = null;
        org.apache.rat.ReportConfiguration reportConfiguration87 = new org.apache.rat.ReportConfiguration(log86);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic88 = org.apache.rat.Reporter.report(reportConfiguration87);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter89 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration87, licenseFilter89);
        org.apache.rat.Reporter.listLicenses(reportConfiguration80, licenseFilter89);
        org.apache.rat.Reporter.listLicenses(reportConfiguration67, licenseFilter89);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet93 = defaults65.getLicenses(licenseFilter89);
        reportConfiguration34.setFrom(defaults65);
        reportConfiguration1.setFrom(defaults65);
        reportConfiguration1.setStyleReport(false);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet37);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders38 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders38.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet50);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders51 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders51.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(defaults65);
        org.junit.Assert.assertNull(filenameFilter68);
        org.junit.Assert.assertTrue("'" + licenseFilter69 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter69.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet70);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders71 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders71.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic75);
        org.junit.Assert.assertTrue("'" + licenseFilter76 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter76.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter81);
        org.junit.Assert.assertTrue("'" + licenseFilter82 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter82.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet83);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders84 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders84.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic88);
        org.junit.Assert.assertTrue("'" + licenseFilter89 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter89.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet93);
    }

    @Test
    public void test09918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09918");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str10 = metaData0.value("58515fd1-71f9-42a1-b033-b509624129a7");
        org.apache.rat.api.MetaData.Datum datum11 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_GPL2;
        metaData0.set(datum11);
        org.apache.rat.api.MetaData.Datum datum14 = metaData0.get("AL   ");
        boolean boolean16 = metaData0.clear("TextBuilder: SpdxBuilder: null");
        org.apache.rat.api.MetaData.Datum datum18 = metaData0.get("MathcerRefBuilder: 58515fd1-71f9-42a1-b033-b509624129a7");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection19 = metaData0.getData();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(datum11);
        org.junit.Assert.assertNull(datum14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(datum18);
        org.junit.Assert.assertNotNull(datumCollection19);
    }

    @Test
    public void test09919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09919");
        org.apache.commons.cli.CommandLine commandLine1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.ReportConfiguration reportConfiguration2 = org.apache.rat.Report.createConfiguration("GNU General Public License, version 1", commandLine1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09920");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.ReportingSet.Options options52 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options52);
        reportConfiguration47.familyDuplicateOption(options52);
        reportConfiguration16.licenseDuplicateOption(options52);
        reportConfiguration16.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration16.logLicenseCollisions(level62);
        defaultLog14.setLevel(level62);
        defaultLog14.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog14);
        org.apache.rat.utils.DefaultLog defaultLog69 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logFamilyCollisions(level74);
        defaultLog69.setLevel(level74);
        defaultLog14.debug((java.lang.Object) level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet13.setLogLevel(level74);
        int int79 = strSet13.size();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet81 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.policy.DefaultPolicy defaultPolicy82 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet81);
        org.apache.rat.license.ILicenseFamily iLicenseFamily83 = org.apache.rat.license.LicenseFamilySetFactory.search("MANIFEST.MF", iLicenseFamilySet81);
        boolean boolean84 = strSet13.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet81);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = strSet13.tailSet("3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder87 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str88 = anyBuilder87.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher89 = anyBuilder87.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList90 = anyBuilder87.getChildren();
        java.lang.String str91 = anyBuilder87.toString();
        java.lang.String str92 = anyBuilder87.toString();
        boolean boolean93 = strSet13.equals((java.lang.Object) anyBuilder87);
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList94 = anyBuilder87.getChildren();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder96 = anyBuilder87.setResource("42a1ccd7-5fae-417c-8b98-3ee9e6ec4b19");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + options52 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options52.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog69);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 7 + "'", int79 == 7);
        org.junit.Assert.assertNotNull(iLicenseFamilySet81);
        org.junit.Assert.assertNull(iLicenseFamily83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(anyBuilder87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "AnyBuilder:" + "'", str88, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher89);
        org.junit.Assert.assertNotNull(iHeaderMatcherList90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "AnyBuilder:" + "'", str91, "AnyBuilder:");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "AnyBuilder:" + "'", str92, "AnyBuilder:");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(iHeaderMatcherList94);
    }

    @Test
    public void test09921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09921");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("Copyright Builder: s:null e:null o:null");
        org.apache.rat.analysis.IHeaderMatcher.State state2 = fullTextMatcher1.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher3 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher1);
        fullTextMatcher1.reset();
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state2.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test09922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09922");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter15 = xmlWriter1.openElement((java.lang.CharSequence) "5fd2c009-d426-4f2e-aa5f-fa818707c48c");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: '5fd2c009-d426-4f2e-aa5f-fa818707c48c' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09923");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.lang.String[] strArray45 = new java.lang.String[] { "http://org/apache/rat/meta-data", "GNU General Public License, version 2", "Modified BSD License", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "The MIT License", "OASIS", "?????", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "6486879f-fc81-4b57-aec7-c4c77d540c30", "MANIFEST.MF", "?????", "GEN  ", "GPL3 ", "http://org/apache/rat/meta-data#HeaderCategory", "DOJO ", "true", "GPL2 ", "?????", "Apache License Version 2.0", "OASIS", "W3CD ", "OASIS", "?????", "OASIS Open License", "", "standard", "GPL2 ", "GEN  ", "W3CD ", "TMF  ", ".cvsignore", "Copyright Builder: s:null e:null o:null", "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 2", "W3CD ", ".cvsignore", "Apache License Version 2.0", "GEN  ", "W3C Software Copyright", "Modified BSD License", "GPL2 ", "JAVA" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList46);
        java.lang.String str49 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        reportConfiguration51.addApprovedLicenseCategory(".cvsignore");
        boolean boolean54 = reportConfiguration51.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier55 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration51.setStyleSheet(inputStreamIOSupplier55);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier55);
        org.apache.rat.utils.DefaultLog defaultLog58 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder59 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder61 = builder59.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher65 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state66 = copyrightMatcher65.finalizeState();
        org.apache.rat.license.ILicense.Builder builder67 = builder61.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher65);
        org.apache.rat.license.ILicense.Builder builder69 = builder67.setLicenseFamilyCategory("");
        defaultLog58.error((java.lang.Object) builder69);
        org.apache.rat.utils.Log.Level level71 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog58.log(level71, "JAVA");
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier76 = reportConfiguration75.getOutput();
        reportConfiguration75.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log79 = reportConfiguration75.getLog();
        org.apache.rat.utils.Log.Level level80 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration75.logFamilyCollisions(level80);
        defaultLog58.setLevel(level80);
        reportConfiguration1.logFamilyCollisions(level80);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier84 = reportConfiguration1.getStyleSheet();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier85 = reportConfiguration1.getStyleSheet();
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier55);
        org.junit.Assert.assertNotNull(defaultLog58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + state66 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state66.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + level71 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level71.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier76);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertTrue("'" + level80 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level80.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(inputStreamIOSupplier84);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier85);
    }

    @Test
    public void test09924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09924");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder0.setText("stand");
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder0.setText("ApacheLicenseVersion20");
        boolean boolean7 = textBuilder6.hasId();
        org.apache.rat.configuration.builders.TextBuilder textBuilder9 = textBuilder6.setText("Copyright Builder: s:null e:null o:TextBuilder: true http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder11 = textBuilder9.setId("546f9881-8eb1-4b23-9950-45cc8fae4831");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(textBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(textBuilder9);
        org.junit.Assert.assertNotNull(abstractBuilder11);
    }

    @Test
    public void test09925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09925");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder5 = builder4.noDefault();
        org.apache.rat.Defaults.Builder builder6 = builder5.noDefault();
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.Defaults.Builder builder10 = builder6.add("MathcerRefBuilder: TMF");
        org.apache.rat.Defaults.Builder builder11 = builder6.noDefault();
        org.apache.rat.Defaults.Builder builder12 = builder11.noDefault();
        java.io.File file13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder14 = builder12.remove(file13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test09926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09926");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("standard");
        boolean boolean3 = fullTextMatcher1.doMatch("AnyBuilder:");
        boolean boolean5 = fullTextMatcher1.doMatch("TextBuilder: Datum [ name ='http:...");
        org.apache.rat.analysis.IHeaderMatcher.State state6 = fullTextMatcher1.finalizeState();
        boolean boolean8 = fullTextMatcher1.doMatch("SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = fullTextMatcher1.finalizeState();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test09927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09927");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet4 = licenseReader3.readFamilies();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet5 = licenseReader3.readFamilies();
        org.apache.rat.policy.DefaultPolicy defaultPolicy6 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet5);
        org.apache.rat.license.ILicenseFamily iLicenseFamily7 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy6.add(iLicenseFamily7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(matcherReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(iLicenseFamilySet4);
        org.junit.Assert.assertNotNull(iLicenseFamilySet5);
    }

    @Test
    public void test09928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09928");
        java.lang.String str1 = org.apache.rat.document.impl.guesser.GuessUtils.normalise("f96ad0b6-2267-4692-93e4-227659f9d621");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "F96AD0B6-2267-4692-93E4-227659F9D621" + "'", str1, "F96AD0B6-2267-4692-93E4-227659F9D621");
    }

    @Test
    public void test09929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09929");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration1.logLicenseCollisions(level31);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter33 = reportConfiguration1.getDirectoryFilter();
        java.nio.file.Path path34 = null;
        boolean boolean35 = iOFileFilter33.matches(path34);
        java.nio.file.Path path36 = null;
        boolean boolean37 = iOFileFilter33.matches(path36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier40 = reportConfiguration39.getOutput();
        reportConfiguration39.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log43 = reportConfiguration39.getLog();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier44 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration39.setStyleSheet(inputStreamIOSupplier44);
        java.lang.String str46 = reportConfiguration39.getCopyrightMessage();
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration48.getLicenses(licenseFilter50);
        org.apache.rat.license.ILicenseFamily iLicenseFamily52 = null;
        reportConfiguration48.addFamily(iLicenseFamily52);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter54 = reportConfiguration48.getDirectoryFilter();
        reportConfiguration48.addApprovedLicenseCategory("GPL1 ");
        java.io.FilenameFilter filenameFilter57 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier60 = reportConfiguration59.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter61 = reportConfiguration59.getDirectoryFilter();
        java.nio.file.Path path62 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes63 = null;
        java.nio.file.FileVisitResult fileVisitResult64 = iOFileFilter61.accept(path62, basicFileAttributes63);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter65 = iOFileFilter61.negate();
        java.nio.file.Path path66 = null;
        boolean boolean67 = iOFileFilter65.matches(path66);
        reportConfiguration48.setInputFileFilter((java.io.FilenameFilter) iOFileFilter65);
        reportConfiguration39.setDirectoryFilter(iOFileFilter65);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter70 = iOFileFilter33.and(iOFileFilter65);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level31.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier40);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "MANIFEST.MF" + "'", str46, "MANIFEST.MF");
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertNotNull(iOFileFilter54);
        org.junit.Assert.assertNull(filenameFilter57);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier60);
        org.junit.Assert.assertNotNull(iOFileFilter61);
        org.junit.Assert.assertTrue("'" + fileVisitResult64 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult64.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(iOFileFilter70);
    }

    @Test
    public void test09930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09930");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getLicenseFileCodeMap();
        claimStatistic0.setNumUnApproved((int) '4');
        int int11 = claimStatistic0.getNumApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = claimStatistic0.getLicenseFileNameMap();
        int int14 = claimStatistic0.getNumApproved();
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test09931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09931");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum4 = metaData0.get("f false");
        org.apache.rat.api.MetaData.Datum datum7 = new org.apache.rat.api.MetaData.Datum("http://org/apache/rat/meta-data#FileCategory", "Copyright Builder: s:null e:.cvsignore o:null");
        metaData0.add(datum7);
        org.apache.rat.api.MetaData.Datum datum11 = new org.apache.rat.api.MetaData.Datum("eba9cdef-527a-48ca-947b-897e2e06ea31", "0356753d-7389-48e7-8d63-056fd4c4548c");
        metaData0.set(datum11);
        java.lang.String str13 = datum11.getValue();
        java.lang.String str14 = datum11.getValue();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(datum4);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0356753d-7389-48e7-8d63-056fd4c4548c" + "'", str13, "0356753d-7389-48e7-8d63-056fd4c4548c");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0356753d-7389-48e7-8d63-056fd4c4548c" + "'", str14, "0356753d-7389-48e7-8d63-056fd4c4548c");
    }

    @Test
    public void test09932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09932");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder6 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str7 = anyBuilder6.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList8 = anyBuilder6.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = anyBuilder6.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = anyBuilder6.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList11 = anyBuilder6.getChildren();
        org.apache.rat.license.ILicense.Builder builder12 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) anyBuilder6);
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher14 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("binary");
        org.apache.rat.analysis.IHeaderMatcher.State state15 = simpleTextMatcher14.finalizeState();
        boolean boolean17 = simpleTextMatcher14.doMatch("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicense.Builder builder18 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher14);
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher20 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("hi!");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher21 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher20);
        org.apache.rat.analysis.IHeaderMatcher.State state22 = notMatcher21.currentState();
        org.apache.rat.license.ILicense.Builder builder23 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher21);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher24 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher21);
        org.apache.rat.analysis.IHeaderMatcher.State state26 = notMatcher24.matches("f03158f7-b7b2-4d1f-90b1-98481344f604");
        org.apache.rat.analysis.IHeaderMatcher.State state27 = notMatcher24.currentState();
        notMatcher24.reset();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(anyBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AnyBuilder:" + "'", str7, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcherList11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state15.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state22.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state26.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state27.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test09933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09933");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("DOJO ");
        java.lang.String str7 = fullTextMatchingLicense0.getNotes();
        java.lang.String str8 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = fullTextMatchingLicense0.getLicenseFamily();
        fullTextMatchingLicense0.setNotes("ED0FAF32-F32C-46F1-A629-4FE87704CB0E");
        java.lang.String str12 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DOJO " + "'", str8, "DOJO ");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DOJO " + "'", str12, "DOJO ");
    }

    @Test
    public void test09934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09934");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender56 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "8ecb8cce06e4400f84d9ad1cf6289fda");
        org.apache.rat.utils.Log.Level level57 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.log(level57, "2A532815-B4CD-4DD0-BED4-60DFE5C0F741");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test09935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09935");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray0 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList1 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1, iLicenseFamilyArray0);
        org.apache.rat.policy.DefaultPolicy defaultPolicy3 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1);
        org.apache.rat.api.Document document4 = null;
        defaultPolicy3.analyse(document4);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet6 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.api.Document document7 = null;
        defaultPolicy3.analyse(document7);
        org.apache.rat.api.Document document9 = null;
        defaultPolicy3.analyse(document9);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet11 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.policy.DefaultPolicy defaultPolicy12 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet11);
        org.apache.rat.policy.DefaultPolicy defaultPolicy13 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet11);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet6);
        org.junit.Assert.assertNotNull(iLicenseFamilySet11);
    }

    @Test
    public void test09936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09936");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("GPL3 ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = sPDXMatcherFactory0.create("6620e9ee-d651-4c18-8162-edad6d18368e");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = sPDXMatcherFactory0.create("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = sPDXMatcherFactory0.create("W3C Software Copyright null");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = sPDXMatcherFactory0.create("TMF  ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = sPDXMatcherFactory0.create("1e96b21e-f913-4d52-87cc-09323c460281");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher14 = sPDXMatcherFactory0.create("1aed385f-a23b-478e-be6b-efdc53693766");
        org.apache.rat.analysis.IHeaderMatcher.State state15 = iHeaderMatcher14.finalizeState();
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcher12);
        org.junit.Assert.assertNotNull(iHeaderMatcher14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state15.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test09937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09937");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.not();
        java.lang.String str1 = notBuilder0.toString();
        java.lang.String str2 = notBuilder0.toString();
        org.junit.Assert.assertNotNull(notBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NotBuilder: null" + "'", str2, "NotBuilder: null");
    }

    @Test
    public void test09938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09938");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.stream.Stream<java.lang.String> strStream12 = strSet6.stream();
        org.apache.rat.utils.DefaultLog defaultLog13 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        reportConfiguration15.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level18 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration15.logFamilyCollisions(level18);
        defaultLog13.setLevel(level18);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet6.setLogLevel(level18);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet23 = strSet6.headSet("d4148d3a-edbc-4672-b347-0fa619553f91");
        strSet23.clear();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet27 = strSet23.subSet("65918b19-4e10-4957-bbc7-84760c326345", "SpdxBuilder: null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(defaultLog13);
        org.junit.Assert.assertTrue("'" + level18 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level18.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(strSet27);
    }

    @Test
    public void test09939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09939");
        boolean boolean1 = org.apache.rat.document.impl.guesser.ArchiveGuesser.isArchive("4bc3a3d5-58d2-4ae6-a09c-2e73ed66c833");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09940");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str1 = anyBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = anyBuilder0.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = anyBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = anyBuilder0.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList5 = anyBuilder0.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str8 = anyBuilder7.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList9 = anyBuilder7.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = anyBuilder7.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder11 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str12 = anyBuilder11.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList13 = anyBuilder11.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher14 = anyBuilder11.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher15 = anyBuilder11.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList16 = anyBuilder11.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder17 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str18 = notBuilder17.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap21 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder22 = matcherRefBuilder19.setMatchers(strMap21);
        org.apache.rat.configuration.builders.AllBuilder allBuilder23 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder24 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder24.setStart("OASIS");
        java.lang.String str27 = copyrightBuilder24.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder29 = copyrightBuilder24.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder30 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean31 = matcherRefBuilder30.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder32 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder34 = copyrightBuilder32.setStart("OASIS");
        java.lang.String str35 = copyrightBuilder32.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder37 = copyrightBuilder32.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder38 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str40 = copyrightBuilder39.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder42 = copyrightBuilder39.setEnd(".cvsignore");
        boolean boolean43 = copyrightBuilder39.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder44 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str45 = copyrightBuilder44.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = copyrightBuilder44.setEnd(".cvsignore");
        boolean boolean48 = copyrightBuilder44.hasId();
        java.lang.String str49 = copyrightBuilder44.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder50 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder52 = copyrightBuilder50.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder53 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder54 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean55 = matcherRefBuilder54.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap56 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = matcherRefBuilder54.setMatchers(strMap56);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder58 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder59 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean60 = matcherRefBuilder59.hasId();
        java.lang.String str61 = matcherRefBuilder59.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap62 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder63 = matcherRefBuilder59.setMatchers(strMap62);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray64 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder19, allBuilder23, copyrightBuilder29, matcherRefBuilder30, copyrightBuilder32, copyrightBuilder38, copyrightBuilder39, copyrightBuilder44, copyrightBuilder50, anyBuilder53, matcherRefBuilder54, copyrightBuilder58, matcherRefBuilder59 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList65 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList65, builderArray64);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder67 = notBuilder17.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList65);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder68 = anyBuilder11.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList65);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder69 = anyBuilder7.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList65);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder70 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList65);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder71 = anyBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) notBuilder6);
        java.lang.String str72 = notBuilder6.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder74 = notBuilder6.setResource("bc97cad8-1b92-449d-8dd7-6a0a69c8774d");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AnyBuilder:" + "'", str1, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcherList5);
        org.junit.Assert.assertNotNull(anyBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "AnyBuilder:" + "'", str8, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(anyBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AnyBuilder:" + "'", str12, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList13);
        org.junit.Assert.assertNotNull(iHeaderMatcher14);
        org.junit.Assert.assertNotNull(iHeaderMatcher15);
        org.junit.Assert.assertNotNull(iHeaderMatcherList16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NotBuilder: null" + "'", str18, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder22);
        org.junit.Assert.assertNotNull(copyrightBuilder24);
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str27, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder29);
        org.junit.Assert.assertNotNull(matcherRefBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder32);
        org.junit.Assert.assertNotNull(copyrightBuilder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str35, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder37);
        org.junit.Assert.assertNotNull(copyrightBuilder38);
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str40, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str45, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str49, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder50);
        org.junit.Assert.assertNotNull(copyrightBuilder52);
        org.junit.Assert.assertNotNull(anyBuilder53);
        org.junit.Assert.assertNotNull(matcherRefBuilder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder57);
        org.junit.Assert.assertNotNull(copyrightBuilder58);
        org.junit.Assert.assertNotNull(matcherRefBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "MathcerRefBuilder: null" + "'", str61, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder63);
        org.junit.Assert.assertNotNull(builderArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(abstractBuilder67);
        org.junit.Assert.assertNotNull(abstractBuilder68);
        org.junit.Assert.assertNotNull(abstractBuilder69);
        org.junit.Assert.assertNotNull(abstractBuilder70);
        org.junit.Assert.assertNotNull(abstractBuilder71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str72, "NotBuilder: MathcerRefBuilder: null");
    }

    @Test
    public void test09941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09941");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder1 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder3 = builder1.remove("ebc30eb7-b3ea-4f39-baea-5fea4fa0278b");
        org.apache.rat.Defaults defaults4 = builder3.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(defaults4);
    }

    @Test
    public void test09942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09942");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet8 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray9 = strSet8.toArray();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.utils.ReportingSet.Options options16 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration14.licenseDuplicateOption(options16);
        reportConfiguration11.familyDuplicateOption(options16);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier19 = reportConfiguration11.getWriter();
        boolean boolean20 = reportConfiguration11.isAddingLicensesForced();
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        reportConfiguration22.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level25 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration22.logFamilyCollisions(level25);
        reportConfiguration11.logLicenseCollisions(level25);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet28 = strSet8.setLogLevel(level25);
        java.util.stream.Stream<java.lang.String> strStream29 = strSet28.stream();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet28);
        org.apache.rat.report.IReportable iReportable31 = null;
        reportConfiguration1.setReportable(iReportable31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet37 = reportConfiguration34.getLicenses(licenseFilter36);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders38 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration34.setAddLicenseHeaders(addLicenseHeaders38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter43);
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter43);
        org.apache.rat.report.IReportable iReportable46 = null;
        reportConfiguration34.setReportable(iReportable46);
        java.lang.String str48 = reportConfiguration34.getCopyrightMessage();
        org.apache.rat.report.IReportable iReportable49 = reportConfiguration34.getReportable();
        org.apache.rat.license.ILicenseFamily.Builder builder50 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str51 = builder50.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder53 = builder50.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder55 = builder53.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder57 = builder55.setLicenseFamilyName("6620e9ee-d651-4c18-8162-edad6d18368e");
        reportConfiguration34.addFamily(builder57);
        reportConfiguration1.addFamily(builder57);
        java.lang.String str60 = builder57.getCategory();
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertTrue("'" + options16 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options16.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + level25 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level25.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet37);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders38 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders38.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(iReportable49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str60, "Copyright Builder: s:null e:null o:null");
    }

    @Test
    public void test09943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09943");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder2 = regexBuilder0.setExpr("67eb96c2-83b2-456d-bfb0-23ff916bf212");
        java.lang.String str3 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder5 = regexBuilder0.setExpr("SpdxBuilder: Copyright Builder: s:.cvsignore e:null o:null");
        org.junit.Assert.assertNotNull(regexBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "RegexBuilder: 67eb96c2-83b2-456d-bfb0-23ff916bf212" + "'", str3, "RegexBuilder: 67eb96c2-83b2-456d-bfb0-23ff916bf212");
        org.junit.Assert.assertNotNull(regexBuilder5);
    }

    @Test
    public void test09944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09944");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("Copyright Builder: s:null e:null o:null");
        org.apache.rat.analysis.IHeaderMatcher.State state2 = fullTextMatcher1.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher1.currentState();
        fullTextMatcher1.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = fullTextMatcher1.matches("RegexBuilder: JAVA");
        org.apache.rat.analysis.IHeaderMatcher.State state7 = fullTextMatcher1.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state8 = fullTextMatcher1.finalizeState();
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state2.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test09945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09945");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.utils.Log.Level level65 = defaultLog0.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender67 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "c819f60c-c781-49b6-ae3a-5a74de014a4d");
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        java.io.FilenameFilter filenameFilter70 = reportConfiguration69.getInputFileFilter();
        boolean boolean71 = reportConfiguration69.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier72 = reportConfiguration69.getOutput();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier73 = reportConfiguration69.getStyleSheet();
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray76 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList77 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList77, iLicenseFamilyArray76);
        reportConfiguration75.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList77);
        org.apache.rat.utils.Log.Level level80 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration75.logLicenseCollisions(level80);
        reportConfiguration69.logLicenseCollisions(level80);
        defaultLog0.log(level80, "TextBuilder: Datum [ name ='http:...");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher87 = new org.apache.rat.analysis.matchers.FullTextMatcher("TMF  ", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state88 = fullTextMatcher87.finalizeState();
        fullTextMatcher87.reset();
        fullTextMatcher87.reset();
        boolean boolean92 = fullTextMatcher87.doMatch("org/apache/rat/plain-rat.xsl");
        org.apache.rat.analysis.IHeaderMatcher.State state93 = fullTextMatcher87.finalizeState();
        java.lang.String str94 = state93.toString();
        defaultLog0.info((java.lang.Object) state93);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertTrue("'" + level65 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level65.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier72);
        org.junit.Assert.assertNull(inputStreamIOSupplier73);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + level80 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level80.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + state88 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state88.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + state93 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state93.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "f false" + "'", str94, "f false");
    }

    @Test
    public void test09946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09946");
        boolean boolean1 = org.apache.rat.document.impl.guesser.ArchiveGuesser.isArchive("90663eff-7ed8-41bd-85a8-e8f189198bc6 TextBuilder: true");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09947");
        java.lang.String[] strArray5 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean6 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", strArray5);
        boolean boolean7 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("http://org/apache/rat/meta-data#LicenseFamilyCategory", strArray5);
        boolean boolean8 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("The MIT License", strArray5);
        boolean boolean9 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("", strArray5);
        boolean boolean10 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 2 ']", strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09948");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        boolean boolean2 = copyrightBuilder0.hasId();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = copyrightBuilder0.setId("4f1be289-aaa7-4730-8076-690bc1f926c5");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder6 = copyrightBuilder0.setStart("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder8 = copyrightBuilder0.setStart("b5cb0999-b639-4e9c-ab9c-268137bc8846");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = copyrightBuilder8.build();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(copyrightBuilder6);
        org.junit.Assert.assertNotNull(copyrightBuilder8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
    }

    @Test
    public void test09949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09949");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.fromName("01cd6410-ba98-464c-a66e-0b7190dd6096");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: 01cd6410-ba98-464c-a66e-0b7190dd6096");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09950");
        java.lang.String str1 = org.apache.rat.document.impl.guesser.GuessUtils.normalise("SpdxBuilder: Copyright Builder: s:.cvsignore e:null o:null");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SPDXBUILDER: COPYRIGHT BUILDER: S:.CVSIGNORE E:NULL O:NULL" + "'", str1, "SPDXBUILDER: COPYRIGHT BUILDER: S:.CVSIGNORE E:NULL O:NULL");
    }

    @Test
    public void test09951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09951");
        boolean boolean1 = org.apache.rat.document.impl.guesser.NoteGuesser.isNote("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='MIT   ']");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09952");
        java.lang.String[] strArray5 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean6 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Copyright Builder: s:null e:.cvsignore o:null", strArray5);
        boolean boolean7 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("http://org/apache/rat/meta-data#HeaderCategory", strArray5);
        boolean boolean8 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("NotBuilder: MathcerRefBuilder: null", strArray5);
        boolean boolean9 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5", strArray5);
        boolean boolean10 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("da5fe944-291b-4f2c-8b38-a63be532e7b8", strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09953");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("bd015714-405b-4304-9faa-36efad80e6e6");
        org.apache.rat.analysis.IHeaderMatcher.State state2 = simpleTextMatcher1.currentState();
        boolean boolean4 = simpleTextMatcher1.doMatch("TextBuilderstand");
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state2.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09954");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.license.ILicense.Builder builder8 = builder6.setName("GPL3 ");
        org.apache.rat.license.ILicense.Builder builder10 = builder6.setName("?????");
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setName("GNU GENERAL PUBLIC LICENSE, VERSION 2");
        org.apache.rat.license.ILicense.Builder builder14 = builder10.setId("ANYBUILDER:");
        org.apache.rat.license.ILicense.Builder builder16 = builder14.setNotes("d4dd3824-2602-4624-aa0f-4dff524ea8ef");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray17 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList18 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18, iLicenseFamilyArray17);
        org.apache.rat.policy.DefaultPolicy defaultPolicy20 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList18);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet21 = defaultPolicy20.getApprovedLicenseNames();
        org.apache.rat.api.Document document22 = null;
        defaultPolicy20.analyse(document22);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet24 = defaultPolicy20.getApprovedLicenseNames();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet25 = defaultPolicy20.getApprovedLicenseNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense26 = builder16.build(iLicenseFamilySet25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Matcher must not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet21);
        org.junit.Assert.assertNotNull(iLicenseFamilySet24);
        org.junit.Assert.assertNotNull(iLicenseFamilySet25);
    }

    @Test
    public void test09955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09955");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration1.getLicenses(licenseFilter51);
        boolean boolean56 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.utils.ReportingSet.Options options63 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration61.licenseDuplicateOption(options63);
        reportConfiguration58.familyDuplicateOption(options63);
        reportConfiguration1.familyDuplicateOption(options63);
        java.util.SortedSet<java.lang.String> strSet67 = reportConfiguration1.getApprovedLicenseCategories();
        java.lang.String[] strArray73 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet74 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        boolean boolean77 = strSet74.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean79 = strSet74.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction80 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet81 = strSet74.setMsgFormat(strFunction80);
        java.lang.String str82 = strSet74.last();
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet74);
        java.util.Comparator<? super java.lang.String> wildcardComparator84 = strSet74.comparator();
        org.apache.rat.utils.Log.Level level85 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = strSet74.setLogLevel(level85);
        org.apache.rat.configuration.builders.AllBuilder allBuilder87 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str88 = allBuilder87.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher89 = allBuilder87.build();
        boolean boolean90 = strSet86.equals((java.lang.Object) iHeaderMatcher89);
        strSet86.clear();
        java.lang.Object obj92 = null;
        boolean boolean93 = strSet86.equals(obj92);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertTrue("'" + options63 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options63.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str82, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNull(wildcardComparator84);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "AllBuilder:" + "'", str88, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test09956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09956");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("00186");
    }

    @Test
    public void test09957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09957");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender65 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender68 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "MathcerRefBuilder: RegexBuilder: null");
        apacheV2LicenseAppender68.setForce(true);
        java.io.File file71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = apacheV2LicenseAppender68.getLicenseHeader(file71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
    }

    @Test
    public void test09958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09958");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet15 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet15);
        boolean boolean17 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet15);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray20 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList21 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList21, iLicenseFamilyArray20);
        org.apache.rat.policy.DefaultPolicy defaultPolicy23 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList21);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet24 = defaultPolicy23.getApprovedLicenseNames();
        boolean boolean25 = strSet19.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet24);
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder27 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder29 = builder27.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher33 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state34 = copyrightMatcher33.finalizeState();
        org.apache.rat.license.ILicense.Builder builder35 = builder29.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher33);
        org.apache.rat.license.ILicense.Builder builder37 = builder35.setLicenseFamilyCategory("");
        defaultLog26.error((java.lang.Object) builder37);
        org.apache.rat.utils.Log.Level level39 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog26.log(level39, "JAVA");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic42.setNumApproved((int) (short) 10);
        claimStatistic42.setNumUnknown((int) '#');
        defaultLog26.error((java.lang.Object) '#');
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet48 = strSet19.setLog((org.apache.rat.utils.Log) defaultLog26);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders54 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration50.setAddLicenseHeaders(addLicenseHeaders54);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = org.apache.rat.Reporter.report(reportConfiguration57);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter59);
        org.apache.rat.report.IReportable iReportable62 = null;
        reportConfiguration50.setReportable(iReportable62);
        org.apache.rat.report.IReportable iReportable64 = reportConfiguration50.getReportable();
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier67 = reportConfiguration66.getOutput();
        reportConfiguration66.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log70 = reportConfiguration66.getLog();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier71 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration66.setStyleSheet(inputStreamIOSupplier71);
        reportConfiguration50.setStyleSheet(inputStreamIOSupplier71);
        defaultLog26.warn((java.lang.Object) reportConfiguration50);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender76 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog26, "c523095e-4421-4cc4-93e2-039f23b91f76");
        org.apache.rat.license.ILicense.Builder builder77 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder79 = builder77.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder81 = builder79.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder83 = builder81.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder84 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str85 = copyrightBuilder84.toString();
        org.apache.rat.license.ILicense.Builder builder86 = builder81.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder84);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher87 = copyrightBuilder84.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder89 = copyrightBuilder84.setOwner("TextBuilder: Datum [ name ='http:...");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder91 = copyrightBuilder84.setStart("f9686227-2048-447b-8a8f-3164382365d2");
        defaultLog26.debug((java.lang.Object) copyrightBuilder84);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender93 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog26);
        java.io.File file94 = null;
        // The following exception was thrown during execution in test generation
        try {
            apacheV2LicenseAppender93.append(file94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(iLicenseFamilySet15);
        org.junit.Assert.assertNull(iLicenseFamily16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state34.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + level39 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level39.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders54 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders54.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(iReportable64);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier67);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier71);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(copyrightBuilder84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str85, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(iHeaderMatcher87);
        org.junit.Assert.assertNotNull(copyrightBuilder89);
        org.junit.Assert.assertNotNull(copyrightBuilder91);
    }

    @Test
    public void test09959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09959");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems0 = org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION;
        boolean boolean1 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.util.List<java.lang.String> strList2 = sourceCodeManagementSystems0.getExclusions();
        java.util.List<java.lang.String> strList3 = sourceCodeManagementSystems0.getExclusions();
        boolean boolean4 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.util.List<java.lang.String> strList5 = sourceCodeManagementSystems0.getExclusions();
        boolean boolean6 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.lang.String str7 = sourceCodeManagementSystems0.getIgnoreFile();
        boolean boolean8 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.util.List<java.lang.String> strList9 = sourceCodeManagementSystems0.getExclusions();
        boolean boolean10 = sourceCodeManagementSystems0.hasIgnoreFile();
        boolean boolean11 = sourceCodeManagementSystems0.hasIgnoreFile();
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems0 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION + "'", sourceCodeManagementSystems0.equals(org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09960");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.license.ILicense.Builder builder7 = builder0.setDerivedFrom("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.lang.String str10 = matcherRefBuilder8.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap11 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder12 = matcherRefBuilder8.setMatchers(strMap11);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder14 = matcherRefBuilder8.setRefId("RegexBuilder: null");
        org.apache.rat.license.ILicense.Builder builder15 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder8);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap16 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder17 = matcherRefBuilder8.setMatchers(strMap16);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap18 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = matcherRefBuilder17.setMatchers(strMap18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher20 = matcherRefBuilder19.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MathcerRefBuilder: null" + "'", str10, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(matcherRefBuilder17);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
    }

    @Test
    public void test09961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09961");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logLicenseCollisions(level4);
        reportConfiguration1.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration9.getInputFileFilter();
        reportConfiguration9.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable38 = null;
        reportConfiguration9.setReportable(iReportable38);
        org.apache.rat.Defaults.Builder builder41 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults42 = builder41.build();
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        java.io.FilenameFilter filenameFilter45 = reportConfiguration44.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet47 = reportConfiguration44.getLicenses(licenseFilter46);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders48 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration44.setAddLicenseHeaders(addLicenseHeaders48);
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic52 = org.apache.rat.Reporter.report(reportConfiguration51);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter53);
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter53);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet60 = reportConfiguration57.getLicenses(licenseFilter59);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders61 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration57.setAddLicenseHeaders(addLicenseHeaders61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter66);
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = reportConfiguration44.getLicenseFamilies(licenseFilter66);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet70 = defaults42.getLicenses(licenseFilter66);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet71 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet70);
        org.apache.rat.license.ILicense iLicense72 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet70);
        reportConfiguration9.addLicense(iLicense72);
        java.lang.String str74 = iLicense72.derivedFrom();
        reportConfiguration1.addLicense(iLicense72);
        java.lang.String str76 = iLicense72.getNotes();
        org.apache.rat.license.ILicenseFamily iLicenseFamily77 = iLicense72.getLicenseFamily();
        java.lang.String str78 = iLicense72.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily79 = iLicense72.getLicenseFamily();
        java.lang.String str80 = iLicense72.getNotes();
        org.apache.rat.license.ILicenseFamily iLicenseFamily81 = iLicense72.getLicenseFamily();
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(defaults42);
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet47);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders48 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders48.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet60);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders61 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders61.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNotNull(iLicenseSet70);
        org.junit.Assert.assertNotNull(iLicense72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "BSD-3" + "'", str74, "BSD-3");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(iLicenseFamily77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "BSD-3" + "'", str78, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(iLicenseFamily81);
    }

    @Test
    public void test09962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09962");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration1.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.license.ILicenseFamily iLicenseFamily6 = null;
        reportConfiguration1.addFamily(iLicenseFamily6);
        boolean boolean8 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter9 = reportConfiguration1.getDirectoryFilter();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet12 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.policy.DefaultPolicy defaultPolicy13 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet12);
        org.apache.rat.license.ILicenseFamily iLicenseFamily14 = org.apache.rat.license.LicenseFamilySetFactory.search("MANIFEST.MF", iLicenseFamilySet12);
        org.apache.rat.license.ILicenseFamily iLicenseFamily15 = org.apache.rat.license.LicenseFamilySetFactory.search("Copyright Builder: s:null e:W3C Software Copyright o:null", iLicenseFamilySet12);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders21 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration17.setAddLicenseHeaders(addLicenseHeaders21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter26);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter39);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration45.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet48 = reportConfiguration45.getLicenses(licenseFilter47);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders49 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration45.setAddLicenseHeaders(addLicenseHeaders49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter54);
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter54);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        java.io.FilenameFilter filenameFilter59 = reportConfiguration58.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet61 = reportConfiguration58.getLicenses(licenseFilter60);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders62 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration58.setAddLicenseHeaders(addLicenseHeaders62);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter67 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration65, licenseFilter67);
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter67);
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter67);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet71 = reportConfiguration17.getLicenses(licenseFilter67);
        boolean boolean72 = reportConfiguration17.isAddingLicensesForced();
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic75 = org.apache.rat.Reporter.report(reportConfiguration74);
        org.apache.rat.utils.Log log76 = null;
        org.apache.rat.ReportConfiguration reportConfiguration77 = new org.apache.rat.ReportConfiguration(log76);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic78 = org.apache.rat.Reporter.report(reportConfiguration77);
        org.apache.rat.utils.ReportingSet.Options options79 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration77.licenseDuplicateOption(options79);
        reportConfiguration74.familyDuplicateOption(options79);
        reportConfiguration17.familyDuplicateOption(options79);
        java.util.SortedSet<java.lang.String> strSet83 = reportConfiguration17.getApprovedLicenseCategories();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory84 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet12, (java.util.Collection<java.lang.String>) strSet83);
        org.apache.rat.utils.DefaultLog defaultLog85 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender86 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog85);
        org.apache.rat.ReportConfiguration reportConfiguration87 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog85);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter88 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        org.apache.rat.Reporter.listLicenses(reportConfiguration87, licenseFilter88);
        java.util.SortedSet<java.lang.String> strSet90 = licenseFamilySetFactory84.getFamilyIds(licenseFilter88);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet91 = reportConfiguration1.getLicenseFamilies(licenseFilter88);
        reportConfiguration1.setCopyrightMessage("fe6be119881745678d33352365bfa7c8");
        java.lang.String str94 = reportConfiguration1.getCopyrightMessage();
        reportConfiguration1.addApprovedLicenseCategory("Copyright Builder: s:http://org/apache/rat/meta-data e:org/a o:null");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(iOFileFilter9);
        org.junit.Assert.assertNotNull(iLicenseFamilySet12);
        org.junit.Assert.assertNull(iLicenseFamily14);
        org.junit.Assert.assertNull(iLicenseFamily15);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders21 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders21.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet48);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders49 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders49.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet61);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders62 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders62.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertTrue("'" + licenseFilter67 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter67.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(claimStatistic75);
        org.junit.Assert.assertNull(claimStatistic78);
        org.junit.Assert.assertTrue("'" + options79 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options79.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(defaultLog85);
        org.junit.Assert.assertTrue("'" + licenseFilter88 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter88.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertNotNull(iLicenseFamilySet91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "fe6be119881745678d33352365bfa7c8" + "'", str94, "fe6be119881745678d33352365bfa7c8");
    }

    @Test
    public void test09963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09963");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        java.lang.String str7 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setNotes("SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily10 = fullTextMatchingLicense0.getLicenseFamily();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test09964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09964");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        simpleLicenseFamily0.setFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str3 = simpleLicenseFamily0.toString();
        simpleLicenseFamily0.setFamilyName("f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        java.lang.String str6 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str7 = simpleLicenseFamily0.toString();
        java.lang.String str8 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str9 = simpleLicenseFamily0.getFamilyCategory();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "null http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str3, "null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c" + "'", str6, "f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c" + "'", str7, "null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c" + "'", str8, "f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test09965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09965");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        fullTextMatchingLicense0.setFullText("9c36f068-9920-4c66-98c2-ba24e3dffa9c");
        fullTextMatchingLicense0.setNotes("0925e382-79b7-417a-85be-aed683d949e2");
        fullTextMatchingLicense0.setLicenseFamilyCategory("");
        java.lang.String str13 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str14 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("binary");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test09966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09966");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        boolean boolean3 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier4 = reportConfiguration1.getOutput();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier5 = reportConfiguration1.getStyleSheet();
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray8 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList9 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList9, iLicenseFamilyArray8);
        reportConfiguration7.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList9);
        org.apache.rat.utils.Log.Level level12 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration7.logLicenseCollisions(level12);
        reportConfiguration1.logLicenseCollisions(level12);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter15 = reportConfiguration1.getDirectoryFilter();
        java.net.URI uRI16 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRI16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier4);
        org.junit.Assert.assertNull(inputStreamIOSupplier5);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + level12 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level12.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter15);
    }

    @Test
    public void test09967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09967");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.utils.ReportingSet.Options options2 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration1.licenseDuplicateOption(options2);
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        java.lang.String[] strArray51 = new java.lang.String[] { "http://org/apache/rat/meta-data", "GNU General Public License, version 2", "Modified BSD License", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "The MIT License", "OASIS", "?????", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "6486879f-fc81-4b57-aec7-c4c77d540c30", "MANIFEST.MF", "?????", "GEN  ", "GPL3 ", "http://org/apache/rat/meta-data#HeaderCategory", "DOJO ", "true", "GPL2 ", "?????", "Apache License Version 2.0", "OASIS", "W3CD ", "OASIS", "?????", "OASIS Open License", "", "standard", "GPL2 ", "GEN  ", "W3CD ", "TMF  ", ".cvsignore", "Copyright Builder: s:null e:null o:null", "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 2", "W3CD ", ".cvsignore", "Apache License Version 2.0", "GEN  ", "W3C Software Copyright", "Modified BSD License", "GPL2 ", "JAVA" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        reportConfiguration7.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList52);
        reportConfiguration7.removeApprovedLicenseCategory("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration7);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        java.io.FilenameFilter filenameFilter60 = reportConfiguration59.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter61 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = reportConfiguration59.getLicenses(licenseFilter61);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders63 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration59.setAddLicenseHeaders(addLicenseHeaders63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter68);
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter68);
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        java.io.FilenameFilter filenameFilter73 = reportConfiguration72.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter74 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet75 = reportConfiguration72.getLicenses(licenseFilter74);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders76 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration72.setAddLicenseHeaders(addLicenseHeaders76);
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic80 = org.apache.rat.Reporter.report(reportConfiguration79);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter81 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration79, licenseFilter81);
        org.apache.rat.Reporter.listLicenses(reportConfiguration72, licenseFilter81);
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter81);
        org.apache.rat.utils.Log log85 = null;
        org.apache.rat.ReportConfiguration reportConfiguration86 = new org.apache.rat.ReportConfiguration(log85);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier87 = reportConfiguration86.getOutput();
        reportConfiguration59.setOut(outputStreamIOSupplier87);
        org.apache.rat.utils.Log.Level level89 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration59.logLicenseCollisions(level89);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter91 = reportConfiguration59.getDirectoryFilter();
        java.nio.file.Path path92 = null;
        boolean boolean93 = iOFileFilter91.matches(path92);
        java.nio.file.Path path94 = null;
        boolean boolean95 = iOFileFilter91.matches(path94);
        reportConfiguration7.setInputFileFilter((java.io.FilenameFilter) iOFileFilter91);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter97 = iOFileFilter91.negate();
        reportConfiguration1.setDirectoryFilter(iOFileFilter97);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter99 = iOFileFilter97.negate();
        org.junit.Assert.assertTrue("'" + options2 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options2.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertNull(filenameFilter60);
        org.junit.Assert.assertTrue("'" + licenseFilter61 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter61.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders63 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders63.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter73);
        org.junit.Assert.assertTrue("'" + licenseFilter74 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter74.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet75);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders76 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders76.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic80);
        org.junit.Assert.assertTrue("'" + licenseFilter81 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter81.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier87);
        org.junit.Assert.assertTrue("'" + level89 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level89.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(iOFileFilter97);
        org.junit.Assert.assertNotNull(iOFileFilter99);
    }

    @Test
    public void test09968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09968");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        reportConfiguration12.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level15 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration12.logFamilyCollisions(level15);
        reportConfiguration1.logLicenseCollisions(level15);
        org.apache.rat.utils.ReportingSet.Options options18 = org.apache.rat.utils.ReportingSet.Options.IGNORE;
        reportConfiguration1.licenseDuplicateOption(options18);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic20 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.DefaultLog defaultLog21 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        reportConfiguration23.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level26 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration23.logFamilyCollisions(level26);
        defaultLog21.setLevel(level26);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = reportConfiguration43.getLicenses(licenseFilter45);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter52);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier58 = reportConfiguration57.getOutput();
        reportConfiguration30.setOut(outputStreamIOSupplier58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.utils.ReportingSet.Options options66 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration64.licenseDuplicateOption(options66);
        reportConfiguration61.familyDuplicateOption(options66);
        reportConfiguration30.licenseDuplicateOption(options66);
        reportConfiguration30.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        reportConfiguration73.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level76 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration73.logLicenseCollisions(level76);
        reportConfiguration30.logLicenseCollisions(level76);
        defaultLog21.log(level76, "GNU General Public License, version 1");
        reportConfiguration1.logLicenseCollisions(level76);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder82 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str83 = iLicenseFamilyBuilder82.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder85 = iLicenseFamilyBuilder82.setLicenseFamilyCategory("false");
        org.apache.rat.license.ILicenseFamily.Builder builder87 = iLicenseFamilyBuilder82.setLicenseFamilyName("Copyright Builder: s:null e:.cvsignore o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder89 = iLicenseFamilyBuilder82.setLicenseFamilyCategory("GNUGeneralPublicLicenseversion2");
        reportConfiguration1.addFamily((org.apache.rat.license.ILicenseFamily.Builder) iLicenseFamilyBuilder82);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + level15 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level15.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + options18 + "' != '" + org.apache.rat.utils.ReportingSet.Options.IGNORE + "'", options18.equals(org.apache.rat.utils.ReportingSet.Options.IGNORE));
        org.junit.Assert.assertNull(claimStatistic20);
        org.junit.Assert.assertNotNull(defaultLog21);
        org.junit.Assert.assertTrue("'" + level26 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level26.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier58);
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + options66 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options66.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level76 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level76.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test09969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09969");
        java.io.File file0 = null;
        byte[] byteArray6 = new byte[] { (byte) 100, (byte) 100, (byte) 100, (byte) 1, (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.impl.ArchiveEntryDocument archiveEntryDocument7 = new org.apache.rat.document.impl.ArchiveEntryDocument(file0, byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 100, 100, 1, 1]");
    }

    @Test
    public void test09970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09970");
        org.apache.rat.license.ILicense[] iLicenseArray1 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet2 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet2, iLicenseArray1);
        java.lang.String[] strArray16 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory19 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2, (java.util.Collection<java.lang.String>) strList17);
        org.apache.rat.license.ILicense iLicense20 = org.apache.rat.license.LicenseSetFactory.search("binary", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet21 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet22 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet21);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet23 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet22);
        org.junit.Assert.assertNotNull(iLicenseArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(iLicense20);
    }

    @Test
    public void test09971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09971");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("http://org/apache/rat/meta-data");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher3 = new org.apache.rat.analysis.matchers.NotMatcher(iHeaderMatcher2);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state5 = notMatcher4.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state7 = notMatcher4.matches("stand");
        notMatcher4.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state9 = notMatcher4.finalizeState();
        java.lang.String str10 = notMatcher4.getId();
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
// flaky:         org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
// flaky:         org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "a7c7736c-4d3c-4c76-a03b-493f6345f390" + "'", str10, "a7c7736c-4d3c-4c76-a03b-493f6345f390");
    }

    @Test
    public void test09972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09972");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setNotes("MANIFEST.MF");
        fullTextMatchingLicense0.setLicenseFamilyCategory("standard");
        org.apache.rat.license.ILicenseFamily iLicenseFamily8 = fullTextMatchingLicense0.getLicenseFamily();
        java.lang.String str9 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str10 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setLicenseFamilyCategory("Modified BSD License");
        java.lang.String str13 = fullTextMatchingLicense0.getNotes();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(iLicenseFamily8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "standard" + "'", str9, "standard");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MANIFEST.MF" + "'", str10, "MANIFEST.MF");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MANIFEST.MF" + "'", str13, "MANIFEST.MF");
    }

    @Test
    public void test09973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09973");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) '4');
        claimStatistic0.setNumUnknown((int) (byte) 0);
        claimStatistic0.setNumUnknown((int) (byte) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic0.getLicenseFileNameMap();
        int int12 = claimStatistic0.getNumUnknown();
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test09974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09974");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        boolean boolean31 = reportConfiguration1.isStyleReport();
        boolean boolean32 = reportConfiguration1.isStyleReport();
        org.apache.rat.license.ILicense[] iLicenseArray33 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet34 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet34, iLicenseArray33);
        java.lang.String[] strArray48 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory51 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet34, (java.util.Collection<java.lang.String>) strList49);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        java.io.FilenameFilter filenameFilter67 = reportConfiguration66.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet69 = reportConfiguration66.getLicenses(licenseFilter68);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders70 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration66.setAddLicenseHeaders(addLicenseHeaders70);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter75);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet79 = licenseSetFactory51.getLicenses(licenseFilter75);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet79);
        reportConfiguration1.setCopyrightMessage("6486879f-fc81-4b57-aec7-c4c77d540c30");
        java.util.SortedSet<java.lang.String> strSet83 = reportConfiguration1.getApprovedLicenseCategories();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(iLicenseArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet69);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders70 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders70.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet79);
        org.junit.Assert.assertNotNull(strSet83);
    }

    @Test
    public void test09975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09975");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder2.setMatchers(strMap4);
        org.apache.rat.configuration.builders.AllBuilder allBuilder6 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setStart("OASIS");
        java.lang.String str10 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder15.setStart("OASIS");
        java.lang.String str18 = copyrightBuilder15.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder15.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str23 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = copyrightBuilder22.setEnd(".cvsignore");
        boolean boolean26 = copyrightBuilder22.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str28 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder27.setEnd(".cvsignore");
        boolean boolean31 = copyrightBuilder27.hasId();
        java.lang.String str32 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean38 = matcherRefBuilder37.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap39 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = matcherRefBuilder37.setMatchers(strMap39);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.lang.String str44 = matcherRefBuilder42.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder42.setMatchers(strMap45);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray47 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, allBuilder6, copyrightBuilder12, matcherRefBuilder13, copyrightBuilder15, copyrightBuilder21, copyrightBuilder22, copyrightBuilder27, copyrightBuilder33, anyBuilder36, matcherRefBuilder37, copyrightBuilder41, matcherRefBuilder42 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList48 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48, builderArray47);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder50 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder51 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str52 = copyrightBuilder51.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder53 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder51);
        java.lang.String str54 = notBuilder0.toString();
        java.lang.String str55 = notBuilder0.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder57 = notBuilder0.setResource("SpdxBuilder: ece24682-3459-4761-bb85-7fc8538fa181");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str10, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str18, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str23, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str28, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str32, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(anyBuilder36);
        org.junit.Assert.assertNotNull(matcherRefBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MathcerRefBuilder: null" + "'", str44, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(builderArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(abstractBuilder50);
        org.junit.Assert.assertNotNull(copyrightBuilder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str52, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(abstractBuilder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str54, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str55, "NotBuilder: MathcerRefBuilder: null");
    }

    @Test
    public void test09976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09976");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        reportConfiguration1.addApprovedLicenseCategory("W3C Software Copyright");
        org.apache.rat.report.IReportable iReportable15 = null;
        reportConfiguration1.setReportable(iReportable15);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray19 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList20 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20, iLicenseFamilyArray19);
        reportConfiguration18.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense23 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense23.setLicenseFamilyName("hi!");
        java.lang.String str26 = fullTextMatchingLicense23.getLicenseFamilyCategory();
        java.lang.String str27 = fullTextMatchingLicense23.getLicenseFamilyName();
        fullTextMatchingLicense23.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense23.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily32 = fullTextMatchingLicense23.getLicenseFamily();
        reportConfiguration18.addFamily(iLicenseFamily32);
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.report.IReportable iReportable48 = null;
        reportConfiguration36.setReportable(iReportable48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration36.getInputFileFilter();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier51 = reportConfiguration36.getStyleSheet();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter52 = reportConfiguration36.getDirectoryFilter();
        reportConfiguration1.setDirectoryFilter(iOFileFilter52);
        java.io.File file54 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(file54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilyArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily32);
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertNull(inputStreamIOSupplier51);
        org.junit.Assert.assertNotNull(iOFileFilter52);
    }

    @Test
    public void test09977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09977");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        org.apache.rat.utils.Log.Level level47 = defaultLog0.getLevel();
        java.lang.String[] strArray53 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet54 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        boolean boolean57 = strSet54.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean59 = strSet54.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher62 = new org.apache.rat.analysis.matchers.FullTextMatcher("notice", "3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.analysis.IHeaderMatcher.State state64 = fullTextMatcher62.matches("The MIT License");
        boolean boolean65 = strSet54.equals((java.lang.Object) state64);
        org.apache.rat.utils.DefaultLog defaultLog66 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender67 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic73 = org.apache.rat.Reporter.report(reportConfiguration72);
        org.apache.rat.utils.ReportingSet.Options options74 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration72.licenseDuplicateOption(options74);
        reportConfiguration69.familyDuplicateOption(options74);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier77 = reportConfiguration69.getWriter();
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        reportConfiguration79.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level82 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration79.logFamilyCollisions(level82);
        reportConfiguration69.logFamilyCollisions(level82);
        org.apache.rat.Defaults.Builder builder85 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder86 = builder85.noDefault();
        defaultLog66.log(level82, (java.lang.Object) builder85);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet88 = strSet54.setLog((org.apache.rat.utils.Log) defaultLog66);
        defaultLog0.error((java.lang.Object) strSet88);
        java.util.Comparator<? super java.lang.String> wildcardComparator90 = strSet88.comparator();
        boolean boolean91 = strSet88.isEmpty();
        java.lang.String str92 = strSet88.first();
        java.lang.String str93 = strSet88.first();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertTrue("'" + level47 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level47.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + state64 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state64.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(defaultLog66);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertNull(claimStatistic73);
        org.junit.Assert.assertTrue("'" + options74 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options74.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier77);
        org.junit.Assert.assertTrue("'" + level82 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level82.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNull(wildcardComparator90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "AllBuilder:" + "'", str92, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "AllBuilder:" + "'", str93, "AllBuilder:");
    }

    @Test
    public void test09978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09978");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        java.lang.String str3 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyCategory("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        java.lang.String str6 = simpleLicenseFamily0.getFamilyCategory();
        java.lang.String str7 = simpleLicenseFamily0.getFamilyCategory();
        java.lang.String str8 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str9 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyCategory("1ecfe123-9c39-420b-9cd6-8448dafb79f3");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3e2b228d-d5ff-4444-8d8c-d614494b2426" + "'", str6, "3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "3e2b228d-d5ff-4444-8d8c-d614494b2426" + "'", str7, "3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test09979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09979");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("Copyright Builder: s:null e:null o:null");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = fullTextMatcher2.currentState();
        fullTextMatcher2.reset();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher("f02d0cdc-3642-4583-b71f-dd84a120752c", (org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        org.apache.rat.analysis.IHeaderMatcher.State state8 = fullTextMatcher2.matches("TextBuilder: AL   ");
        org.apache.rat.analysis.IHeaderMatcher.State state10 = fullTextMatcher2.matches("");
        org.apache.rat.analysis.IHeaderMatcher.State state12 = fullTextMatcher2.matches("a3e11a81-9a98-401d-8ec7-2ff3ae515be9");
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state10.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state12.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test09980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09980");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet6.spliterator();
        boolean boolean27 = strSet6.add("");
        java.util.Spliterator<java.lang.String> strSpliterator28 = strSet6.spliterator();
        int int29 = strSet6.size();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet31 = strSet6.tailSet("03F7B314-6887-4617-9C7E-BF1600B331CD");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction32 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet33 = strSet6.setMsgFormat(strFunction32);
        boolean boolean35 = strSet6.add("4af66b98-9684-4b39-a5b5-a1147c648113");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strSpliterator28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test09981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09981");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.TXT;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader2 = format0.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader4 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader5 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader6 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader7 = format0.matcherReader();
        org.apache.rat.configuration.MatcherReader matcherReader8 = format0.matcherReader();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.TXT + "'", format0.equals(org.apache.rat.configuration.Format.TXT));
        org.junit.Assert.assertNull(licenseReader1);
        org.junit.Assert.assertNull(licenseReader2);
        org.junit.Assert.assertNull(licenseReader3);
        org.junit.Assert.assertNull(matcherReader4);
        org.junit.Assert.assertNull(matcherReader5);
        org.junit.Assert.assertNull(matcherReader6);
        org.junit.Assert.assertNull(matcherReader7);
        org.junit.Assert.assertNull(matcherReader8);
    }

    @Test
    public void test09982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09982");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter9 = xmlWriter1.content((java.lang.CharSequence) "MathcerRefBuilder: TextBuilder: SpdxBuilder: null");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09983");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder1.setStart("OASIS");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = copyrightBuilder1.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder6 = copyrightBuilder1.setStart(".cvsignore");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder8 = copyrightBuilder1.setOwner("W3C  ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = copyrightBuilder1.setEnd("standard");
        java.lang.Object obj11 = toNameTransformer0.transform((java.lang.Object) copyrightBuilder1);
        java.util.regex.Pattern pattern14 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher15 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern14);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher16 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher15);
        org.apache.rat.analysis.IHeaderMatcher.State state17 = notMatcher16.finalizeState();
        java.lang.String str18 = notMatcher16.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state19 = notMatcher16.currentState();
        notMatcher16.reset();
        notMatcher16.reset();
        java.lang.Object obj22 = toNameTransformer0.transform((java.lang.Object) notMatcher16);
        org.apache.rat.Defaults.Builder builder24 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults25 = builder24.build();
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        java.io.FilenameFilter filenameFilter41 = reportConfiguration40.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = reportConfiguration40.getLicenses(licenseFilter42);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders44 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration40.setAddLicenseHeaders(addLicenseHeaders44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter49);
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter49);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet52 = reportConfiguration27.getLicenseFamilies(licenseFilter49);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = defaults25.getLicenses(licenseFilter49);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet54 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet53);
        org.apache.rat.license.ILicense iLicense55 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet53);
        org.apache.rat.license.ILicenseFamily iLicenseFamily56 = iLicense55.getLicenseFamily();
        java.lang.String str57 = iLicense55.getName();
        java.lang.Object obj58 = toNameTransformer0.transform((java.lang.Object) str57);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder59 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str60 = copyrightBuilder59.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder62 = copyrightBuilder59.setEnd(".cvsignore");
        boolean boolean63 = copyrightBuilder59.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder65 = copyrightBuilder59.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder67 = copyrightBuilder65.setOwner("GPL1 ");
        java.lang.String str68 = copyrightBuilder65.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder70 = copyrightBuilder65.setStart("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder72 = copyrightBuilder70.setEnd("ed0faf32f32c46f1a6294fe87704cb0e");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder74 = copyrightBuilder72.setStart("");
        java.lang.Object obj75 = toNameTransformer0.transform((java.lang.Object) copyrightBuilder74);
        org.apache.rat.configuration.builders.TextBuilder textBuilder76 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder78 = textBuilder76.setText("t true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher79 = textBuilder76.build();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher80 = new org.apache.rat.analysis.matchers.NotMatcher(iHeaderMatcher79);
        java.lang.Object obj81 = toNameTransformer0.transform((java.lang.Object) notMatcher80);
        org.junit.Assert.assertNotNull(copyrightBuilder1);
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(copyrightBuilder6);
        org.junit.Assert.assertNotNull(copyrightBuilder8);
        org.junit.Assert.assertNotNull(copyrightBuilder10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state17.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GNU General Public License, version 2" + "'", str18, "GNU General Public License, version 2");
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state19.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(defaults25);
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders44 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders44.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet52);
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertNotNull(iLicense55);
        org.junit.Assert.assertNotNull(iLicenseFamily56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "The Telemanagement Forum License" + "'", str57, "The Telemanagement Forum License");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(copyrightBuilder59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str60, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder65);
        org.junit.Assert.assertNotNull(copyrightBuilder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:GPL1 " + "'", str68, "Copyright Builder: s:null e:.cvsignore o:GPL1 ");
        org.junit.Assert.assertNotNull(copyrightBuilder70);
        org.junit.Assert.assertNotNull(copyrightBuilder72);
        org.junit.Assert.assertNotNull(copyrightBuilder74);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(textBuilder78);
        org.junit.Assert.assertNotNull(iHeaderMatcher79);
        org.junit.Assert.assertNull(obj81);
    }

    @Test
    public void test09984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09984");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("Datum [ name ='http://org/apache/rat/meta-data#FileCategory',value ='binary ']");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09985");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog0.setLevel(level13);
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily15 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str16 = simpleLicenseFamily15.getFamilyName();
        java.lang.String str17 = simpleLicenseFamily15.getFamilyCategory();
        simpleLicenseFamily15.setFamilyCategory("W3C  ");
        simpleLicenseFamily15.setFamilyCategory("AllBuilder:");
        defaultLog0.info((java.lang.Object) simpleLicenseFamily15);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder23 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str24 = iLicenseFamilyBuilder23.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder26 = iLicenseFamilyBuilder23.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder28 = iLicenseFamilyBuilder23.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder30 = iLicenseFamilyBuilder23.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str31 = iLicenseFamilyBuilder23.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder33 = iLicenseFamilyBuilder23.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily.Builder builder35 = iLicenseFamilyBuilder23.setLicenseFamilyCategory("8f82a952-5bfd-446b-ac79-15beef5b3f17");
        defaultLog0.warn((java.lang.Object) iLicenseFamilyBuilder23);
        org.apache.rat.configuration.Format format37 = org.apache.rat.configuration.Format.TXT;
        org.apache.rat.configuration.LicenseReader licenseReader38 = format37.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader39 = format37.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader40 = format37.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader41 = format37.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader42 = format37.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader43 = format37.licenseReader();
        defaultLog0.error((java.lang.Object) licenseReader43);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level13.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "MIT  " + "'", str31, "MIT  ");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + format37 + "' != '" + org.apache.rat.configuration.Format.TXT + "'", format37.equals(org.apache.rat.configuration.Format.TXT));
        org.junit.Assert.assertNull(licenseReader38);
        org.junit.Assert.assertNull(licenseReader39);
        org.junit.Assert.assertNull(licenseReader40);
        org.junit.Assert.assertNull(licenseReader41);
        org.junit.Assert.assertNull(licenseReader42);
        org.junit.Assert.assertNull(licenseReader43);
    }

    @Test
    public void test09986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09986");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("Datum [ name ='d0774232-cdef-4507-a8b6-ac22a273dde3',value ='10ceccc6-9da0-47a6-810c-684cf0a59f88 ']");
    }

    @Test
    public void test09987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09987");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyName("NotBuilder: MathcerRefBuilder: null");
        java.lang.String str5 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str6 = simpleLicenseFamily0.getFamilyCategory();
        java.lang.String str7 = simpleLicenseFamily0.getFamilyCategory();
        java.lang.String str8 = simpleLicenseFamily0.getFamilyCategory();
        java.lang.String str9 = simpleLicenseFamily0.getFamilyCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str5, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test09988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09988");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.utils.ReportingSet.Options options2 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration1.licenseDuplicateOption(options2);
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders9 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration5.setAddLicenseHeaders(addLicenseHeaders9);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration12, licenseFilter14);
        org.apache.rat.Reporter.listLicenses(reportConfiguration5, licenseFilter14);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet21 = reportConfiguration18.getLicenses(licenseFilter20);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders22 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration18.setAddLicenseHeaders(addLicenseHeaders22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration5, licenseFilter27);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier33 = reportConfiguration32.getOutput();
        reportConfiguration5.setOut(outputStreamIOSupplier33);
        org.apache.rat.utils.Log.Level level35 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration5.logLicenseCollisions(level35);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter37 = reportConfiguration5.getDirectoryFilter();
        reportConfiguration1.setInputFileFilter((java.io.FilenameFilter) iOFileFilter37);
        java.nio.file.Path path39 = null;
        boolean boolean40 = iOFileFilter37.matches(path39);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter41 = iOFileFilter37.negate();
        java.nio.file.Path path42 = null;
        boolean boolean43 = iOFileFilter37.matches(path42);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter44 = iOFileFilter37.negate();
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic47 = org.apache.rat.Reporter.report(reportConfiguration46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.utils.ReportingSet.Options options51 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration49.licenseDuplicateOption(options51);
        reportConfiguration46.familyDuplicateOption(options51);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier54 = reportConfiguration46.getWriter();
        boolean boolean55 = reportConfiguration46.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter56 = reportConfiguration46.getInputFileFilter();
        java.io.FilenameFilter filenameFilter57 = reportConfiguration46.getInputFileFilter();
        boolean boolean58 = reportConfiguration46.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier59 = reportConfiguration46.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter60 = reportConfiguration46.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter61 = reportConfiguration46.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter62 = iOFileFilter37.and(iOFileFilter61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic68 = org.apache.rat.Reporter.report(reportConfiguration67);
        org.apache.rat.utils.ReportingSet.Options options69 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration67.licenseDuplicateOption(options69);
        reportConfiguration64.familyDuplicateOption(options69);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier72 = reportConfiguration64.getWriter();
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        reportConfiguration74.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level77 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration74.logFamilyCollisions(level77);
        reportConfiguration64.logFamilyCollisions(level77);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter80 = reportConfiguration64.getDirectoryFilter();
        org.apache.rat.utils.Log log81 = null;
        org.apache.rat.ReportConfiguration reportConfiguration82 = new org.apache.rat.ReportConfiguration(log81);
        reportConfiguration82.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level85 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration82.logFamilyCollisions(level85);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter87 = reportConfiguration82.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter88 = iOFileFilter80.or(iOFileFilter87);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter89 = iOFileFilter61.and(iOFileFilter88);
        org.junit.Assert.assertTrue("'" + options2 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options2.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders9 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders9.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet21);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders22 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders22.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier33);
        org.junit.Assert.assertTrue("'" + level35 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level35.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(iOFileFilter41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(iOFileFilter44);
        org.junit.Assert.assertNull(claimStatistic47);
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + options51 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options51.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertNull(filenameFilter57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier59);
        org.junit.Assert.assertNotNull(iOFileFilter60);
        org.junit.Assert.assertNotNull(iOFileFilter61);
        org.junit.Assert.assertNotNull(iOFileFilter62);
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertNull(claimStatistic68);
        org.junit.Assert.assertTrue("'" + options69 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options69.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier72);
        org.junit.Assert.assertTrue("'" + level77 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level77.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter80);
        org.junit.Assert.assertTrue("'" + level85 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level85.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter87);
        org.junit.Assert.assertNotNull(iOFileFilter88);
        org.junit.Assert.assertNotNull(iOFileFilter89);
    }

    @Test
    public void test09989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09989");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("5fd2c009-d426-4f2e-aa5f-fa818707c48c");
    }

    @Test
    public void test09990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09990");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender66 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder67 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder69 = builder67.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder71 = builder67.add("TextBuilder: Datum [ name ='http:...");
        org.apache.rat.Defaults.Builder builder73 = builder67.add("The MIT License");
        defaultLog0.debug((java.lang.Object) builder73);
        java.io.File file75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder76 = builder73.add(file75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test09991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09991");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        org.apache.rat.utils.Log.Level level47 = defaultLog0.getLevel();
        defaultLog0.warn((java.lang.Object) 0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender51 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        java.net.URI uRI53 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration52.setStyleSheet(uRI53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertTrue("'" + level47 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level47.equals(org.apache.rat.utils.Log.Level.DEBUG));
    }

    @Test
    public void test09992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09992");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.ReportingSet.Options options52 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options52);
        reportConfiguration47.familyDuplicateOption(options52);
        reportConfiguration16.licenseDuplicateOption(options52);
        reportConfiguration16.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration16.logLicenseCollisions(level62);
        defaultLog14.setLevel(level62);
        defaultLog14.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog14);
        org.apache.rat.utils.DefaultLog defaultLog69 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logFamilyCollisions(level74);
        defaultLog69.setLevel(level74);
        defaultLog14.debug((java.lang.Object) level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet13.setLogLevel(level74);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        reportConfiguration80.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level83 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration80.logFamilyCollisions(level83);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet85 = strSet78.setLogLevel(level83);
        java.util.Spliterator<java.lang.String> strSpliterator86 = strSet78.spliterator();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet88 = strSet78.headSet("274c6a15-09f6-4bfd-ac53-1827770eb507");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet91 = strSet78.subSet("f6c7d16f-90d4-435d-b9d9-a9f6c196d56a", "httporgapacheratmetadataLicenseFamilyName");
        java.util.Spliterator<java.lang.String> strSpliterator92 = strSet91.spliterator();
        java.lang.String str93 = strSet91.first();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + options52 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options52.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog69);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + level83 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level83.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strSpliterator86);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(strSpliterator92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyCategory" + "'", str93, "http://org/apache/rat/meta-data#LicenseFamilyCategory");
    }

    @Test
    public void test09993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09993");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = fullTextMatchingLicense0.getLicenseFamily();
        fullTextMatchingLicense0.setLicenseFamilyCategory("NotBuilder: null");
        java.lang.String str12 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: 641dafc1-13c3-45d4-8272-f36f10392c53");
        java.lang.String str15 = fullTextMatchingLicense0.getLicenseFamilyName();
        java.lang.String str16 = fullTextMatchingLicense0.getNotes();
        java.lang.String str17 = fullTextMatchingLicense0.getNotes();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NotBuilder: null" + "'", str12, "NotBuilder: null");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "SpdxBuilder: 641dafc1-13c3-45d4-8272-f36f10392c53" + "'", str15, "SpdxBuilder: 641dafc1-13c3-45d4-8272-f36f10392c53");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test09994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09994");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        boolean boolean19 = strSet9.isEmpty();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet21 = strSet9.tailSet("MANIFEST.MF");
        strSet9.clear();
        org.apache.rat.utils.DefaultLog defaultLog23 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender24 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.utils.ReportingSet.Options options31 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration29.licenseDuplicateOption(options31);
        reportConfiguration26.familyDuplicateOption(options31);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier34 = reportConfiguration26.getWriter();
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        reportConfiguration36.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level39 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration36.logFamilyCollisions(level39);
        reportConfiguration26.logFamilyCollisions(level39);
        org.apache.rat.Defaults.Builder builder42 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder43 = builder42.noDefault();
        defaultLog23.log(level39, (java.lang.Object) builder42);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender46 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog23, "Datum [ name ='binary',value =' ']");
        org.apache.rat.configuration.Format format47 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader48 = format47.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = licenseReader48.readLicenses();
        java.lang.String[] strArray55 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet56 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        boolean boolean59 = strSet56.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean61 = strSet56.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction62 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet63 = strSet56.setMsgFormat(strFunction62);
        boolean boolean64 = strSet56.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory65 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet49, (java.util.Collection<java.lang.String>) strSet56);
        boolean boolean66 = strSet56.isEmpty();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet68 = strSet56.tailSet("MANIFEST.MF");
        strSet56.clear();
        org.apache.rat.Defaults.Builder builder70 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults71 = builder70.build();
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter75);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet77 = defaults71.getLicenseFamilies(licenseFilter75);
        boolean boolean78 = strSet56.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet77);
        defaultLog23.warn((java.lang.Object) strSet56);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet80 = strSet9.setLog((org.apache.rat.utils.Log) defaultLog23);
        int int81 = strSet80.size();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(defaultLog23);
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + options31 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options31.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier34);
        org.junit.Assert.assertTrue("'" + level39 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level39.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + format47 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format47.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader48);
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(defaults71);
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test09995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09995");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("W3CD ");
        org.apache.rat.license.ILicense.Builder builder4 = builder0.setLicenseFamilyCategory("274c6a15-09f6-4bfd-ac53-1827770eb507");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("535b5d01-f553-45e5-bb29-a646e4b8b66f");
        org.apache.rat.license.ILicense.Builder builder8 = builder6.setName("71f9048b-6413-4a71-a18a-0ee565e2b3ba");
        java.lang.Class<?> wildcardClass9 = builder6.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test09996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09996");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("Copyright Builder: s:5229a e:null o:null", "688df92f-f2ac-4527-846e-6d6bf8643eb7", "GNU General Public License, version 1");
    }

    @Test
    public void test09997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09997");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder2 = copyrightBuilder0.setStart("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = copyrightBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = copyrightBuilder0.build();
        java.lang.String str5 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder0.setEnd("");
        java.lang.String str8 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = copyrightBuilder0.setOwner("Copyright Builder: s:.cvsignore e:null o:W3C  ");
        java.lang.String str11 = copyrightBuilder10.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = copyrightBuilder10.setOwner("d0774232cdef4507a8b6ac22a273dde3");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertNotNull(copyrightBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null" + "'", str5, "Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e: o:null" + "'", str8, "Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e: o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e: o:Copyright Builder: s:.cvsignore e:null o:W3C  " + "'", str11, "Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e: o:Copyright Builder: s:.cvsignore e:null o:W3C  ");
        org.junit.Assert.assertNotNull(copyrightBuilder13);
    }

    @Test
    public void test09998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09998");
        org.apache.rat.license.ILicense[] iLicenseArray0 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet1 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet1, iLicenseArray0);
        java.lang.String[] strArray15 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, (java.util.Collection<java.lang.String>) strList16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet20 = licenseSetFactory18.getLicenseFamilies(licenseFilter19);
        org.apache.rat.policy.DefaultPolicy defaultPolicy21 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet20);
        org.apache.rat.api.Document document22 = null;
        defaultPolicy21.analyse(document22);
        org.apache.rat.api.Document document24 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy21.reportLicenseApprovalClaim(document24, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet20);
    }

    @Test
    public void test09999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09999");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        java.lang.String str2 = matcherRefBuilder0.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap3 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder4 = matcherRefBuilder0.setMatchers(strMap3);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap5 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder0.setMatchers(strMap5);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder0.setMatchers(strMap7);
        java.lang.String str9 = matcherRefBuilder0.toString();
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MathcerRefBuilder: null" + "'", str2, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MathcerRefBuilder: null" + "'", str9, "MathcerRefBuilder: null");
    }

    @Test
    public void test10000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test10000");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum12 = metaData0.get("http:");
        org.apache.rat.api.MetaData.Datum datum13 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATIM_TRUE;
        metaData0.add(datum13);
        boolean boolean16 = metaData0.clear("");
        org.apache.rat.api.MetaData.Datum datum17 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_W3C;
        metaData0.add(datum17);
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection19 = metaData0.getData();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNull(datum12);
        org.junit.Assert.assertNotNull(datum13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(datum17);
        org.junit.Assert.assertNotNull(datumCollection19);
    }
}
