package org.apache.rat;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest13 {

    public static boolean debug = false;

    @Test
    public void test06501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06501");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray0 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList1 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1, iLicenseFamilyArray0);
        org.apache.rat.policy.DefaultPolicy defaultPolicy3 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList1);
        org.apache.rat.api.Document document4 = null;
        defaultPolicy3.analyse(document4);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet6 = defaultPolicy3.getApprovedLicenseNames();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet7 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder8 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str9 = iLicenseFamilyBuilder8.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder11 = iLicenseFamilyBuilder8.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder13 = iLicenseFamilyBuilder8.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder15 = iLicenseFamilyBuilder8.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        java.lang.String str16 = iLicenseFamilyBuilder8.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder18 = iLicenseFamilyBuilder8.setLicenseFamilyName("Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e: o:null");
        org.apache.rat.license.ILicenseFamily iLicenseFamily19 = iLicenseFamilyBuilder8.build();
        defaultPolicy3.add(iLicenseFamily19);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet21 = defaultPolicy3.getApprovedLicenseNames();
        org.junit.Assert.assertNotNull(iLicenseFamilyArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet6);
        org.junit.Assert.assertNotNull(iLicenseFamilySet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "3c74a3ec-8235-4035-9db7-f9f475b48681" + "'", str16, "3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(iLicenseFamily19);
        org.junit.Assert.assertNotNull(iLicenseFamilySet21);
    }

    @Test
    public void test06502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06502");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.utils.ReportingSet.Options options3 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration2.licenseDuplicateOption(options3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        java.io.FilenameFilter filenameFilter7 = reportConfiguration6.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter8 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet9 = reportConfiguration6.getLicenses(licenseFilter8);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders10 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration6.setAddLicenseHeaders(addLicenseHeaders10);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic14 = org.apache.rat.Reporter.report(reportConfiguration13);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter15);
        org.apache.rat.Reporter.listLicenses(reportConfiguration6, licenseFilter15);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration6, licenseFilter28);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier34 = reportConfiguration33.getOutput();
        reportConfiguration6.setOut(outputStreamIOSupplier34);
        org.apache.rat.utils.Log.Level level36 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration6.logLicenseCollisions(level36);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter38 = reportConfiguration6.getDirectoryFilter();
        reportConfiguration2.setInputFileFilter((java.io.FilenameFilter) iOFileFilter38);
        java.nio.file.Path path40 = null;
        boolean boolean41 = iOFileFilter38.matches(path40);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter42 = iOFileFilter38.negate();
        java.nio.file.Path path43 = null;
        boolean boolean44 = iOFileFilter38.matches(path43);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter45 = iOFileFilter38.negate();
        java.nio.file.Path path46 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes47 = null;
        java.nio.file.FileVisitResult fileVisitResult48 = iOFileFilter45.accept(path46, basicFileAttributes47);
        java.nio.file.Path path49 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes50 = null;
        java.nio.file.FileVisitResult fileVisitResult51 = iOFileFilter45.accept(path49, basicFileAttributes50);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker52 = new org.apache.rat.walker.DirectoryWalker(file0, iOFileFilter45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + options3 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options3.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter7);
        org.junit.Assert.assertTrue("'" + licenseFilter8 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter8.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet9);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders10 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders10.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier34);
        org.junit.Assert.assertTrue("'" + level36 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level36.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(iOFileFilter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(iOFileFilter45);
        org.junit.Assert.assertTrue("'" + fileVisitResult48 + "' != '" + java.nio.file.FileVisitResult.CONTINUE + "'", fileVisitResult48.equals(java.nio.file.FileVisitResult.CONTINUE));
        org.junit.Assert.assertTrue("'" + fileVisitResult51 + "' != '" + java.nio.file.FileVisitResult.CONTINUE + "'", fileVisitResult51.equals(java.nio.file.FileVisitResult.CONTINUE));
    }

    @Test
    public void test06503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06503");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration1.logLicenseCollisions(level31);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter33 = reportConfiguration1.getDirectoryFilter();
        java.nio.file.Path path34 = null;
        boolean boolean35 = iOFileFilter33.matches(path34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        java.io.FilenameFilter filenameFilter38 = reportConfiguration37.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = reportConfiguration37.getLicenses(licenseFilter39);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders41 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration37.setAddLicenseHeaders(addLicenseHeaders41);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic45 = org.apache.rat.Reporter.report(reportConfiguration44);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter46);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter46);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders54 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration50.setAddLicenseHeaders(addLicenseHeaders54);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = org.apache.rat.Reporter.report(reportConfiguration57);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter59);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier65 = reportConfiguration64.getOutput();
        reportConfiguration37.setOut(outputStreamIOSupplier65);
        org.apache.rat.utils.Log.Level level67 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration37.logLicenseCollisions(level67);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter69 = reportConfiguration37.getDirectoryFilter();
        java.nio.file.Path path70 = null;
        boolean boolean71 = iOFileFilter69.matches(path70);
        java.nio.file.Path path72 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes73 = null;
        java.nio.file.FileVisitResult fileVisitResult74 = iOFileFilter69.accept(path72, basicFileAttributes73);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter75 = iOFileFilter33.or(iOFileFilter69);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.filefilter.IOFileFilter iOFileFilter77 = iOFileFilter33.and(iOFileFilter76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: fileFilter");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level31.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(filenameFilter38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet40);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders41 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders41.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders54 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders54.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier65);
        org.junit.Assert.assertTrue("'" + level67 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level67.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult74 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult74.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter75);
    }

    @Test
    public void test06504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06504");
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        reportConfiguration2.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration2.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.List<java.lang.String> strList7 = org.apache.rat.config.SourceCodeManagementSystems.getPluginExclusions();
        reportConfiguration2.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList7);
        boolean boolean9 = reportConfiguration2.isAddingLicenses();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.utils.ReportingSet.Options options16 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration14.licenseDuplicateOption(options16);
        reportConfiguration11.familyDuplicateOption(options16);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier19 = reportConfiguration11.getWriter();
        boolean boolean20 = reportConfiguration11.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter21 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        reportConfiguration23.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        reportConfiguration23.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet37 = reportConfiguration34.getLicenses(licenseFilter36);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders38 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration34.setAddLicenseHeaders(addLicenseHeaders38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter43);
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter43);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        java.io.FilenameFilter filenameFilter48 = reportConfiguration47.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet50 = reportConfiguration47.getLicenses(licenseFilter49);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders51 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration47.setAddLicenseHeaders(addLicenseHeaders51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic55 = org.apache.rat.Reporter.report(reportConfiguration54);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter56);
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter56);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet59 = reportConfiguration34.getLicenseFamilies(licenseFilter56);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration23, licenseFilter56);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter56);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter56);
        org.apache.rat.configuration.Format format63 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader64 = format63.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader65 = format63.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader66 = format63.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet67 = licenseReader66.readLicenses();
        reportConfiguration2.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet67);
        org.apache.rat.license.ILicense iLicense69 = org.apache.rat.license.LicenseSetFactory.search("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", iLicenseSet67);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertTrue("'" + options16 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options16.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet37);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders38 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders38.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet50);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders51 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders51.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet59);
        org.junit.Assert.assertTrue("'" + format63 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format63.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader64);
        org.junit.Assert.assertNotNull(matcherReader65);
        org.junit.Assert.assertNotNull(licenseReader66);
        org.junit.Assert.assertNotNull(iLicenseSet67);
        org.junit.Assert.assertNull(iLicense69);
    }

    @Test
    public void test06505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06505");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumGenerated(0);
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = null;
        claimStatistic0.setDocumentCategoryMap(strMap13);
        java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null;
        claimStatistic0.setDocumentCategoryMap(strMap15);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap12);
    }

    @Test
    public void test06506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06506");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log.Level level56 = defaultLog0.getLevel();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic57.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap60 = null;
        claimStatistic57.setDocumentCategoryMap(strMap60);
        claimStatistic57.setNumUnknown((int) '4');
        java.util.Map<java.lang.String, java.lang.Integer> strMap64 = null;
        claimStatistic57.setLicenseFileNameMap(strMap64);
        java.util.Map<java.lang.String, java.lang.Integer> strMap66 = claimStatistic57.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap67 = null;
        claimStatistic57.setLicenseFileCodeMap(strMap67);
        claimStatistic57.setNumGenerated(10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap71 = null;
        claimStatistic57.setLicenseFileNameMap(strMap71);
        java.lang.Throwable throwable73 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.info((java.lang.Object) claimStatistic57, throwable73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level56 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level56.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(strMap66);
    }

    @Test
    public void test06507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06507");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str1 = spdxBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = spdxBuilder0.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = spdxBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder0.build();
        java.lang.String str7 = spdxBuilder0.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = spdxBuilder0.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder10 = spdxBuilder0.setName("SpdxB");
        java.lang.String str11 = spdxBuilder10.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder13 = spdxBuilder10.setName("Copyright Builder: s:null e:3c840dc2-bef0-42b5-b26c-35a568d53a24 o:null");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder15 = spdxBuilder10.setName("5c128173-2ced-4023-be3f-9b322096ff0e");
        org.junit.Assert.assertNotNull(spdxBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilder: null" + "'", str1, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str7, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(spdxBuilder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "SpdxBuilder: SpdxB" + "'", str11, "SpdxBuilder: SpdxB");
        org.junit.Assert.assertNotNull(spdxBuilder13);
        org.junit.Assert.assertNotNull(spdxBuilder15);
    }

    @Test
    public void test06508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06508");
        java.lang.String[] strArray4 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean5 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", strArray4);
        boolean boolean6 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("http://org/apache/rat/meta-data#LicenseFamilyCategory", strArray4);
        boolean boolean7 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("The MIT License", strArray4);
        boolean boolean8 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("SpdxBuilder: null", strArray4);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06509");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("DOJO ");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setNotes("SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicenseFamily iLicenseFamily10 = fullTextMatchingLicense0.getLicenseFamily();
        fullTextMatchingLicense0.setLicenseFamilyName("Datum [ name ='MANIFEST.MF',value ='GPL2  ']");
        java.lang.String str13 = fullTextMatchingLicense0.getLicenseFamilyName();
        java.lang.String str14 = fullTextMatchingLicense0.getLicenseFamilyName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Datum [ name ='MANIFEST.MF',value ='GPL2  ']" + "'", str13, "Datum [ name ='MANIFEST.MF',value ='GPL2  ']");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Datum [ name ='MANIFEST.MF',value ='GPL2  ']" + "'", str14, "Datum [ name ='MANIFEST.MF',value ='GPL2  ']");
    }

    @Test
    public void test06510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06510");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap3);
        int int5 = claimStatistic0.getNumUnknown();
        claimStatistic0.setNumUnApproved((int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getLicenseFileNameMap();
        int int9 = claimStatistic0.getNumApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null;
        claimStatistic0.setLicenseFileNameMap(strMap10);
        claimStatistic0.setNumUnknown(10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test06511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06511");
        java.lang.String[] strArray7 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean8 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Copyright Builder: s:null e:.cvsignore o:null", strArray7);
        boolean boolean9 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("http://org/apache/rat/meta-data#HeaderCategory", strArray7);
        boolean boolean10 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("http://org/apache/rat/meta-data#HeaderSample", strArray7);
        boolean boolean11 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("9340895e-47fd-411d-8917-58c71f9a32c4", strArray7);
        boolean boolean12 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("SpdxBuilder: 15ff671b-67b8-4791-9e1e-208f319fb7e2", strArray7);
        boolean boolean13 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("", strArray7);
        boolean boolean14 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("d25f13bc-1910-4451-97b5-b72663551a5d", strArray7);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06512");
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.api.ContentType contentType3 = new org.apache.rat.api.ContentType("f65b7401-dce0-4358-b870-cf848940a8e0", "b34f95f9-1711-4b0a-b02f-fef90a5139bf", strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06513");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.AllBuilder allBuilder2 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = allBuilder2.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = anyBuilder1.add((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder2);
        java.lang.String str5 = anyBuilder1.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = anyBuilder1.build();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher("a357a28e-849d-4383-9cc0-95ecd482d23e", iHeaderMatcher6);
        org.apache.rat.analysis.IHeaderMatcher.State state8 = iHeaderMatcher6.finalizeState();
        org.junit.Assert.assertNotNull(anyBuilder1);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AnyBuilder:\nAllBuilder:" + "'", str5, "AnyBuilder:\nAllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test06514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06514");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str1 = anyBuilder0.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = anyBuilder0.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList3 = anyBuilder0.getChildren();
        java.lang.String str4 = anyBuilder0.toString();
        java.lang.String str5 = anyBuilder0.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder6 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = anyBuilder6.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = anyBuilder6.build();
        java.lang.String str9 = anyBuilder6.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder10 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = anyBuilder10.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = anyBuilder10.build();
        java.lang.String str13 = anyBuilder10.toString();
        org.apache.rat.document.ToNameTransformer toNameTransformer14 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.configuration.builders.AllBuilder allBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList16 = allBuilder15.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher17 = allBuilder15.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList18 = allBuilder15.getChildren();
        java.lang.Object obj19 = toNameTransformer14.transform((java.lang.Object) allBuilder15);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder20 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str21 = spdxBuilder20.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder23 = spdxBuilder20.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher24 = spdxBuilder20.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher25 = spdxBuilder20.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher26 = spdxBuilder20.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher27 = spdxBuilder20.build();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder29 = spdxBuilder20.setName("7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder30 = allBuilder15.add((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder20);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder31 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str32 = anyBuilder31.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList33 = anyBuilder31.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher34 = anyBuilder31.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher35 = anyBuilder31.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList36 = anyBuilder31.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder37 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str38 = notBuilder37.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean40 = matcherRefBuilder39.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap41 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = matcherRefBuilder39.setMatchers(strMap41);
        org.apache.rat.configuration.builders.AllBuilder allBuilder43 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder44 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder46 = copyrightBuilder44.setStart("OASIS");
        java.lang.String str47 = copyrightBuilder44.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder49 = copyrightBuilder44.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder50 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean51 = matcherRefBuilder50.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder52 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder54 = copyrightBuilder52.setStart("OASIS");
        java.lang.String str55 = copyrightBuilder52.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder57 = copyrightBuilder52.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder58 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder59 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str60 = copyrightBuilder59.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder62 = copyrightBuilder59.setEnd(".cvsignore");
        boolean boolean63 = copyrightBuilder59.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder64 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str65 = copyrightBuilder64.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder67 = copyrightBuilder64.setEnd(".cvsignore");
        boolean boolean68 = copyrightBuilder64.hasId();
        java.lang.String str69 = copyrightBuilder64.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder70 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder72 = copyrightBuilder70.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder73 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder74 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean75 = matcherRefBuilder74.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap76 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder77 = matcherRefBuilder74.setMatchers(strMap76);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder78 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder79 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean80 = matcherRefBuilder79.hasId();
        java.lang.String str81 = matcherRefBuilder79.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap82 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder83 = matcherRefBuilder79.setMatchers(strMap82);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray84 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder39, allBuilder43, copyrightBuilder49, matcherRefBuilder50, copyrightBuilder52, copyrightBuilder58, copyrightBuilder59, copyrightBuilder64, copyrightBuilder70, anyBuilder73, matcherRefBuilder74, copyrightBuilder78, matcherRefBuilder79 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList85 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList85, builderArray84);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder87 = notBuilder37.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList85);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder88 = anyBuilder31.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList85);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder89 = allBuilder15.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList85);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder90 = anyBuilder10.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList85);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder91 = anyBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList85);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder92 = anyBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList85);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher93 = anyBuilder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AnyBuilder:" + "'", str1, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcherList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AnyBuilder:" + "'", str4, "AnyBuilder:");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "AnyBuilder:" + "'", str5, "AnyBuilder:");
        org.junit.Assert.assertNotNull(anyBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AnyBuilder:" + "'", str9, "AnyBuilder:");
        org.junit.Assert.assertNotNull(anyBuilder10);
        org.junit.Assert.assertNotNull(iHeaderMatcher11);
        org.junit.Assert.assertNotNull(iHeaderMatcher12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AnyBuilder:" + "'", str13, "AnyBuilder:");
        org.junit.Assert.assertNotNull(allBuilder15);
        org.junit.Assert.assertNotNull(iHeaderMatcherList16);
        org.junit.Assert.assertNotNull(iHeaderMatcher17);
        org.junit.Assert.assertNotNull(iHeaderMatcherList18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(spdxBuilder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "SpdxBuilder: null" + "'", str21, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder23);
        org.junit.Assert.assertNotNull(iHeaderMatcher24);
        org.junit.Assert.assertNotNull(iHeaderMatcher25);
        org.junit.Assert.assertNotNull(iHeaderMatcher26);
        org.junit.Assert.assertNotNull(iHeaderMatcher27);
        org.junit.Assert.assertNotNull(spdxBuilder29);
        org.junit.Assert.assertNotNull(abstractBuilder30);
        org.junit.Assert.assertNotNull(anyBuilder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AnyBuilder:" + "'", str32, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList33);
        org.junit.Assert.assertNotNull(iHeaderMatcher34);
        org.junit.Assert.assertNotNull(iHeaderMatcher35);
        org.junit.Assert.assertNotNull(iHeaderMatcherList36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NotBuilder: null" + "'", str38, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertNotNull(copyrightBuilder44);
        org.junit.Assert.assertNotNull(copyrightBuilder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str47, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder49);
        org.junit.Assert.assertNotNull(matcherRefBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder52);
        org.junit.Assert.assertNotNull(copyrightBuilder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str55, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder57);
        org.junit.Assert.assertNotNull(copyrightBuilder58);
        org.junit.Assert.assertNotNull(copyrightBuilder59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str60, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str65, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str69, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder70);
        org.junit.Assert.assertNotNull(copyrightBuilder72);
        org.junit.Assert.assertNotNull(anyBuilder73);
        org.junit.Assert.assertNotNull(matcherRefBuilder74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder77);
        org.junit.Assert.assertNotNull(copyrightBuilder78);
        org.junit.Assert.assertNotNull(matcherRefBuilder79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "MathcerRefBuilder: null" + "'", str81, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder83);
        org.junit.Assert.assertNotNull(builderArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(abstractBuilder87);
        org.junit.Assert.assertNotNull(abstractBuilder88);
        org.junit.Assert.assertNotNull(abstractBuilder89);
        org.junit.Assert.assertNotNull(abstractBuilder90);
        org.junit.Assert.assertNotNull(abstractBuilder91);
        org.junit.Assert.assertNotNull(abstractBuilder92);
    }

    @Test
    public void test06515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06515");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic1 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic1.setNumApproved((int) (short) 10);
        claimStatistic1.setNumUnknown(30);
        java.lang.Object obj6 = toNameTransformer0.transform((java.lang.Object) claimStatistic1);
        claimStatistic1.setNumGenerated((int) (short) 100);
        int int9 = claimStatistic1.getNumApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic1.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic1.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = null;
        claimStatistic1.setDocumentCategoryMap(strMap12);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test06516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06516");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str2 = copyrightBuilder1.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder4 = copyrightBuilder1.setEnd(".cvsignore");
        boolean boolean5 = copyrightBuilder1.hasId();
        boolean boolean6 = copyrightBuilder1.hasId();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = copyrightBuilder1.build();
        boolean boolean8 = copyrightBuilder1.hasId();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = copyrightBuilder1.build();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher10 = new org.apache.rat.analysis.matchers.NotMatcher("265F6D84-FB7A-4674-9DC1-FEA7799ECF68", iHeaderMatcher9);
        org.junit.Assert.assertNotNull(copyrightBuilder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str2, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
    }

    @Test
    public void test06517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06517");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        org.apache.rat.Defaults.Builder builder6 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults7 = builder6.build();
        reportConfiguration1.setFrom(defaults7);
        org.apache.rat.Defaults.Builder builder9 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder10 = builder9.noDefault();
        org.apache.rat.Defaults defaults11 = builder10.build();
        org.apache.rat.Defaults.Builder builder12 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults13 = builder12.build();
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = reportConfiguration28.getLicenses(licenseFilter30);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders32 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration28.setAddLicenseHeaders(addLicenseHeaders32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter37);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter37);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet40 = reportConfiguration15.getLicenseFamilies(licenseFilter37);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet41 = defaults13.getLicenses(licenseFilter37);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet42 = defaults11.getLicenseFamilies(licenseFilter37);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet43 = defaults7.getLicenseFamilies(licenseFilter37);
        org.apache.rat.Defaults.Builder builder44 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults45 = builder44.build();
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        reportConfiguration47.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        java.io.FilenameFilter filenameFilter52 = reportConfiguration51.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet54 = reportConfiguration51.getLicenses(licenseFilter53);
        reportConfiguration47.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration47.getInputFileFilter();
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        java.io.FilenameFilter filenameFilter59 = reportConfiguration58.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet61 = reportConfiguration58.getLicenses(licenseFilter60);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders62 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration58.setAddLicenseHeaders(addLicenseHeaders62);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter67 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration65, licenseFilter67);
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter67);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        java.io.FilenameFilter filenameFilter72 = reportConfiguration71.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter73 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet74 = reportConfiguration71.getLicenses(licenseFilter73);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders75 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration71.setAddLicenseHeaders(addLicenseHeaders75);
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic79 = org.apache.rat.Reporter.report(reportConfiguration78);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter80 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration78, licenseFilter80);
        org.apache.rat.Reporter.listLicenses(reportConfiguration71, licenseFilter80);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet83 = reportConfiguration58.getLicenseFamilies(licenseFilter80);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration47, licenseFilter80);
        java.util.SortedSet<java.lang.String> strSet85 = defaults45.getLicenseIds(licenseFilter80);
        java.util.SortedSet<java.lang.String> strSet86 = defaults7.getLicenseIds(licenseFilter80);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter87 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedSet<java.lang.String> strSet88 = defaults7.getLicenseIds(licenseFilter87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaults7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(defaults11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(defaults13);
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders32 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders32.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet40);
        org.junit.Assert.assertNotNull(iLicenseSet41);
        org.junit.Assert.assertNotNull(iLicenseFamilySet42);
        org.junit.Assert.assertNotNull(iLicenseFamilySet43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(defaults45);
        org.junit.Assert.assertNull(filenameFilter52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet54);
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertNull(filenameFilter59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet61);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders62 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders62.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertTrue("'" + licenseFilter67 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter67.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter72);
        org.junit.Assert.assertTrue("'" + licenseFilter73 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter73.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet74);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders75 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders75.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic79);
        org.junit.Assert.assertTrue("'" + licenseFilter80 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter80.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet83);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strSet86);
    }

    @Test
    public void test06518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06518");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("binary", "GPL1 ", "Modified BSD License");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = copyrightMatcher3.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = copyrightMatcher3.matches("hi!");
        java.lang.String str7 = copyrightMatcher3.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher3.matches("httporgapacheratmetadataLicenseFamilyName");
        java.lang.String str10 = copyrightMatcher3.getId();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "02ef6fb0-9b9f-4a44-a5c6-08823bf147fd" + "'", str7, "02ef6fb0-9b9f-4a44-a5c6-08823bf147fd");
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "02ef6fb0-9b9f-4a44-a5c6-08823bf147fd" + "'", str10, "02ef6fb0-9b9f-4a44-a5c6-08823bf147fd");
    }

    @Test
    public void test06519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06519");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isNonBinary("9e61083a-6568-4c3f-b7d9-f502a517d761");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test06520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06520");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier3 = reportConfiguration1.getStyleSheet();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems5 = org.apache.rat.config.SourceCodeManagementSystems.CVS;
        java.lang.String str6 = sourceCodeManagementSystems5.getIgnoreFile();
        boolean boolean7 = sourceCodeManagementSystems5.hasIgnoreFile();
        java.util.List<java.lang.String> strList8 = sourceCodeManagementSystems5.getExclusions();
        java.io.FilenameFilter filenameFilter9 = org.apache.rat.Report.parseExclusions(strList8);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList8);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration15);
        org.apache.rat.utils.ReportingSet.Options options17 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration15.licenseDuplicateOption(options17);
        reportConfiguration12.familyDuplicateOption(options17);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier20 = reportConfiguration12.getWriter();
        boolean boolean21 = reportConfiguration12.isAddingLicensesForced();
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier25 = reportConfiguration23.getOutput();
        reportConfiguration12.setOut(outputStreamIOSupplier25);
        reportConfiguration1.setOut(outputStreamIOSupplier25);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder28 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str29 = iLicenseFamilyBuilder28.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder31 = iLicenseFamilyBuilder28.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder33 = iLicenseFamilyBuilder28.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder35 = iLicenseFamilyBuilder28.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.apache.rat.license.ILicenseFamily.Builder builder37 = builder35.setLicenseFamilyCategory("49ba0523-306f-4984-949f-9db17b9667d9");
        reportConfiguration1.addFamily(builder35);
        org.apache.rat.report.IReportable iReportable39 = reportConfiguration1.getReportable();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter40 = reportConfiguration1.getDirectoryFilter();
        java.net.URI uRI41 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRI41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(inputStreamIOSupplier3);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems5 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.CVS + "'", sourceCodeManagementSystems5.equals(org.apache.rat.config.SourceCodeManagementSystems.CVS));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + ".cvsignore" + "'", str6, ".cvsignore");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(filenameFilter9);
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertTrue("'" + options17 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options17.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier25);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(iReportable39);
        org.junit.Assert.assertNotNull(iOFileFilter40);
    }

    @Test
    public void test06521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06521");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        java.lang.String str2 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder4 = regexBuilder0.setExpr("d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = regexBuilder0.build();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder7 = regexBuilder0.setExpr("e484573a-f5dc-41c9-94d2-04bf4d4fa217");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = regexBuilder7.build();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RegexBuilder: null" + "'", str2, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(regexBuilder7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
    }

    @Test
    public void test06522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06522");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = null;
        claimStatistic0.setDocumentCategoryMap(strMap5);
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown(10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic0.getLicenseFileNameMap();
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test06523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06523");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("i indeterminent");
        org.apache.rat.license.ILicense.Builder builder8 = builder4.setId("a8ad4");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder9 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str10 = spdxBuilder9.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder12 = spdxBuilder9.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.lang.String str13 = spdxBuilder12.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder15 = spdxBuilder12.setName("9d334763-6150-4fa3-86d4-32f09aebbaad");
        org.apache.rat.license.ILicense.Builder builder16 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder15);
        org.apache.rat.license.ILicense.Builder builder18 = builder16.setNotes("c8f389b8-5295-40d4-be8e-f0d0afde51c6");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder19 = new org.apache.rat.configuration.builders.RegexBuilder();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder21 = regexBuilder19.setExpr("a8ad4");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher22 = regexBuilder19.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher23 = regexBuilder19.build();
        org.apache.rat.license.ILicense.Builder builder24 = builder16.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) regexBuilder19);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(spdxBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "SpdxBuilder: null" + "'", str10, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str13, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(spdxBuilder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(regexBuilder21);
        org.junit.Assert.assertNotNull(iHeaderMatcher22);
        org.junit.Assert.assertNotNull(iHeaderMatcher23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test06524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06524");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        reportConfiguration1.removeApprovedLicenseCategory("EF7A8B13-64C3-4510-BB0C-DBF208E1E73F");
        java.util.SortedSet<java.lang.String> strSet5 = reportConfiguration1.getApprovedLicenseCategories();
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        reportConfiguration7.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration7.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.license.ILicenseFamily iLicenseFamily12 = null;
        reportConfiguration7.addFamily(iLicenseFamily12);
        boolean boolean14 = reportConfiguration7.isStyleReport();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter15 = reportConfiguration7.getDirectoryFilter();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet18 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.policy.DefaultPolicy defaultPolicy19 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet18);
        org.apache.rat.license.ILicenseFamily iLicenseFamily20 = org.apache.rat.license.LicenseFamilySetFactory.search("MANIFEST.MF", iLicenseFamilySet18);
        org.apache.rat.license.ILicenseFamily iLicenseFamily21 = org.apache.rat.license.LicenseFamilySetFactory.search("Copyright Builder: s:null e:W3C Software Copyright o:null", iLicenseFamilySet18);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.utils.Log log50 = null;
        org.apache.rat.ReportConfiguration reportConfiguration51 = new org.apache.rat.ReportConfiguration(log50);
        java.io.FilenameFilter filenameFilter52 = reportConfiguration51.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet54 = reportConfiguration51.getLicenses(licenseFilter53);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders55 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration51.setAddLicenseHeaders(addLicenseHeaders55);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter60);
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter60);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        java.io.FilenameFilter filenameFilter65 = reportConfiguration64.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter66 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet67 = reportConfiguration64.getLicenses(licenseFilter66);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders68 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration64.setAddLicenseHeaders(addLicenseHeaders68);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic72 = org.apache.rat.Reporter.report(reportConfiguration71);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter73 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration71, licenseFilter73);
        org.apache.rat.Reporter.listLicenses(reportConfiguration64, licenseFilter73);
        org.apache.rat.Reporter.listLicenses(reportConfiguration51, licenseFilter73);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet77 = reportConfiguration23.getLicenses(licenseFilter73);
        boolean boolean78 = reportConfiguration23.isAddingLicensesForced();
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic81 = org.apache.rat.Reporter.report(reportConfiguration80);
        org.apache.rat.utils.Log log82 = null;
        org.apache.rat.ReportConfiguration reportConfiguration83 = new org.apache.rat.ReportConfiguration(log82);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic84 = org.apache.rat.Reporter.report(reportConfiguration83);
        org.apache.rat.utils.ReportingSet.Options options85 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration83.licenseDuplicateOption(options85);
        reportConfiguration80.familyDuplicateOption(options85);
        reportConfiguration23.familyDuplicateOption(options85);
        java.util.SortedSet<java.lang.String> strSet89 = reportConfiguration23.getApprovedLicenseCategories();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory90 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet18, (java.util.Collection<java.lang.String>) strSet89);
        org.apache.rat.utils.DefaultLog defaultLog91 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender92 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog91);
        org.apache.rat.ReportConfiguration reportConfiguration93 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog91);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter94 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        org.apache.rat.Reporter.listLicenses(reportConfiguration93, licenseFilter94);
        java.util.SortedSet<java.lang.String> strSet96 = licenseFamilySetFactory90.getFamilyIds(licenseFilter94);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet97 = reportConfiguration7.getLicenseFamilies(licenseFilter94);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet97);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(iOFileFilter15);
        org.junit.Assert.assertNotNull(iLicenseFamilySet18);
        org.junit.Assert.assertNull(iLicenseFamily20);
        org.junit.Assert.assertNull(iLicenseFamily21);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertNull(filenameFilter52);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet54);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders55 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders55.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter65);
        org.junit.Assert.assertTrue("'" + licenseFilter66 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter66.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet67);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders68 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders68.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic72);
        org.junit.Assert.assertTrue("'" + licenseFilter73 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter73.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(claimStatistic81);
        org.junit.Assert.assertNull(claimStatistic84);
        org.junit.Assert.assertTrue("'" + options85 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options85.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertNotNull(defaultLog91);
        org.junit.Assert.assertTrue("'" + licenseFilter94 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter94.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertNotNull(iLicenseFamilySet97);
    }

    @Test
    public void test06525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06525");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        org.apache.rat.analysis.IHeaderMatcher.State state6 = notMatcher4.matches("2b7a7df2-0dac-406a-96b5-ea6b08e88337");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = notMatcher4.matches("RegexBuilder: d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = notMatcher4.currentState();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test06526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06526");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter14 = xmlWriter1.openElement((java.lang.CharSequence) "64868");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: '64868' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06527");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd(".cvsignore");
        boolean boolean4 = copyrightBuilder0.hasId();
        boolean boolean5 = copyrightBuilder0.hasId();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = copyrightBuilder0.build();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher(iHeaderMatcher6);
        org.apache.rat.analysis.IHeaderMatcher.State state8 = notMatcher7.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state9 = notMatcher7.currentState();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
    }

    @Test
    public void test06528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06528");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum4 = metaData0.get("f false");
        org.apache.rat.api.MetaData.Datum datum7 = new org.apache.rat.api.MetaData.Datum("http://org/apache/rat/meta-data#FileCategory", "Copyright Builder: s:null e:.cvsignore o:null");
        metaData0.add(datum7);
        org.apache.rat.api.MetaData.Datum datum11 = new org.apache.rat.api.MetaData.Datum("eba9cdef-527a-48ca-947b-897e2e06ea31", "0356753d-7389-48e7-8d63-056fd4c4548c");
        metaData0.set(datum11);
        java.lang.String str13 = datum11.getName();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(datum4);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "eba9cdef-527a-48ca-947b-897e2e06ea31" + "'", str13, "eba9cdef-527a-48ca-947b-897e2e06ea31");
    }

    @Test
    public void test06529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06529");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier6 = reportConfiguration1.getOutput();
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier7 = reportConfiguration1.getWriter();
        reportConfiguration1.setStyleReport(false);
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier6);
        org.junit.Assert.assertNotNull(printWriterIOSupplier7);
    }

    @Test
    public void test06530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06530");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher1 = allBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = allBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = allBuilder0.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder4 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str5 = copyrightBuilder4.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder4.setEnd(".cvsignore");
        boolean boolean8 = copyrightBuilder4.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = copyrightBuilder4.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder11 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder4);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = copyrightBuilder4.setEnd("Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher14 = copyrightBuilder13.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder16 = copyrightBuilder13.setOwner("null ?????");
        org.junit.Assert.assertNotNull(iHeaderMatcher1);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(copyrightBuilder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str5, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder10);
        org.junit.Assert.assertNotNull(abstractBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(iHeaderMatcher14);
        org.junit.Assert.assertNotNull(copyrightBuilder16);
    }

    @Test
    public void test06531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06531");
        java.lang.String str1 = org.apache.rat.analysis.matchers.FullTextMatcher.prune("36f60d10-a0bd-4355-a2a6-3635adf29872");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "36f60d10a0bd4355a2a63635adf29872" + "'", str1, "36f60d10a0bd4355a2a63635adf29872");
    }

    @Test
    public void test06532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06532");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern1);
        simpleRegexMatcher2.reset();
        java.lang.String str4 = simpleRegexMatcher2.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher5 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher2);
        org.apache.rat.analysis.IHeaderMatcher.State state6 = simpleRegexMatcher2.currentState();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = simpleRegexMatcher2.doMatch("a31c35e6-bb4e-4807-ad11-4dc9b09d976b");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "c691e923-61c5-4fd9-9aee-0652323a0a65" + "'", str4, "c691e923-61c5-4fd9-9aee-0652323a0a65");
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test06533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06533");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        reportConfiguration12.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level15 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration12.logFamilyCollisions(level15);
        reportConfiguration1.logLicenseCollisions(level15);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic20 = org.apache.rat.Reporter.report(reportConfiguration19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.utils.ReportingSet.Options options24 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration22.licenseDuplicateOption(options24);
        reportConfiguration19.familyDuplicateOption(options24);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier27 = reportConfiguration19.getWriter();
        boolean boolean28 = reportConfiguration19.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter29 = reportConfiguration19.getInputFileFilter();
        java.io.FilenameFilter filenameFilter30 = reportConfiguration19.getInputFileFilter();
        boolean boolean31 = reportConfiguration19.isStyleReport();
        org.apache.rat.utils.Log log32 = reportConfiguration19.getLog();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter33 = reportConfiguration19.getDirectoryFilter();
        java.util.SortedSet<java.lang.String> strSet34 = reportConfiguration19.getApprovedLicenseCategories();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier35 = reportConfiguration19.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier35);
        org.apache.rat.Defaults.Builder builder37 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults38 = builder37.build();
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        java.io.FilenameFilter filenameFilter41 = reportConfiguration40.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = reportConfiguration40.getLicenses(licenseFilter42);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders44 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration40.setAddLicenseHeaders(addLicenseHeaders44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter49);
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter49);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet65 = reportConfiguration40.getLicenseFamilies(licenseFilter62);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet66 = defaults38.getLicenses(licenseFilter62);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet67 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet66);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet67);
        org.apache.rat.utils.Log log69 = null;
        org.apache.rat.ReportConfiguration reportConfiguration70 = new org.apache.rat.ReportConfiguration(log69);
        java.io.FilenameFilter filenameFilter71 = reportConfiguration70.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter72 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet73 = reportConfiguration70.getLicenses(licenseFilter72);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders74 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration70.setAddLicenseHeaders(addLicenseHeaders74);
        org.apache.rat.utils.Log log76 = null;
        org.apache.rat.ReportConfiguration reportConfiguration77 = new org.apache.rat.ReportConfiguration(log76);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic78 = org.apache.rat.Reporter.report(reportConfiguration77);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter79 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration77, licenseFilter79);
        org.apache.rat.Reporter.listLicenses(reportConfiguration70, licenseFilter79);
        org.apache.rat.utils.Log log82 = null;
        org.apache.rat.ReportConfiguration reportConfiguration83 = new org.apache.rat.ReportConfiguration(log82);
        java.io.FilenameFilter filenameFilter84 = reportConfiguration83.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter85 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet86 = reportConfiguration83.getLicenses(licenseFilter85);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders87 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration83.setAddLicenseHeaders(addLicenseHeaders87);
        org.apache.rat.utils.Log log89 = null;
        org.apache.rat.ReportConfiguration reportConfiguration90 = new org.apache.rat.ReportConfiguration(log89);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic91 = org.apache.rat.Reporter.report(reportConfiguration90);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter92 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration90, licenseFilter92);
        org.apache.rat.Reporter.listLicenses(reportConfiguration83, licenseFilter92);
        org.apache.rat.Reporter.listLicenses(reportConfiguration70, licenseFilter92);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier96 = reportConfiguration70.getOutput();
        org.apache.rat.utils.ReportingSet.Options options97 = org.apache.rat.utils.ReportingSet.Options.FAIL;
        reportConfiguration70.familyDuplicateOption(options97);
        reportConfiguration1.licenseDuplicateOption(options97);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + level15 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level15.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(claimStatistic20);
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + options24 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options24.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertNotNull(iOFileFilter33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(defaults38);
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders44 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders44.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet65);
        org.junit.Assert.assertNotNull(iLicenseSet66);
        org.junit.Assert.assertNull(filenameFilter71);
        org.junit.Assert.assertTrue("'" + licenseFilter72 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter72.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet73);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders74 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders74.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic78);
        org.junit.Assert.assertTrue("'" + licenseFilter79 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter79.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter84);
        org.junit.Assert.assertTrue("'" + licenseFilter85 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter85.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet86);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders87 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders87.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic91);
        org.junit.Assert.assertTrue("'" + licenseFilter92 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter92.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier96);
        org.junit.Assert.assertTrue("'" + options97 + "' != '" + org.apache.rat.utils.ReportingSet.Options.FAIL + "'", options97.equals(org.apache.rat.utils.ReportingSet.Options.FAIL));
    }

    @Test
    public void test06534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06534");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray1 = strSet0.toArray();
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        boolean boolean12 = reportConfiguration3.isAddingLicensesForced();
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        reportConfiguration14.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level17 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration14.logFamilyCollisions(level17);
        reportConfiguration3.logLicenseCollisions(level17);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet20 = strSet0.setLogLevel(level17);
        java.util.stream.Stream<java.lang.String> strStream21 = strSet20.stream();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet23 = strSet20.tailSet("a8ad4");
        org.apache.rat.utils.DefaultLog defaultLog24 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder25 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder26 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean27 = matcherRefBuilder26.hasId();
        java.lang.String str28 = matcherRefBuilder26.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder29 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder30 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str31 = notBuilder30.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder32 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean33 = matcherRefBuilder32.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap34 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder35 = matcherRefBuilder32.setMatchers(strMap34);
        org.apache.rat.configuration.builders.AllBuilder allBuilder36 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = copyrightBuilder37.setStart("OASIS");
        java.lang.String str40 = copyrightBuilder37.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder42 = copyrightBuilder37.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder45 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = copyrightBuilder45.setStart("OASIS");
        java.lang.String str48 = copyrightBuilder45.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder50 = copyrightBuilder45.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder51 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder52 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str53 = copyrightBuilder52.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder55 = copyrightBuilder52.setEnd(".cvsignore");
        boolean boolean56 = copyrightBuilder52.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder57 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str58 = copyrightBuilder57.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder60 = copyrightBuilder57.setEnd(".cvsignore");
        boolean boolean61 = copyrightBuilder57.hasId();
        java.lang.String str62 = copyrightBuilder57.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder63 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder65 = copyrightBuilder63.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder66 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder67 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean68 = matcherRefBuilder67.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap69 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder70 = matcherRefBuilder67.setMatchers(strMap69);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder71 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder72 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean73 = matcherRefBuilder72.hasId();
        java.lang.String str74 = matcherRefBuilder72.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap75 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder76 = matcherRefBuilder72.setMatchers(strMap75);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray77 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder32, allBuilder36, copyrightBuilder42, matcherRefBuilder43, copyrightBuilder45, copyrightBuilder51, copyrightBuilder52, copyrightBuilder57, copyrightBuilder63, anyBuilder66, matcherRefBuilder67, copyrightBuilder71, matcherRefBuilder72 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList78 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList78, builderArray77);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder80 = notBuilder30.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList78);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder81 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray82 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder26, anyBuilder29, notBuilder30, matcherRefBuilder81 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList83 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList83, builderArray82);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder85 = allBuilder25.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList83);
        defaultLog24.info((java.lang.Object) allBuilder25);
        org.apache.rat.ReportConfiguration reportConfiguration87 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog24);
        org.apache.rat.utils.Log log88 = null;
        org.apache.rat.ReportConfiguration reportConfiguration89 = new org.apache.rat.ReportConfiguration(log88);
        reportConfiguration89.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level92 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration89.logFamilyCollisions(level92);
        defaultLog24.setLevel(level92);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender96 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog24, "true");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet97 = strSet20.setLog((org.apache.rat.utils.Log) defaultLog24);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + level17 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level17.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(defaultLog24);
        org.junit.Assert.assertNotNull(matcherRefBuilder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "MathcerRefBuilder: null" + "'", str28, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NotBuilder: null" + "'", str31, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder35);
        org.junit.Assert.assertNotNull(copyrightBuilder37);
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str40, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder45);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str48, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder50);
        org.junit.Assert.assertNotNull(copyrightBuilder51);
        org.junit.Assert.assertNotNull(copyrightBuilder52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str53, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str58, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str62, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder63);
        org.junit.Assert.assertNotNull(copyrightBuilder65);
        org.junit.Assert.assertNotNull(anyBuilder66);
        org.junit.Assert.assertNotNull(matcherRefBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder70);
        org.junit.Assert.assertNotNull(copyrightBuilder71);
        org.junit.Assert.assertNotNull(matcherRefBuilder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "MathcerRefBuilder: null" + "'", str74, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder76);
        org.junit.Assert.assertNotNull(builderArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(abstractBuilder80);
        org.junit.Assert.assertNotNull(builderArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(abstractBuilder85);
        org.junit.Assert.assertTrue("'" + level92 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level92.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet97);
    }

    @Test
    public void test06535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06535");
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.api.ContentType contentType3 = new org.apache.rat.api.ContentType("EBC30EB7B3EA4F39BAEA5FEA4FA0278B", "Copyright Builder: s:GNU General Public License, version 1 e:null o:null", strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06536");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setFullText("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.license.ILicense.Builder builder7 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setFullText("META-DATA#LICENSEFAMILYNAME',VALUE ='GNU GENERAL PUBLIC LICENSE, VERSION 1 ']");
        org.apache.rat.license.ILicense.Builder builder10 = fullTextMatchingLicense0.getLicense();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily11 = fullTextMatchingLicense0.getLicenseFamily();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test06537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06537");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet1 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily2 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet1);
        org.apache.rat.policy.DefaultPolicy defaultPolicy3 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet1);
        org.apache.rat.api.Document document4 = null;
        defaultPolicy3.analyse(document4);
        org.apache.rat.api.Document document6 = null;
        defaultPolicy3.analyse(document6);
        org.apache.rat.api.Document document8 = null;
        defaultPolicy3.analyse(document8);
        org.apache.rat.license.ILicenseFamily iLicenseFamily10 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy3.add(iLicenseFamily10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilySet1);
        org.junit.Assert.assertNull(iLicenseFamily2);
    }

    @Test
    public void test06538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06538");
        org.apache.rat.configuration.builders.NotBuilder notBuilder1 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str2 = notBuilder1.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder3 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str4 = spdxBuilder3.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder6 = spdxBuilder3.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = spdxBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = spdxBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = spdxBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = spdxBuilder3.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder12 = notBuilder1.add((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder3);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder14 = spdxBuilder3.setName("15ff671b-67b8-4791-9e1e-208f319fb7e2");
        java.lang.String str15 = spdxBuilder3.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher16 = spdxBuilder3.build();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher17 = new org.apache.rat.analysis.matchers.NotMatcher("TMF  ", iHeaderMatcher16);
        notMatcher17.reset();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NotBuilder: null" + "'", str2, "NotBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "SpdxBuilder: null" + "'", str4, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcher11);
        org.junit.Assert.assertNotNull(abstractBuilder12);
        org.junit.Assert.assertNotNull(spdxBuilder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "SpdxBuilder: 15ff671b-67b8-4791-9e1e-208f319fb7e2" + "'", str15, "SpdxBuilder: 15ff671b-67b8-4791-9e1e-208f319fb7e2");
        org.junit.Assert.assertNotNull(iHeaderMatcher16);
    }

    @Test
    public void test06539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06539");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender2 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.DefaultLog defaultLog3 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender4 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog3);
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog3);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter6 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        org.apache.rat.Reporter.listLicenses(reportConfiguration5, licenseFilter6);
        org.apache.rat.Defaults.Builder builder8 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder9 = builder8.noDefault();
        org.apache.rat.Defaults defaults10 = builder9.build();
        org.apache.rat.Defaults.Builder builder11 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults12 = builder11.build();
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet39 = reportConfiguration14.getLicenseFamilies(licenseFilter36);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = defaults12.getLicenses(licenseFilter36);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet41 = defaults10.getLicenseFamilies(licenseFilter36);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = reportConfiguration43.getLicenses(licenseFilter45);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter52);
        java.util.SortedSet<java.lang.String> strSet55 = defaults10.getLicenseIds(licenseFilter52);
        reportConfiguration5.setFrom(defaults10);
        defaultLog0.error((java.lang.Object) reportConfiguration5);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        java.io.FilenameFilter filenameFilter60 = reportConfiguration59.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter61 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = reportConfiguration59.getLicenses(licenseFilter61);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders63 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration59.setAddLicenseHeaders(addLicenseHeaders63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter68);
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter68);
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        java.io.FilenameFilter filenameFilter73 = reportConfiguration72.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter74 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet75 = reportConfiguration72.getLicenses(licenseFilter74);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders76 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration72.setAddLicenseHeaders(addLicenseHeaders76);
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic80 = org.apache.rat.Reporter.report(reportConfiguration79);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter81 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration79, licenseFilter81);
        org.apache.rat.Reporter.listLicenses(reportConfiguration72, licenseFilter81);
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter81);
        java.io.FilenameFilter filenameFilter85 = reportConfiguration59.getInputFileFilter();
        reportConfiguration59.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable88 = null;
        reportConfiguration59.setReportable(iReportable88);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier90 = reportConfiguration59.getWriter();
        defaultLog0.info((java.lang.Object) reportConfiguration59);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender93 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
        java.io.File file94 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = apacheV2LicenseAppender93.getLicenseHeader(file94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(defaultLog3);
        org.junit.Assert.assertTrue("'" + licenseFilter6 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter6.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(defaults10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(defaults12);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet39);
        org.junit.Assert.assertNotNull(iLicenseSet40);
        org.junit.Assert.assertNotNull(iLicenseFamilySet41);
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNull(filenameFilter60);
        org.junit.Assert.assertTrue("'" + licenseFilter61 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter61.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders63 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders63.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter73);
        org.junit.Assert.assertTrue("'" + licenseFilter74 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter74.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet75);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders76 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders76.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic80);
        org.junit.Assert.assertTrue("'" + licenseFilter81 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter81.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter85);
        org.junit.Assert.assertNotNull(printWriterIOSupplier90);
    }

    @Test
    public void test06540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06540");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter15 = xmlWriter1.closeElement();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06541");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder5 = builder0.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.Defaults.Builder builder7 = builder0.remove("GNU General Public License, version 3");
        org.apache.rat.Defaults.Builder builder9 = builder0.remove("f300711b-0269-45ff-a34e-20094c87f793");
        org.apache.rat.Defaults.Builder builder11 = builder9.add("5fec021b-b12e-48c3-a002-3eea7a06339a");
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder13 = builder11.remove(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test06542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06542");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet15 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet15);
        boolean boolean17 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet15);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray20 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList21 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList21, iLicenseFamilyArray20);
        org.apache.rat.policy.DefaultPolicy defaultPolicy23 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList21);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet24 = defaultPolicy23.getApprovedLicenseNames();
        boolean boolean25 = strSet19.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet24);
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder27 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder29 = builder27.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher33 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state34 = copyrightMatcher33.finalizeState();
        org.apache.rat.license.ILicense.Builder builder35 = builder29.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher33);
        org.apache.rat.license.ILicense.Builder builder37 = builder35.setLicenseFamilyCategory("");
        defaultLog26.error((java.lang.Object) builder37);
        org.apache.rat.utils.Log.Level level39 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog26.log(level39, "JAVA");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic42.setNumApproved((int) (short) 10);
        claimStatistic42.setNumUnknown((int) '#');
        defaultLog26.error((java.lang.Object) '#');
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet48 = strSet19.setLog((org.apache.rat.utils.Log) defaultLog26);
        java.lang.String[] strArray54 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet55 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        boolean boolean58 = strSet55.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean60 = strSet55.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction61 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet62 = strSet55.setMsgFormat(strFunction61);
        boolean boolean63 = strSet55.isEmpty();
        boolean boolean65 = strSet55.addIfNotPresent("OASIS Open License");
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic68 = org.apache.rat.Reporter.report(reportConfiguration67);
        org.apache.rat.utils.Log log69 = null;
        org.apache.rat.ReportConfiguration reportConfiguration70 = new org.apache.rat.ReportConfiguration(log69);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic71 = org.apache.rat.Reporter.report(reportConfiguration70);
        org.apache.rat.utils.ReportingSet.Options options72 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration70.licenseDuplicateOption(options72);
        reportConfiguration67.familyDuplicateOption(options72);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier75 = reportConfiguration67.getWriter();
        org.apache.rat.utils.Log log76 = null;
        org.apache.rat.ReportConfiguration reportConfiguration77 = new org.apache.rat.ReportConfiguration(log76);
        reportConfiguration77.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level80 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration77.logFamilyCollisions(level80);
        reportConfiguration67.logFamilyCollisions(level80);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet83 = strSet55.setLogLevel(level80);
        defaultLog26.setLevel(level80);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender86 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog26, ".gitignore");
        apacheV2LicenseAppender86.setForce(true);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(iLicenseFamilySet15);
        org.junit.Assert.assertNull(iLicenseFamily16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state34.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + level39 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level39.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(claimStatistic68);
        org.junit.Assert.assertNull(claimStatistic71);
        org.junit.Assert.assertTrue("'" + options72 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options72.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier75);
        org.junit.Assert.assertTrue("'" + level80 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level80.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet83);
    }

    @Test
    public void test06543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06543");
        java.io.File file0 = null;
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1, (byte) 1, (byte) 100, (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.impl.ArchiveEntryDocument archiveEntryDocument7 = new org.apache.rat.document.impl.ArchiveEntryDocument(file0, byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1, 1, 100, 0]");
    }

    @Test
    public void test06544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06544");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("223f0aba-15d4-49e9-901e-5740c137aebf null", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Pattern may not be null, empty or blank");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06545");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder2.setMatchers(strMap4);
        org.apache.rat.configuration.builders.AllBuilder allBuilder6 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setStart("OASIS");
        java.lang.String str10 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder15.setStart("OASIS");
        java.lang.String str18 = copyrightBuilder15.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder15.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str23 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = copyrightBuilder22.setEnd(".cvsignore");
        boolean boolean26 = copyrightBuilder22.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str28 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder27.setEnd(".cvsignore");
        boolean boolean31 = copyrightBuilder27.hasId();
        java.lang.String str32 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean38 = matcherRefBuilder37.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap39 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = matcherRefBuilder37.setMatchers(strMap39);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.lang.String str44 = matcherRefBuilder42.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder42.setMatchers(strMap45);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray47 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, allBuilder6, copyrightBuilder12, matcherRefBuilder13, copyrightBuilder15, copyrightBuilder21, copyrightBuilder22, copyrightBuilder27, copyrightBuilder33, anyBuilder36, matcherRefBuilder37, copyrightBuilder41, matcherRefBuilder42 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList48 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48, builderArray47);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder50 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48);
        java.lang.String str51 = notBuilder0.toString();
        java.lang.String str52 = notBuilder0.toString();
        java.lang.String str53 = notBuilder0.toString();
        java.lang.String str54 = notBuilder0.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher55 = notBuilder0.build();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: 'not' type matcher requires one and only one enclosed matcher");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str10, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str18, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str23, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str28, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str32, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(anyBuilder36);
        org.junit.Assert.assertNotNull(matcherRefBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MathcerRefBuilder: null" + "'", str44, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(builderArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(abstractBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str51, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str52, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str53, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str54, "NotBuilder: MathcerRefBuilder: null");
    }

    @Test
    public void test06546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06546");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders7 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration3.setAddLicenseHeaders(addLicenseHeaders7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter12);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter12);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter25);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier31 = reportConfiguration30.getOutput();
        reportConfiguration3.setOut(outputStreamIOSupplier31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.utils.ReportingSet.Options options39 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration37.licenseDuplicateOption(options39);
        reportConfiguration34.familyDuplicateOption(options39);
        reportConfiguration3.licenseDuplicateOption(options39);
        reportConfiguration3.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        reportConfiguration46.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level49 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration46.logLicenseCollisions(level49);
        reportConfiguration3.logLicenseCollisions(level49);
        defaultLog1.setLevel(level49);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet53 = strSet0.setLog((org.apache.rat.utils.Log) defaultLog1);
        java.lang.String[] strArray56 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean57 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Copyright Builder: s:null e:.cvsignore o:null", strArray56);
        boolean boolean58 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Copyright Builder: s:archive e:null o:null", strArray56);
        boolean boolean59 = strSet53.equals((java.lang.Object) "Copyright Builder: s:archive e:null o:null");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet62 = strSet53.subSet(".giti", "Copyright Builder: s:null e:null o:a1abad46-6a98-44f8-aa20-7839919a8270");
        org.apache.rat.utils.DefaultLog defaultLog63 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.utils.ReportingSet.Options options71 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration69.licenseDuplicateOption(options71);
        reportConfiguration66.familyDuplicateOption(options71);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier74 = reportConfiguration66.getWriter();
        org.apache.rat.utils.Log log75 = null;
        org.apache.rat.ReportConfiguration reportConfiguration76 = new org.apache.rat.ReportConfiguration(log75);
        reportConfiguration76.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level79 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration76.logFamilyCollisions(level79);
        reportConfiguration66.logFamilyCollisions(level79);
        org.apache.rat.Defaults.Builder builder82 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder83 = builder82.noDefault();
        defaultLog63.log(level79, (java.lang.Object) builder82);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender86 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog63, "Datum [ name ='binary',value =' ']");
        org.apache.rat.utils.Log log87 = null;
        org.apache.rat.ReportConfiguration reportConfiguration88 = new org.apache.rat.ReportConfiguration(log87);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier89 = reportConfiguration88.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter90 = reportConfiguration88.getDirectoryFilter();
        java.nio.file.Path path91 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes92 = null;
        java.nio.file.FileVisitResult fileVisitResult93 = iOFileFilter90.accept(path91, basicFileAttributes92);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter94 = iOFileFilter90.negate();
        defaultLog63.debug((java.lang.Object) iOFileFilter90);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet96 = strSet62.setLog((org.apache.rat.utils.Log) defaultLog63);
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders7 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders7.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier31);
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + options39 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options39.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level49 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level49.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(defaultLog63);
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + options71 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options71.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier74);
        org.junit.Assert.assertTrue("'" + level79 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level79.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier89);
        org.junit.Assert.assertNotNull(iOFileFilter90);
        org.junit.Assert.assertTrue("'" + fileVisitResult93 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult93.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter94);
        org.junit.Assert.assertNotNull(strSet96);
    }

    @Test
    public void test06547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06547");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        defaultLog0.info((java.lang.Object) "Modified BSD License");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender4 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender6 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "6f2b4022-35cc-4b09-8df5-79e286566ad3");
        org.apache.rat.utils.DefaultLog defaultLog7 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier37 = reportConfiguration36.getOutput();
        reportConfiguration9.setOut(outputStreamIOSupplier37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.utils.ReportingSet.Options options45 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration43.licenseDuplicateOption(options45);
        reportConfiguration40.familyDuplicateOption(options45);
        reportConfiguration9.licenseDuplicateOption(options45);
        reportConfiguration9.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        reportConfiguration52.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level55 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration52.logLicenseCollisions(level55);
        reportConfiguration9.logLicenseCollisions(level55);
        defaultLog7.setLevel(level55);
        defaultLog7.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.utils.Log.Level level61 = defaultLog7.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender62 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog7);
        org.apache.rat.utils.DefaultLog defaultLog63 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender65 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog63, "2953e6cb-20a5-4dcf-a9f5-85c51cc8c635");
        org.apache.rat.utils.Log.Level level66 = defaultLog63.getLevel();
        org.apache.rat.utils.Log.Level level67 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog63.log(level67, "W3CD ");
        java.lang.Object obj70 = null;
        defaultLog7.log(level67, obj70);
        org.apache.rat.license.ILicense.Builder builder72 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder74 = builder72.setLicenseFamilyCategory("W3CD ");
        org.apache.rat.license.ILicense.Builder builder76 = builder72.setId("RegexBuilder: null");
        org.apache.rat.license.ILicense.Builder builder78 = builder76.setId("4fcae176-e574-46ed-b9e4-dea2e2f3b458");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder79 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str80 = regexBuilder79.toString();
        java.lang.String str81 = regexBuilder79.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder83 = regexBuilder79.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        java.lang.String str84 = regexBuilder83.toString();
        org.apache.rat.license.ILicense.Builder builder85 = builder78.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) regexBuilder83);
        java.lang.Throwable throwable86 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.log(level67, (java.lang.Object) builder78, throwable86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(defaultLog7);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier37);
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + options45 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options45.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level55 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level55.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level61 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level61.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog63);
        org.junit.Assert.assertTrue("'" + level66 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level66.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level67 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level67.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "RegexBuilder: null" + "'", str80, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "RegexBuilder: null" + "'", str81, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae" + "'", str84, "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test06548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06548");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            simpleXmlClaimReporter15.startReport();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06549");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        defaultLog0.info((java.lang.Object) "Modified BSD License");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender4 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "W3CD ");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic5.setNumApproved((int) (short) 10);
        claimStatistic5.setNumUnknown((int) '#');
        int int10 = claimStatistic5.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic5.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = null;
        claimStatistic5.setLicenseFileCodeMap(strMap12);
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null;
        claimStatistic5.setLicenseFileCodeMap(strMap14);
        defaultLog0.error((java.lang.Object) strMap14);
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        java.util.function.Consumer<java.lang.String> strConsumer18 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration17.validate(strConsumer18);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: Reportable may not be null");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test06550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06550");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.apache.rat.license.ILicenseFamily.Builder builder9 = builder7.setLicenseFamilyName("");
        org.apache.rat.license.ILicenseFamily.Builder builder11 = builder7.setLicenseFamilyCategory("71f9048b-6413-4a71-a18a-0ee565e2b3ba");
        org.apache.rat.license.ILicenseFamily.Builder builder13 = builder11.setLicenseFamilyCategory("Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e: o:null");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test06551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06551");
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray0 = new org.apache.rat.document.IDocumentAnalyser[] {};
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer1 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer2 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer3 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.api.Document document4 = null;
        documentAnalyserMultiplexer3.analyse(document4);
        org.apache.rat.api.Document document6 = null;
        documentAnalyserMultiplexer3.analyse(document6);
        org.apache.rat.api.Document document8 = null;
        documentAnalyserMultiplexer3.analyse(document8);
        org.apache.rat.api.Document document10 = null;
        documentAnalyserMultiplexer3.analyse(document10);
        org.apache.rat.api.Document document12 = null;
        documentAnalyserMultiplexer3.analyse(document12);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray0);
    }

    @Test
    public void test06552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06552");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("W3CD ");
        org.apache.rat.license.ILicense.Builder builder4 = builder0.setLicenseFamilyCategory("274c6a15-09f6-4bfd-ac53-1827770eb507");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("535b5d01-f553-45e5-bb29-a646e4b8b66f");
        org.apache.rat.license.ILicense.Builder builder8 = builder4.setName("SpdxBuilder: null");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher10 = new org.apache.rat.analysis.matchers.FullTextMatcher("Copyright Builder: s:null e:null o:null");
        org.apache.rat.analysis.IHeaderMatcher.State state11 = fullTextMatcher10.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state12 = fullTextMatcher10.currentState();
        java.lang.String str13 = fullTextMatcher10.toString();
        org.apache.rat.license.ILicense.Builder builder14 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state11.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state12.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3b2635fb-1d1e-44c4-a17c-b36d48b5ab9a" + "'", str13, "3b2635fb-1d1e-44c4-a17c-b36d48b5ab9a");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test06553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06553");
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str2 = spdxBuilder1.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder4 = spdxBuilder1.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = spdxBuilder1.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder1.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder1.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = spdxBuilder1.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = spdxBuilder1.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = spdxBuilder1.build();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher11 = new org.apache.rat.analysis.matchers.NotMatcher("17db7eb0-9a7d-4438-9949-2a058192f60a", iHeaderMatcher10);
        org.junit.Assert.assertNotNull(spdxBuilder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "SpdxBuilder: null" + "'", str2, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
    }

    @Test
    public void test06554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06554");
        java.lang.String str1 = org.apache.rat.license.ILicenseFamily.makeCategory("I IND");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "I IND" + "'", str1, "I IND");
    }

    @Test
    public void test06555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06555");
        boolean boolean1 = org.apache.rat.document.impl.guesser.NoteGuesser.isNote("SpdxBuilder: 03F7B314-6887-4617-9C7E-BF1600B331CD");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test06556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06556");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
        boolean boolean3 = fullTextMatcher1.doMatch("W3C  ");
        boolean boolean5 = fullTextMatcher1.doMatch("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06557");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        int int1 = claimStatistic0.getNumUnApproved();
        int int2 = claimStatistic0.getNumUnknown();
        claimStatistic0.setNumUnknown((int) 'a');
        int int5 = claimStatistic0.getNumApproved();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test06558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06558");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("binary");
        simpleTextMatcher1.reset();
        java.lang.String str3 = simpleTextMatcher1.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = simpleTextMatcher1.currentState();
        boolean boolean6 = simpleTextMatcher1.doMatch("standard");
        org.apache.rat.analysis.IHeaderMatcher.State state7 = simpleTextMatcher1.finalizeState();
        boolean boolean9 = simpleTextMatcher1.doMatch("Datum [ name ='b9d57440-4b03-461e-a164-b29e1341bbc8',value =' ']");
        org.apache.rat.analysis.IHeaderMatcher.State state11 = simpleTextMatcher1.matches("46eea");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0befad78-8a35-48ee-bff9-ac1a0f1584f9" + "'", str3, "0befad78-8a35-48ee-bff9-ac1a0f1584f9");
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state11.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test06559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06559");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        defaultLog0.info((java.lang.Object) "TextBuilder: Datum [ name ='http:...");
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders54 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration50.setAddLicenseHeaders(addLicenseHeaders54);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = org.apache.rat.Reporter.report(reportConfiguration57);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter59);
        org.apache.rat.report.IReportable iReportable62 = null;
        reportConfiguration50.setReportable(iReportable62);
        java.lang.String str64 = reportConfiguration50.getCopyrightMessage();
        defaultLog0.warn((java.lang.Object) reportConfiguration50);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier67 = reportConfiguration50.getOutput();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders54 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders54.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier67);
    }

    @Test
    public void test06560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06560");
        java.lang.String str1 = org.apache.rat.license.ILicenseFamily.makeCategory("CopyrightBuildersarchiveenullonull");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyr" + "'", str1, "Copyr");
    }

    @Test
    public void test06561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06561");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("458e8e15-b74e-44b7-ac29-0ca7c11f29f4", pattern1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = simpleRegexMatcher2.doMatch("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06562");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("70c3a0ba-1174-4b62-ba88-76dbbb88e3b3");
    }

    @Test
    public void test06563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06563");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("f02d0cdc36424583b71fdd84a120752c");
        java.lang.String str11 = iLicenseFamilyBuilder0.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "3c74a3ec-8235-4035-9db7-f9f475b48681" + "'", str8, "3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "f02d0cdc36424583b71fdd84a120752c" + "'", str11, "f02d0cdc36424583b71fdd84a120752c");
    }

    @Test
    public void test06564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06564");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder5 = builder4.noDefault();
        org.apache.rat.Defaults.Builder builder7 = builder4.remove("http://org/apache/rat/meta-data#HeaderCategory");
        java.net.URL uRL8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder9 = builder7.remove(uRL8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test06565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06565");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = anyBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = anyBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = anyBuilder2.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder6 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) anyBuilder2);
        java.lang.String str7 = notBuilder0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(abstractBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: AnyBuilder:" + "'", str7, "NotBuilder: AnyBuilder:");
    }

    @Test
    public void test06566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06566");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((-1));
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap4 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getDocumentCategoryMap();
        int int6 = claimStatistic0.getNumGenerated();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap7);
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null;
        claimStatistic0.setDocumentCategoryMap(strMap10);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test06567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06567");
        java.lang.String str1 = org.apache.rat.license.ILicenseFamily.makeCategory("Copyright Builder: s:6481fb19-38f0-43f5-ab95-caf84a069ee1 e:null o:null");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyr" + "'", str1, "Copyr");
    }

    @Test
    public void test06568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06568");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog0.setLevel(level13);
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily15 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str16 = simpleLicenseFamily15.getFamilyName();
        java.lang.String str17 = simpleLicenseFamily15.getFamilyCategory();
        simpleLicenseFamily15.setFamilyCategory("W3C  ");
        simpleLicenseFamily15.setFamilyCategory("AllBuilder:");
        defaultLog0.info((java.lang.Object) simpleLicenseFamily15);
        simpleLicenseFamily15.setFamilyCategory("00186AD8-9B49-4E79-B8F0-40326F09C054");
        java.lang.String str25 = simpleLicenseFamily15.getFamilyName();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level13.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test06569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06569");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        boolean boolean3 = reportConfiguration1.isStyleReport();
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        reportConfiguration5.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level8 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration5.logLicenseCollisions(level8);
        reportConfiguration1.logLicenseCollisions(level8);
        org.apache.rat.utils.Log log11 = reportConfiguration1.getLog();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + level8 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level8.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(log11);
    }

    @Test
    public void test06570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06570");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str8 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setLicenseFamilyName("W3C Document Copyright");
        fullTextMatchingLicense0.setLicenseFamilyName("CDDL1");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily13 = fullTextMatchingLicense0.getLicenseFamily();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test06571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06571");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        claimStatistic0.setNumApproved((int) (short) 1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic0.getLicenseFileNameMap();
        int int12 = claimStatistic0.getNumGenerated();
        claimStatistic0.setNumGenerated(0);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test06572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06572");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = copyrightBuilder7.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = copyrightBuilder7.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = copyrightBuilder7.setStart("RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder7.setEnd("11370891-c763-426b-9547-57e87d991d61");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder7.setEnd("151234cb-e980-4752-a4a0-64f20f78657d");
        java.lang.String str18 = copyrightBuilder17.toString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcher11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae e:151234cb-e980-4752-a4a0-64f20f78657d o:null" + "'", str18, "Copyright Builder: s:RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae e:151234cb-e980-4752-a4a0-64f20f78657d o:null");
    }

    @Test
    public void test06573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06573");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyName("NotBuilder: MathcerRefBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("50413ae6-037c-4fdd-a790-7c8514c95b09");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test06574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06574");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder65 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str66 = copyrightBuilder65.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder68 = copyrightBuilder65.setEnd(".cvsignore");
        boolean boolean69 = copyrightBuilder65.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder71 = copyrightBuilder65.setEnd("notice");
        defaultLog0.debug((java.lang.Object) "notice");
        org.apache.rat.license.ILicense[] iLicenseArray74 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet75 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet75, iLicenseArray74);
        java.lang.String[] strArray89 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList90 = new java.util.ArrayList<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList90, strArray89);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory92 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet75, (java.util.Collection<java.lang.String>) strList90);
        org.apache.rat.license.ILicense iLicense93 = org.apache.rat.license.LicenseSetFactory.search("GNU General Public License, version 1", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet75);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet94 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet75);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet95 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet75);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet96 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet95);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser97 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog0, (java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet95);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(copyrightBuilder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str66, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder71);
        org.junit.Assert.assertNotNull(iLicenseArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNull(iLicense93);
    }

    @Test
    public void test06575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06575");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((-1));
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = null;
        claimStatistic0.setLicenseFileNameMap(strMap5);
        claimStatistic0.setNumGenerated((int) (short) 10);
        claimStatistic0.setNumApproved((-28));
    }

    @Test
    public void test06576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06576");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("W3C  ");
        simpleLicenseFamily0.setFamilyName("GEN  ");
        java.lang.String str7 = simpleLicenseFamily0.getFamilyCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "W3C  " + "'", str7, "W3C  ");
    }

    @Test
    public void test06577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06577");
        java.lang.String str1 = org.apache.rat.analysis.matchers.FullTextMatcher.prune("SpdxBuilder: t true");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "SpdxBuilderttrue" + "'", str1, "SpdxBuilderttrue");
    }

    @Test
    public void test06578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06578");
        java.lang.String str1 = org.apache.rat.document.impl.guesser.GuessUtils.normalise("a3b53609-8989-4241-8aa6-1cc947f0d382");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "A3B53609-8989-4241-8AA6-1CC947F0D382" + "'", str1, "A3B53609-8989-4241-8AA6-1CC947F0D382");
    }

    @Test
    public void test06579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06579");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder6 = builder0.add("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder8 = builder6.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='????? ']");
        java.io.File file9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder10 = builder8.add(file9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test06580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06580");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.not();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap5 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder2.setMatchers(strMap5);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder2.setMatchers(strMap7);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap9 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder2.setMatchers(strMap9);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder12 = matcherRefBuilder2.setRefId("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        java.lang.String str13 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder14 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder2);
        java.lang.String str15 = notBuilder0.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher16 = notBuilder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(notBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
        org.junit.Assert.assertNotNull(matcherRefBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str13, "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertNotNull(abstractBuilder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NotBuilder: MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str15, "NotBuilder: MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
    }

    @Test
    public void test06581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06581");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap2 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = matcherRefBuilder0.setMatchers(strMap2);
        java.lang.String str4 = matcherRefBuilder3.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap5 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder3.setMatchers(strMap5);
        java.lang.String str7 = matcherRefBuilder3.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder9 = matcherRefBuilder3.setId("5fec021b-b12e-48c3-a002-3eea7a06339a");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder3.setRefId("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        java.lang.String str12 = matcherRefBuilder11.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher13 = matcherRefBuilder11.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MathcerRefBuilder: null" + "'", str7, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(abstractBuilder9);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']" + "'", str12, "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
    }

    @Test
    public void test06582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06582");
        java.lang.String[] strArray3 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean4 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", strArray3);
        boolean boolean5 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("f542f330-7687-44f1-8657-f0dd129480dc", strArray3);
        boolean boolean6 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("Copyright Builder: s:null e:ba9961f9-a0de-4a54-bd1f-a2e9df26a188 o:The MIT License", strArray3);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06583");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        fullTextMatchingLicense0.setFullText("MANIFEST.MF");
        org.apache.rat.license.ILicense.Builder builder5 = fullTextMatchingLicense0.getLicense();
        java.lang.String str6 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str7 = fullTextMatchingLicense0.getNotes();
        org.apache.rat.license.ILicense.Builder builder8 = fullTextMatchingLicense0.getLicense();
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher12 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("W3C  ", "c523095e-4421-4cc4-93e2-039f23b91f76");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher13 = new org.apache.rat.analysis.matchers.NotMatcher("e15853fc-6f47-4f3f-a346-63fe009915e5", (org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher12);
        org.apache.rat.license.ILicense.Builder builder14 = builder8.setMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher13);
        notMatcher13.reset();
        notMatcher13.reset();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test06584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06584");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str1 = anyBuilder0.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = anyBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher.State state3 = iHeaderMatcher2.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state5 = iHeaderMatcher2.matches("Copyright Builder: s:null e:.cvsignore o:null");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(anyBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AnyBuilder:" + "'", str1, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test06585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06585");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher1 = allBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = allBuilder0.build();
        org.apache.rat.configuration.builders.AllBuilder allBuilder3 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = allBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = allBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = allBuilder3.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = copyrightBuilder7.setEnd(".cvsignore");
        boolean boolean11 = copyrightBuilder7.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = copyrightBuilder7.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder14 = allBuilder3.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder15 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.configuration.builders.TextBuilder textBuilder16 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder18 = textBuilder16.setText("t true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher19 = textBuilder16.build();
        java.lang.String str20 = textBuilder16.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder21 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) textBuilder16);
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList22 = allBuilder0.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher23 = allBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher24 = allBuilder0.build();
        java.lang.String str25 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList26 = allBuilder0.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher27 = allBuilder0.build();
        org.junit.Assert.assertNotNull(iHeaderMatcher1);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(abstractBuilder14);
        org.junit.Assert.assertNotNull(abstractBuilder15);
        org.junit.Assert.assertNotNull(textBuilder18);
        org.junit.Assert.assertNotNull(iHeaderMatcher19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "TextBuilder: t true" + "'", str20, "TextBuilder: t true");
        org.junit.Assert.assertNotNull(abstractBuilder21);
        org.junit.Assert.assertNotNull(iHeaderMatcherList22);
        org.junit.Assert.assertNotNull(iHeaderMatcher23);
        org.junit.Assert.assertNotNull(iHeaderMatcher24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24\nTextBuilder: t true" + "'", str25, "AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24\nTextBuilder: t true");
        org.junit.Assert.assertNotNull(iHeaderMatcherList26);
        org.junit.Assert.assertNotNull(iHeaderMatcher27);
    }

    @Test
    public void test06586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06586");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("binary");
        java.lang.String str6 = builder5.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "AL   " + "'", str6, "AL   ");
    }

    @Test
    public void test06587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06587");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data#FileCategory", "8f82a952-5bfd-446b-ac79-15beef5b3f17");
        fullTextMatcher2.reset();
        fullTextMatcher2.reset();
        fullTextMatcher2.reset();
        fullTextMatcher2.reset();
    }

    @Test
    public void test06588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06588");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("GPL3 ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = sPDXMatcherFactory0.create("6620e9ee-d651-4c18-8162-edad6d18368e");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = sPDXMatcherFactory0.create("JAVA");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = sPDXMatcherFactory0.create("RegexBuilder: d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher9 = new org.apache.rat.analysis.matchers.NotMatcher(iHeaderMatcher8);
        org.apache.rat.analysis.IHeaderMatcher.State state10 = notMatcher9.currentState();
        notMatcher9.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state13 = notMatcher9.matches("MathcerRefBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state10.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state13.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test06589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06589");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray1 = strSet0.toArray();
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        reportConfiguration3.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level6 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration3.logFamilyCollisions(level6);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier8 = reportConfiguration3.getOutput();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        reportConfiguration10.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        reportConfiguration10.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration10.getInputFileFilter();
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        java.io.FilenameFilter filenameFilter22 = reportConfiguration21.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet24 = reportConfiguration21.getLicenses(licenseFilter23);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders25 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration21.setAddLicenseHeaders(addLicenseHeaders25);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic29 = org.apache.rat.Reporter.report(reportConfiguration28);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter30);
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter30);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet37 = reportConfiguration34.getLicenses(licenseFilter36);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders38 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration34.setAddLicenseHeaders(addLicenseHeaders38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter43);
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter43);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet46 = reportConfiguration21.getLicenseFamilies(licenseFilter43);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration10, licenseFilter43);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet48 = reportConfiguration3.getLicenseFamilies(licenseFilter43);
        java.util.Collection<java.lang.String> strCollection49 = null;
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory50 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet48, strCollection49);
        boolean boolean51 = strSet0.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet48);
        java.util.Spliterator<java.lang.String> strSpliterator52 = strSet0.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator53 = strSet0.spliterator();
        java.util.Iterator<java.lang.String> strItor54 = strSet0.iterator();
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertTrue("'" + level6 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level6.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier8);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertNull(filenameFilter22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet24);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders25 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders25.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet37);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders38 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders38.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet46);
        org.junit.Assert.assertNotNull(iLicenseFamilySet48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertNotNull(strSpliterator53);
        org.junit.Assert.assertNotNull(strItor54);
    }

    @Test
    public void test06590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06590");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        boolean boolean12 = reportConfiguration3.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter13 = reportConfiguration3.getInputFileFilter();
        java.io.FilenameFilter filenameFilter14 = reportConfiguration3.getInputFileFilter();
        boolean boolean15 = reportConfiguration3.isStyleReport();
        org.apache.rat.utils.Log log16 = reportConfiguration3.getLog();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter17 = reportConfiguration3.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter18 = iOFileFilter17.negate();
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.license.ILicenseFamily iLicenseFamily24 = null;
        reportConfiguration20.addFamily(iLicenseFamily24);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter26 = reportConfiguration20.getDirectoryFilter();
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = reportConfiguration28.getLicenses(licenseFilter30);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders32 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration28.setAddLicenseHeaders(addLicenseHeaders32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter37);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter37);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = reportConfiguration41.getLicenses(licenseFilter43);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders45 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter50);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier56 = reportConfiguration55.getOutput();
        reportConfiguration28.setOut(outputStreamIOSupplier56);
        org.apache.rat.utils.Log.Level level58 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration28.logLicenseCollisions(level58);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter60 = reportConfiguration28.getDirectoryFilter();
        java.nio.file.Path path61 = null;
        boolean boolean62 = iOFileFilter60.matches(path61);
        java.nio.file.Path path63 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes64 = null;
        java.nio.file.FileVisitResult fileVisitResult65 = iOFileFilter60.accept(path63, basicFileAttributes64);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter66 = iOFileFilter26.or(iOFileFilter60);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter67 = iOFileFilter60.negate();
        java.nio.file.Path path68 = null;
        boolean boolean69 = iOFileFilter67.matches(path68);
        java.nio.file.Path path70 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes71 = null;
        java.nio.file.FileVisitResult fileVisitResult72 = iOFileFilter67.accept(path70, basicFileAttributes71);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter73 = iOFileFilter17.or(iOFileFilter67);
        java.nio.file.Path path74 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes75 = null;
        java.nio.file.FileVisitResult fileVisitResult76 = iOFileFilter17.accept(path74, basicFileAttributes75);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker77 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(filenameFilter13);
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNotNull(iOFileFilter17);
        org.junit.Assert.assertNotNull(iOFileFilter18);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertNotNull(iOFileFilter26);
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders32 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders32.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders45 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders45.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier56);
        org.junit.Assert.assertTrue("'" + level58 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level58.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult65 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult65.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter66);
        org.junit.Assert.assertNotNull(iOFileFilter67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + fileVisitResult72 + "' != '" + java.nio.file.FileVisitResult.CONTINUE + "'", fileVisitResult72.equals(java.nio.file.FileVisitResult.CONTINUE));
        org.junit.Assert.assertNotNull(iOFileFilter73);
        org.junit.Assert.assertTrue("'" + fileVisitResult76 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult76.equals(java.nio.file.FileVisitResult.TERMINATE));
    }

    @Test
    public void test06591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06591");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense7 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense7.setLicenseFamilyName("hi!");
        java.lang.String str10 = fullTextMatchingLicense7.getLicenseFamilyCategory();
        java.lang.String str11 = fullTextMatchingLicense7.getLicenseFamilyName();
        fullTextMatchingLicense7.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense7.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = fullTextMatchingLicense7.getLicenseFamily();
        java.lang.String str17 = iLicenseFamily16.getFamilyName();
        java.lang.String str18 = iLicenseFamily16.getFamilyName();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder19 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str20 = iLicenseFamilyBuilder19.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder22 = iLicenseFamilyBuilder19.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder24 = iLicenseFamilyBuilder19.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder26 = iLicenseFamilyBuilder19.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str27 = iLicenseFamilyBuilder19.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder29 = iLicenseFamilyBuilder19.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily30 = iLicenseFamilyBuilder19.build();
        int int31 = iLicenseFamily16.compareTo(iLicenseFamily30);
        java.lang.String str32 = iLicenseFamily30.getFamilyCategory();
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily30);
        reportConfiguration1.removeApprovedLicenseCategory("http:");
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration37.licenseDuplicateOption(options38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = reportConfiguration41.getLicenses(licenseFilter43);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders45 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter50);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        java.io.FilenameFilter filenameFilter55 = reportConfiguration54.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet57 = reportConfiguration54.getLicenses(licenseFilter56);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders58 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration54.setAddLicenseHeaders(addLicenseHeaders58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter63 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration61, licenseFilter63);
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter63);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter63);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier69 = reportConfiguration68.getOutput();
        reportConfiguration41.setOut(outputStreamIOSupplier69);
        org.apache.rat.utils.Log.Level level71 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration41.logLicenseCollisions(level71);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter73 = reportConfiguration41.getDirectoryFilter();
        reportConfiguration37.setInputFileFilter((java.io.FilenameFilter) iOFileFilter73);
        java.nio.file.Path path75 = null;
        boolean boolean76 = iOFileFilter73.matches(path75);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter77 = iOFileFilter73.negate();
        java.nio.file.Path path78 = null;
        boolean boolean79 = iOFileFilter73.matches(path78);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter80 = iOFileFilter73.negate();
        reportConfiguration1.addDirectoryFilter(iOFileFilter80);
        org.apache.rat.utils.Log log82 = null;
        org.apache.rat.ReportConfiguration reportConfiguration83 = new org.apache.rat.ReportConfiguration(log82);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic84 = org.apache.rat.Reporter.report(reportConfiguration83);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier85 = reportConfiguration83.getOutput();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders86 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration83.setAddLicenseHeaders(addLicenseHeaders86);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders86);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier89 = reportConfiguration1.getStyleSheet();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "SpdxBuilder: null" + "'", str17, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "SpdxBuilder: null" + "'", str18, "SpdxBuilder: null");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "MIT  " + "'", str27, "MIT  ");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(iLicenseFamily30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "MIT  " + "'", str32, "MIT  ");
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders45 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders45.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet57);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders58 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders58.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertTrue("'" + licenseFilter63 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter63.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier69);
        org.junit.Assert.assertTrue("'" + level71 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level71.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(iOFileFilter77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(iOFileFilter80);
        org.junit.Assert.assertNull(claimStatistic84);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier85);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders86 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders86.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(inputStreamIOSupplier89);
    }

    @Test
    public void test06592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06592");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        java.lang.String str2 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder4 = regexBuilder0.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder6 = regexBuilder4.setExpr("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = regexBuilder6.build();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher8 = new org.apache.rat.analysis.matchers.NotMatcher(iHeaderMatcher7);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RegexBuilder: null" + "'", str2, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder4);
        org.junit.Assert.assertNotNull(regexBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
    }

    @Test
    public void test06593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06593");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        reportConfiguration1.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log5 = reportConfiguration1.getLog();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier6 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier6);
        java.lang.String str8 = reportConfiguration1.getCopyrightMessage();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter9 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log10 = reportConfiguration1.getLog();
        reportConfiguration1.removeApprovedLicenseCategory("TextBuilder: d25f13bc-1910-4451-9...");
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MANIFEST.MF" + "'", str8, "MANIFEST.MF");
        org.junit.Assert.assertNotNull(iOFileFilter9);
        org.junit.Assert.assertNull(log10);
    }

    @Test
    public void test06594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06594");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet0 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.policy.DefaultPolicy defaultPolicy1 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet0);
        org.apache.rat.policy.DefaultPolicy defaultPolicy2 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet0);
        org.apache.rat.api.Document document3 = null;
        defaultPolicy2.analyse(document3);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense5 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense5.setLicenseFamilyName("hi!");
        java.lang.String str8 = fullTextMatchingLicense5.getLicenseFamilyCategory();
        java.lang.String str9 = fullTextMatchingLicense5.getLicenseFamilyName();
        fullTextMatchingLicense5.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense5.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily14 = fullTextMatchingLicense5.getLicenseFamily();
        java.lang.String str15 = iLicenseFamily14.getFamilyName();
        java.lang.String str16 = iLicenseFamily14.getFamilyName();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder17 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str18 = iLicenseFamilyBuilder17.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder20 = iLicenseFamilyBuilder17.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder22 = iLicenseFamilyBuilder17.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder24 = iLicenseFamilyBuilder17.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str25 = iLicenseFamilyBuilder17.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder27 = iLicenseFamilyBuilder17.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily28 = iLicenseFamilyBuilder17.build();
        int int29 = iLicenseFamily14.compareTo(iLicenseFamily28);
        java.lang.String str30 = iLicenseFamily28.getFamilyName();
        defaultPolicy2.add(iLicenseFamily28);
        org.apache.rat.api.Document document32 = null;
        defaultPolicy2.analyse(document32);
        org.apache.rat.api.Document document34 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy2.reportLicenseApprovalClaim(document34, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilySet0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "SpdxBuilder: null" + "'", str15, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "SpdxBuilder: null" + "'", str16, "SpdxBuilder: null");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "MIT  " + "'", str25, "MIT  ");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(iLicenseFamily28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "8ecb8cce-06e4-400f-84d9-ad1cf6289fda" + "'", str30, "8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
    }

    @Test
    public void test06595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06595");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getDocumentCategoryMap();
        int int10 = claimStatistic0.getNumGenerated();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = claimStatistic0.getLicenseFileNameMap();
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test06596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06596");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration1.logLicenseCollisions(level31);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter33 = reportConfiguration1.getDirectoryFilter();
        java.nio.file.Path path34 = null;
        boolean boolean35 = iOFileFilter33.matches(path34);
        java.nio.file.Path path36 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes37 = null;
        java.nio.file.FileVisitResult fileVisitResult38 = iOFileFilter33.accept(path36, basicFileAttributes37);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter39 = iOFileFilter33.negate();
        java.nio.file.Path path40 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes41 = null;
        java.nio.file.FileVisitResult fileVisitResult42 = iOFileFilter33.accept(path40, basicFileAttributes41);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter43 = iOFileFilter33.negate();
        java.nio.file.Path path44 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes45 = null;
        java.nio.file.FileVisitResult fileVisitResult46 = iOFileFilter43.accept(path44, basicFileAttributes45);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level31.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult38 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult38.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter39);
        org.junit.Assert.assertTrue("'" + fileVisitResult42 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult42.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter43);
        org.junit.Assert.assertTrue("'" + fileVisitResult46 + "' != '" + java.nio.file.FileVisitResult.CONTINUE + "'", fileVisitResult46.equals(java.nio.file.FileVisitResult.CONTINUE));
    }

    @Test
    public void test06597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06597");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.fromName("0356753D-7389-48E7-8D63-056FD4C4548C");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: 0356753D-7389-48E7-8D63-056FD4C4548C");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06598");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter3);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet5 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray6 = strSet5.toArray();
        reportConfiguration2.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet5);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.license.ILicenseFamily iLicenseFamily13 = null;
        reportConfiguration9.addFamily(iLicenseFamily13);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter15 = reportConfiguration9.getDirectoryFilter();
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders21 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration17.setAddLicenseHeaders(addLicenseHeaders21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter26);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter39);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier45 = reportConfiguration44.getOutput();
        reportConfiguration17.setOut(outputStreamIOSupplier45);
        org.apache.rat.utils.Log.Level level47 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration17.logLicenseCollisions(level47);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter49 = reportConfiguration17.getDirectoryFilter();
        java.nio.file.Path path50 = null;
        boolean boolean51 = iOFileFilter49.matches(path50);
        java.nio.file.Path path52 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes53 = null;
        java.nio.file.FileVisitResult fileVisitResult54 = iOFileFilter49.accept(path52, basicFileAttributes53);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter55 = iOFileFilter15.or(iOFileFilter49);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter56 = iOFileFilter49.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter57 = iOFileFilter49.negate();
        reportConfiguration2.addDirectoryFilter(iOFileFilter49);
        org.apache.rat.utils.Log.Level level59 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration2.logLicenseCollisions(level59);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertNotNull(iOFileFilter15);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders21 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders21.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier45);
        org.junit.Assert.assertTrue("'" + level47 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level47.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult54 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult54.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter55);
        org.junit.Assert.assertNotNull(iOFileFilter56);
        org.junit.Assert.assertNotNull(iOFileFilter57);
        org.junit.Assert.assertTrue("'" + level59 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level59.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test06599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06599");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("eb2cbeb2-3a41-4487-a7b4-7b9cfdffeb57", "8a28803c-c6cf-46ab-b2e5-c55ad4ef3005", "");
    }

    @Test
    public void test06600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06600");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder6 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str7 = anyBuilder6.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList8 = anyBuilder6.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = anyBuilder6.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = anyBuilder6.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList11 = anyBuilder6.getChildren();
        org.apache.rat.license.ILicense.Builder builder12 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) anyBuilder6);
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher14 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("binary");
        org.apache.rat.analysis.IHeaderMatcher.State state15 = simpleTextMatcher14.finalizeState();
        boolean boolean17 = simpleTextMatcher14.doMatch("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicense.Builder builder18 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher14);
        org.apache.rat.utils.DefaultLog defaultLog19 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder20 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder22 = builder20.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher26 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state27 = copyrightMatcher26.finalizeState();
        org.apache.rat.license.ILicense.Builder builder28 = builder22.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher26);
        org.apache.rat.license.ILicense.Builder builder30 = builder28.setLicenseFamilyCategory("");
        defaultLog19.error((java.lang.Object) builder30);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher35 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher35.reset();
        org.apache.rat.license.ILicense.Builder builder37 = builder30.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher35);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder38 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str39 = spdxBuilder38.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder41 = spdxBuilder38.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder42 = builder37.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder38);
        org.apache.rat.license.ILicense.Builder builder44 = builder42.setName("DOJO ");
        org.apache.rat.license.ILicense.Builder builder46 = builder44.setLicenseFamilyCategory("RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean48 = matcherRefBuilder47.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap49 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder50 = matcherRefBuilder47.setMatchers(strMap49);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder50.setMatchers(strMap51);
        org.apache.rat.license.ILicense.Builder builder53 = builder46.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder50);
        org.apache.rat.license.ILicense.Builder builder54 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder50);
        org.apache.rat.license.ILicense.Builder builder56 = builder54.setLicenseFamilyCategory("48142baf-ce2b-498b-86ae-8194ba224cc3");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(anyBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AnyBuilder:" + "'", str7, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcherList11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state15.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(defaultLog19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state27.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(spdxBuilder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "SpdxBuilder: null" + "'", str39, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(matcherRefBuilder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder50);
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test06601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06601");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        org.apache.rat.api.MetaData.Datum datum19 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_1;
        java.lang.String str20 = datum19.toString();
        boolean boolean21 = strSet9.equals((java.lang.Object) datum19);
        boolean boolean23 = strSet9.addIfNotPresent("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet25 = strSet9.headSet("notice");
        java.util.Comparator<? super java.lang.String> wildcardComparator26 = strSet9.comparator();
        java.util.stream.Stream<java.lang.String> strStream27 = strSet9.parallelStream();
        strStream27.close();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(datum19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']" + "'", str20, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(wildcardComparator26);
        org.junit.Assert.assertNotNull(strStream27);
    }

    @Test
    public void test06602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06602");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("NotBuilder: AnyBuilder:", "f6c7d16f-90d4-435d-b9d9-a9f6c196d56a", "1179c");
    }

    @Test
    public void test06603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06603");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter12 = xmlWriter1.openElement((java.lang.CharSequence) "bbc0a687-18eb-47ce-86f2-5e9e4cbb8859");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: 'bbc0a687-18eb-47ce-86f2-5e9e4cbb8859' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06604");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher4 = new org.apache.rat.analysis.matchers.CopyrightMatcher("b44875e2-725e-49f9-8e21-90384e2ef96f", "1c65536e-7ce4-4a7c-817f-dbd9c07a163f", "d5b3cead-3d07-43ee-903a-1e1ba144eb11", "f8ffb5f5-053b-4c2d-b24f-60f90a9ced52");
    }

    @Test
    public void test06605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06605");
        java.lang.String[] strArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("01cd6410-ba98-464c-a66e-0b7190dd6096", strArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06606");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str8 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("641dafc1-13c3-45d4-8272-f36f10392c53");
        java.lang.String str11 = fullTextMatchingLicense0.getLicenseFamilyName();
        org.apache.rat.license.ILicenseFamily iLicenseFamily12 = fullTextMatchingLicense0.getLicenseFamily();
        fullTextMatchingLicense0.setFullText("Copyright Builder: s:null e:W3C Software Copyright o:null");
        java.lang.String str15 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setFullText("Copyright Builder: s:.cvsignore e:.gitignore o:null");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str11, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(iLicenseFamily12);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test06607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06607");
        org.apache.rat.license.ILicense[] iLicenseArray3 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet4 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet4, iLicenseArray3);
        java.lang.String[] strArray18 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory21 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4, (java.util.Collection<java.lang.String>) strList19);
        org.apache.rat.license.ILicense iLicense22 = org.apache.rat.license.LicenseSetFactory.search("JAVA", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4);
        org.apache.rat.license.ILicense iLicense23 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4);
        org.apache.rat.license.ILicense iLicense24 = org.apache.rat.license.LicenseSetFactory.search("Mathc", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4);
        org.junit.Assert.assertNotNull(iLicenseArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(iLicense22);
        org.junit.Assert.assertNull(iLicense23);
        org.junit.Assert.assertNull(iLicense24);
    }

    @Test
    public void test06608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06608");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.ILicenseFamily iLicenseFamily3 = null;
        reportConfiguration1.addFamily(iLicenseFamily3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        java.lang.String[] strArray50 = new java.lang.String[] { "http://org/apache/rat/meta-data", "GNU General Public License, version 2", "Modified BSD License", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "The MIT License", "OASIS", "?????", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "6486879f-fc81-4b57-aec7-c4c77d540c30", "MANIFEST.MF", "?????", "GEN  ", "GPL3 ", "http://org/apache/rat/meta-data#HeaderCategory", "DOJO ", "true", "GPL2 ", "?????", "Apache License Version 2.0", "OASIS", "W3CD ", "OASIS", "?????", "OASIS Open License", "", "standard", "GPL2 ", "GEN  ", "W3CD ", "TMF  ", ".cvsignore", "Copyright Builder: s:null e:null o:null", "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 2", "W3CD ", ".cvsignore", "Apache License Version 2.0", "GEN  ", "W3C Software Copyright", "Modified BSD License", "GPL2 ", "JAVA" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        reportConfiguration6.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList51);
        reportConfiguration6.removeApprovedLicenseCategory("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.license.ILicense[] iLicenseArray56 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet57 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet57, iLicenseArray56);
        java.lang.String[] strArray71 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory74 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet57, (java.util.Collection<java.lang.String>) strList72);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.none;
        java.util.SortedSet<java.lang.String> strSet76 = licenseSetFactory74.getLicenseFamilyIds(licenseFilter75);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration6, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter75);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense79 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense79.setLicenseFamilyName("hi!");
        java.lang.String str82 = fullTextMatchingLicense79.getLicenseFamilyCategory();
        java.lang.String str83 = fullTextMatchingLicense79.getLicenseFamilyName();
        fullTextMatchingLicense79.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense79.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily88 = fullTextMatchingLicense79.getLicenseFamily();
        java.lang.String str89 = iLicenseFamily88.getFamilyName();
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily88);
        java.lang.String str91 = iLicenseFamily88.getFamilyCategory();
        java.lang.String str92 = iLicenseFamily88.getFamilyCategory();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(iLicenseArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.none + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.none));
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hi!" + "'", str83, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "SpdxBuilder: null" + "'", str89, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "TMF  " + "'", str91, "TMF  ");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "TMF  " + "'", str92, "TMF  ");
    }

    @Test
    public void test06609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06609");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection11 = metaData0.getData();
        java.lang.String str13 = metaData0.value("641dafc1-13c3-45d4-8272-f36f10392c53");
        org.apache.rat.api.MetaData.Datum datum15 = metaData0.get("ed0faf32f32c46f1a6294fe87704cb0e");
        boolean boolean17 = metaData0.clear("d4ddbedc-4cec-4790-9c53-114883ccd4cc");
        java.lang.String str19 = metaData0.value("");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNotNull(datumCollection11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(datum15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test06610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06610");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isNonBinary("RegexBuilder: SpdxBuilder: 7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test06611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06611");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        reportConfiguration1.setStyleReport(true);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration13.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet16 = reportConfiguration13.getLicenses(licenseFilter15);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders17 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration13.setAddLicenseHeaders(addLicenseHeaders17);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic21 = org.apache.rat.Reporter.report(reportConfiguration20);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter22);
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter22);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration26.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet29 = reportConfiguration26.getLicenses(licenseFilter28);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders30 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration26.setAddLicenseHeaders(addLicenseHeaders30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter35);
        java.io.FilenameFilter filenameFilter39 = reportConfiguration13.getInputFileFilter();
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = reportConfiguration41.getLicenses(licenseFilter43);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders45 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter50);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        java.io.FilenameFilter filenameFilter55 = reportConfiguration54.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet57 = reportConfiguration54.getLicenses(licenseFilter56);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders58 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration54.setAddLicenseHeaders(addLicenseHeaders58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter63 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration61, licenseFilter63);
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter63);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter63);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet67 = reportConfiguration13.getLicenses(licenseFilter63);
        boolean boolean68 = reportConfiguration13.isAddingLicensesForced();
        org.apache.rat.utils.Log log69 = null;
        org.apache.rat.ReportConfiguration reportConfiguration70 = new org.apache.rat.ReportConfiguration(log69);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic71 = org.apache.rat.Reporter.report(reportConfiguration70);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.utils.ReportingSet.Options options75 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration73.licenseDuplicateOption(options75);
        reportConfiguration70.familyDuplicateOption(options75);
        reportConfiguration13.familyDuplicateOption(options75);
        org.apache.rat.license.ILicenseFamily.Builder builder79 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str80 = builder79.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder82 = builder79.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder84 = builder82.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder86 = builder84.setLicenseFamilyName("6620e9ee-d651-4c18-8162-edad6d18368e");
        reportConfiguration13.addFamily(builder84);
        org.apache.rat.license.ILicenseFamily.Builder builder89 = builder84.setLicenseFamilyCategory("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.license.ILicenseFamily.Builder builder91 = builder89.setLicenseFamilyCategory("58515fd1-71f9-42a1-b033-b509624129a7");
        org.apache.rat.license.ILicenseFamily.Builder builder93 = builder89.setLicenseFamilyName("SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName");
        reportConfiguration1.addFamily(builder93);
        reportConfiguration1.setStyleReport(false);
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet16);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders17 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders17.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet29);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders30 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders30.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter39);
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders45 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders45.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet57);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders58 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders58.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertTrue("'" + licenseFilter63 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter63.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(claimStatistic71);
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertTrue("'" + options75 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options75.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test06612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06612");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.text();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("");
        java.lang.String str3 = textBuilder0.toString();
        java.lang.String str4 = textBuilder0.toString();
        boolean boolean5 = textBuilder0.hasId();
        org.apache.rat.configuration.builders.TextBuilder textBuilder7 = textBuilder0.setText("standard");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = textBuilder7.build();
        org.apache.rat.analysis.IHeaderMatcher.State state10 = iHeaderMatcher8.matches("F1AEA744-03D8-4DF8-82A1-D76D7E6444BB");
        org.junit.Assert.assertNotNull(textBuilder0);
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "TextBuilder: " + "'", str3, "TextBuilder: ");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "TextBuilder: " + "'", str4, "TextBuilder: ");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(textBuilder7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state10.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test06613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06613");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter3 = xmlWriter1.openElement((java.lang.CharSequence) "null t true");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: 'null t true' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06614");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.text();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("");
        java.lang.String str3 = textBuilder0.toString();
        java.lang.String str4 = textBuilder0.toString();
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder6 = textBuilder0.setText("9340895e-47fd-411d-8917-58c71f9a32c4");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder8 = textBuilder0.setId("Datum [ name ='http://org/apache/rat/meta-data#FileCategory',value ='archive ']");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = textBuilder0.build();
        boolean boolean10 = textBuilder0.hasId();
        org.junit.Assert.assertNotNull(textBuilder0);
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "TextBuilder: " + "'", str3, "TextBuilder: ");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "TextBuilder: " + "'", str4, "TextBuilder: ");
        org.junit.Assert.assertNotNull(textCaptureBuilder6);
        org.junit.Assert.assertNotNull(abstractBuilder8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test06615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06615");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.rat.license.ILicense iLicense7 = null;
        reportConfiguration1.addLicense(iLicense7);
        org.apache.rat.license.ILicenseFamily.Builder builder9 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str10 = builder9.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder12 = builder9.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder14 = builder12.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder16 = builder12.setLicenseFamilyCategory("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']");
        org.apache.rat.license.ILicenseFamily.Builder builder18 = builder16.setLicenseFamilyName("standard");
        org.apache.rat.license.ILicenseFamily iLicenseFamily19 = builder18.build();
        reportConfiguration1.addFamily(iLicenseFamily19);
        reportConfiguration1.addApprovedLicenseCategory("REGEXBUILDER: NULL");
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(iLicenseFamily19);
    }

    @Test
    public void test06616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06616");
        org.apache.rat.ReportConfiguration reportConfiguration0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic3 = org.apache.rat.Reporter.report(reportConfiguration2);
        org.apache.rat.license.ILicense[] iLicenseArray4 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet5 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet5, iLicenseArray4);
        java.lang.String[] strArray19 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory22 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet5, (java.util.Collection<java.lang.String>) strList20);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        java.io.FilenameFilter filenameFilter25 = reportConfiguration24.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet27 = reportConfiguration24.getLicenses(licenseFilter26);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders28 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration24.setAddLicenseHeaders(addLicenseHeaders28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter33);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        java.io.FilenameFilter filenameFilter38 = reportConfiguration37.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = reportConfiguration37.getLicenses(licenseFilter39);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders41 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration37.setAddLicenseHeaders(addLicenseHeaders41);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic45 = org.apache.rat.Reporter.report(reportConfiguration44);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter46);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter46);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter46);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet50 = licenseSetFactory22.getLicenses(licenseFilter46);
        reportConfiguration2.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet50);
        java.io.FilenameFilter filenameFilter52 = reportConfiguration2.getInputFileFilter();
        reportConfiguration2.setCopyrightMessage("SpdxBuilder: null");
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray57 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList58 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList58, iLicenseFamilyArray57);
        reportConfiguration56.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList58);
        org.apache.rat.utils.Log.Level level61 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration56.logLicenseCollisions(level61);
        org.apache.rat.report.IReportable iReportable63 = reportConfiguration56.getReportable();
        org.apache.rat.report.IReportable iReportable64 = reportConfiguration56.getReportable();
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        reportConfiguration66.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration66.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier71 = reportConfiguration66.getOutput();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier72 = reportConfiguration66.getOutput();
        org.apache.rat.license.ILicense[] iLicenseArray73 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet74 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet74, iLicenseArray73);
        java.lang.String[] strArray88 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList89 = new java.util.ArrayList<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList89, strArray88);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory91 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet74, (java.util.Collection<java.lang.String>) strList89);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter92 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.none;
        java.util.SortedSet<java.lang.String> strSet93 = licenseSetFactory91.getLicenseFamilyIds(licenseFilter92);
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter92);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet95 = reportConfiguration56.getLicenseFamilies(licenseFilter92);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter92);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration0, licenseFilter92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic3);
        org.junit.Assert.assertNotNull(iLicenseArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(filenameFilter25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet27);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders28 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders28.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet40);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders41 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders41.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet50);
        org.junit.Assert.assertNull(filenameFilter52);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + level61 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level61.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(iReportable63);
        org.junit.Assert.assertNull(iReportable64);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier71);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier72);
        org.junit.Assert.assertNotNull(iLicenseArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter92 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.none + "'", licenseFilter92.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.none));
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNotNull(iLicenseFamilySet95);
    }

    @Test
    public void test06617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06617");
        java.lang.String str1 = org.apache.rat.document.impl.guesser.GuessUtils.normalise("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='????? ']");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "META-DATA#LICENSEFAMILYCATEGORY',VALUE ='????? ']" + "'", str1, "META-DATA#LICENSEFAMILYCATEGORY',VALUE ='????? ']");
    }

    @Test
    public void test06618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06618");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder5 = builder0.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.Defaults.Builder builder7 = builder0.remove("GNU General Public License, version 3");
        org.apache.rat.Defaults.Builder builder9 = builder7.add("0e4cf59d-6e23-47eb-854e-2c010e384f16");
        java.net.URL uRL10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder11 = builder7.remove(uRL10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test06619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06619");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        org.apache.rat.api.MetaData.Datum datum19 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_1;
        java.lang.String str20 = datum19.toString();
        boolean boolean21 = strSet9.equals((java.lang.Object) datum19);
        boolean boolean23 = strSet9.addIfNotPresent("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet25 = strSet9.headSet("notice");
        org.apache.rat.configuration.Format format26 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader27 = format26.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader28 = format26.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet29 = licenseReader28.readFamilies();
        boolean boolean30 = strSet9.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet29);
        boolean boolean31 = strSet9.isEmpty();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(datum19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']" + "'", str20, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + format26 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format26.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader27);
        org.junit.Assert.assertNotNull(licenseReader28);
        org.junit.Assert.assertNotNull(iLicenseFamilySet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test06620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06620");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.license.ILicense.Builder builder7 = builder0.setId("CDDL1");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.lang.String str10 = matcherRefBuilder8.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap11 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder12 = matcherRefBuilder8.setMatchers(strMap11);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap13 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder14 = matcherRefBuilder8.setMatchers(strMap13);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap15 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder16 = matcherRefBuilder8.setMatchers(strMap15);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap17 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder18 = matcherRefBuilder16.setMatchers(strMap17);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder20 = matcherRefBuilder18.setRefId("Copyright Builder: s:.cvsignore e:standard o:W3C  ");
        org.apache.rat.license.ILicense.Builder builder21 = builder7.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder18);
        boolean boolean22 = matcherRefBuilder18.hasId();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MathcerRefBuilder: null" + "'", str10, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder14);
        org.junit.Assert.assertNotNull(matcherRefBuilder16);
        org.junit.Assert.assertNotNull(matcherRefBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test06621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06621");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder2 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder4 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("b5cb0999-b639-4e9c-ab9c-268137bc8846 GEN  ");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test06622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06622");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.api.Document document16 = null;
        // The following exception was thrown during execution in test generation
        try {
            simpleXmlClaimReporter15.report(document16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06623");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder11 = copyrightBuilder7.setStart("DOJO ");
        boolean boolean12 = copyrightBuilder11.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder14 = copyrightBuilder11.setEnd("64868");
        java.lang.String str15 = copyrightBuilder11.toString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(copyrightBuilder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Copyright Builder: s:DOJO  e:64868 o:null" + "'", str15, "Copyright Builder: s:DOJO  e:64868 o:null");
    }

    @Test
    public void test06624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06624");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("a3b53609-8989-4241-8aa6-1cc947f0d382");
        java.lang.String str6 = metaData0.value("");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test06625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06625");
        org.apache.rat.config.ReportFormat reportFormat0 = org.apache.rat.config.ReportFormat.XML;
        boolean boolean2 = reportFormat0.is("GPL1 ");
        boolean boolean4 = reportFormat0.is("");
        boolean boolean6 = reportFormat0.is("6486879ffc814b57aec7c4c77d540c30");
        boolean boolean8 = reportFormat0.is("2e48d868-a09d-40cc-abd4-819232908bca");
        org.junit.Assert.assertTrue("'" + reportFormat0 + "' != '" + org.apache.rat.config.ReportFormat.XML + "'", reportFormat0.equals(org.apache.rat.config.ReportFormat.XML));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06626");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.fromName("f65b7401-dce0-4358-b870-cf848940a8e0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: f65b7401-dce0-4358-b870-cf848940a8e0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06627");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter4 = xmlWriter1.content((java.lang.CharSequence) "OASISOpenLicense");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06628");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray19 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList20 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20, iLicenseFamilyArray19);
        org.apache.rat.policy.DefaultPolicy defaultPolicy22 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        boolean boolean23 = strSet9.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        org.apache.rat.policy.DefaultPolicy defaultPolicy24 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        org.apache.rat.policy.DefaultPolicy defaultPolicy25 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        org.apache.rat.api.Document document26 = null;
        defaultPolicy25.analyse(document26);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray28 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList29 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList29, iLicenseFamilyArray28);
        org.apache.rat.policy.DefaultPolicy defaultPolicy31 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier35 = reportConfiguration33.getStyleSheet();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense36 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense36.setLicenseFamilyName("hi!");
        java.lang.String str39 = fullTextMatchingLicense36.getLicenseFamilyCategory();
        java.lang.String str40 = fullTextMatchingLicense36.getLicenseFamilyName();
        fullTextMatchingLicense36.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense36.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily45 = fullTextMatchingLicense36.getLicenseFamily();
        java.lang.String str46 = iLicenseFamily45.getFamilyName();
        java.lang.String str47 = iLicenseFamily45.getFamilyName();
        reportConfiguration33.addApprovedLicenseCategory(iLicenseFamily45);
        java.lang.String str49 = iLicenseFamily45.getFamilyCategory();
        defaultPolicy31.add(iLicenseFamily45);
        defaultPolicy25.add(iLicenseFamily45);
        java.lang.String str52 = iLicenseFamily45.getFamilyName();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(inputStreamIOSupplier35);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "SpdxBuilder: null" + "'", str46, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "SpdxBuilder: null" + "'", str47, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "TMF  " + "'", str49, "TMF  ");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "SpdxBuilder: null" + "'", str52, "SpdxBuilder: null");
    }

    @Test
    public void test06629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06629");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        reportConfiguration1.removeApprovedLicenseCategory("The MIT License");
        org.apache.rat.license.ILicense[] iLicenseArray12 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet13 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet13, iLicenseArray12);
        java.lang.String[] strArray27 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory30 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet13, (java.util.Collection<java.lang.String>) strList28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration32.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet35 = reportConfiguration32.getLicenses(licenseFilter34);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders36 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter41);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration45.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet48 = reportConfiguration45.getLicenses(licenseFilter47);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders49 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration45.setAddLicenseHeaders(addLicenseHeaders49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter54);
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter54);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter54);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = licenseSetFactory30.getLicenses(licenseFilter54);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet58);
        org.apache.rat.utils.Log log60 = reportConfiguration1.getLog();
        boolean boolean61 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        reportConfiguration63.addApprovedLicenseCategory(".cvsignore");
        boolean boolean66 = reportConfiguration63.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier67 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration63.setStyleSheet(inputStreamIOSupplier67);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier67);
        boolean boolean70 = reportConfiguration1.isAddingLicenses();
        reportConfiguration1.removeApprovedLicenseCategory("491b6ccf-4ab4-4414-ac34-a9dc2423c7de");
        reportConfiguration1.removeApprovedLicenseCategory("c6c331d9-a8b3-43d2-9e3e-30eea558f9c7");
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNotNull(iLicenseArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet35);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders36 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders36.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet48);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders49 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders49.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test06630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06630");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.lang.String str14 = strSet13.first();
        strSet13.clear();
        java.lang.Object[] objArray16 = strSet13.toArray();
        int int17 = strSet13.size();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet13.headSet("RegexBuilder: 255ef7d8-e270-4908-9de7-bebc7df6eb88");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet22 = strSet19.subSet("0220269f-fc2a-4386-ad2d-6c8cb9ef0d91", "46eea");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AllBuilder:" + "'", str14, "AllBuilder:");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strSet22);
    }

    @Test
    public void test06631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06631");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isImage("0c5b2");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test06632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06632");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        int int1 = strSet0.size();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet3 = strSet0.headSet("?????");
        boolean boolean4 = strSet0.isEmpty();
        java.util.Iterator<java.lang.String> strItor5 = strSet0.iterator();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strItor5);
    }

    @Test
    public void test06633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06633");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter16 = xmlWriter1.closeElement();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06634");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader3 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet4 = licenseReader3.readFamilies();
        java.net.URL uRL5 = null;
        // The following exception was thrown during execution in test generation
        try {
            licenseReader3.addLicenses(uRL5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(matcherReader2);
        org.junit.Assert.assertNotNull(licenseReader3);
        org.junit.Assert.assertNotNull(iLicenseFamilySet4);
    }

    @Test
    public void test06635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06635");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.rat.utils.Log log9 = reportConfiguration1.getLog();
        org.apache.rat.configuration.Format format10 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader11 = format10.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader12 = format10.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader13 = format10.licenseReader();
        org.apache.rat.configuration.LicenseReader licenseReader14 = format10.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet15 = licenseReader14.readFamilies();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet16 = licenseReader14.readLicenses();
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet16);
        java.lang.String[] strArray23 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        boolean boolean27 = strSet24.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean29 = strSet24.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction30 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet31 = strSet24.setMsgFormat(strFunction30);
        java.lang.String str32 = strSet24.last();
        java.lang.Object[] objArray33 = strSet24.toArray();
        int int34 = strSet24.size();
        int int35 = strSet24.size();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet38 = strSet24.subSet("SPDX:ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "bd015714-405b-4304-9faa-36efad80e6e6 GEN  ");
        strSet38.clear();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory40 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet16, (java.util.Collection<java.lang.String>) strSet38);
        org.apache.rat.Defaults.Builder builder41 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults42 = builder41.build();
        org.apache.rat.Defaults.Builder builder43 = builder41.noDefault();
        org.apache.rat.Defaults.Builder builder45 = builder41.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder47 = builder41.remove("GNU General Public License, version 2");
        org.apache.rat.Defaults defaults48 = builder47.build();
        org.apache.rat.license.ILicense[] iLicenseArray49 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet50 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet50, iLicenseArray49);
        java.lang.String[] strArray64 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory67 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet50, (java.util.Collection<java.lang.String>) strList65);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.none;
        java.util.SortedSet<java.lang.String> strSet69 = licenseSetFactory67.getLicenseFamilyIds(licenseFilter68);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet70 = defaults48.getLicenseFamilies(licenseFilter68);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet71 = licenseSetFactory40.getLicenses(licenseFilter68);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertTrue("'" + format10 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format10.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader11);
        org.junit.Assert.assertNotNull(matcherReader12);
        org.junit.Assert.assertNotNull(licenseReader13);
        org.junit.Assert.assertNotNull(licenseReader14);
        org.junit.Assert.assertNotNull(iLicenseFamilySet15);
        org.junit.Assert.assertNotNull(iLicenseSet16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str32, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 7 + "'", int34 == 7);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 7 + "'", int35 == 7);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(defaults42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(defaults48);
        org.junit.Assert.assertNotNull(iLicenseArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.none + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.none));
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(iLicenseFamilySet70);
        org.junit.Assert.assertNotNull(iLicenseSet71);
    }

    @Test
    public void test06636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06636");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        claimStatistic0.setNumGenerated((int) (short) 10);
        claimStatistic0.setNumApproved(6);
        int int12 = claimStatistic0.getNumApproved();
        claimStatistic0.setNumUnknown(5);
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
    }

    @Test
    public void test06637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06637");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder0.setText("stand");
        java.lang.String str5 = textBuilder0.toString();
        org.apache.rat.configuration.builders.TextBuilder textBuilder7 = textBuilder0.setText("RegexBuilder: d4148d3a-edbc-4672-b347-0fa619553f91");
        boolean boolean8 = textBuilder0.hasId();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "TextBuilder: stand" + "'", str5, "TextBuilder: stand");
        org.junit.Assert.assertNotNull(textBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06638");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier5 = reportConfiguration3.getStyleSheet();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic6 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems7 = org.apache.rat.config.SourceCodeManagementSystems.CVS;
        java.lang.String str8 = sourceCodeManagementSystems7.getIgnoreFile();
        boolean boolean9 = sourceCodeManagementSystems7.hasIgnoreFile();
        java.util.List<java.lang.String> strList10 = sourceCodeManagementSystems7.getExclusions();
        java.io.FilenameFilter filenameFilter11 = org.apache.rat.Report.parseExclusions(strList10);
        reportConfiguration3.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = org.apache.rat.Reporter.report(reportConfiguration17);
        org.apache.rat.utils.ReportingSet.Options options19 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration17.licenseDuplicateOption(options19);
        reportConfiguration14.familyDuplicateOption(options19);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier22 = reportConfiguration14.getWriter();
        boolean boolean23 = reportConfiguration14.isAddingLicensesForced();
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier27 = reportConfiguration25.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier27);
        reportConfiguration3.setOut(outputStreamIOSupplier27);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder30 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str31 = iLicenseFamilyBuilder30.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder33 = iLicenseFamilyBuilder30.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder35 = iLicenseFamilyBuilder30.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder37 = iLicenseFamilyBuilder30.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.apache.rat.license.ILicenseFamily.Builder builder39 = builder37.setLicenseFamilyCategory("49ba0523-306f-4984-949f-9db17b9667d9");
        reportConfiguration3.addFamily(builder37);
        org.apache.rat.report.IReportable iReportable41 = reportConfiguration3.getReportable();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter42 = reportConfiguration3.getDirectoryFilter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker43 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(inputStreamIOSupplier5);
        org.junit.Assert.assertNull(claimStatistic6);
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems7 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.CVS + "'", sourceCodeManagementSystems7.equals(org.apache.rat.config.SourceCodeManagementSystems.CVS));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + ".cvsignore" + "'", str8, ".cvsignore");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(filenameFilter11);
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertNull(claimStatistic18);
        org.junit.Assert.assertTrue("'" + options19 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options19.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(iReportable41);
        org.junit.Assert.assertNotNull(iOFileFilter42);
    }

    @Test
    public void test06639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06639");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher16 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher16.reset();
        org.apache.rat.license.ILicense.Builder builder18 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher16);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str20 = spdxBuilder19.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder22 = spdxBuilder19.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder23 = builder18.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder19);
        org.apache.rat.license.ILicense.Builder builder25 = builder23.setName("DOJO ");
        org.apache.rat.license.ILicense.Builder builder27 = builder25.setLicenseFamilyCategory("RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicense.Builder builder29 = builder27.setNotes("MathcerRefBuilder: TextBuilder: SpdxBuilder: null");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder30 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str31 = regexBuilder30.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder33 = regexBuilder30.setExpr("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder35 = regexBuilder30.setExpr("JAVA");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher36 = regexBuilder35.build();
        org.apache.rat.license.ILicense.Builder builder37 = builder27.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) regexBuilder35);
        org.apache.rat.license.ILicense.Builder builder39 = builder37.setDerivedFrom("SpdxBuilder: null");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(spdxBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "SpdxBuilder: null" + "'", str20, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "RegexBuilder: null" + "'", str31, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder33);
        org.junit.Assert.assertNotNull(regexBuilder35);
        org.junit.Assert.assertNotNull(iHeaderMatcher36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test06640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06640");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter15 = xmlWriter1.closeElement();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06641");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap10);
        claimStatistic0.setNumGenerated((int) (short) 1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = claimStatistic0.getLicenseFileCodeMap();
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap14);
    }

    @Test
    public void test06642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06642");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        simpleLicenseFamily0.setFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str3 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyCategory("TextBuilder: true");
        java.lang.String str6 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyName("");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str3, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str6, "http://org/apache/rat/meta-data#LicenseFamilyName");
    }

    @Test
    public void test06643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06643");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter11 = xmlWriter1.attribute((java.lang.CharSequence) "RegexBuilder: AL   ", (java.lang.CharSequence) "b34f95f9-1711-4b0a-b02f-fef90a5139bf");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06644");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder5 = builder0.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.Defaults.Builder builder6 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder8 = builder0.remove("AnyBuilder:\nAllBuilder:");
        org.apache.rat.Defaults.Builder builder10 = builder8.remove("null d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.Defaults.Builder builder12 = builder10.add("ACADEMIC FREE LICENSE, VERSION 2.1");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test06645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06645");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.license.ILicense.Builder builder7 = builder0.setName("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']");
        org.apache.rat.license.ILicense.Builder builder9 = builder0.setDerivedFrom("OASIS Open License");
        org.apache.rat.license.ILicense.Builder builder11 = builder0.setNotes("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder14 = copyrightBuilder12.setStart("OASIS");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher15 = copyrightBuilder12.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder12.setStart(".cvsignore");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder19 = copyrightBuilder12.setOwner("W3C  ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = copyrightBuilder12.setEnd("standard");
        java.lang.String str22 = copyrightBuilder12.toString();
        org.apache.rat.license.ILicense.Builder builder23 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder12);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(copyrightBuilder14);
        org.junit.Assert.assertNotNull(iHeaderMatcher15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertNotNull(copyrightBuilder19);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Copyright Builder: s:.cvsignore e:standard o:W3C  " + "'", str22, "Copyright Builder: s:.cvsignore e:standard o:W3C  ");
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test06646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06646");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        boolean boolean57 = reportConfiguration55.isStyleReport();
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration55.logLicenseCollisions(level62);
        defaultLog0.log(level62, "Academic Free License, Version 2.1");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender67 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        java.lang.Class<?> wildcardClass68 = defaultLog0.getClass();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test06647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06647");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap2 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = matcherRefBuilder0.setMatchers(strMap2);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder3.setMatchers(strMap4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = matcherRefBuilder3.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder3);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
    }

    @Test
    public void test06648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06648");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.finalizeState();
        boolean boolean5 = fullTextMatcher2.doMatch("0925e382-79b7-417a-85be-aed683d949e2");
        org.apache.rat.analysis.IHeaderMatcher.State state6 = fullTextMatcher2.currentState();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test06649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06649");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.license.ILicense.Builder builder11 = builder4.setNotes("http:");
        org.apache.rat.license.ILicense.Builder builder13 = builder11.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder15 = builder11.setName("W3C Software Copyright");
        org.apache.rat.license.ILicense.Builder builder17 = builder11.setDerivedFrom("");
        org.apache.rat.license.ILicense.Builder builder19 = builder11.setId("c819f60c-c781-49b6-ae3a-5a74de014a4d");
        org.apache.rat.license.ILicense.Builder builder21 = builder19.setId("SpdxBuilder: null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test06650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06650");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        java.io.FilenameFilter filenameFilter5 = reportConfiguration4.getInputFileFilter();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration4.setAddLicenseHeaders(addLicenseHeaders6);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders6);
        boolean boolean9 = reportConfiguration1.isStyleReport();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(filenameFilter5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06651");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        java.lang.String str2 = matcherRefBuilder0.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap3 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder4 = matcherRefBuilder0.setMatchers(strMap3);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap5 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder0.setMatchers(strMap5);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder0.setMatchers(strMap7);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder0.setRefId("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap11 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder12 = matcherRefBuilder0.setMatchers(strMap11);
        java.lang.String str13 = matcherRefBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder15 = matcherRefBuilder0.setRefId("MATHCERREFBUILDERNULL");
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MathcerRefBuilder: null" + "'", str2, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
        org.junit.Assert.assertNotNull(matcherRefBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str13, "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertNotNull(matcherRefBuilder15);
    }

    @Test
    public void test06652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06652");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        java.lang.CharSequence charSequence7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter9 = xmlWriter1.attribute(charSequence7, (java.lang.CharSequence) "COPYRIGHT BUILDER: S:NULL E:.CVSIGNORE O:5FEC021B-B12E-48C3-A002-3EEA7A06339A");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06653");
        org.apache.rat.api.MetaData metaData1 = new org.apache.rat.api.MetaData();
        java.lang.String str3 = metaData1.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum5 = metaData1.get("f false");
        org.apache.rat.api.MetaData.Datum datum6 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_3;
        metaData1.set(datum6);
        org.apache.rat.api.MetaData.Datum datum9 = metaData1.get("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier13 = reportConfiguration11.getStyleSheet();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic14 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems15 = org.apache.rat.config.SourceCodeManagementSystems.CVS;
        java.lang.String str16 = sourceCodeManagementSystems15.getIgnoreFile();
        boolean boolean17 = sourceCodeManagementSystems15.hasIgnoreFile();
        java.util.List<java.lang.String> strList18 = sourceCodeManagementSystems15.getExclusions();
        java.io.FilenameFilter filenameFilter19 = org.apache.rat.Report.parseExclusions(strList18);
        reportConfiguration11.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        reportConfiguration22.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level25 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration22.logLicenseCollisions(level25);
        reportConfiguration22.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = reportConfiguration43.getLicenses(licenseFilter45);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter52);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration30.getInputFileFilter();
        reportConfiguration30.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable59 = null;
        reportConfiguration30.setReportable(iReportable59);
        org.apache.rat.Defaults.Builder builder62 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults63 = builder62.build();
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        java.io.FilenameFilter filenameFilter66 = reportConfiguration65.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter67 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet68 = reportConfiguration65.getLicenses(licenseFilter67);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders69 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration65.setAddLicenseHeaders(addLicenseHeaders69);
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic73 = org.apache.rat.Reporter.report(reportConfiguration72);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter74 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration72, licenseFilter74);
        org.apache.rat.Reporter.listLicenses(reportConfiguration65, licenseFilter74);
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        java.io.FilenameFilter filenameFilter79 = reportConfiguration78.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter80 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet81 = reportConfiguration78.getLicenses(licenseFilter80);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders82 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration78.setAddLicenseHeaders(addLicenseHeaders82);
        org.apache.rat.utils.Log log84 = null;
        org.apache.rat.ReportConfiguration reportConfiguration85 = new org.apache.rat.ReportConfiguration(log84);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic86 = org.apache.rat.Reporter.report(reportConfiguration85);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter87 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration85, licenseFilter87);
        org.apache.rat.Reporter.listLicenses(reportConfiguration78, licenseFilter87);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet90 = reportConfiguration65.getLicenseFamilies(licenseFilter87);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet91 = defaults63.getLicenses(licenseFilter87);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet92 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet91);
        org.apache.rat.license.ILicense iLicense93 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet91);
        reportConfiguration30.addLicense(iLicense93);
        java.lang.String str95 = iLicense93.derivedFrom();
        reportConfiguration22.addLicense(iLicense93);
        reportConfiguration11.addLicense(iLicense93);
        metaData1.reportOnLicense(iLicense93);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher99 = new org.apache.rat.analysis.matchers.NotMatcher("TextBuilder: standard", (org.apache.rat.analysis.IHeaderMatcher) iLicense93);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(datum5);
        org.junit.Assert.assertNotNull(datum6);
        org.junit.Assert.assertNull(datum9);
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertNull(inputStreamIOSupplier13);
        org.junit.Assert.assertNull(claimStatistic14);
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems15 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.CVS + "'", sourceCodeManagementSystems15.equals(org.apache.rat.config.SourceCodeManagementSystems.CVS));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + ".cvsignore" + "'", str16, ".cvsignore");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + level25 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level25.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(defaults63);
        org.junit.Assert.assertNull(filenameFilter66);
        org.junit.Assert.assertTrue("'" + licenseFilter67 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter67.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet68);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders69 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders69.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic73);
        org.junit.Assert.assertTrue("'" + licenseFilter74 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter74.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter79);
        org.junit.Assert.assertTrue("'" + licenseFilter80 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter80.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet81);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders82 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders82.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic86);
        org.junit.Assert.assertTrue("'" + licenseFilter87 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter87.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet90);
        org.junit.Assert.assertNotNull(iLicenseSet91);
        org.junit.Assert.assertNotNull(iLicense93);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "BSD-3" + "'", str95, "BSD-3");
    }

    @Test
    public void test06654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06654");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder5 = builder0.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.Defaults.Builder builder7 = builder0.remove("1e96b21e-f913-4d52-87cc-09323c460281");
        java.net.URL uRL8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder9 = builder7.add(uRL8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test06655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06655");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String str12 = strSet6.last();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str12, "http://org/apache/rat/meta-data#LicenseFamilyName");
    }

    @Test
    public void test06656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06656");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder2 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("Modified BSD License");
        java.lang.String str3 = iLicenseFamilyBuilder0.getCategory();
        java.lang.String str4 = iLicenseFamilyBuilder0.getCategory();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Modified BSD License" + "'", str3, "Modified BSD License");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Modified BSD License" + "'", str4, "Modified BSD License");
    }

    @Test
    public void test06657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06657");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("MathcerRefBuilder: null", "W3C Document Copyright", "Copyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.analysis.IHeaderMatcher.State state5 = copyrightMatcher3.matches("265f6d84-fb7a-4674-9dc1-fea7799ecf68");
        org.apache.rat.analysis.IHeaderMatcher.State state7 = copyrightMatcher3.matches("d5b3cead3d0743ee903a1e1ba144eb11");
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test06658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06658");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("GPL3 ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = sPDXMatcherFactory0.create("6620e9ee-d651-4c18-8162-edad6d18368e");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = sPDXMatcherFactory0.create("OASIS Open License");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = sPDXMatcherFactory0.create("48142baf-ce2b-498b-86ae-8194ba224cc3");
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
    }

    @Test
    public void test06659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06659");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        fullTextMatcher1.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher1.finalizeState();
        fullTextMatcher1.reset();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test06660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06660");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.license.ILicenseFamily iLicenseFamily7 = null;
        reportConfiguration3.addFamily(iLicenseFamily7);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter9 = reportConfiguration3.getDirectoryFilter();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        java.io.FilenameFilter filenameFilter12 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = reportConfiguration11.getLicenses(licenseFilter13);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders15 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration11.setAddLicenseHeaders(addLicenseHeaders15);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic19 = org.apache.rat.Reporter.report(reportConfiguration18);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter20);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter20);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        java.io.FilenameFilter filenameFilter25 = reportConfiguration24.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet27 = reportConfiguration24.getLicenses(licenseFilter26);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders28 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration24.setAddLicenseHeaders(addLicenseHeaders28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter33);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier39 = reportConfiguration38.getOutput();
        reportConfiguration11.setOut(outputStreamIOSupplier39);
        org.apache.rat.utils.Log.Level level41 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration11.logLicenseCollisions(level41);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter43 = reportConfiguration11.getDirectoryFilter();
        java.nio.file.Path path44 = null;
        boolean boolean45 = iOFileFilter43.matches(path44);
        java.nio.file.Path path46 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes47 = null;
        java.nio.file.FileVisitResult fileVisitResult48 = iOFileFilter43.accept(path46, basicFileAttributes47);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter49 = iOFileFilter9.or(iOFileFilter43);
        java.nio.file.Path path50 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes51 = null;
        java.nio.file.FileVisitResult fileVisitResult52 = iOFileFilter49.accept(path50, basicFileAttributes51);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter53 = iOFileFilter49.negate();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker54 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertNotNull(iOFileFilter9);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders15 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders15.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet27);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders28 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders28.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier39);
        org.junit.Assert.assertTrue("'" + level41 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level41.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult48 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult48.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter49);
        org.junit.Assert.assertTrue("'" + fileVisitResult52 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult52.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter53);
    }

    @Test
    public void test06661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06661");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum11 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_MIT;
        java.lang.String str12 = datum11.getName();
        metaData0.set(datum11);
        metaData0.clear();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNotNull(datum11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyCategory" + "'", str12, "http://org/apache/rat/meta-data#LicenseFamilyCategory");
    }

    @Test
    public void test06662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06662");
        java.lang.String str1 = org.apache.rat.document.impl.guesser.GuessUtils.normalise("55614104-0318-4696-ad8f-51f38556d5d6");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "55614104-0318-4696-AD8F-51F38556D5D6" + "'", str1, "55614104-0318-4696-AD8F-51F38556D5D6");
    }

    @Test
    public void test06663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06663");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setStart("archive");
        java.lang.String str4 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder6 = copyrightBuilder0.setId("255ef7d8-e270-4908-9de7-bebc7df6eb88");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder8 = copyrightBuilder0.setEnd("979d0829-8d5e-4549-8aa7-c5afb8a67878");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Copyright Builder: s:archive e:null o:null" + "'", str4, "Copyright Builder: s:archive e:null o:null");
        org.junit.Assert.assertNotNull(abstractBuilder6);
        org.junit.Assert.assertNotNull(copyrightBuilder8);
    }

    @Test
    public void test06664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06664");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder2 = copyrightBuilder0.setStart("OASIS");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = copyrightBuilder0.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder5 = copyrightBuilder0.setStart(".cvsignore");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder5.setEnd(".gitignore");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder9 = copyrightBuilder5.setId("c523095e-4421-4cc4-93e2-039f23b91f76");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder11 = copyrightBuilder5.setEnd("W3CSoftwareCopyrightAC588FB847FF4C8AB1924B692AC6762C");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertNotNull(copyrightBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(copyrightBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(abstractBuilder9);
        org.junit.Assert.assertNotNull(copyrightBuilder11);
    }

    @Test
    public void test06665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06665");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("MANIFEST.MF", "0356753d-7389-48e7-8d63-056fd4c4548c");
        java.lang.String str3 = fullTextMatcher2.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = fullTextMatcher2.finalizeState();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "MANIFEST.MF" + "'", str3, "MANIFEST.MF");
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test06666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06666");
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.api.ContentType contentType3 = new org.apache.rat.api.ContentType("2c1deda6-584e-42fe-b264-79762e3c58e6", "GEN  ", strMap2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06667");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.util.Comparator<? super java.lang.String> wildcardComparator11 = strSet6.comparator();
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.api.MetaData metaData14 = new org.apache.rat.api.MetaData();
        java.lang.String str16 = metaData14.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection17 = metaData14.getData();
        java.lang.String str19 = metaData14.value("hi!");
        boolean boolean20 = strSet6.equals((java.lang.Object) metaData14);
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection21 = metaData14.getData();
        org.apache.rat.Defaults.Builder builder23 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults24 = builder23.build();
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration26.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet29 = reportConfiguration26.getLicenses(licenseFilter28);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders30 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration26.setAddLicenseHeaders(addLicenseHeaders30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter35);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        java.io.FilenameFilter filenameFilter40 = reportConfiguration39.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet42 = reportConfiguration39.getLicenses(licenseFilter41);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders43 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration39.setAddLicenseHeaders(addLicenseHeaders43);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic47 = org.apache.rat.Reporter.report(reportConfiguration46);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter48);
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter48);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet51 = reportConfiguration26.getLicenseFamilies(licenseFilter48);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = defaults24.getLicenses(licenseFilter48);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet53 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet52);
        org.apache.rat.license.ILicense iLicense54 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet52);
        org.apache.rat.license.ILicenseFamily iLicenseFamily55 = iLicense54.getLicenseFamily();
        metaData14.reportOnLicense(iLicense54);
        java.lang.String str57 = iLicense54.getName();
        java.lang.String str58 = iLicense54.getName();
        java.lang.String str59 = iLicense54.getNotes();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNull(wildcardComparator11);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(datumCollection17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(datumCollection21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(defaults24);
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet29);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders30 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders30.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet42);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders43 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders43.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet51);
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertNotNull(iLicense54);
        org.junit.Assert.assertNotNull(iLicenseFamily55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "The Telemanagement Forum License" + "'", str57, "The Telemanagement Forum License");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "The Telemanagement Forum License" + "'", str58, "The Telemanagement Forum License");
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test06668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06668");
        org.apache.rat.Defaults.Builder builder1 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults2 = builder1.build();
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        java.io.FilenameFilter filenameFilter5 = reportConfiguration4.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter6 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet7 = reportConfiguration4.getLicenses(licenseFilter6);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders8 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration4.setAddLicenseHeaders(addLicenseHeaders8);
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter13);
        org.apache.rat.Reporter.listLicenses(reportConfiguration4, licenseFilter13);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders21 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration17.setAddLicenseHeaders(addLicenseHeaders21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter26);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet29 = reportConfiguration4.getLicenseFamilies(licenseFilter26);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = defaults2.getLicenses(licenseFilter26);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet31 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet30);
        org.apache.rat.license.ILicense iLicense32 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet30);
        java.lang.String str33 = iLicense32.derivedFrom();
        org.apache.rat.license.ILicenseFamily iLicenseFamily34 = iLicense32.getLicenseFamily();
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = reportConfiguration49.getLicenses(licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter58);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier64 = reportConfiguration63.getOutput();
        reportConfiguration36.setOut(outputStreamIOSupplier64);
        org.apache.rat.utils.Log.Level level66 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration36.logLicenseCollisions(level66);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter68 = reportConfiguration36.getDirectoryFilter();
        org.apache.rat.configuration.Format format70 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader71 = format70.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader72 = format70.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader73 = format70.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet74 = licenseReader73.readLicenses();
        org.apache.rat.license.ILicense iLicense75 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet74);
        reportConfiguration36.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet74);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet77 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet74);
        org.apache.rat.license.ILicense iLicense78 = org.apache.rat.license.LicenseSetFactory.search(iLicense32, iLicenseSet74);
        java.lang.String str79 = iLicense32.getNotes();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(defaults2);
        org.junit.Assert.assertNull(filenameFilter5);
        org.junit.Assert.assertTrue("'" + licenseFilter6 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter6.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet7);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders8 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders8.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders21 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders21.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet29);
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertNotNull(iLicense32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "BSD-3" + "'", str33, "BSD-3");
        org.junit.Assert.assertNotNull(iLicenseFamily34);
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier64);
        org.junit.Assert.assertTrue("'" + level66 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level66.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter68);
        org.junit.Assert.assertTrue("'" + format70 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format70.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader71);
        org.junit.Assert.assertNotNull(matcherReader72);
        org.junit.Assert.assertNotNull(licenseReader73);
        org.junit.Assert.assertNotNull(iLicenseSet74);
        org.junit.Assert.assertNull(iLicense75);
        org.junit.Assert.assertNull(iLicense78);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test06669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06669");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        fullTextMatchingLicense0.setFullText("MANIFEST.MF");
        org.apache.rat.license.ILicense.Builder builder5 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setNotes("MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        java.lang.String str8 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setNotes("7E27CD62-4403-40AB-A9F5-16E7C59AB2F1");
        org.apache.rat.license.ILicense.Builder builder11 = fullTextMatchingLicense0.getLicense();
        java.lang.String str12 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str8, "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test06670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06670");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap3);
        int int5 = claimStatistic0.getNumUnknown();
        claimStatistic0.setNumUnApproved((int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap8);
        claimStatistic0.setNumApproved(8);
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = null;
        claimStatistic0.setLicenseFileNameMap(strMap12);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test06671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06671");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        java.util.regex.Pattern pattern2 = null;
        headerBean0.setHeaderPattern(pattern2);
        headerBean0.setMatch(false);
        java.util.regex.Pattern pattern6 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern7 = null;
        headerBean0.setHeaderPattern(pattern7);
        headerBean0.setMatch(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(pattern6);
    }

    @Test
    public void test06672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06672");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setStart("archive");
        java.lang.String str4 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder6 = copyrightBuilder0.setId("255ef7d8-e270-4908-9de7-bebc7df6eb88");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder8 = copyrightBuilder0.setStart("ed0faf32f32c46f1a6294fe87704cb0e");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = copyrightBuilder8.build();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Copyright Builder: s:archive e:null o:null" + "'", str4, "Copyright Builder: s:archive e:null o:null");
        org.junit.Assert.assertNotNull(abstractBuilder6);
        org.junit.Assert.assertNotNull(copyrightBuilder8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
    }

    @Test
    public void test06673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06673");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults defaults2 = builder0.build();
        org.apache.rat.Defaults.Builder builder3 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder4 = builder3.noDefault();
        org.apache.rat.Defaults defaults5 = builder4.build();
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        java.io.FilenameFilter filenameFilter8 = reportConfiguration7.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter9 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet10 = reportConfiguration7.getLicenses(licenseFilter9);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders11 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration7.setAddLicenseHeaders(addLicenseHeaders11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter16);
        org.apache.rat.Reporter.listLicenses(reportConfiguration7, licenseFilter16);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration7, licenseFilter29);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = defaults5.getLicenses(licenseFilter29);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet34 = defaults2.getLicenseFamilies(licenseFilter29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedSet<java.lang.String> strSet36 = defaults2.getLicenseIds(licenseFilter35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(defaults2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(defaults5);
        org.junit.Assert.assertNull(filenameFilter8);
        org.junit.Assert.assertTrue("'" + licenseFilter9 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter9.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet10);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders11 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders11.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertNotNull(iLicenseFamilySet34);
    }

    @Test
    public void test06674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06674");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.utils.ReportingSet.Options options3 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration2.licenseDuplicateOption(options3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        java.io.FilenameFilter filenameFilter7 = reportConfiguration6.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter8 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet9 = reportConfiguration6.getLicenses(licenseFilter8);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders10 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration6.setAddLicenseHeaders(addLicenseHeaders10);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic14 = org.apache.rat.Reporter.report(reportConfiguration13);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter15);
        org.apache.rat.Reporter.listLicenses(reportConfiguration6, licenseFilter15);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration6, licenseFilter28);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier34 = reportConfiguration33.getOutput();
        reportConfiguration6.setOut(outputStreamIOSupplier34);
        org.apache.rat.utils.Log.Level level36 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration6.logLicenseCollisions(level36);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter38 = reportConfiguration6.getDirectoryFilter();
        reportConfiguration2.setInputFileFilter((java.io.FilenameFilter) iOFileFilter38);
        java.nio.file.Path path40 = null;
        boolean boolean41 = iOFileFilter38.matches(path40);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter42 = iOFileFilter38.negate();
        java.nio.file.Path path43 = null;
        boolean boolean44 = iOFileFilter38.matches(path43);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter45 = iOFileFilter38.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter46 = iOFileFilter38.negate();
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration48.getLicenses(licenseFilter50);
        org.apache.rat.license.ILicenseFamily iLicenseFamily52 = null;
        reportConfiguration48.addFamily(iLicenseFamily52);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter54 = reportConfiguration48.getDirectoryFilter();
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        java.io.FilenameFilter filenameFilter57 = reportConfiguration56.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet59 = reportConfiguration56.getLicenses(licenseFilter58);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders60 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration56.setAddLicenseHeaders(addLicenseHeaders60);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic64 = org.apache.rat.Reporter.report(reportConfiguration63);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter65 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration63, licenseFilter65);
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter65);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        java.io.FilenameFilter filenameFilter70 = reportConfiguration69.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter71 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet72 = reportConfiguration69.getLicenses(licenseFilter71);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders73 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration69.setAddLicenseHeaders(addLicenseHeaders73);
        org.apache.rat.utils.Log log75 = null;
        org.apache.rat.ReportConfiguration reportConfiguration76 = new org.apache.rat.ReportConfiguration(log75);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic77 = org.apache.rat.Reporter.report(reportConfiguration76);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter78 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration76, licenseFilter78);
        org.apache.rat.Reporter.listLicenses(reportConfiguration69, licenseFilter78);
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter78);
        org.apache.rat.utils.Log log82 = null;
        org.apache.rat.ReportConfiguration reportConfiguration83 = new org.apache.rat.ReportConfiguration(log82);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier84 = reportConfiguration83.getOutput();
        reportConfiguration56.setOut(outputStreamIOSupplier84);
        org.apache.rat.utils.Log.Level level86 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration56.logLicenseCollisions(level86);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter88 = reportConfiguration56.getDirectoryFilter();
        java.nio.file.Path path89 = null;
        boolean boolean90 = iOFileFilter88.matches(path89);
        java.nio.file.Path path91 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes92 = null;
        java.nio.file.FileVisitResult fileVisitResult93 = iOFileFilter88.accept(path91, basicFileAttributes92);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter94 = iOFileFilter54.or(iOFileFilter88);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter95 = iOFileFilter88.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter96 = iOFileFilter95.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter97 = iOFileFilter46.or(iOFileFilter96);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker98 = new org.apache.rat.walker.DirectoryWalker(file0, iOFileFilter96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + options3 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options3.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter7);
        org.junit.Assert.assertTrue("'" + licenseFilter8 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter8.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet9);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders10 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders10.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier34);
        org.junit.Assert.assertTrue("'" + level36 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level36.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(iOFileFilter42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(iOFileFilter45);
        org.junit.Assert.assertNotNull(iOFileFilter46);
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertNotNull(iOFileFilter54);
        org.junit.Assert.assertNull(filenameFilter57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet59);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders60 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders60.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic64);
        org.junit.Assert.assertTrue("'" + licenseFilter65 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter65.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter70);
        org.junit.Assert.assertTrue("'" + licenseFilter71 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter71.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet72);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders73 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders73.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic77);
        org.junit.Assert.assertTrue("'" + licenseFilter78 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter78.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier84);
        org.junit.Assert.assertTrue("'" + level86 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level86.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult93 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult93.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter94);
        org.junit.Assert.assertNotNull(iOFileFilter95);
        org.junit.Assert.assertNotNull(iOFileFilter96);
        org.junit.Assert.assertNotNull(iOFileFilter97);
    }

    @Test
    public void test06675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06675");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration2.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter4 = reportConfiguration2.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter5 = iOFileFilter4.negate();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker6 = new org.apache.rat.walker.DirectoryWalker(file0, iOFileFilter5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNotNull(iOFileFilter4);
        org.junit.Assert.assertNotNull(iOFileFilter5);
    }

    @Test
    public void test06676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06676");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((-1));
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = claimStatistic0.getDocumentCategoryMap();
        int int4 = claimStatistic0.getNumApproved();
        claimStatistic0.setNumGenerated((int) (byte) 10);
        claimStatistic0.setNumUnApproved((int) (byte) -1);
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test06677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06677");
        org.apache.commons.cli.CommandLine commandLine1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.ReportConfiguration reportConfiguration2 = org.apache.rat.Report.createConfiguration("788fd438-864a-45bf-b3f2-b0665bd16acd", commandLine1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06678");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder5 = builder4.noDefault();
        org.apache.rat.Defaults.Builder builder6 = builder5.noDefault();
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.Defaults.Builder builder10 = builder6.add("MathcerRefBuilder: TMF");
        org.apache.rat.Defaults.Builder builder11 = builder6.noDefault();
        org.apache.rat.Defaults.Builder builder12 = builder11.noDefault();
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder14 = builder12.remove(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test06679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06679");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder2.setText("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = textBuilder4.build();
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder7 = textBuilder4.setText("W3C  ");
        org.apache.rat.configuration.builders.TextBuilder textBuilder9 = textBuilder4.setText("4fcae176-e574-46ed-b9e4-dea2e2f3b458");
        boolean boolean10 = textBuilder4.hasId();
        org.apache.rat.configuration.builders.TextBuilder textBuilder12 = textBuilder4.setText("fe6be119-8817-4567-8d33-352365bfa7c8");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher13 = textBuilder4.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder15 = textBuilder4.setText("");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher16 = textBuilder15.build();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: text value is required");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(textCaptureBuilder7);
        org.junit.Assert.assertNotNull(textBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(textBuilder12);
        org.junit.Assert.assertNotNull(iHeaderMatcher13);
        org.junit.Assert.assertNotNull(textBuilder15);
    }

    @Test
    public void test06680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06680");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender65 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender68 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "MathcerRefBuilder: RegexBuilder: null");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender69 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration70 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log.Level level71 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.log(level71, "AllBuilder:\nTextBuilder: AbstractBuilder.clas...\nTextBuilder: AllBuilder.class\nTextBuilder: AnyBuilder.class\nTextBuilder: ChildContainerBuilde...\nTextBuilder: CopyrightBuilder.cla...\nTextBuilder: MatcherRefBuilder.cl...\nTextBuilder: MatcherRefBuilder$1....\nTextBuilder: MatcherRefBuilder$IH...\nTextBuilder: NotBuilder.class\nTextBuilder: RegexBuilder.class\nTextBuilder: SpdxBuilder.class\nTextBuilder: TextBuilder.class\nTextBuilder: TextCaptureBuilder.c...");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
    }

    @Test
    public void test06681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06681");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic8 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = null;
        claimStatistic8.setDocumentCategoryMap(strMap9);
        int int11 = claimStatistic8.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = claimStatistic8.getDocumentCategoryMap();
        claimStatistic8.setNumUnknown((-1));
        java.util.Map<java.lang.String, java.lang.Integer> strMap15 = null;
        claimStatistic8.setLicenseFileNameMap(strMap15);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier19 = reportConfiguration18.getOutput();
        reportConfiguration18.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log22 = reportConfiguration18.getLog();
        org.apache.rat.utils.Log.Level level23 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration18.logFamilyCollisions(level23);
        org.apache.rat.license.ILicense[] iLicenseArray26 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet27 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet27, iLicenseArray26);
        java.lang.String[] strArray41 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory44 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet27, (java.util.Collection<java.lang.String>) strList42);
        org.apache.rat.license.ILicense iLicense45 = org.apache.rat.license.LicenseSetFactory.search("JAVA", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet27);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet46 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet27);
        reportConfiguration18.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.utils.ReportingSet.Options options54 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration52.licenseDuplicateOption(options54);
        reportConfiguration49.familyDuplicateOption(options54);
        reportConfiguration18.licenseDuplicateOption(options54);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter58 = reportConfiguration18.getDirectoryFilter();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet59 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet61 = strSet59.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray62 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray63 = strSet61.toArray(licenseReaderArray62);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic69 = org.apache.rat.Reporter.report(reportConfiguration68);
        org.apache.rat.utils.ReportingSet.Options options70 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration68.licenseDuplicateOption(options70);
        reportConfiguration65.familyDuplicateOption(options70);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet73 = strSet61.setDuplicateOption(options70);
        reportConfiguration18.licenseDuplicateOption(options70);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.RatReport ratReport75 = org.apache.rat.report.xml.XmlReportFactory.createStandardReport((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1, claimStatistic8, reportConfiguration18);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier19);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + level23 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level23.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(iLicenseArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(iLicense45);
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertTrue("'" + options54 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options54.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iOFileFilter58);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(licenseReaderArray62);
        org.junit.Assert.assertNotNull(licenseReaderArray63);
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertNull(claimStatistic69);
        org.junit.Assert.assertTrue("'" + options70 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options70.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet73);
    }

    @Test
    public void test06682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06682");
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems0 = org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION;
        boolean boolean1 = sourceCodeManagementSystems0.hasIgnoreFile();
        boolean boolean2 = sourceCodeManagementSystems0.hasIgnoreFile();
        java.lang.String str3 = sourceCodeManagementSystems0.getIgnoreFile();
        boolean boolean4 = sourceCodeManagementSystems0.hasIgnoreFile();
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems0 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION + "'", sourceCodeManagementSystems0.equals(org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test06683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06683");
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder4.setName("hi!");
        java.util.regex.Pattern pattern15 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher16 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern15);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher17 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher16);
        org.apache.rat.analysis.IHeaderMatcher.State state18 = notMatcher17.finalizeState();
        java.lang.String str19 = notMatcher17.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state20 = notMatcher17.currentState();
        notMatcher17.reset();
        org.apache.rat.license.ILicense.Builder builder22 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher17);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher23 = new org.apache.rat.analysis.matchers.NotMatcher("TextBuilder: fe6be119-8817-4567-8...", (org.apache.rat.analysis.IHeaderMatcher) notMatcher17);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher24 = new org.apache.rat.analysis.matchers.NotMatcher("8ecb8cce-06e4-400f-84d9-ad1cf6289fda", (org.apache.rat.analysis.IHeaderMatcher) notMatcher23);
        java.lang.String str25 = notMatcher23.getId();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state18.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GNU General Public License, version 2" + "'", str19, "GNU General Public License, version 2");
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state20.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "TextBuilder: fe6be119-8817-4567-8..." + "'", str25, "TextBuilder: fe6be119-8817-4567-8...");
    }

    @Test
    public void test06684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06684");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setNotes("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean4 = matcherRefBuilder3.hasId();
        java.lang.String str5 = matcherRefBuilder3.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap6 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder7 = matcherRefBuilder3.setMatchers(strMap6);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap8 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder9 = matcherRefBuilder3.setMatchers(strMap8);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder3.setMatchers(strMap10);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = matcherRefBuilder3.setRefId("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        java.lang.String str14 = matcherRefBuilder3.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder16 = matcherRefBuilder3.setRefId("t true");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder18 = matcherRefBuilder16.setRefId("");
        org.apache.rat.license.ILicense.Builder builder19 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder18);
        org.apache.rat.license.ILicense.Builder builder21 = builder19.setDerivedFrom("AllBuilder:\nTextBuilder: AbstractBuilder.clas...\nTextBuilder: AllBuilder.class\nTextBuilder: AnyBuilder.class\nTextBuilder: ChildContainerBuilde...\nTextBuilder: CopyrightBuilder.cla...\nTextBuilder: MatcherRefBuilder.cl...\nTextBuilder: MatcherRefBuilder$1....\nTextBuilder: MatcherRefBuilder$IH...\nTextBuilder: NotBuilder.class\nTextBuilder: RegexBuilder.class\nTextBuilder: SpdxBuilder.class\nTextBuilder: TextBuilder.class\nTextBuilder: TextCaptureBuilder.c...");
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.utils.ReportingSet.Options options28 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration26.licenseDuplicateOption(options28);
        reportConfiguration23.familyDuplicateOption(options28);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier31 = reportConfiguration23.getWriter();
        java.lang.String[] strArray37 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet38 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        boolean boolean41 = strSet38.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor42 = strSet38.iterator();
        java.lang.Object[] objArray43 = strSet38.toArray();
        java.lang.String[] strArray49 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet50 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        boolean boolean53 = strSet50.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet54 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean55 = strSet50.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet54);
        boolean boolean56 = strSet38.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet54);
        reportConfiguration23.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet54);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense58 = builder19.build(iLicenseFamilySet54);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(matcherRefBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MathcerRefBuilder: null" + "'", str5, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder7);
        org.junit.Assert.assertNotNull(matcherRefBuilder9);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']" + "'", str14, "MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertNotNull(matcherRefBuilder16);
        org.junit.Assert.assertNotNull(matcherRefBuilder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + options28 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options28.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier31);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test06685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06685");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("W3C  ");
        java.lang.String str5 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyCategory("TextBuilder: true");
        java.lang.String str8 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyName("0220269f-fc2a-4386-ad2d-6c8cb9ef0d91");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test06686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06686");
        org.apache.rat.header.HeaderBean headerBean0 = new org.apache.rat.header.HeaderBean();
        boolean boolean1 = headerBean0.isMatch();
        java.util.regex.Pattern pattern2 = null;
        headerBean0.setHeaderPattern(pattern2);
        boolean boolean4 = headerBean0.isMatch();
        boolean boolean5 = headerBean0.isMatch();
        java.util.regex.Pattern pattern6 = headerBean0.getHeaderPattern();
        java.util.regex.Pattern pattern7 = null;
        headerBean0.setHeaderPattern(pattern7);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(pattern6);
    }

    @Test
    public void test06687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06687");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("10ceccc6-9da0-47a6-810c-684cf0a59f88");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test06688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06688");
        java.lang.String str1 = org.apache.rat.analysis.matchers.FullTextMatcher.prune("http://org/apache/rat/meta-data#HeaderSample null");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "httporgapacheratmetadataHeaderSamplenull" + "'", str1, "httporgapacheratmetadataHeaderSamplenull");
    }

    @Test
    public void test06689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06689");
        org.apache.rat.document.IDocumentAnalyser[] iDocumentAnalyserArray0 = new org.apache.rat.document.IDocumentAnalyser[] {};
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer1 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer2 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer documentAnalyserMultiplexer3 = new org.apache.rat.document.impl.util.DocumentAnalyserMultiplexer(iDocumentAnalyserArray0);
        org.apache.rat.api.Document document4 = null;
        documentAnalyserMultiplexer3.analyse(document4);
        org.apache.rat.api.Document document6 = null;
        documentAnalyserMultiplexer3.analyse(document6);
        org.apache.rat.api.Document document8 = null;
        documentAnalyserMultiplexer3.analyse(document8);
        org.apache.rat.api.Document document10 = null;
        documentAnalyserMultiplexer3.analyse(document10);
        org.junit.Assert.assertNotNull(iDocumentAnalyserArray0);
    }

    @Test
    public void test06690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06690");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense0.setFullText("W3C  ");
        java.lang.String str11 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setNotes("archive W3CD ");
        fullTextMatchingLicense0.setLicenseFamilyName("null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        org.apache.rat.license.ILicense.Builder builder16 = fullTextMatchingLicense0.getLicense();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test06691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06691");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 2", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        org.apache.rat.analysis.IHeaderMatcher.State state5 = notMatcher4.finalizeState();
        java.lang.String str6 = notMatcher4.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state7 = notMatcher4.finalizeState();
        notMatcher4.reset();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher9 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher4);
        org.apache.rat.analysis.IHeaderMatcher.State state10 = notMatcher9.currentState();
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GNU General Public License, version 2" + "'", str6, "GNU General Public License, version 2");
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.t + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.t));
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state10.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test06692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06692");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        reportConfiguration65.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level68 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration65.logFamilyCollisions(level68);
        defaultLog0.setLevel(level68);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender72 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher76 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("COMMO", "ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        defaultLog0.error((java.lang.Object) simpleTextMatcher76);
        org.apache.rat.utils.Log.Level level78 = defaultLog0.getLevel();
        org.apache.rat.utils.Log.Level level79 = defaultLog0.getLevel();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertTrue("'" + level68 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level68.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level78 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level78.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level79 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level79.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test06693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06693");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.finalizeState();
        boolean boolean5 = fullTextMatcher2.doMatch("0925e382-79b7-417a-85be-aed683d949e2");
        org.apache.rat.analysis.IHeaderMatcher.State state7 = fullTextMatcher2.matches("30ec4df7-d5cf-491a-94d7-1788840eb90a");
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test06694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06694");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBytecode("824f4e11-66e9-46be-a4d6-3a2b761d6238");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test06695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06695");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.lang.String str2 = allBuilder0.toString();
        java.lang.String str3 = allBuilder0.toString();
        java.lang.String str4 = allBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder5.setStart("OASIS");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = copyrightBuilder5.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = copyrightBuilder5.setStart(".cvsignore");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder10.setEnd(".gitignore");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder13 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder12);
        java.lang.String str14 = allBuilder0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AllBuilder:" + "'", str2, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "AllBuilder:" + "'", str3, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AllBuilder:" + "'", str4, "AllBuilder:");
        org.junit.Assert.assertNotNull(copyrightBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(copyrightBuilder10);
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(abstractBuilder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AllBuilder:\nCopyright Builder: s:.cvsignore e:.gitignore o:null" + "'", str14, "AllBuilder:\nCopyright Builder: s:.cvsignore e:.gitignore o:null");
    }

    @Test
    public void test06696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06696");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='W3C Software Copyright ']", pattern1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = simpleRegexMatcher2.doMatch("RegexBuilder: b44875e2-725e-49f9-8e21-90384e2ef96f");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06697");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("Datum [ name ='http://org/apache/rat/meta-data#FileCategory',value ='archive ']", "SpdxBuilder: 9d334763-6150-4fa3-86d4-32f09aebbaad");
        java.lang.String str3 = simpleTextMatcher2.getId();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#FileCategory',value ='archive ']" + "'", str3, "Datum [ name ='http://org/apache/rat/meta-data#FileCategory',value ='archive ']");
    }

    @Test
    public void test06698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06698");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        claimStatistic0.setNumApproved((int) (short) 1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = null;
        claimStatistic0.setDocumentCategoryMap(strMap10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = null;
        claimStatistic0.setLicenseFileNameMap(strMap12);
        org.junit.Assert.assertNull(strMap5);
    }

    @Test
    public void test06699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06699");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.report.IReportable iReportable13 = null;
        reportConfiguration1.setReportable(iReportable13);
        java.lang.String str15 = reportConfiguration1.getCopyrightMessage();
        org.apache.rat.report.IReportable iReportable16 = reportConfiguration1.getReportable();
        org.apache.rat.license.ILicenseFamily.Builder builder17 = org.apache.rat.license.ILicenseFamily.builder();
        java.lang.String str18 = builder17.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder20 = builder17.setLicenseFamilyCategory("Copyright Builder: s:null e:null o:null");
        org.apache.rat.license.ILicenseFamily.Builder builder22 = builder20.setLicenseFamilyName("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder24 = builder22.setLicenseFamilyName("6620e9ee-d651-4c18-8162-edad6d18368e");
        reportConfiguration1.addFamily(builder24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.utils.ReportingSet.Options options32 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration30.licenseDuplicateOption(options32);
        reportConfiguration27.familyDuplicateOption(options32);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier35 = reportConfiguration27.getWriter();
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        reportConfiguration37.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level40 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration37.logFamilyCollisions(level40);
        reportConfiguration27.logFamilyCollisions(level40);
        reportConfiguration1.logLicenseCollisions(level40);
        boolean boolean44 = reportConfiguration1.isAddingLicenses();
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic47 = org.apache.rat.Reporter.report(reportConfiguration46);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier48 = reportConfiguration46.getOutput();
        boolean boolean49 = reportConfiguration46.isAddingLicensesForced();
        java.lang.String[] strArray55 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet56 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        boolean boolean59 = strSet56.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.api.MetaData.Datum datum60 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_2;
        boolean boolean61 = strSet56.equals((java.lang.Object) datum60);
        boolean boolean62 = strSet56.isEmpty();
        java.lang.String[] strArray68 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet69 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        boolean boolean72 = strSet69.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet73 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean74 = strSet69.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet73);
        org.apache.rat.utils.Log log75 = null;
        org.apache.rat.ReportConfiguration reportConfiguration76 = new org.apache.rat.ReportConfiguration(log75);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray77 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList78 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList78, iLicenseFamilyArray77);
        reportConfiguration76.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList78);
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration76.logLicenseCollisions(level81);
        org.apache.rat.report.IReportable iReportable83 = reportConfiguration76.getReportable();
        org.apache.rat.report.IReportable iReportable84 = reportConfiguration76.getReportable();
        org.apache.rat.utils.ReportingSet.Options options85 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration76.licenseDuplicateOption(options85);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet87 = strSet69.setDuplicateOption(options85);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet88 = strSet56.setDuplicateOption(options85);
        reportConfiguration46.familyDuplicateOption(options85);
        reportConfiguration1.licenseDuplicateOption(options85);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(iReportable16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + options32 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options32.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier35);
        org.junit.Assert.assertTrue("'" + level40 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level40.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(claimStatistic47);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(datum60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(iReportable83);
        org.junit.Assert.assertNull(iReportable84);
        org.junit.Assert.assertTrue("'" + options85 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options85.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNotNull(strSet88);
    }

    @Test
    public void test06700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06700");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        java.io.FilenameFilter filenameFilter5 = reportConfiguration4.getInputFileFilter();
        boolean boolean6 = reportConfiguration4.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier7 = reportConfiguration4.getOutput();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier8 = reportConfiguration4.getStyleSheet();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        java.io.FilenameFilter filenameFilter12 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = reportConfiguration11.getLicenses(licenseFilter13);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders15 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration11.setAddLicenseHeaders(addLicenseHeaders15);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic19 = org.apache.rat.Reporter.report(reportConfiguration18);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter20);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter20);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        java.io.FilenameFilter filenameFilter25 = reportConfiguration24.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet27 = reportConfiguration24.getLicenses(licenseFilter26);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders28 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration24.setAddLicenseHeaders(addLicenseHeaders28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter33);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier39 = reportConfiguration38.getOutput();
        reportConfiguration11.setOut(outputStreamIOSupplier39);
        boolean boolean41 = reportConfiguration11.isStyleReport();
        boolean boolean42 = reportConfiguration11.isStyleReport();
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        reportConfiguration44.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level47 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration44.logLicenseCollisions(level47);
        reportConfiguration11.logLicenseCollisions(level47);
        org.apache.rat.utils.Log.Level level50 = org.apache.rat.utils.Log.Level.DEBUG;
        reportConfiguration11.logLicenseCollisions(level50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray54 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList55 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList55, iLicenseFamilyArray54);
        reportConfiguration53.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList55);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense58 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense58.setLicenseFamilyName("hi!");
        java.lang.String str61 = fullTextMatchingLicense58.getLicenseFamilyCategory();
        java.lang.String str62 = fullTextMatchingLicense58.getLicenseFamilyName();
        fullTextMatchingLicense58.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense58.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily67 = fullTextMatchingLicense58.getLicenseFamily();
        reportConfiguration53.addFamily(iLicenseFamily67);
        reportConfiguration11.addFamily(iLicenseFamily67);
        reportConfiguration4.addFamily(iLicenseFamily67);
        java.lang.String str71 = iLicenseFamily67.getFamilyCategory();
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily67);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter73 = reportConfiguration1.getDirectoryFilter();
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier74 = reportConfiguration1.getWriter();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertNull(filenameFilter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier7);
        org.junit.Assert.assertNull(inputStreamIOSupplier8);
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders15 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders15.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet27);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders28 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders28.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + level47 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level47.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level50 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level50.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNotNull(iLicenseFamilyArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily67);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "TMF  " + "'", str71, "TMF  ");
        org.junit.Assert.assertNotNull(iOFileFilter73);
        org.junit.Assert.assertNotNull(printWriterIOSupplier74);
    }

    @Test
    public void test06701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06701");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        org.apache.rat.utils.Log.Level level47 = defaultLog0.getLevel();
        java.util.regex.Pattern pattern49 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher50 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("TextBuilder: 4a00cf7d-fe76-423e-9...", pattern49);
        simpleRegexMatcher50.reset();
        defaultLog0.error((java.lang.Object) simpleRegexMatcher50);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertTrue("'" + level47 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level47.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test06702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06702");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.ReportingSet.Options options3 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration1.licenseDuplicateOption(options3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.rat.Defaults.Builder builder7 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults8 = builder7.build();
        org.apache.rat.license.ILicense[] iLicenseArray9 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet10 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet10, iLicenseArray9);
        java.lang.String[] strArray24 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory27 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet10, (java.util.Collection<java.lang.String>) strList25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = licenseSetFactory27.getLicenses(licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet56 = defaults8.getLicenseFamilies(licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet57 = reportConfiguration1.getLicenseFamilies(licenseFilter51);
        java.io.File file58 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setOut(file58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertTrue("'" + options3 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options3.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(defaults8);
        org.junit.Assert.assertNotNull(iLicenseArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertNotNull(iLicenseFamilySet56);
        org.junit.Assert.assertNotNull(iLicenseFamilySet57);
    }

    @Test
    public void test06703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06703");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        reportConfiguration1.removeApprovedLicenseCategory("The MIT License");
        org.apache.rat.license.ILicense iLicense12 = null;
        reportConfiguration1.addLicense(iLicense12);
        org.apache.rat.license.ILicense iLicense14 = null;
        reportConfiguration1.addLicense(iLicense14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.license.ILicenseFamily iLicenseFamily21 = null;
        reportConfiguration17.addFamily(iLicenseFamily21);
        reportConfiguration17.setCopyrightMessage("hi!");
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        reportConfiguration26.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        reportConfiguration26.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet33);
        reportConfiguration26.setCopyrightMessage("MathcerRefBuilder: null");
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier37 = org.apache.rat.Defaults.getUnapprovedLicensesStyleSheet();
        reportConfiguration26.setStyleSheet(inputStreamIOSupplier37);
        reportConfiguration17.setStyleSheet(inputStreamIOSupplier37);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier37);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.utils.ReportingSet.Options options44 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration42.licenseDuplicateOption(options44);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter46 = reportConfiguration42.getDirectoryFilter();
        java.nio.file.Path path47 = null;
        boolean boolean48 = iOFileFilter46.matches(path47);
        reportConfiguration1.addDirectoryFilter(iOFileFilter46);
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier37);
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + options44 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options44.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iOFileFilter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test06704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06704");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder3);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder3.setRefId("http:");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder3.setMatchers(strMap7);
        java.lang.String str9 = matcherRefBuilder3.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder3.setRefId("AL   ");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = matcherRefBuilder3.setRefId("");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap14 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder15 = matcherRefBuilder3.setMatchers(strMap14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher16 = matcherRefBuilder15.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MathcerRefBuilder: http:" + "'", str9, "MathcerRefBuilder: http:");
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertNotNull(matcherRefBuilder15);
    }

    @Test
    public void test06705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06705");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        reportConfiguration1.removeApprovedLicenseCategory("The MIT License");
        org.apache.rat.license.ILicense iLicense12 = null;
        reportConfiguration1.addLicense(iLicense12);
        org.apache.rat.license.ILicense iLicense14 = null;
        reportConfiguration1.addLicense(iLicense14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders21 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration17.setAddLicenseHeaders(addLicenseHeaders21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter26);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter39);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration45.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet48 = reportConfiguration45.getLicenses(licenseFilter47);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders49 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration45.setAddLicenseHeaders(addLicenseHeaders49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter54);
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter54);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        java.io.FilenameFilter filenameFilter59 = reportConfiguration58.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet61 = reportConfiguration58.getLicenses(licenseFilter60);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders62 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration58.setAddLicenseHeaders(addLicenseHeaders62);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter67 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration65, licenseFilter67);
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter67);
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter67);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet71 = reportConfiguration17.getLicenses(licenseFilter67);
        boolean boolean72 = reportConfiguration17.isAddingLicensesForced();
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic75 = org.apache.rat.Reporter.report(reportConfiguration74);
        org.apache.rat.utils.Log log76 = null;
        org.apache.rat.ReportConfiguration reportConfiguration77 = new org.apache.rat.ReportConfiguration(log76);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic78 = org.apache.rat.Reporter.report(reportConfiguration77);
        org.apache.rat.utils.ReportingSet.Options options79 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration77.licenseDuplicateOption(options79);
        reportConfiguration74.familyDuplicateOption(options79);
        reportConfiguration17.familyDuplicateOption(options79);
        reportConfiguration1.licenseDuplicateOption(options79);
        java.net.URL uRL84 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders21 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders21.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet48);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders49 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders49.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet61);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders62 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders62.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertTrue("'" + licenseFilter67 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter67.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(claimStatistic75);
        org.junit.Assert.assertNull(claimStatistic78);
        org.junit.Assert.assertTrue("'" + options79 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options79.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
    }

    @Test
    public void test06706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06706");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        java.lang.String str2 = matcherRefBuilder0.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap3 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder4 = matcherRefBuilder0.setMatchers(strMap3);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap5 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder0.setMatchers(strMap5);
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder0.setMatchers(strMap7);
        java.lang.String str9 = matcherRefBuilder8.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        java.lang.String str12 = matcherRefBuilder8.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder14 = matcherRefBuilder8.setRefId("AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24\nTextBuilder: t true");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder16 = matcherRefBuilder14.setRefId("641dafc1-13c3-45d4-8272-f36f10392c53");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap17 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder18 = matcherRefBuilder14.setMatchers(strMap17);
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MathcerRefBuilder: null" + "'", str2, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MathcerRefBuilder: null" + "'", str9, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MathcerRefBuilder: null" + "'", str12, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder14);
        org.junit.Assert.assertNotNull(matcherRefBuilder16);
        org.junit.Assert.assertNotNull(matcherRefBuilder18);
    }

    @Test
    public void test06707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06707");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.license.ILicense.Builder builder7 = builder0.setName("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']");
        org.apache.rat.license.ILicense.Builder builder9 = builder0.setDerivedFrom("OASIS Open License");
        org.apache.rat.license.ILicense.Builder builder11 = builder0.setId("binary");
        org.apache.rat.license.ILicense.Builder builder13 = builder0.setNotes("7af67e73-76a3-4497-ab9c-98701437b5de");
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder15 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder17 = builder15.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher21 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state22 = copyrightMatcher21.finalizeState();
        org.apache.rat.license.ILicense.Builder builder23 = builder17.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher21);
        org.apache.rat.license.ILicense.Builder builder25 = builder23.setLicenseFamilyCategory("");
        defaultLog14.error((java.lang.Object) builder25);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher30 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher30.reset();
        org.apache.rat.license.ILicense.Builder builder32 = builder25.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher30);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str34 = spdxBuilder33.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder36 = spdxBuilder33.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder37 = builder32.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder33);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher38 = spdxBuilder33.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder40 = spdxBuilder33.setId("ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        java.lang.String str41 = spdxBuilder33.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher42 = spdxBuilder33.build();
        org.apache.rat.license.ILicense.Builder builder43 = builder13.setMatcher(iHeaderMatcher42);
        org.apache.rat.license.ILicense.Builder builder45 = builder13.setNotes("094643d4-94c6-478a-b861-15e14bd2e656");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state22.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(spdxBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "SpdxBuilder: null" + "'", str34, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(iHeaderMatcher38);
        org.junit.Assert.assertNotNull(abstractBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f" + "'", str41, "SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.junit.Assert.assertNotNull(iHeaderMatcher42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test06708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06708");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("Copyright Builder: s:null e:null o:a1abad46-6a98-44f8-aa20-7839919a8270");
        java.lang.String str3 = fullTextMatcher2.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher("d0774232-cdef-4507-a8b6-ac22a273dde3", (org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        java.lang.String str5 = notMatcher4.getId();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1a803c96-82c0-4eee-9984-92f32687cbfc" + "'", str3, "1a803c96-82c0-4eee-9984-92f32687cbfc");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "d0774232-cdef-4507-a8b6-ac22a273dde3" + "'", str5, "d0774232-cdef-4507-a8b6-ac22a273dde3");
    }

    @Test
    public void test06709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06709");
        java.lang.String str1 = org.apache.rat.analysis.matchers.FullTextMatcher.prune("57d83800-f39b-4e37-b71b-098478cde4b6");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "57d83800f39b4e37b71b098478cde4b6" + "'", str1, "57d83800f39b4e37b71b098478cde4b6");
    }

    @Test
    public void test06710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06710");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder1 = org.apache.rat.configuration.MatcherBuilderTracker.getMatcherBuilder("265f6d84-fb7a-4674-9dc1-fea7799ecf68");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: ?Valid builders?all?matcherRef?copyright?not?regex?spdx?text?any?ERROR MSG?No matcher builder named 265f6d84-fb7a-4674-9dc1-fea7799ecf68");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06711");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher14 = new org.apache.rat.analysis.matchers.FullTextMatcher("notice", "3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.analysis.IHeaderMatcher.State state16 = fullTextMatcher14.matches("The MIT License");
        boolean boolean17 = strSet6.equals((java.lang.Object) state16);
        org.apache.rat.utils.DefaultLog defaultLog18 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender19 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.utils.ReportingSet.Options options26 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration24.licenseDuplicateOption(options26);
        reportConfiguration21.familyDuplicateOption(options26);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier29 = reportConfiguration21.getWriter();
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        reportConfiguration31.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level34 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration31.logFamilyCollisions(level34);
        reportConfiguration21.logFamilyCollisions(level34);
        org.apache.rat.Defaults.Builder builder37 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder38 = builder37.noDefault();
        defaultLog18.log(level34, (java.lang.Object) builder37);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet40 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog18);
        org.apache.rat.utils.DefaultLog defaultLog41 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder42 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder44 = builder42.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher48 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state49 = copyrightMatcher48.finalizeState();
        org.apache.rat.license.ILicense.Builder builder50 = builder44.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher48);
        org.apache.rat.license.ILicense.Builder builder52 = builder50.setLicenseFamilyCategory("");
        defaultLog41.error((java.lang.Object) builder52);
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog41);
        org.apache.rat.utils.Log.Level level55 = defaultLog41.getLevel();
        defaultLog18.setLevel(level55);
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog18);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state16.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(defaultLog18);
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + options26 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options26.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier29);
        org.junit.Assert.assertTrue("'" + level34 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level34.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(defaultLog41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + state49 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state49.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + level55 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level55.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test06712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06712");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isKeystore("26befe44-3963-441c-b461-10e25182f535");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test06713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06713");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList1 = allBuilder0.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = allBuilder0.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList3 = allBuilder0.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = allBuilder0.build();
        java.lang.String str5 = iHeaderMatcher4.getId();
        org.junit.Assert.assertNotNull(allBuilder0);
        org.junit.Assert.assertNotNull(iHeaderMatcherList1);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcherList3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "11bf2ebc-dd8a-491c-822b-286b67ff9520" + "'", str5, "11bf2ebc-dd8a-491c-822b-286b67ff9520");
    }

    @Test
    public void test06714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06714");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders7 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration3.setAddLicenseHeaders(addLicenseHeaders7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter12);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter12);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter25);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier31 = reportConfiguration30.getOutput();
        reportConfiguration3.setOut(outputStreamIOSupplier31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.utils.ReportingSet.Options options39 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration37.licenseDuplicateOption(options39);
        reportConfiguration34.familyDuplicateOption(options39);
        reportConfiguration3.licenseDuplicateOption(options39);
        reportConfiguration3.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        reportConfiguration46.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level49 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration46.logLicenseCollisions(level49);
        reportConfiguration3.logLicenseCollisions(level49);
        defaultLog1.setLevel(level49);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet53 = strSet0.setLog((org.apache.rat.utils.Log) defaultLog1);
        org.apache.rat.configuration.Format format54 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader55 = format54.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = licenseReader55.readLicenses();
        java.lang.String[] strArray62 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet63 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        boolean boolean66 = strSet63.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean68 = strSet63.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction69 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet70 = strSet63.setMsgFormat(strFunction69);
        boolean boolean71 = strSet63.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory72 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet56, (java.util.Collection<java.lang.String>) strSet63);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray73 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList74 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74, iLicenseFamilyArray73);
        org.apache.rat.policy.DefaultPolicy defaultPolicy76 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74);
        boolean boolean77 = strSet63.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74);
        org.apache.rat.policy.DefaultPolicy defaultPolicy78 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74);
        boolean boolean79 = strSet0.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet81 = strSet0.tailSet("8f82a952-5bfd-446b-ac79-15beef5b3f17 null");
        boolean boolean82 = strSet81.isEmpty();
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders7 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders7.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier31);
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + options39 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options39.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level49 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level49.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + format54 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format54.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader55);
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test06715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06715");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        reportConfiguration3.logFamilyCollisions(level16);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder20 = builder19.noDefault();
        defaultLog0.log(level16, (java.lang.Object) builder19);
        org.apache.rat.utils.DefaultLog defaultLog22 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder23 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder25 = builder23.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher29 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state30 = copyrightMatcher29.finalizeState();
        org.apache.rat.license.ILicense.Builder builder31 = builder25.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher29);
        org.apache.rat.license.ILicense.Builder builder33 = builder31.setLicenseFamilyCategory("");
        defaultLog22.error((java.lang.Object) builder33);
        org.apache.rat.utils.Log.Level level35 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog22.setLevel(level35);
        defaultLog0.log(level35, "The MIT License");
        org.apache.rat.utils.Log.Level level39 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog0.log(level39, "W3C Document Copyright");
        defaultLog0.info((java.lang.Object) "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']");
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log.Level level45 = defaultLog0.getLevel();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder46 = new org.apache.rat.configuration.builders.RegexBuilder();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder48 = regexBuilder46.setExpr("a8ad4");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder50 = regexBuilder48.setExpr("11370891-c763-426b-9547-57e87d991d61");
        defaultLog0.warn((java.lang.Object) "11370891-c763-426b-9547-57e87d991d61");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(defaultLog22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state30.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + level35 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level35.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertTrue("'" + level39 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level39.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertTrue("'" + level45 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level45.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNotNull(regexBuilder48);
        org.junit.Assert.assertNotNull(regexBuilder50);
    }

    @Test
    public void test06716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06716");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher13 = new org.apache.rat.analysis.matchers.CopyrightMatcher("AL   ", "GEN  ", "GEN  ");
        org.apache.rat.analysis.IHeaderMatcher.State state15 = copyrightMatcher13.matches(".cvsignore");
        org.apache.rat.license.ILicense.Builder builder16 = builder9.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher13);
        org.apache.rat.license.ILicense.Builder builder18 = builder16.setLicenseFamilyCategory("binary");
        org.apache.rat.license.ILicense.Builder builder20 = builder16.setNotes("a49970c4-ad7c-456c-a950-28a9913fec59");
        org.apache.rat.license.ILicense.Builder builder22 = builder16.setNotes("255ef7d8-e270-4908-9de7-bebc7df6eb88");
        org.apache.rat.Defaults.Builder builder23 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults24 = builder23.build();
        org.apache.rat.Defaults defaults25 = builder23.build();
        org.apache.rat.Defaults.Builder builder26 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder27 = builder26.noDefault();
        org.apache.rat.Defaults defaults28 = builder27.build();
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = reportConfiguration43.getLicenses(licenseFilter45);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter52);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = defaults28.getLicenses(licenseFilter52);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet57 = defaults25.getLicenseFamilies(licenseFilter52);
        org.apache.rat.policy.DefaultPolicy defaultPolicy58 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicense iLicense59 = builder16.build(iLicenseFamilySet57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: License family binary not found.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state15.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(defaults24);
        org.junit.Assert.assertNotNull(defaults25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(defaults28);
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertNotNull(iLicenseFamilySet57);
    }

    @Test
    public void test06717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06717");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder15 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder17 = builder15.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher21 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state22 = copyrightMatcher21.finalizeState();
        org.apache.rat.license.ILicense.Builder builder23 = builder17.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher21);
        org.apache.rat.license.ILicense.Builder builder25 = builder23.setLicenseFamilyCategory("");
        defaultLog14.error((java.lang.Object) builder25);
        org.apache.rat.utils.Log.Level level27 = defaultLog14.getLevel();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        reportConfiguration29.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level32 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration29.logLicenseCollisions(level32);
        defaultLog14.log(level32, "AnyBuilder:");
        defaultLog0.info((java.lang.Object) defaultLog14);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender38 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog14, "2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
        java.io.File file39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = apacheV2LicenseAppender38.getLicenseHeader(file39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state22.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + level27 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level27.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertTrue("'" + level32 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level32.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test06718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06718");
        boolean boolean1 = org.apache.rat.document.impl.guesser.NoteGuesser.isNote("126085ee-cf4d-43ae-a1bf-28f47c1b9d21");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test06719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06719");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        reportConfiguration1.addApprovedLicenseCategory("http://org/apache/rat/meta-data");
        org.apache.rat.report.IReportable iReportable8 = reportConfiguration1.getReportable();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter9 = reportConfiguration1.getDirectoryFilter();
        org.apache.rat.utils.Log log10 = reportConfiguration1.getLog();
        java.lang.String str11 = reportConfiguration1.getCopyrightMessage();
        java.util.function.Consumer<java.lang.String> strConsumer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.validate(strConsumer12);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: Reportable may not be null");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(iReportable8);
        org.junit.Assert.assertNotNull(iOFileFilter9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test06720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06720");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str5 = fullTextMatchingLicense0.getNotes();
        java.lang.String str6 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setNotes("NotBuilder: MathcerRefBuilder: null");
        java.lang.String str9 = fullTextMatchingLicense0.getLicenseFamilyName();
        java.lang.String str10 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setNotes("GNUGeneralPublicLicenseversion2");
        java.lang.String str13 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test06721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06721");
        org.apache.rat.license.ILicense[] iLicenseArray0 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet1 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet1, iLicenseArray0);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray5 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList6 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList6, iLicenseFamilyArray5);
        reportConfiguration4.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList6);
        org.apache.rat.report.IReportable iReportable9 = null;
        reportConfiguration4.setReportable(iReportable9);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet11 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray12 = strSet11.toArray();
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = org.apache.rat.Reporter.report(reportConfiguration17);
        org.apache.rat.utils.ReportingSet.Options options19 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration17.licenseDuplicateOption(options19);
        reportConfiguration14.familyDuplicateOption(options19);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier22 = reportConfiguration14.getWriter();
        boolean boolean23 = reportConfiguration14.isAddingLicensesForced();
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        reportConfiguration25.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level28 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration25.logFamilyCollisions(level28);
        reportConfiguration14.logLicenseCollisions(level28);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet31 = strSet11.setLogLevel(level28);
        java.util.stream.Stream<java.lang.String> strStream32 = strSet31.stream();
        reportConfiguration4.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet31);
        org.apache.rat.utils.ReportingSet.Options options34 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet35 = strSet31.setDuplicateOption(options34);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory36 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, (java.util.Collection<java.lang.String>) strSet31);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet39 = strSet31.subSet("336987e8-9ddb-46d8-8c1c-67ab8c91d714", "GEN  ");
        java.lang.String[] strArray45 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet46 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        boolean boolean49 = strSet46.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor50 = strSet46.iterator();
        java.lang.Object[] objArray51 = strSet46.toArray();
        java.lang.String[] strArray57 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet58 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        boolean boolean61 = strSet58.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet62 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean63 = strSet58.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet62);
        boolean boolean64 = strSet46.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet62);
        java.util.Spliterator<java.lang.String> strSpliterator65 = strSet46.spliterator();
        boolean boolean67 = strSet46.addIfNotPresent("RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.stream.Stream<java.lang.String> strStream68 = strSet46.stream();
        java.util.Spliterator<java.lang.String> strSpliterator69 = strSet46.spliterator();
        java.lang.Object[] objArray70 = strSet46.toArray();
        java.util.stream.Stream<java.lang.String> strStream71 = strSet46.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = strSet31.remove((java.lang.Object) strStream71);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertNull(claimStatistic18);
        org.junit.Assert.assertTrue("'" + options19 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options19.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + level28 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level28.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strStream32);
        org.junit.Assert.assertTrue("'" + options34 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options34.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strItor50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strSpliterator65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strStream68);
        org.junit.Assert.assertNotNull(strSpliterator69);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strStream71);
    }

    @Test
    public void test06722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06722");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        reportConfiguration3.logFamilyCollisions(level16);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder20 = builder19.noDefault();
        defaultLog0.log(level16, (java.lang.Object) builder19);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender23 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "Datum [ name ='binary',value =' ']");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher26 = new org.apache.rat.analysis.matchers.FullTextMatcher("8f0ee536-38ae-476a-a728-de95e24c13c3", "Datum [ name ='http://org/apache/rat/meta-data#FileCategory',value ='archive ']");
        org.apache.rat.analysis.IHeaderMatcher.State state27 = fullTextMatcher26.finalizeState();
        java.lang.Throwable throwable28 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.debug((java.lang.Object) state27, throwable28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state27.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test06723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06723");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='AL    ']", pattern1);
        org.apache.rat.analysis.IHeaderMatcher.State state3 = simpleRegexMatcher2.finalizeState();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test06724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06724");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily9 = fullTextMatchingLicense0.getLicenseFamily();
        fullTextMatchingLicense0.setFullText("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        java.lang.String str12 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyName("NotBuilder: MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "TMF" + "'", str12, "TMF");
    }

    @Test
    public void test06725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06725");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        boolean boolean6 = fullTextMatcher2.doMatch("JAVA");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher7 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        org.apache.rat.analysis.IHeaderMatcher.State state9 = notMatcher7.matches("6620e9ee-d651-4c18-8162-edad6d18368e");
        notMatcher7.reset();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test06726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06726");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("Copyright Builder: s:null e:null o:null");
        org.apache.rat.analysis.IHeaderMatcher.State state2 = fullTextMatcher1.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher1.currentState();
        fullTextMatcher1.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state6 = fullTextMatcher1.matches("RegexBuilder: JAVA");
        boolean boolean8 = fullTextMatcher1.doMatch("b73a5306-6a74-4e16-9dca-ac802d730cba");
        fullTextMatcher1.reset();
        org.junit.Assert.assertTrue("'" + state2 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state2.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06727");
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder5 = builder3.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder7 = builder5.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str9 = copyrightBuilder8.toString();
        org.apache.rat.license.ILicense.Builder builder10 = builder5.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder8);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = copyrightBuilder8.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = copyrightBuilder8.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder14 = copyrightBuilder8.setEnd("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher15 = copyrightBuilder14.build();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher16 = new org.apache.rat.analysis.matchers.NotMatcher("2953E6CB-20A5-4DCF-A9F5-85C51CC8C635", iHeaderMatcher15);
        java.lang.String str17 = notMatcher16.getId();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(copyrightBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str9, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(iHeaderMatcher11);
        org.junit.Assert.assertNotNull(iHeaderMatcher12);
        org.junit.Assert.assertNotNull(copyrightBuilder14);
        org.junit.Assert.assertNotNull(iHeaderMatcher15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2953E6CB-20A5-4DCF-A9F5-85C51CC8C635" + "'", str17, "2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
    }

    @Test
    public void test06728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06728");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter13 = xmlWriter1.attribute((java.lang.CharSequence) "6486879ffc814b57aec7c4c77d540c30", (java.lang.CharSequence) "d5b3cead3d0743ee903a1e1ba144eb11");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06729");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.fromName("1d9c9d9e-3274-4f05-8f26-218d38f9ae19");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: 1d9c9d9e-3274-4f05-8f26-218d38f9ae19");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06730");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet2 = strSet0.tailSet("hi!");
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray3 = new org.apache.rat.configuration.LicenseReader[] {};
        org.apache.rat.configuration.LicenseReader[] licenseReaderArray4 = strSet2.toArray(licenseReaderArray3);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction5 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = strSet2.setMsgFormat(strFunction5);
        boolean boolean7 = strSet6.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = strSet6.tailSet("80367a1a-1630-4da1-8cb4-26fb9fc48558");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey out of range");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(licenseReaderArray3);
        org.junit.Assert.assertNotNull(licenseReaderArray4);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test06731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06731");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray27 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList28 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList28, iLicenseFamilyArray27);
        org.apache.rat.policy.DefaultPolicy defaultPolicy30 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList28);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet31 = defaultPolicy30.getApprovedLicenseNames();
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration34.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet37 = reportConfiguration34.getLicenses(licenseFilter36);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders38 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration34.setAddLicenseHeaders(addLicenseHeaders38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter43);
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter43);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        java.io.FilenameFilter filenameFilter48 = reportConfiguration47.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet50 = reportConfiguration47.getLicenses(licenseFilter49);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders51 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration47.setAddLicenseHeaders(addLicenseHeaders51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic55 = org.apache.rat.Reporter.report(reportConfiguration54);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter56);
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter56);
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter56);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier62 = reportConfiguration61.getOutput();
        reportConfiguration34.setOut(outputStreamIOSupplier62);
        org.apache.rat.utils.Log.Level level64 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration34.logLicenseCollisions(level64);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter66 = reportConfiguration34.getDirectoryFilter();
        reportConfiguration1.addDirectoryFilter(iOFileFilter66);
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems68 = org.apache.rat.config.SourceCodeManagementSystems.CVS;
        java.util.List<java.lang.String> strList69 = sourceCodeManagementSystems68.getExclusions();
        java.io.FilenameFilter filenameFilter70 = org.apache.rat.Report.parseExclusions(strList69);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList69);
        java.io.File file72 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(file72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilyArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet31);
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet37);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders38 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders38.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet50);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders51 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders51.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier62);
        org.junit.Assert.assertTrue("'" + level64 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level64.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter66);
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems68 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.CVS + "'", sourceCodeManagementSystems68.equals(org.apache.rat.config.SourceCodeManagementSystems.CVS));
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(filenameFilter70);
    }

    @Test
    public void test06732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06732");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        reportConfiguration1.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet5 = reportConfiguration1.getApprovedLicenseCategories();
        org.apache.rat.utils.DefaultLog defaultLog6 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder7 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder9 = builder7.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher13 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state14 = copyrightMatcher13.finalizeState();
        org.apache.rat.license.ILicense.Builder builder15 = builder9.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher13);
        org.apache.rat.license.ILicense.Builder builder17 = builder15.setLicenseFamilyCategory("");
        defaultLog6.error((java.lang.Object) builder17);
        org.apache.rat.utils.Log.Level level19 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog6.log(level19, "JAVA");
        reportConfiguration1.logFamilyCollisions(level19);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.report.IReportable iReportable26 = null;
        reportConfiguration24.setReportable(iReportable26);
        org.apache.rat.license.ILicense iLicense28 = null;
        reportConfiguration24.addLicense(iLicense28);
        org.apache.rat.license.ILicenseFamily.Builder builder30 = null;
        reportConfiguration24.addFamily(builder30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier41 = reportConfiguration33.getWriter();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense42 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense42.setLicenseFamilyName("hi!");
        java.lang.String str45 = fullTextMatchingLicense42.getLicenseFamilyCategory();
        java.lang.String str46 = fullTextMatchingLicense42.getLicenseFamilyName();
        fullTextMatchingLicense42.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense42.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily51 = fullTextMatchingLicense42.getLicenseFamily();
        java.lang.String str52 = iLicenseFamily51.getFamilyName();
        java.lang.String str53 = iLicenseFamily51.getFamilyName();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder54 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str55 = iLicenseFamilyBuilder54.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder57 = iLicenseFamilyBuilder54.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder59 = iLicenseFamilyBuilder54.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder61 = iLicenseFamilyBuilder54.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str62 = iLicenseFamilyBuilder54.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder64 = iLicenseFamilyBuilder54.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily65 = iLicenseFamilyBuilder54.build();
        int int66 = iLicenseFamily51.compareTo(iLicenseFamily65);
        java.lang.String str67 = iLicenseFamily65.getFamilyCategory();
        reportConfiguration33.addFamily(iLicenseFamily65);
        reportConfiguration24.addApprovedLicenseCategory(iLicenseFamily65);
        reportConfiguration1.addFamily(iLicenseFamily65);
        org.apache.rat.utils.Log log71 = reportConfiguration1.getLog();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(defaultLog6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state14.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + level19 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level19.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier41);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "SpdxBuilder: null" + "'", str52, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "SpdxBuilder: null" + "'", str53, "SpdxBuilder: null");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "MIT  " + "'", str62, "MIT  ");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(iLicenseFamily65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 7 + "'", int66 == 7);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "MIT  " + "'", str67, "MIT  ");
        org.junit.Assert.assertNull(log71);
    }

    @Test
    public void test06733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06733");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        defaultLog0.info((java.lang.Object) "Modified BSD License");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender4 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "W3CD ");
        org.apache.rat.utils.DefaultLog defaultLog5 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder6 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder8 = builder6.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher12 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state13 = copyrightMatcher12.finalizeState();
        org.apache.rat.license.ILicense.Builder builder14 = builder8.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher12);
        org.apache.rat.license.ILicense.Builder builder16 = builder14.setLicenseFamilyCategory("");
        defaultLog5.error((java.lang.Object) builder16);
        org.apache.rat.utils.Log.Level level18 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog5.log(level18, "JAVA");
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier23 = reportConfiguration22.getOutput();
        reportConfiguration22.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log26 = reportConfiguration22.getLog();
        org.apache.rat.utils.Log.Level level27 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration22.logFamilyCollisions(level27);
        defaultLog5.setLevel(level27);
        defaultLog0.setLevel(level27);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        reportConfiguration32.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        reportConfiguration32.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet39);
        org.apache.rat.license.ILicenseFamily iLicenseFamily41 = null;
        reportConfiguration32.addFamily(iLicenseFamily41);
        org.apache.rat.utils.DefaultLog defaultLog43 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder44 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder46 = builder44.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher50 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state51 = copyrightMatcher50.finalizeState();
        org.apache.rat.license.ILicense.Builder builder52 = builder46.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher50);
        org.apache.rat.license.ILicense.Builder builder54 = builder52.setLicenseFamilyCategory("");
        defaultLog43.error((java.lang.Object) builder54);
        org.apache.rat.utils.Log.Level level56 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog43.setLevel(level56);
        reportConfiguration32.logFamilyCollisions(level56);
        defaultLog0.setLevel(level56);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense60 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense60.setLicenseFamilyName("hi!");
        java.lang.String str63 = fullTextMatchingLicense60.getLicenseFamilyCategory();
        java.lang.String str64 = fullTextMatchingLicense60.getLicenseFamilyCategory();
        java.lang.String str65 = fullTextMatchingLicense60.getNotes();
        java.lang.String str66 = fullTextMatchingLicense60.getNotes();
        java.lang.String str67 = fullTextMatchingLicense60.getLicenseFamilyCategory();
        java.lang.String str68 = fullTextMatchingLicense60.getLicenseFamilyCategory();
        fullTextMatchingLicense60.setFullText("48bb897a-e27b-468d-af85-d73dcaacfb7f");
        org.apache.rat.license.ILicense.Builder builder71 = fullTextMatchingLicense60.getLicense();
        defaultLog0.warn((java.lang.Object) builder71);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher77 = new org.apache.rat.analysis.matchers.CopyrightMatcher("W3C Software Copyright null", "767ac5d6-2041-4f1d-ab96-e1ebb601e73c", "98b1fda9-334d-4fbe-9bbd-79d3fc2755c5", "90663eff7ed841bd85a8e8f189198bc6");
        org.apache.rat.analysis.IHeaderMatcher.State state78 = copyrightMatcher77.finalizeState();
        java.lang.Throwable throwable79 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.info((java.lang.Object) copyrightMatcher77, throwable79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(defaultLog5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state13.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + level18 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level18.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier23);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + level27 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level27.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertNotNull(defaultLog43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + state51 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state51.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + level56 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level56.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + state78 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state78.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test06734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06734");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved(10);
        int int3 = claimStatistic0.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap4 = claimStatistic0.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = null;
        claimStatistic0.setDocumentCategoryMap(strMap5);
        claimStatistic0.setNumUnknown((int) (short) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strMap4);
    }

    @Test
    public void test06735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06735");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str3 = spdxBuilder2.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder5 = spdxBuilder2.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = spdxBuilder2.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = spdxBuilder2.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder11 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder2);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder12 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str13 = anyBuilder12.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList14 = anyBuilder12.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher15 = anyBuilder12.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher16 = anyBuilder12.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList17 = anyBuilder12.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder18 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str19 = notBuilder18.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder20 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean21 = matcherRefBuilder20.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap22 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder23 = matcherRefBuilder20.setMatchers(strMap22);
        org.apache.rat.configuration.builders.AllBuilder allBuilder24 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = copyrightBuilder25.setStart("OASIS");
        java.lang.String str28 = copyrightBuilder25.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder25.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder31 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean32 = matcherRefBuilder31.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        java.lang.String str36 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder38 = copyrightBuilder33.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder40 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str41 = copyrightBuilder40.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder43 = copyrightBuilder40.setEnd(".cvsignore");
        boolean boolean44 = copyrightBuilder40.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder45 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str46 = copyrightBuilder45.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder48 = copyrightBuilder45.setEnd(".cvsignore");
        boolean boolean49 = copyrightBuilder45.hasId();
        java.lang.String str50 = copyrightBuilder45.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder51 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder53 = copyrightBuilder51.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder54 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder55 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean56 = matcherRefBuilder55.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap57 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder58 = matcherRefBuilder55.setMatchers(strMap57);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder59 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder60 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean61 = matcherRefBuilder60.hasId();
        java.lang.String str62 = matcherRefBuilder60.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap63 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder64 = matcherRefBuilder60.setMatchers(strMap63);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray65 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder20, allBuilder24, copyrightBuilder30, matcherRefBuilder31, copyrightBuilder33, copyrightBuilder39, copyrightBuilder40, copyrightBuilder45, copyrightBuilder51, anyBuilder54, matcherRefBuilder55, copyrightBuilder59, matcherRefBuilder60 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList66 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList66, builderArray65);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder68 = notBuilder18.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList66);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder69 = anyBuilder12.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList66);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder70 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList66);
        org.apache.rat.configuration.builders.AllBuilder allBuilder71 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher72 = allBuilder71.build();
        org.apache.rat.configuration.builders.AllBuilder allBuilder73 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher74 = allBuilder73.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher75 = allBuilder73.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher76 = allBuilder73.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder77 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str78 = copyrightBuilder77.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder80 = copyrightBuilder77.setEnd(".cvsignore");
        boolean boolean81 = copyrightBuilder77.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder83 = copyrightBuilder77.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder84 = allBuilder73.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder77);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder86 = copyrightBuilder77.setEnd("Copyright Builder: s:021187d7-27c2-4fd9-bc74-8cc00413ee52 e:null o:null");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder87 = allBuilder71.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder86);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder88 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder86);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder90 = copyrightBuilder86.setStart("W3C Document Copyright");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher91 = copyrightBuilder90.build();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "SpdxBuilder: null" + "'", str3, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(abstractBuilder11);
        org.junit.Assert.assertNotNull(anyBuilder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AnyBuilder:" + "'", str13, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList14);
        org.junit.Assert.assertNotNull(iHeaderMatcher15);
        org.junit.Assert.assertNotNull(iHeaderMatcher16);
        org.junit.Assert.assertNotNull(iHeaderMatcherList17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NotBuilder: null" + "'", str19, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder23);
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str28, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertNotNull(matcherRefBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str36, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder38);
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str41, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str46, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str50, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder51);
        org.junit.Assert.assertNotNull(copyrightBuilder53);
        org.junit.Assert.assertNotNull(anyBuilder54);
        org.junit.Assert.assertNotNull(matcherRefBuilder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder58);
        org.junit.Assert.assertNotNull(copyrightBuilder59);
        org.junit.Assert.assertNotNull(matcherRefBuilder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "MathcerRefBuilder: null" + "'", str62, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder64);
        org.junit.Assert.assertNotNull(builderArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(abstractBuilder68);
        org.junit.Assert.assertNotNull(abstractBuilder69);
        org.junit.Assert.assertNotNull(abstractBuilder70);
        org.junit.Assert.assertNotNull(iHeaderMatcher72);
        org.junit.Assert.assertNotNull(iHeaderMatcher74);
        org.junit.Assert.assertNotNull(iHeaderMatcher75);
        org.junit.Assert.assertNotNull(iHeaderMatcher76);
        org.junit.Assert.assertNotNull(copyrightBuilder77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str78, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder83);
        org.junit.Assert.assertNotNull(abstractBuilder84);
        org.junit.Assert.assertNotNull(copyrightBuilder86);
        org.junit.Assert.assertNotNull(abstractBuilder87);
        org.junit.Assert.assertNotNull(abstractBuilder88);
        org.junit.Assert.assertNotNull(copyrightBuilder90);
        org.junit.Assert.assertNotNull(iHeaderMatcher91);
    }

    @Test
    public void test06736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06736");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.ReportingSet.Options options52 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options52);
        reportConfiguration47.familyDuplicateOption(options52);
        reportConfiguration16.licenseDuplicateOption(options52);
        reportConfiguration16.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration16.logLicenseCollisions(level62);
        defaultLog14.setLevel(level62);
        defaultLog14.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog14);
        org.apache.rat.utils.DefaultLog defaultLog69 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logFamilyCollisions(level74);
        defaultLog69.setLevel(level74);
        defaultLog14.debug((java.lang.Object) level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet13.setLogLevel(level74);
        org.apache.rat.utils.DefaultLog defaultLog79 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log80 = null;
        org.apache.rat.ReportConfiguration reportConfiguration81 = new org.apache.rat.ReportConfiguration(log80);
        reportConfiguration81.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level84 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration81.logFamilyCollisions(level84);
        defaultLog79.setLevel(level84);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet87 = strSet78.setLog((org.apache.rat.utils.Log) defaultLog79);
        java.lang.Object[] objArray88 = strSet87.toArray();
        strSet87.clear();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + options52 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options52.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog69);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(defaultLog79);
        org.junit.Assert.assertTrue("'" + level84 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level84.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
    }

    @Test
    public void test06737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06737");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        reportConfiguration3.logFamilyCollisions(level16);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder20 = builder19.noDefault();
        defaultLog0.log(level16, (java.lang.Object) builder19);
        org.apache.rat.Defaults.Builder builder22 = builder19.noDefault();
        java.net.URL uRL23 = null;
        org.apache.rat.Defaults.Builder builder24 = builder22.remove(uRL23);
        org.apache.rat.Defaults.Builder builder25 = builder24.noDefault();
        org.apache.rat.Defaults.Builder builder26 = builder24.noDefault();
        org.apache.rat.Defaults.Builder builder28 = builder26.remove("MathcerRefBuilder: Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        java.net.URL uRL29 = null;
        org.apache.rat.Defaults.Builder builder30 = builder26.remove(uRL29);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test06738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06738");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet6.spliterator();
        boolean boolean27 = strSet6.addIfNotPresent("RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.stream.Stream<java.lang.String> strStream28 = strSet6.stream();
        strStream28.close();
        strStream28.close();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strStream28);
    }

    @Test
    public void test06739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06739");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter1 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.fromText("0c97d78b-ba2b-485d-b0aa-01e27556985d");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.rat.license.LicenseSetFactory.LicenseFilter.0c97d78b-ba2b-485d-b0aa-01e27556985d");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06740");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic3 = org.apache.rat.Reporter.report(reportConfiguration2);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier4 = reportConfiguration2.getOutput();
        boolean boolean5 = reportConfiguration2.isAddingLicensesForced();
        org.apache.rat.license.ILicense[] iLicenseArray6 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet7 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet7, iLicenseArray6);
        java.lang.String[] strArray21 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory24 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet7, (java.util.Collection<java.lang.String>) strList22);
        reportConfiguration2.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet7);
        reportConfiguration2.setStyleReport(true);
        reportConfiguration2.removeApprovedLicenseCategory("archi");
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        reportConfiguration31.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level34 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration31.logFamilyCollisions(level34);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter36 = reportConfiguration31.getDirectoryFilter();
        java.lang.String[] strArray42 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet43 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        boolean boolean46 = strSet43.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean48 = strSet43.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction49 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet50 = strSet43.setMsgFormat(strFunction49);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet52 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily53 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet52);
        boolean boolean54 = strSet43.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet52);
        reportConfiguration31.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet43);
        org.apache.rat.report.IReportable iReportable56 = null;
        reportConfiguration31.setReportable(iReportable56);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray60 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList61 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList61, iLicenseFamilyArray60);
        reportConfiguration59.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList61);
        reportConfiguration59.addApprovedLicenseCategory("http://org/apache/rat/meta-data");
        org.apache.rat.report.IReportable iReportable66 = reportConfiguration59.getReportable();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter67 = reportConfiguration59.getDirectoryFilter();
        reportConfiguration31.setDirectoryFilter(iOFileFilter67);
        org.apache.rat.utils.Log log69 = null;
        org.apache.rat.ReportConfiguration reportConfiguration70 = new org.apache.rat.ReportConfiguration(log69);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic71 = org.apache.rat.Reporter.report(reportConfiguration70);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.utils.ReportingSet.Options options75 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration73.licenseDuplicateOption(options75);
        reportConfiguration70.familyDuplicateOption(options75);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier78 = reportConfiguration70.getWriter();
        boolean boolean79 = reportConfiguration70.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter80 = reportConfiguration70.getInputFileFilter();
        java.io.FilenameFilter filenameFilter81 = reportConfiguration70.getInputFileFilter();
        boolean boolean82 = reportConfiguration70.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier83 = reportConfiguration70.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter84 = reportConfiguration70.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter85 = reportConfiguration70.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter86 = iOFileFilter67.or(iOFileFilter85);
        reportConfiguration2.setInputFileFilter((java.io.FilenameFilter) iOFileFilter86);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker88 = new org.apache.rat.walker.ArchiveWalker(file0, (java.io.FilenameFilter) iOFileFilter86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic3);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(iLicenseArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + level34 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level34.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter36);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(iLicenseFamilySet52);
        org.junit.Assert.assertNull(iLicenseFamily53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(iReportable66);
        org.junit.Assert.assertNotNull(iOFileFilter67);
        org.junit.Assert.assertNull(claimStatistic71);
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertTrue("'" + options75 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options75.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(filenameFilter80);
        org.junit.Assert.assertNull(filenameFilter81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier83);
        org.junit.Assert.assertNotNull(iOFileFilter84);
        org.junit.Assert.assertNotNull(iOFileFilter85);
        org.junit.Assert.assertNotNull(iOFileFilter86);
    }

    @Test
    public void test06741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06741");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        reportConfiguration11.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level14 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration11.logFamilyCollisions(level14);
        reportConfiguration1.logFamilyCollisions(level14);
        reportConfiguration1.removeApprovedLicenseCategory("b9d57440-4b03-461e-a164-b29e1341bbc8");
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier19 = reportConfiguration1.getWriter();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + level14 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level14.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(printWriterIOSupplier19);
    }

    @Test
    public void test06742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06742");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isKeystore("AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24\nTextBuilder: t true");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test06743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06743");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str7 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setNotes("Datum [ name ='GNU General Public License, version 2',value ='021187d7-27c2-4fd9-bc74-8cc00413ee52 ']");
        java.lang.String str10 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str11 = fullTextMatchingLicense0.getNotes();
        fullTextMatchingLicense0.setNotes("4f2f2825-1206-4c8c-8ea6-bc601862dd41");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Datum [ name ='GNU General Public License, version 2',value ='021187d7-27c2-4fd9-bc74-8cc00413ee52 ']" + "'", str11, "Datum [ name ='GNU General Public License, version 2',value ='021187d7-27c2-4fd9-bc74-8cc00413ee52 ']");
    }

    @Test
    public void test06744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06744");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.license.ILicense[] iLicenseArray13 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet14 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet14, iLicenseArray13);
        java.lang.String[] strArray28 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory31 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet14, (java.util.Collection<java.lang.String>) strList29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration46.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = reportConfiguration46.getLicenses(licenseFilter48);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders50 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration46.setAddLicenseHeaders(addLicenseHeaders50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter55);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet59 = licenseSetFactory31.getLicenses(licenseFilter55);
        defaultLog0.warn((java.lang.Object) licenseSetFactory31);
        org.apache.rat.utils.DefaultLog defaultLog61 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder62 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder64 = builder62.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher68 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state69 = copyrightMatcher68.finalizeState();
        org.apache.rat.license.ILicense.Builder builder70 = builder64.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher68);
        org.apache.rat.license.ILicense.Builder builder72 = builder70.setLicenseFamilyCategory("");
        defaultLog61.error((java.lang.Object) builder72);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher77 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher77.reset();
        org.apache.rat.license.ILicense.Builder builder79 = builder72.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher77);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder80 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str81 = spdxBuilder80.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder83 = spdxBuilder80.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder84 = builder79.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder80);
        defaultLog0.info((java.lang.Object) builder84);
        org.apache.rat.utils.Log.Level level86 = defaultLog0.getLevel();
        org.apache.rat.ReportConfiguration reportConfiguration87 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic88 = org.apache.rat.Reporter.report(reportConfiguration87);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic89 = org.apache.rat.Reporter.report(reportConfiguration87);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(iLicenseArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders50 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders50.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet59);
        org.junit.Assert.assertNotNull(defaultLog61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + state69 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state69.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(spdxBuilder80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "SpdxBuilder: null" + "'", str81, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + level86 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level86.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(claimStatistic88);
        org.junit.Assert.assertNull(claimStatistic89);
    }

    @Test
    public void test06745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06745");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        defaultLog0.info((java.lang.Object) "TextBuilder: Datum [ name ='http:...");
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.license.ILicenseFamily iLicenseFamily54 = null;
        reportConfiguration50.addFamily(iLicenseFamily54);
        reportConfiguration50.setCopyrightMessage("hi!");
        defaultLog0.error((java.lang.Object) reportConfiguration50);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender60 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "03f7b314-6887-4617-9c7e-bf1600b331cd");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender62 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "7480723c65a64470aa58975de51fe7c5");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet63 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        int int64 = strSet63.size();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet66 = strSet63.headSet("?????");
        org.apache.rat.utils.Log.Level level67 = org.apache.rat.utils.Log.Level.INFO;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet68 = strSet66.setLogLevel(level67);
        defaultLog0.log(level67, "Copyright Builder: s:6481fb19-38f0-43f5-ab95-caf84a069ee1 e:null o:null");
        org.apache.rat.document.ToNameTransformer toNameTransformer71 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog72 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder73 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder75 = builder73.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher79 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state80 = copyrightMatcher79.finalizeState();
        org.apache.rat.license.ILicense.Builder builder81 = builder75.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher79);
        org.apache.rat.license.ILicense.Builder builder83 = builder81.setLicenseFamilyCategory("");
        defaultLog72.error((java.lang.Object) builder83);
        java.lang.Object obj85 = toNameTransformer71.transform((java.lang.Object) defaultLog72);
        java.lang.Object obj86 = null;
        defaultLog72.warn(obj86);
        org.apache.rat.utils.DefaultLog defaultLog88 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log89 = null;
        org.apache.rat.ReportConfiguration reportConfiguration90 = new org.apache.rat.ReportConfiguration(log89);
        reportConfiguration90.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level93 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration90.logFamilyCollisions(level93);
        defaultLog88.setLevel(level93);
        defaultLog72.log(level93, "AnyBuilder:");
        defaultLog0.log(level93, "2b7a7df2-0dac-406a-96b5-ea6b08e88337");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertTrue("'" + level67 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level67.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(defaultLog72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + state80 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state80.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNotNull(defaultLog88);
        org.junit.Assert.assertTrue("'" + level93 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level93.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test06746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06746");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        claimStatistic0.setNumGenerated((int) (short) 10);
        claimStatistic0.setNumApproved((int) (short) 0);
        int int12 = claimStatistic0.getNumUnknown();
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test06747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06747");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic3 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic3.setNumUnApproved((-1));
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = claimStatistic3.getDocumentCategoryMap();
        claimStatistic3.setNumUnApproved((int) '#');
        claimStatistic3.setNumApproved((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = null;
        claimStatistic3.setDocumentCategoryMap(strMap11);
        int int13 = claimStatistic3.getNumUnknown();
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = reportConfiguration28.getLicenses(licenseFilter30);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders32 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration28.setAddLicenseHeaders(addLicenseHeaders32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter37);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter37);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter37);
        java.io.FilenameFilter filenameFilter41 = reportConfiguration15.getInputFileFilter();
        reportConfiguration15.setStyleReport(false);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier44 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration15.setStyleSheet(inputStreamIOSupplier44);
        reportConfiguration15.setStyleReport(false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.RatReport ratReport48 = org.apache.rat.report.xml.XmlReportFactory.createStandardReport((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1, claimStatistic3, reportConfiguration15);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: At least one license must be defined");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders32 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders32.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier44);
    }

    @Test
    public void test06748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06748");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet0 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.policy.DefaultPolicy defaultPolicy1 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet0);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet2 = defaultPolicy1.getApprovedLicenseNames();
        org.apache.rat.api.Document document3 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy1.reportLicenseApprovalClaim(document3, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseFamilySet0);
        org.junit.Assert.assertNotNull(iLicenseFamilySet2);
    }

    @Test
    public void test06749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06749");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier6 = reportConfiguration1.getOutput();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        reportConfiguration8.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        java.io.FilenameFilter filenameFilter13 = reportConfiguration12.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet15 = reportConfiguration12.getLicenses(licenseFilter14);
        reportConfiguration8.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration8.getInputFileFilter();
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration32.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet35 = reportConfiguration32.getLicenses(licenseFilter34);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders36 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter41);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet44 = reportConfiguration19.getLicenseFamilies(licenseFilter41);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration8, licenseFilter41);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet46 = reportConfiguration1.getLicenseFamilies(licenseFilter41);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier47 = reportConfiguration1.getStyleSheet();
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier48 = reportConfiguration1.getWriter();
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier6);
        org.junit.Assert.assertNull(filenameFilter13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet15);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet35);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders36 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders36.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet44);
        org.junit.Assert.assertNotNull(iLicenseFamilySet46);
        org.junit.Assert.assertNull(inputStreamIOSupplier47);
        org.junit.Assert.assertNotNull(printWriterIOSupplier48);
    }

    @Test
    public void test06750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06750");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("http://org/apache/rat/meta-data#LicenseFamilyName");
        fullTextMatchingLicense0.setFullText("9c36f068-9920-4c66-98c2-ba24e3dffa9c");
        fullTextMatchingLicense0.setNotes("0925e382-79b7-417a-85be-aed683d949e2");
        org.apache.rat.license.ILicense.Builder builder11 = fullTextMatchingLicense0.getLicense();
        org.apache.rat.license.ILicense.Builder builder13 = builder11.setLicenseFamilyCategory("RegexBuilder: 67eb96c2-83b2-456d-bfb0-23ff916bf212");
        org.apache.rat.license.ILicense.Builder builder15 = builder13.setName("ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test06751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06751");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("http://org/apache/rat/meta-data");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher3 = new org.apache.rat.analysis.matchers.NotMatcher(iHeaderMatcher2);
        notMatcher3.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state5 = notMatcher3.currentState();
        java.lang.String str6 = state5.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = state5.asBoolean();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 'asBoolean' should never be called on an indeterminate state");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state5.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "i indeterminent" + "'", str6, "i indeterminent");
    }

    @Test
    public void test06752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06752");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet6.spliterator();
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        defaultLog26.setLevel(level31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration48.getLicenses(licenseFilter50);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders52 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration48.setAddLicenseHeaders(addLicenseHeaders52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter57);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier63 = reportConfiguration62.getOutput();
        reportConfiguration35.setOut(outputStreamIOSupplier63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.utils.ReportingSet.Options options71 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration69.licenseDuplicateOption(options71);
        reportConfiguration66.familyDuplicateOption(options71);
        reportConfiguration35.licenseDuplicateOption(options71);
        reportConfiguration35.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logLicenseCollisions(level81);
        reportConfiguration35.logLicenseCollisions(level81);
        defaultLog26.log(level81, "GNU General Public License, version 1");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog26);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet88 = strSet6.tailSet("Copyright Builder: s:null e:W3C Software Copyright o:null");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction89 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet90 = strSet6.setMsgFormat(strFunction89);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet93 = strSet90.subSet("8f82a952-5bfd-446b-ac79-15beef5b3f17", "Datum [ name ='http://org/apache/rat/meta-data#FileCategory',value ='archive ']");
        org.apache.rat.utils.ReportingSet.Options options94 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet95 = strSet93.setDuplicateOption(options94);
        java.util.stream.Stream<java.lang.String> strStream96 = strSet93.parallelStream();
        java.util.Collection<org.apache.rat.license.ILicenseFamily> iLicenseFamilyCollection97 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = strSet93.containsAll(iLicenseFamilyCollection97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders52 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders52.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier63);
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + options71 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options71.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertNotNull(strStream96);
    }

    @Test
    public void test06753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06753");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = copyrightBuilder7.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setOwner("TextBuilder: Datum [ name ='http:...");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder14 = copyrightBuilder7.setOwner("PLAIN-RAT.XSL");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder16 = copyrightBuilder7.setOwner("a1abad46-6a98-44f8-aa20-7839919a8270");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder16.setOwner("stand");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder18.setOwner("AllBuilder:\nTextBuilder: AbstractBuilder.clas...\nTextBuilder: AllBuilder.class\nTextBuilder: AnyBuilder.class\nTextBuilder: ChildContainerBuilde...\nTextBuilder: CopyrightBuilder.cla...\nTextBuilder: MatcherRefBuilder.cl...\nTextBuilder: MatcherRefBuilder$1....\nTextBuilder: MatcherRefBuilder$IH...\nTextBuilder: NotBuilder.class\nTextBuilder: RegexBuilder.class\nTextBuilder: SpdxBuilder.class\nTextBuilder: TextBuilder.class\nTextBuilder: TextCaptureBuilder.c...");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(copyrightBuilder14);
        org.junit.Assert.assertNotNull(copyrightBuilder16);
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(copyrightBuilder20);
    }

    @Test
    public void test06754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06754");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier3 = reportConfiguration1.getStyleSheet();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense4 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense4.setLicenseFamilyName("hi!");
        java.lang.String str7 = fullTextMatchingLicense4.getLicenseFamilyCategory();
        java.lang.String str8 = fullTextMatchingLicense4.getLicenseFamilyName();
        fullTextMatchingLicense4.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense4.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily13 = fullTextMatchingLicense4.getLicenseFamily();
        java.lang.String str14 = iLicenseFamily13.getFamilyName();
        java.lang.String str15 = iLicenseFamily13.getFamilyName();
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily13);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet21 = reportConfiguration18.getLicenses(licenseFilter20);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders22 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration18.setAddLicenseHeaders(addLicenseHeaders22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter27);
        org.apache.rat.report.IReportable iReportable30 = null;
        reportConfiguration18.setReportable(iReportable30);
        java.lang.String str32 = reportConfiguration18.getCopyrightMessage();
        org.apache.rat.report.IReportable iReportable33 = reportConfiguration18.getReportable();
        java.lang.String[] strArray39 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet40 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        boolean boolean43 = strSet40.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor44 = strSet40.iterator();
        java.lang.Object[] objArray45 = strSet40.toArray();
        java.lang.String[] strArray51 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet52 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        boolean boolean55 = strSet52.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet56 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean57 = strSet52.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet56);
        boolean boolean58 = strSet40.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet56);
        java.util.Iterator<java.lang.String> strItor59 = strSet40.iterator();
        reportConfiguration18.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet40);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction61 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet62 = strSet40.setMsgFormat(strFunction61);
        java.lang.String str63 = strSet40.last();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet40);
        boolean boolean65 = strSet40.isEmpty();
        boolean boolean67 = strSet40.equals((java.lang.Object) "Copyright Builder: s:null e:64868 o:null");
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray70 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList71 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList71, iLicenseFamilyArray70);
        reportConfiguration69.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList71);
        org.apache.rat.policy.DefaultPolicy defaultPolicy74 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList71);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet75 = defaultPolicy74.getApprovedLicenseNames();
        boolean boolean76 = strSet40.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet75);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(inputStreamIOSupplier3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "SpdxBuilder: null" + "'", str14, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "SpdxBuilder: null" + "'", str15, "SpdxBuilder: null");
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet21);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders22 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders22.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(iReportable33);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strItor59);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str63, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test06755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06755");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("archive");
        simpleLicenseFamily0.setFamilyName("W3CD ");
        java.lang.String str7 = simpleLicenseFamily0.toString();
        simpleLicenseFamily0.setFamilyCategory("bd015714-405b-4304-9faa-36efad80e6e6");
        java.lang.String str10 = simpleLicenseFamily0.getFamilyCategory();
        java.lang.String str11 = simpleLicenseFamily0.toString();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "archive W3CD " + "'", str7, "archive W3CD ");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "bd015714-405b-4304-9faa-36efad80e6e6" + "'", str10, "bd015714-405b-4304-9faa-36efad80e6e6");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "bd015714-405b-4304-9faa-36efad80e6e6 W3CD " + "'", str11, "bd015714-405b-4304-9faa-36efad80e6e6 W3CD ");
    }

    @Test
    public void test06756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06756");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder5 = builder4.noDefault();
        org.apache.rat.Defaults.Builder builder6 = builder4.noDefault();
        java.io.File file7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder8 = builder4.remove(file7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test06757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06757");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap1 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap2 = null;
        claimStatistic0.setLicenseFileNameMap(strMap2);
        claimStatistic0.setNumApproved(35);
        java.util.Map<java.lang.String, java.lang.Integer> strMap6 = claimStatistic0.getLicenseFileCodeMap();
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap6);
    }

    @Test
    public void test06758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06758");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("c4c4fff5-2656-471f-bd41-62e472c2ca7b", "7934b3ba-1073-4ff1-bfc3-c46ebe8a6c06");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = simpleTextMatcher2.finalizeState();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test06759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06759");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet6.spliterator();
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        defaultLog26.setLevel(level31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration48.getLicenses(licenseFilter50);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders52 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration48.setAddLicenseHeaders(addLicenseHeaders52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter57);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier63 = reportConfiguration62.getOutput();
        reportConfiguration35.setOut(outputStreamIOSupplier63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.utils.ReportingSet.Options options71 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration69.licenseDuplicateOption(options71);
        reportConfiguration66.familyDuplicateOption(options71);
        reportConfiguration35.licenseDuplicateOption(options71);
        reportConfiguration35.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logLicenseCollisions(level81);
        reportConfiguration35.logLicenseCollisions(level81);
        defaultLog26.log(level81, "GNU General Public License, version 1");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog26);
        int int87 = strSet6.size();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet89 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily90 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet89);
        org.apache.rat.policy.DefaultPolicy defaultPolicy91 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet89);
        boolean boolean92 = strSet6.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet89);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction93 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet94 = strSet6.setMsgFormat(strFunction93);
        boolean boolean95 = strSet94.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator96 = strSet94.spliterator();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders52 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders52.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier63);
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + options71 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options71.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 6 + "'", int87 == 6);
        org.junit.Assert.assertNotNull(iLicenseFamilySet89);
        org.junit.Assert.assertNull(iLicenseFamily90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(strSpliterator96);
    }

    @Test
    public void test06760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06760");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        reportConfiguration12.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level15 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration12.logFamilyCollisions(level15);
        reportConfiguration1.logLicenseCollisions(level15);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FORCED;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders31);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders31);
        java.net.URL uRL34 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRL34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + level15 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level15.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FORCED + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FORCED));
    }

    @Test
    public void test06761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06761");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults defaults5 = builder4.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: /home/mopuser/workspace/creadur-rat/META-DATA%23LICENSEFAMILYNAME");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test06762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06762");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter14 = xmlWriter1.content((java.lang.CharSequence) "null d4148d3a-edbc-4672-b347-0fa619553f91");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06763");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.api.Document document14 = null;
        // The following exception was thrown during execution in test generation
        try {
            simpleXmlClaimReporter13.report(document14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06764");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("8ECB8CCE-06E4-400F-84D9-AD1CF6289FDA", "TMF  ");
    }

    @Test
    public void test06765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06765");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier27 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder28 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder30 = iLicenseFamilyBuilder28.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder32 = iLicenseFamilyBuilder28.setLicenseFamilyCategory("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder34 = iLicenseFamilyBuilder28.setLicenseFamilyName("MathcerRefBuilder: ");
        org.apache.rat.license.ILicenseFamily.Builder builder36 = iLicenseFamilyBuilder28.setLicenseFamilyName("Copyright Builder: s:6481fb19-38f0-43f5-ab95-caf84a069ee1 e:null o:null");
        java.lang.String str37 = builder36.getCategory();
        reportConfiguration1.addFamily(builder36);
        boolean boolean39 = reportConfiguration1.isAddingLicenses();
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        reportConfiguration41.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet45 = reportConfiguration41.getApprovedLicenseCategories();
        java.io.FilenameFilter filenameFilter46 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.utils.ReportingSet.Options options50 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration48.licenseDuplicateOption(options50);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet53 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily54 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet53);
        org.apache.rat.policy.DefaultPolicy defaultPolicy55 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet53);
        reportConfiguration48.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet53);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet57 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray58 = strSet57.toArray();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory59 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet53, (java.util.Collection<java.lang.String>) strSet57);
        reportConfiguration41.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet57);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.utils.ReportingSet.Options options67 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration65.licenseDuplicateOption(options67);
        reportConfiguration62.familyDuplicateOption(options67);
        reportConfiguration41.familyDuplicateOption(options67);
        reportConfiguration1.licenseDuplicateOption(options67);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter72 = null;
        reportConfiguration1.setDirectoryFilter(iOFileFilter72);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "6486879f-fc81-4b57-aec7-c4c77d540c30" + "'", str37, "6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + options50 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options50.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilySet53);
        org.junit.Assert.assertNull(iLicenseFamily54);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertTrue("'" + options67 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options67.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
    }

    @Test
    public void test06766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06766");
        org.apache.commons.cli.CommandLine commandLine1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.ReportConfiguration reportConfiguration2 = org.apache.rat.Report.createConfiguration("e43d2da5-cf5e-486d-9eb8-43df71afd6c2", commandLine1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06767");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter11 = xmlWriter1.openElement((java.lang.CharSequence) "null http://org/apache/rat/meta-data");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: 'null http://org/apache/rat/meta-data' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06768");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        simpleLicenseFamily0.setFamilyName("true");
        simpleLicenseFamily0.setFamilyName("Copyright Builder: s:null e:3c840dc2-bef0-42b5-b26c-35a568d53a24 o:null");
        simpleLicenseFamily0.setFamilyName("7480723c65a64470aa58975de51fe7c5");
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test06769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06769");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("d5e7a2c2-8d0f-4d83-b61d-957264d7bb7b", ".cvsignore");
        java.lang.String str3 = datum2.getName();
        java.lang.String str4 = datum2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "d5e7a2c2-8d0f-4d83-b61d-957264d7bb7b" + "'", str3, "d5e7a2c2-8d0f-4d83-b61d-957264d7bb7b");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Datum [ name ='d5e7a2c2-8d0f-4d83-b61d-957264d7bb7b',value ='.cvsignore ']" + "'", str4, "Datum [ name ='d5e7a2c2-8d0f-4d83-b61d-957264d7bb7b',value ='.cvsignore ']");
    }

    @Test
    public void test06770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06770");
        java.lang.String str1 = org.apache.rat.analysis.matchers.FullTextMatcher.prune("48142baf-ce2b-498b-86ae-8194ba224cc3");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "48142bafce2b498b86ae8194ba224cc3" + "'", str1, "48142bafce2b498b86ae8194ba224cc3");
    }

    @Test
    public void test06771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06771");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier16 = reportConfiguration15.getOutput();
        reportConfiguration15.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log19 = reportConfiguration15.getLog();
        org.apache.rat.utils.Log.Level level20 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration15.logFamilyCollisions(level20);
        defaultLog0.log(level20, "Copyright Builder: s:6481fb19-38f0-43f5-ab95-caf84a069ee1 e:null o:null");
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        reportConfiguration26.addApprovedLicenseCategory(".cvsignore");
        boolean boolean29 = reportConfiguration26.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier30 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration26.setStyleSheet(inputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = reportConfiguration49.getLicenses(licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter58);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier64 = reportConfiguration63.getOutput();
        reportConfiguration36.setOut(outputStreamIOSupplier64);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic68 = org.apache.rat.Reporter.report(reportConfiguration67);
        org.apache.rat.utils.Log log69 = null;
        org.apache.rat.ReportConfiguration reportConfiguration70 = new org.apache.rat.ReportConfiguration(log69);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic71 = org.apache.rat.Reporter.report(reportConfiguration70);
        org.apache.rat.utils.ReportingSet.Options options72 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration70.licenseDuplicateOption(options72);
        reportConfiguration67.familyDuplicateOption(options72);
        reportConfiguration36.licenseDuplicateOption(options72);
        reportConfiguration33.licenseDuplicateOption(options72);
        reportConfiguration26.licenseDuplicateOption(options72);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier78 = reportConfiguration26.getOutput();
        reportConfiguration24.setOut(outputStreamIOSupplier78);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier16);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + level20 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level20.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier64);
        org.junit.Assert.assertNull(claimStatistic68);
        org.junit.Assert.assertNull(claimStatistic71);
        org.junit.Assert.assertTrue("'" + options72 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options72.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier78);
    }

    @Test
    public void test06772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06772");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        java.lang.String[] strArray15 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        boolean boolean19 = strSet16.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor20 = strSet16.iterator();
        java.lang.Object[] objArray21 = strSet16.toArray();
        java.lang.String[] strArray27 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet28 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        boolean boolean31 = strSet28.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet32 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean33 = strSet28.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet32);
        boolean boolean34 = strSet16.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet32);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet32);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        java.io.FilenameFilter filenameFilter38 = reportConfiguration37.getInputFileFilter();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration37.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        reportConfiguration42.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration46.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = reportConfiguration46.getLicenses(licenseFilter48);
        reportConfiguration42.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet49);
        reportConfiguration42.setCopyrightMessage("MathcerRefBuilder: null");
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier53 = org.apache.rat.Defaults.getUnapprovedLicensesStyleSheet();
        reportConfiguration42.setStyleSheet(inputStreamIOSupplier53);
        reportConfiguration37.setStyleSheet(inputStreamIOSupplier53);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration57.getInputFileFilter();
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.TRUE;
        reportConfiguration57.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        reportConfiguration62.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        java.io.FilenameFilter filenameFilter67 = reportConfiguration66.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet69 = reportConfiguration66.getLicenses(licenseFilter68);
        reportConfiguration62.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet69);
        reportConfiguration62.setCopyrightMessage("MathcerRefBuilder: null");
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier73 = org.apache.rat.Defaults.getUnapprovedLicensesStyleSheet();
        reportConfiguration62.setStyleSheet(inputStreamIOSupplier73);
        reportConfiguration57.setStyleSheet(inputStreamIOSupplier73);
        reportConfiguration37.setStyleSheet(inputStreamIOSupplier73);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier73);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(filenameFilter38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier53);
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.TRUE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.TRUE));
        org.junit.Assert.assertNull(filenameFilter67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet69);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier73);
    }

    @Test
    public void test06773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06773");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        reportConfiguration65.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level68 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration65.logFamilyCollisions(level68);
        defaultLog0.setLevel(level68);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender72 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher76 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("2953e6cb-20a5-4dcf-a9f5-85c51cc8c635");
        org.apache.rat.analysis.IHeaderMatcher.State state77 = simpleTextMatcher76.currentState();
        defaultLog0.error((java.lang.Object) simpleTextMatcher76);
        org.apache.rat.api.MetaData.Datum datum79 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_3;
        java.lang.String str80 = datum79.getValue();
        java.lang.Throwable throwable81 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.info((java.lang.Object) datum79, throwable81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertTrue("'" + level68 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level68.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + state77 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state77.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertNotNull(datum79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "GNU General Public License, version 3" + "'", str80, "GNU General Public License, version 3");
    }

    @Test
    public void test06774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06774");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        java.net.URL uRL5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder6 = builder4.add(uRL5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test06775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06775");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.license.ILicense[] iLicenseArray13 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet14 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet14, iLicenseArray13);
        java.lang.String[] strArray28 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory31 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet14, (java.util.Collection<java.lang.String>) strList29);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration46.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = reportConfiguration46.getLicenses(licenseFilter48);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders50 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration46.setAddLicenseHeaders(addLicenseHeaders50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter55);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet59 = licenseSetFactory31.getLicenses(licenseFilter55);
        defaultLog0.warn((java.lang.Object) licenseSetFactory31);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray63 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList64 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList64, iLicenseFamilyArray63);
        reportConfiguration62.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList64);
        org.apache.rat.utils.Log.Level level67 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration62.logLicenseCollisions(level67);
        defaultLog0.setLevel(level67);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        java.io.FilenameFilter filenameFilter72 = reportConfiguration71.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter73 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet74 = reportConfiguration71.getLicenses(licenseFilter73);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders75 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration71.setAddLicenseHeaders(addLicenseHeaders75);
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logLicenseCollisions(level81);
        reportConfiguration71.logFamilyCollisions(level81);
        org.apache.rat.configuration.Format format84 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader85 = format84.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader86 = format84.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader87 = format84.licenseReader();
        defaultLog0.log(level81, (java.lang.Object) licenseReader87);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet89 = licenseReader87.readFamilies();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet90 = licenseReader87.readFamilies();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet91 = licenseReader87.readLicenses();
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet92 = licenseReader87.readFamilies();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(iLicenseArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders50 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders50.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet59);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + level67 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level67.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter72);
        org.junit.Assert.assertTrue("'" + licenseFilter73 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter73.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet74);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders75 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders75.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + format84 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format84.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader85);
        org.junit.Assert.assertNotNull(matcherReader86);
        org.junit.Assert.assertNotNull(licenseReader87);
        org.junit.Assert.assertNotNull(iLicenseFamilySet89);
        org.junit.Assert.assertNotNull(iLicenseFamilySet90);
        org.junit.Assert.assertNotNull(iLicenseSet91);
    }

    @Test
    public void test06776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06776");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder3 = regexBuilder0.setExpr("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder5 = regexBuilder3.setExpr("TextBuilder: d4148d3a-edbc-4672-b...");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder7 = regexBuilder5.setExpr("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = regexBuilder7.build();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder3);
        org.junit.Assert.assertNotNull(regexBuilder5);
        org.junit.Assert.assertNotNull(regexBuilder7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
    }

    @Test
    public void test06777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06777");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog0.log(level13, "JAVA");
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = org.apache.rat.Reporter.report(reportConfiguration17);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic21 = org.apache.rat.Reporter.report(reportConfiguration20);
        org.apache.rat.utils.ReportingSet.Options options22 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration20.licenseDuplicateOption(options22);
        reportConfiguration17.familyDuplicateOption(options22);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier25 = reportConfiguration17.getWriter();
        boolean boolean26 = reportConfiguration17.isAddingLicensesForced();
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        reportConfiguration17.logLicenseCollisions(level31);
        defaultLog0.log(level31, "http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.utils.Log.Level level36 = defaultLog0.getLevel();
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher38 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("AL   ");
        org.apache.rat.analysis.IHeaderMatcher.State state39 = simpleTextMatcher38.finalizeState();
        defaultLog0.info((java.lang.Object) simpleTextMatcher38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration55.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter64);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier70 = reportConfiguration69.getOutput();
        reportConfiguration42.setOut(outputStreamIOSupplier70);
        org.apache.rat.utils.Log.Level level72 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration42.logLicenseCollisions(level72);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter74 = reportConfiguration42.getDirectoryFilter();
        org.apache.rat.configuration.Format format76 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader77 = format76.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader78 = format76.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader79 = format76.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet80 = licenseReader79.readLicenses();
        org.apache.rat.license.ILicense iLicense81 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet80);
        reportConfiguration42.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet80);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet83 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet80);
        java.lang.Throwable throwable84 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.warn((java.lang.Object) iLicenseSet80, throwable84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level13.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNull(claimStatistic18);
        org.junit.Assert.assertNull(claimStatistic21);
        org.junit.Assert.assertTrue("'" + options22 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options22.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level36 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level36.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state39.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier70);
        org.junit.Assert.assertTrue("'" + level72 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level72.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter74);
        org.junit.Assert.assertTrue("'" + format76 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format76.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader77);
        org.junit.Assert.assertNotNull(matcherReader78);
        org.junit.Assert.assertNotNull(licenseReader79);
        org.junit.Assert.assertNotNull(iLicenseSet80);
        org.junit.Assert.assertNull(iLicense81);
    }

    @Test
    public void test06778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06778");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier27 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder28 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder30 = iLicenseFamilyBuilder28.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder32 = iLicenseFamilyBuilder28.setLicenseFamilyCategory("6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.apache.rat.license.ILicenseFamily.Builder builder34 = iLicenseFamilyBuilder28.setLicenseFamilyName("MathcerRefBuilder: ");
        org.apache.rat.license.ILicenseFamily.Builder builder36 = iLicenseFamilyBuilder28.setLicenseFamilyName("Copyright Builder: s:6481fb19-38f0-43f5-ab95-caf84a069ee1 e:null o:null");
        java.lang.String str37 = builder36.getCategory();
        reportConfiguration1.addFamily(builder36);
        reportConfiguration1.setStyleReport(true);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "6486879f-fc81-4b57-aec7-c4c77d540c30" + "'", str37, "6486879f-fc81-4b57-aec7-c4c77d540c30");
        org.junit.Assert.assertNull(claimStatistic41);
    }

    @Test
    public void test06779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06779");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        boolean boolean4 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier5 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier5);
        java.lang.String[] strArray12 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean16 = strSet13.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean18 = strSet13.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction19 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet20 = strSet13.setMsgFormat(strFunction19);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily23 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet22);
        boolean boolean24 = strSet13.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet26 = strSet13.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = reportConfiguration28.getLicenses(licenseFilter30);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders32 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration28.setAddLicenseHeaders(addLicenseHeaders32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        reportConfiguration35.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level38 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration35.logLicenseCollisions(level38);
        reportConfiguration28.logFamilyCollisions(level38);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet41 = strSet13.setLogLevel(level38);
        reportConfiguration1.logFamilyCollisions(level38);
        java.lang.String[] strArray48 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet49 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        boolean boolean52 = strSet49.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean54 = strSet49.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction55 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet56 = strSet49.setMsgFormat(strFunction55);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet49);
        java.util.stream.Stream<java.lang.String> strStream58 = strSet49.stream();
        strStream58.close();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier5);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertNull(iLicenseFamily23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders32 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders32.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertTrue("'" + level38 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level38.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(strStream58);
    }

    @Test
    public void test06780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06780");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("notice");
        boolean boolean4 = fullTextMatcher2.doMatch("2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
        java.lang.String str5 = fullTextMatcher2.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher("1d9c9d9e-3274-4f05-8f26-218d38f9ae19", (org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "987586d0-619c-4912-a291-bfbb4a7014f9" + "'", str5, "987586d0-619c-4912-a291-bfbb4a7014f9");
    }

    @Test
    public void test06781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06781");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier27 = reportConfiguration1.getOutput();
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.configuration.Format format30 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader31 = format30.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = licenseReader31.readLicenses();
        java.lang.String[] strArray38 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet39 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        boolean boolean42 = strSet39.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean44 = strSet39.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction45 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet46 = strSet39.setMsgFormat(strFunction45);
        boolean boolean47 = strSet39.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory48 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet32, (java.util.Collection<java.lang.String>) strSet39);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet49 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet32);
        org.apache.rat.license.ILicense iLicense50 = org.apache.rat.license.LicenseSetFactory.search("4fcae176-e574-46ed-b9e4-dea2e2f3b458", (java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet49);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet51 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet49);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        reportConfiguration54.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level57 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration54.logFamilyCollisions(level57);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier59 = reportConfiguration54.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier59);
        org.apache.rat.report.IReportable iReportable61 = null;
        reportConfiguration1.setReportable(iReportable61);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier27);
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + format30 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format30.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader31);
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(iLicense50);
        org.junit.Assert.assertTrue("'" + level57 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level57.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier59);
    }

    @Test
    public void test06782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06782");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder2.setText("http://org/apache/rat/meta-data#HeaderSample");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = textBuilder4.build();
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder7 = textBuilder4.setText("W3C  ");
        org.apache.rat.configuration.builders.TextBuilder textBuilder9 = textBuilder4.setText("4fcae176-e574-46ed-b9e4-dea2e2f3b458");
        boolean boolean10 = textBuilder4.hasId();
        org.apache.rat.configuration.builders.TextBuilder textBuilder12 = textBuilder4.setText("Copyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.TextBuilder textBuilder14 = textBuilder4.setText("Copyright Builder: s:.cvsignore e:null o:null");
        org.apache.rat.configuration.builders.TextBuilder textBuilder16 = textBuilder14.setText("5468dfca-418b-481e-9825-7ead41f3b2a0");
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(textCaptureBuilder7);
        org.junit.Assert.assertNotNull(textBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(textBuilder12);
        org.junit.Assert.assertNotNull(textBuilder14);
        org.junit.Assert.assertNotNull(textBuilder16);
    }

    @Test
    public void test06783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06783");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher1 = allBuilder0.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.text();
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder2.setText("");
        java.lang.String str5 = textBuilder2.toString();
        java.lang.String str6 = textBuilder2.toString();
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder8 = textBuilder2.setText("9340895e-47fd-411d-8917-58c71f9a32c4");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder10 = textBuilder2.setId("Datum [ name ='http://org/apache/rat/meta-data#FileCategory',value ='archive ']");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = textBuilder2.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder13 = textBuilder2.setText("Copyright Builder: s:null e:W3C Software Copyright o:null");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder14 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) textBuilder13);
        org.apache.rat.configuration.builders.TextBuilder textBuilder16 = textBuilder13.setText("00186AD8-9B49-4E79-B8F0-40326F09C054");
        org.junit.Assert.assertNotNull(allBuilder0);
        org.junit.Assert.assertNotNull(iHeaderMatcher1);
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "TextBuilder: " + "'", str5, "TextBuilder: ");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "TextBuilder: " + "'", str6, "TextBuilder: ");
        org.junit.Assert.assertNotNull(textCaptureBuilder8);
        org.junit.Assert.assertNotNull(abstractBuilder10);
        org.junit.Assert.assertNotNull(iHeaderMatcher11);
        org.junit.Assert.assertNotNull(textBuilder13);
        org.junit.Assert.assertNotNull(abstractBuilder14);
        org.junit.Assert.assertNotNull(textBuilder16);
    }

    @Test
    public void test06784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06784");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("GPL3 ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = sPDXMatcherFactory0.create("6620e9ee-d651-4c18-8162-edad6d18368e");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = sPDXMatcherFactory0.create("Copyright Builder: s:null e:null o:null");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = sPDXMatcherFactory0.create("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = sPDXMatcherFactory0.create("CDDL1");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = sPDXMatcherFactory0.create("Datum [ name ='eba9cdef-527a-48ca-947b-897e2e06ea31',value ='0356753d-7389-48e7-8d63-056fd4c4548c ']");
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcher12);
    }

    @Test
    public void test06785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06785");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        reportConfiguration2.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level5 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration2.logFamilyCollisions(level5);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter7 = reportConfiguration2.getDirectoryFilter();
        java.nio.file.Path path8 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes9 = null;
        java.nio.file.FileVisitResult fileVisitResult10 = iOFileFilter7.accept(path8, basicFileAttributes9);
        java.nio.file.Path path11 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes12 = null;
        java.nio.file.FileVisitResult fileVisitResult13 = iOFileFilter7.accept(path11, basicFileAttributes12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker14 = new org.apache.rat.walker.ArchiveWalker(file0, (java.io.FilenameFilter) iOFileFilter7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + level5 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level5.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter7);
        org.junit.Assert.assertTrue("'" + fileVisitResult10 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult10.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertTrue("'" + fileVisitResult13 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult13.equals(java.nio.file.FileVisitResult.TERMINATE));
    }

    @Test
    public void test06786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06786");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder1 = org.apache.rat.configuration.MatcherBuilderTracker.getMatcherBuilder("2e48d868-a09d-40cc-abd4-819232908bca");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: ?Valid builders?all?matcherRef?copyright?not?regex?spdx?text?any?ERROR MSG?No matcher builder named 2e48d868-a09d-40cc-abd4-819232908bca");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06787");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        claimStatistic0.setNumUnknown((int) '#');
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumApproved(256);
        claimStatistic0.setNumGenerated(1);
        org.junit.Assert.assertNull(strMap5);
    }

    @Test
    public void test06788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06788");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.utils.DefaultLog defaultLog65 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender66 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog65);
        org.apache.rat.utils.Log log67 = null;
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration(log67);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic69 = org.apache.rat.Reporter.report(reportConfiguration68);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic72 = org.apache.rat.Reporter.report(reportConfiguration71);
        org.apache.rat.utils.ReportingSet.Options options73 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration71.licenseDuplicateOption(options73);
        reportConfiguration68.familyDuplicateOption(options73);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier76 = reportConfiguration68.getWriter();
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logFamilyCollisions(level81);
        reportConfiguration68.logFamilyCollisions(level81);
        org.apache.rat.Defaults.Builder builder84 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder85 = builder84.noDefault();
        defaultLog65.log(level81, (java.lang.Object) builder84);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense87 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense87.setLicenseFamilyName("hi!");
        java.lang.String str90 = fullTextMatchingLicense87.getLicenseFamilyCategory();
        java.lang.String str91 = fullTextMatchingLicense87.getLicenseFamilyName();
        fullTextMatchingLicense87.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense87.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily96 = fullTextMatchingLicense87.getLicenseFamily();
        defaultLog0.log(level81, (java.lang.Object) fullTextMatchingLicense87);
        fullTextMatchingLicense87.setFullText("15FF671B-67B8-4791-9E1E-208F319FB7E2");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(defaultLog65);
        org.junit.Assert.assertNull(claimStatistic69);
        org.junit.Assert.assertNull(claimStatistic72);
        org.junit.Assert.assertTrue("'" + options73 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options73.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier76);
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily96);
    }

    @Test
    public void test06789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06789");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("t true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = textBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = textBuilder0.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder6 = textBuilder0.setText("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = textBuilder6.build();
        org.apache.rat.configuration.builders.TextBuilder textBuilder9 = textBuilder6.setText(".giti");
        org.apache.rat.configuration.builders.TextCaptureBuilder textCaptureBuilder11 = textBuilder6.setText("4fcae176-e574-46ed-b9e4-dea2e2f3b458 http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean12 = textBuilder6.hasId();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(textBuilder6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(textBuilder9);
        org.junit.Assert.assertNotNull(textCaptureBuilder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06790");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str1 = allBuilder0.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder0.getChildren();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder4 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) matcherRefBuilder3);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder3.setRefId("http:");
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap7 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder6.setMatchers(strMap7);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder10 = matcherRefBuilder8.setRefId("");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder12 = matcherRefBuilder8.setRefId("TextBuilder: 90663eff7ed841bd85a8...");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AllBuilder:" + "'", str1, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(abstractBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertNotNull(matcherRefBuilder10);
        org.junit.Assert.assertNotNull(matcherRefBuilder12);
    }

    @Test
    public void test06791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06791");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.not();
        java.lang.String str1 = notBuilder0.toString();
        java.lang.String str2 = notBuilder0.toString();
        java.lang.String str3 = notBuilder0.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = notBuilder0.build();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: 'not' type matcher requires one and only one enclosed matcher");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(notBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NotBuilder: null" + "'", str2, "NotBuilder: null");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "NotBuilder: null" + "'", str3, "NotBuilder: null");
    }

    @Test
    public void test06792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06792");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap1 = null;
        claimStatistic0.setDocumentCategoryMap(strMap1);
        int int3 = claimStatistic0.getNumUnApproved();
        java.util.Map<java.lang.String, java.lang.Integer> strMap4 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumUnApproved((int) (byte) 1);
        claimStatistic0.setNumUnknown((-14));
        int int9 = claimStatistic0.getNumUnApproved();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(strMap4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test06793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06793");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum12 = metaData0.get("http:");
        org.apache.rat.api.MetaData.Datum datum13 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATIM_TRUE;
        metaData0.add(datum13);
        metaData0.clear();
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        reportConfiguration17.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level20 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration17.logLicenseCollisions(level20);
        reportConfiguration17.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        java.io.FilenameFilter filenameFilter26 = reportConfiguration25.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet28 = reportConfiguration25.getLicenses(licenseFilter27);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders29 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration25.setAddLicenseHeaders(addLicenseHeaders29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter34);
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter34);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        java.io.FilenameFilter filenameFilter39 = reportConfiguration38.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet41 = reportConfiguration38.getLicenses(licenseFilter40);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders42 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration38.setAddLicenseHeaders(addLicenseHeaders42);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic46 = org.apache.rat.Reporter.report(reportConfiguration45);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter47);
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter47);
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter47);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration25.getInputFileFilter();
        reportConfiguration25.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable54 = null;
        reportConfiguration25.setReportable(iReportable54);
        org.apache.rat.Defaults.Builder builder57 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults58 = builder57.build();
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        java.io.FilenameFilter filenameFilter61 = reportConfiguration60.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet63 = reportConfiguration60.getLicenses(licenseFilter62);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders64 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration60.setAddLicenseHeaders(addLicenseHeaders64);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic68 = org.apache.rat.Reporter.report(reportConfiguration67);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter69 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration67, licenseFilter69);
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter69);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        java.io.FilenameFilter filenameFilter74 = reportConfiguration73.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet76 = reportConfiguration73.getLicenses(licenseFilter75);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders77 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration73.setAddLicenseHeaders(addLicenseHeaders77);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic81 = org.apache.rat.Reporter.report(reportConfiguration80);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter82 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration80, licenseFilter82);
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter82);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet85 = reportConfiguration60.getLicenseFamilies(licenseFilter82);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet86 = defaults58.getLicenses(licenseFilter82);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet87 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet86);
        org.apache.rat.license.ILicense iLicense88 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet86);
        reportConfiguration25.addLicense(iLicense88);
        java.lang.String str90 = iLicense88.derivedFrom();
        reportConfiguration17.addLicense(iLicense88);
        java.lang.String str92 = iLicense88.getNotes();
        metaData0.reportOnLicense(iLicense88);
        java.lang.String str94 = iLicense88.derivedFrom();
        java.lang.String str95 = iLicense88.getNotes();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNull(datum12);
        org.junit.Assert.assertNotNull(datum13);
        org.junit.Assert.assertTrue("'" + level20 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level20.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet28);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders29 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders29.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet41);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders42 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders42.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(defaults58);
        org.junit.Assert.assertNull(filenameFilter61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet63);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders64 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders64.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic68);
        org.junit.Assert.assertTrue("'" + licenseFilter69 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter69.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet76);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders77 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders77.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic81);
        org.junit.Assert.assertTrue("'" + licenseFilter82 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter82.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet85);
        org.junit.Assert.assertNotNull(iLicenseSet86);
        org.junit.Assert.assertNotNull(iLicense88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "BSD-3" + "'", str90, "BSD-3");
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "BSD-3" + "'", str94, "BSD-3");
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test06794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06794");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyName("7d01b1b3-e7b9-4f85-b3dd-e0334dea8844");
        fullTextMatchingLicense0.setLicenseFamilyName("MathcerRefBuilder: http:");
        fullTextMatchingLicense0.setNotes("ba9961f9-a0de-4a54-bd1f-a2e9df26a188");
        fullTextMatchingLicense0.setLicenseFamilyName("aba50df1-5ba7-491a-a427-87194604c00d");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    }

    @Test
    public void test06795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06795");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher4 = new org.apache.rat.analysis.matchers.CopyrightMatcher("8238519a-3051-4498-b182-9d8ca3d898a3", "SpdxBuilder: 641dafc1-13c3-45d4-8272-f36f10392c53", "c062e6a4-c034-4c7d-9098-7087757d749d", "5fd2c009-d426-4f2e-aa5f-fa818707c48c");
    }

    @Test
    public void test06796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06796");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumUnknown((int) (byte) -1);
        claimStatistic0.setNumGenerated((int) (short) 10);
        claimStatistic0.setNumApproved((int) (short) 0);
        java.util.Map<java.lang.String, java.lang.Integer> strMap12 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap12);
        int int14 = claimStatistic0.getNumUnApproved();
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test06797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06797");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet15 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet15);
        boolean boolean17 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet15);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        strSet19.clear();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(iLicenseFamilySet15);
        org.junit.Assert.assertNull(iLicenseFamily16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
    }

    @Test
    public void test06798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06798");
        org.apache.rat.config.ReportFormat reportFormat0 = org.apache.rat.config.ReportFormat.PLAIN;
        boolean boolean2 = reportFormat0.is("SpdxBuilder: null");
        boolean boolean4 = reportFormat0.is("AllBuilder:");
        boolean boolean6 = reportFormat0.is("b5cb0999-b639-4e9c-ab9c-268137bc8846");
        boolean boolean8 = reportFormat0.is("TMF");
        org.junit.Assert.assertTrue("'" + reportFormat0 + "' != '" + org.apache.rat.config.ReportFormat.PLAIN + "'", reportFormat0.equals(org.apache.rat.config.ReportFormat.PLAIN));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06799");
        org.apache.rat.license.ILicense[] iLicenseArray0 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet1 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet1, iLicenseArray0);
        java.lang.String[] strArray15 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet1, (java.util.Collection<java.lang.String>) strList16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet20 = licenseSetFactory18.getLicenseFamilies(licenseFilter19);
        org.apache.rat.license.ILicense[] iLicenseArray21 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet22 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet22, iLicenseArray21);
        java.lang.String[] strArray36 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory39 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet22, (java.util.Collection<java.lang.String>) strList37);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = reportConfiguration41.getLicenses(licenseFilter43);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders45 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter50);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        java.io.FilenameFilter filenameFilter55 = reportConfiguration54.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet57 = reportConfiguration54.getLicenses(licenseFilter56);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders58 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration54.setAddLicenseHeaders(addLicenseHeaders58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter63 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration61, licenseFilter63);
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter63);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter63);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet67 = licenseSetFactory39.getLicenses(licenseFilter63);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet68 = licenseSetFactory18.getLicenseFamilies(licenseFilter63);
        org.apache.rat.policy.DefaultPolicy defaultPolicy69 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet68);
        org.apache.rat.api.Document document70 = null;
        defaultPolicy69.analyse(document70);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet72 = defaultPolicy69.getApprovedLicenseNames();
        org.apache.rat.policy.DefaultPolicy defaultPolicy73 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet72);
        org.apache.rat.api.Document document74 = null;
        defaultPolicy73.analyse(document74);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense76 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense76.setLicenseFamilyName("hi!");
        java.lang.String str79 = fullTextMatchingLicense76.getLicenseFamilyCategory();
        java.lang.String str80 = fullTextMatchingLicense76.getLicenseFamilyName();
        fullTextMatchingLicense76.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense76.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense76.setFullText("W3C  ");
        java.lang.String str87 = fullTextMatchingLicense76.getLicenseFamilyCategory();
        fullTextMatchingLicense76.setLicenseFamilyCategory("http://org/apache/rat/meta-data#ApprovedLicense");
        org.apache.rat.license.ILicenseFamily iLicenseFamily90 = fullTextMatchingLicense76.getLicenseFamily();
        defaultPolicy73.add(iLicenseFamily90);
        org.apache.rat.api.Document document92 = null;
        defaultPolicy73.analyse(document92);
        org.apache.rat.api.Document document94 = null;
        defaultPolicy73.analyse(document94);
        org.apache.rat.api.Document document96 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultPolicy73.reportLicenseApprovalClaim(document96, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet20);
        org.junit.Assert.assertNotNull(iLicenseArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders45 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders45.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet57);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders58 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders58.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertTrue("'" + licenseFilter63 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter63.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet67);
        org.junit.Assert.assertNotNull(iLicenseFamilySet68);
        org.junit.Assert.assertNotNull(iLicenseFamilySet72);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "TMF" + "'", str87, "TMF");
        org.junit.Assert.assertNotNull(iLicenseFamily90);
    }

    @Test
    public void test06800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06800");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("NotBuilder: null", "http://org/apache/rat/meta-data#LicenseFamilyName", "http://org/apache/rat/meta-data");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = copyrightMatcher3.finalizeState();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test06801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06801");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        reportConfiguration1.removeApprovedLicenseCategory("F FALSE");
        boolean boolean8 = reportConfiguration1.isAddingLicenses();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter9 = null;
        reportConfiguration1.setDirectoryFilter(iOFileFilter9);
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setOut(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06802");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        defaultLog0.info((java.lang.Object) "Modified BSD License");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender4 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "W3CD ");
        org.apache.rat.utils.DefaultLog defaultLog5 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder6 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder8 = builder6.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher12 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state13 = copyrightMatcher12.finalizeState();
        org.apache.rat.license.ILicense.Builder builder14 = builder8.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher12);
        org.apache.rat.license.ILicense.Builder builder16 = builder14.setLicenseFamilyCategory("");
        defaultLog5.error((java.lang.Object) builder16);
        org.apache.rat.utils.Log.Level level18 = org.apache.rat.utils.Log.Level.INFO;
        defaultLog5.log(level18, "JAVA");
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier23 = reportConfiguration22.getOutput();
        reportConfiguration22.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log26 = reportConfiguration22.getLog();
        org.apache.rat.utils.Log.Level level27 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration22.logFamilyCollisions(level27);
        defaultLog5.setLevel(level27);
        defaultLog0.setLevel(level27);
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.license.ILicense.Builder builder32 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder34 = builder32.setLicenseFamilyCategory("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.license.ILicense.Builder builder36 = builder32.setDerivedFrom("The MIT License");
        org.apache.rat.license.ILicense.Builder builder38 = builder32.setName("AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.license.ILicense.Builder builder40 = builder32.setDerivedFrom("i indeterminent");
        defaultLog0.debug((java.lang.Object) builder32);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(defaultLog5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state13.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + level18 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level18.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier23);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + level27 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level27.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test06803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06803");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        java.io.FilenameFilter filenameFilter12 = reportConfiguration1.getInputFileFilter();
        boolean boolean13 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier14 = reportConfiguration1.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter15 = reportConfiguration1.getDirectoryFilter();
        boolean boolean16 = reportConfiguration1.isStyleReport();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier14);
        org.junit.Assert.assertNotNull(iOFileFilter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test06804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06804");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        boolean boolean31 = reportConfiguration1.isStyleReport();
        boolean boolean32 = reportConfiguration1.isStyleReport();
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        reportConfiguration34.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level37 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration34.logLicenseCollisions(level37);
        reportConfiguration1.logLicenseCollisions(level37);
        org.apache.rat.utils.Log.Level level40 = org.apache.rat.utils.Log.Level.DEBUG;
        reportConfiguration1.logLicenseCollisions(level40);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder42 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str43 = iLicenseFamilyBuilder42.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder45 = iLicenseFamilyBuilder42.setLicenseFamilyCategory("false");
        java.lang.String str46 = iLicenseFamilyBuilder42.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder48 = iLicenseFamilyBuilder42.setLicenseFamilyName("TextBuilder: Datum [ name ='http:...");
        org.apache.rat.license.ILicenseFamily.Builder builder50 = iLicenseFamilyBuilder42.setLicenseFamilyCategory("notice");
        org.apache.rat.license.ILicenseFamily iLicenseFamily51 = builder50.build();
        reportConfiguration1.addFamily(builder50);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier53 = reportConfiguration1.getStyleSheet();
        java.io.File file54 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(file54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + level37 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level37.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + level40 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level40.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "false" + "'", str46, "false");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(iLicenseFamily51);
        org.junit.Assert.assertNull(inputStreamIOSupplier53);
    }

    @Test
    public void test06805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06805");
        java.lang.String str1 = org.apache.rat.license.ILicenseFamily.makeCategory("TextBuilder: ae1d3f1b-6a63-45e7-a...");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "TextB" + "'", str1, "TextB");
    }

    @Test
    public void test06806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06806");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        java.lang.CharSequence charSequence12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter13 = xmlWriter1.attribute((java.lang.CharSequence) "2f88b0fb-cbe0-494f-a237-c14d76af3d76", charSequence12);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06807");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setNotes(".cvsignore");
        java.lang.String str6 = fullTextMatchingLicense0.getLicenseFamilyName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test06808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06808");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        reportConfiguration1.removeApprovedLicenseCategory("F FALSE");
        boolean boolean8 = reportConfiguration1.isAddingLicenses();
        org.apache.rat.configuration.Format format10 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader11 = format10.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader12 = format10.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader13 = format10.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = licenseReader13.readLicenses();
        org.apache.rat.license.ILicense iLicense15 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet14);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        int int17 = strSet16.size();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet14, (java.util.Collection<java.lang.String>) strSet16);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray19 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList20 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20, iLicenseFamilyArray19);
        org.apache.rat.policy.DefaultPolicy defaultPolicy22 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet23 = defaultPolicy22.getApprovedLicenseNames();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet24 = defaultPolicy22.getApprovedLicenseNames();
        boolean boolean25 = strSet16.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet24);
        boolean boolean26 = strSet16.isEmpty();
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet16);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        reportConfiguration29.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level32 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration29.logFamilyCollisions(level32);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier34 = reportConfiguration29.getOutput();
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        reportConfiguration36.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        java.io.FilenameFilter filenameFilter41 = reportConfiguration40.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = reportConfiguration40.getLicenses(licenseFilter42);
        reportConfiguration36.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet43);
        java.io.FilenameFilter filenameFilter45 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        java.io.FilenameFilter filenameFilter48 = reportConfiguration47.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet50 = reportConfiguration47.getLicenses(licenseFilter49);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders51 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration47.setAddLicenseHeaders(addLicenseHeaders51);
        org.apache.rat.utils.Log log53 = null;
        org.apache.rat.ReportConfiguration reportConfiguration54 = new org.apache.rat.ReportConfiguration(log53);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic55 = org.apache.rat.Reporter.report(reportConfiguration54);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter56 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration54, licenseFilter56);
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter56);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        java.io.FilenameFilter filenameFilter61 = reportConfiguration60.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet63 = reportConfiguration60.getLicenses(licenseFilter62);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders64 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration60.setAddLicenseHeaders(addLicenseHeaders64);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic68 = org.apache.rat.Reporter.report(reportConfiguration67);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter69 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration67, licenseFilter69);
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter69);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet72 = reportConfiguration47.getLicenseFamilies(licenseFilter69);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration36, licenseFilter69);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet74 = reportConfiguration29.getLicenseFamilies(licenseFilter69);
        java.util.Collection<java.lang.String> strCollection75 = null;
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory76 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet74, strCollection75);
        org.apache.rat.policy.DefaultPolicy defaultPolicy77 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet74);
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic80 = org.apache.rat.Reporter.report(reportConfiguration79);
        org.apache.rat.utils.Log log81 = null;
        org.apache.rat.ReportConfiguration reportConfiguration82 = new org.apache.rat.ReportConfiguration(log81);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic83 = org.apache.rat.Reporter.report(reportConfiguration82);
        org.apache.rat.utils.ReportingSet.Options options84 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration82.licenseDuplicateOption(options84);
        reportConfiguration79.familyDuplicateOption(options84);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier87 = reportConfiguration79.getWriter();
        boolean boolean88 = reportConfiguration79.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter89 = reportConfiguration79.getInputFileFilter();
        java.util.SortedSet<java.lang.String> strSet90 = reportConfiguration79.getApprovedLicenseCategories();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory91 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet74, (java.util.Collection<java.lang.String>) strSet90);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet74);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + format10 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format10.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader11);
        org.junit.Assert.assertNotNull(matcherReader12);
        org.junit.Assert.assertNotNull(licenseReader13);
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertNull(iLicense15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet23);
        org.junit.Assert.assertNotNull(iLicenseFamilySet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + level32 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level32.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier34);
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertNull(filenameFilter45);
        org.junit.Assert.assertNull(filenameFilter48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet50);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders51 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders51.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic55);
        org.junit.Assert.assertTrue("'" + licenseFilter56 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter56.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet63);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders64 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders64.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic68);
        org.junit.Assert.assertTrue("'" + licenseFilter69 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter69.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet72);
        org.junit.Assert.assertNotNull(iLicenseFamilySet74);
        org.junit.Assert.assertNull(claimStatistic80);
        org.junit.Assert.assertNull(claimStatistic83);
        org.junit.Assert.assertTrue("'" + options84 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options84.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(filenameFilter89);
        org.junit.Assert.assertNotNull(strSet90);
    }

    @Test
    public void test06809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06809");
        boolean boolean1 = org.apache.rat.document.impl.guesser.NoteGuesser.isNote("W3C   null");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test06810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06810");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter15 = xmlWriter1.attribute((java.lang.CharSequence) "MathcerRefBuilder: http:", (java.lang.CharSequence) "36f60d10-a0bd-4355-a2a6-3635adf29872");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06811");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        metaData0.clear();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection8 = metaData0.getData();
        org.apache.rat.api.MetaData.Datum datum11 = new org.apache.rat.api.MetaData.Datum("3c840dc2-bef0-42b5-b26c-35a568d53a24", "NotBuilder: null");
        metaData0.set(datum11);
        java.lang.String str13 = datum11.getName();
        java.lang.String str14 = datum11.getName();
        java.lang.String str15 = datum11.toString();
        java.lang.String str16 = datum11.getValue();
        java.lang.String str17 = datum11.getName();
        java.lang.String str18 = datum11.getValue();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(datumCollection8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3c840dc2-bef0-42b5-b26c-35a568d53a24" + "'", str13, "3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "3c840dc2-bef0-42b5-b26c-35a568d53a24" + "'", str14, "3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Datum [ name ='3c840dc2-bef0-42b5-b26c-35a568d53a24',value ='NotBuilder: null ']" + "'", str15, "Datum [ name ='3c840dc2-bef0-42b5-b26c-35a568d53a24',value ='NotBuilder: null ']");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NotBuilder: null" + "'", str16, "NotBuilder: null");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "3c840dc2-bef0-42b5-b26c-35a568d53a24" + "'", str17, "3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NotBuilder: null" + "'", str18, "NotBuilder: null");
    }

    @Test
    public void test06812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06812");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet2 = strSet0.tailSet("hi!");
        java.util.stream.Stream<java.lang.String> strStream3 = strSet2.parallelStream();
        boolean boolean5 = strSet2.addIfNotPresent("null f1fc8dc8-990d-4a2d-9540-4e9ece3bd92c");
        java.util.stream.Stream<java.lang.String> strStream6 = strSet2.stream();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        reportConfiguration8.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level11 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration8.logFamilyCollisions(level11);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier13 = reportConfiguration8.getOutput();
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = reportConfiguration28.getLicenses(licenseFilter30);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders32 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration28.setAddLicenseHeaders(addLicenseHeaders32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter37);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter37);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter37);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier43 = reportConfiguration42.getOutput();
        reportConfiguration15.setOut(outputStreamIOSupplier43);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic47 = org.apache.rat.Reporter.report(reportConfiguration46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.utils.ReportingSet.Options options51 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration49.licenseDuplicateOption(options51);
        reportConfiguration46.familyDuplicateOption(options51);
        reportConfiguration15.licenseDuplicateOption(options51);
        reportConfiguration8.familyDuplicateOption(options51);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet56 = strSet2.setDuplicateOption(options51);
        int int57 = strSet56.size();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet59 = strSet56.headSet("0efaf422-29df-4134-8f47-46a5265da7f4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: toKey out of range");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strStream3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strStream6);
        org.junit.Assert.assertTrue("'" + level11 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level11.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier13);
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders32 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders32.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier43);
        org.junit.Assert.assertNull(claimStatistic47);
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + options51 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options51.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test06813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06813");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum3 = org.apache.rat.api.MetaData.RAT_DOCUMENT_CATEGORY_DATUM_STANDARD;
        metaData0.add(datum3);
        java.lang.String str6 = metaData0.value("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        boolean boolean8 = metaData0.clear("RegexBuilder: ef75a6e8-7197-4e9e-83bf-f8b367e6b3c5");
        java.lang.String str10 = metaData0.value("806f1d25-f31b-4ba8-8571-46e90f1e1aeb");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(datum3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test06814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06814");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("Copyright Builder: s:W3CD  e:null o:Copyright Builder: s:null e:274c6a15-09f6-4bfd-ac53-1827770eb507 o:null", "SPDX:.cvsignore", "MathcerRefBuilder: RegexBuilder: null");
    }

    @Test
    public void test06815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06815");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isAudio("65e454b8-bebb-40d5-ad86-7e925a25b8d1");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test06816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06816");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = reportConfiguration1.getDirectoryFilter();
        java.lang.String[] strArray12 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean16 = strSet13.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean18 = strSet13.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction19 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet20 = strSet13.setMsgFormat(strFunction19);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily23 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet22);
        boolean boolean24 = strSet13.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet13);
        org.apache.rat.report.IReportable iReportable26 = null;
        reportConfiguration1.setReportable(iReportable26);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier28 = reportConfiguration1.getStyleSheet();
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = reportConfiguration43.getLicenses(licenseFilter45);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter52);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration30.getInputFileFilter();
        reportConfiguration30.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable59 = null;
        reportConfiguration30.setReportable(iReportable59);
        org.apache.rat.Defaults.Builder builder62 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults63 = builder62.build();
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        java.io.FilenameFilter filenameFilter66 = reportConfiguration65.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter67 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet68 = reportConfiguration65.getLicenses(licenseFilter67);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders69 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration65.setAddLicenseHeaders(addLicenseHeaders69);
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic73 = org.apache.rat.Reporter.report(reportConfiguration72);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter74 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration72, licenseFilter74);
        org.apache.rat.Reporter.listLicenses(reportConfiguration65, licenseFilter74);
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        java.io.FilenameFilter filenameFilter79 = reportConfiguration78.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter80 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet81 = reportConfiguration78.getLicenses(licenseFilter80);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders82 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration78.setAddLicenseHeaders(addLicenseHeaders82);
        org.apache.rat.utils.Log log84 = null;
        org.apache.rat.ReportConfiguration reportConfiguration85 = new org.apache.rat.ReportConfiguration(log84);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic86 = org.apache.rat.Reporter.report(reportConfiguration85);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter87 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration85, licenseFilter87);
        org.apache.rat.Reporter.listLicenses(reportConfiguration78, licenseFilter87);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet90 = reportConfiguration65.getLicenseFamilies(licenseFilter87);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet91 = defaults63.getLicenses(licenseFilter87);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet92 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet91);
        org.apache.rat.license.ILicense iLicense93 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet91);
        reportConfiguration30.addLicense(iLicense93);
        org.apache.rat.license.ILicenseFamily iLicenseFamily95 = iLicense93.getLicenseFamily();
        reportConfiguration1.addLicense(iLicense93);
        java.io.File file97 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setOut(file97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertNull(iLicenseFamily23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(inputStreamIOSupplier28);
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(defaults63);
        org.junit.Assert.assertNull(filenameFilter66);
        org.junit.Assert.assertTrue("'" + licenseFilter67 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter67.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet68);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders69 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders69.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic73);
        org.junit.Assert.assertTrue("'" + licenseFilter74 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter74.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter79);
        org.junit.Assert.assertTrue("'" + licenseFilter80 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter80.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet81);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders82 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders82.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic86);
        org.junit.Assert.assertTrue("'" + licenseFilter87 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter87.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet90);
        org.junit.Assert.assertNotNull(iLicenseSet91);
        org.junit.Assert.assertNotNull(iLicense93);
        org.junit.Assert.assertNotNull(iLicenseFamily95);
    }

    @Test
    public void test06817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06817");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher16 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        copyrightMatcher16.reset();
        org.apache.rat.license.ILicense.Builder builder18 = builder11.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher16);
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.spdx();
        java.lang.String str20 = spdxBuilder19.toString();
        org.apache.rat.configuration.builders.SpdxBuilder spdxBuilder22 = spdxBuilder19.setName("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder23 = builder18.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) spdxBuilder19);
        org.apache.rat.license.ILicense.Builder builder25 = builder23.setName("DOJO ");
        org.apache.rat.license.ILicense.Builder builder27 = builder25.setLicenseFamilyCategory("RegexBuilder: http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicense.Builder builder29 = builder27.setNotes("MathcerRefBuilder: TextBuilder: SpdxBuilder: null");
        org.apache.rat.license.ILicense.Builder builder31 = builder29.setLicenseFamilyCategory("TMF  ");
        org.apache.rat.configuration.builders.TextBuilder textBuilder32 = org.apache.rat.analysis.IHeaderMatcher.Builder.text();
        org.apache.rat.configuration.builders.TextBuilder textBuilder34 = textBuilder32.setText("");
        java.lang.String str35 = textBuilder34.toString();
        org.apache.rat.configuration.builders.TextBuilder textBuilder37 = textBuilder34.setText("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher38 = textBuilder37.build();
        org.apache.rat.analysis.IHeaderMatcher.State state39 = iHeaderMatcher38.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher40 = new org.apache.rat.analysis.matchers.NotMatcher(iHeaderMatcher38);
        org.apache.rat.license.ILicense.Builder builder41 = builder29.setMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher40);
        org.apache.rat.analysis.IHeaderMatcher.State state43 = notMatcher40.matches("NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(spdxBuilder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "SpdxBuilder: null" + "'", str20, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(spdxBuilder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(textBuilder32);
        org.junit.Assert.assertNotNull(textBuilder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "TextBuilder: " + "'", str35, "TextBuilder: ");
        org.junit.Assert.assertNotNull(textBuilder37);
        org.junit.Assert.assertNotNull(iHeaderMatcher38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state39.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + state43 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state43.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test06818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06818");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((-1));
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = claimStatistic0.getDocumentCategoryMap();
        claimStatistic0.setNumUnApproved((int) '#');
        claimStatistic0.setNumApproved((int) (byte) -1);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = null;
        claimStatistic0.setDocumentCategoryMap(strMap8);
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = claimStatistic0.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = null;
        claimStatistic0.setDocumentCategoryMap(strMap11);
        java.util.Map<java.lang.String, java.lang.Integer> strMap13 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap14);
        int int16 = claimStatistic0.getNumApproved();
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertNull(strMap13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test06819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06819");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinaryData("562518e9-8175-4846-96f5-d17fb0514676");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test06820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06820");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher3 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("W3C  ", "c523095e-4421-4cc4-93e2-039f23b91f76");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher("e15853fc-6f47-4f3f-a346-63fe009915e5", (org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher3);
        simpleTextMatcher3.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state7 = simpleTextMatcher3.matches("5442eadd-c5c2-4028-96d7-364d7d405280");
        simpleTextMatcher3.reset();
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test06821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06821");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet14 = strSet6.headSet("5442eadd-c5c2-4028-96d7-364d7d405280");
        java.util.Spliterator<java.lang.String> strSpliterator15 = strSet14.spliterator();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strSpliterator15);
    }

    @Test
    public void test06822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06822");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter5 = xmlWriter1.content((java.lang.CharSequence) "TextBuilder: Copyright Builder: s...");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06823");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet15 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet15);
        boolean boolean17 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet15);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.utils.ReportingSet.Options options22 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration21.licenseDuplicateOption(options22);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet19.setDuplicateOption(options22);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.utils.ReportingSet.Options options31 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration29.licenseDuplicateOption(options31);
        reportConfiguration26.familyDuplicateOption(options31);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier34 = reportConfiguration26.getWriter();
        org.apache.rat.report.IReportable iReportable35 = null;
        reportConfiguration26.setReportable(iReportable35);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray37 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList38 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList38, iLicenseFamilyArray37);
        org.apache.rat.policy.DefaultPolicy defaultPolicy40 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList38);
        reportConfiguration26.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList38);
        boolean boolean42 = strSet19.equals((java.lang.Object) reportConfiguration26);
        strSet19.clear();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(iLicenseFamilySet15);
        org.junit.Assert.assertNull(iLicenseFamily16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + options22 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options22.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + options31 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options31.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier34);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test06824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06824");
        org.apache.rat.config.ReportFormat reportFormat0 = org.apache.rat.config.ReportFormat.PLAIN;
        boolean boolean2 = reportFormat0.is("http://org/apache/rat/meta-data#FileCategory");
        boolean boolean4 = reportFormat0.is("ed0faf32f32c46f1a6294fe87704cb0e");
        boolean boolean6 = reportFormat0.is("Datum [ name ='d0774232-cdef-4507-a8b6-ac22a273dde3',value ='10ceccc6-9da0-47a6-810c-684cf0a59f88 ']");
        org.junit.Assert.assertTrue("'" + reportFormat0 + "' != '" + org.apache.rat.config.ReportFormat.PLAIN + "'", reportFormat0.equals(org.apache.rat.config.ReportFormat.PLAIN));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06825");
        java.util.regex.Pattern pattern2 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher3 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern2);
        simpleRegexMatcher3.reset();
        java.lang.String str5 = simpleRegexMatcher3.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher6 = new org.apache.rat.analysis.matchers.NotMatcher("GNU General Public License, version 1", (org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher3);
        notMatcher6.reset();
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0c87b0ee-d1db-4238-b07c-dc3004d8f399" + "'", str5, "0c87b0ee-d1db-4238-b07c-dc3004d8f399");
    }

    @Test
    public void test06826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06826");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder7 = builder6.noDefault();
        org.apache.rat.Defaults.Builder builder8 = builder7.noDefault();
        java.io.File file9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder10 = builder8.add(file9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test06827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06827");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder2.setMatchers(strMap4);
        org.apache.rat.configuration.builders.AllBuilder allBuilder6 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setStart("OASIS");
        java.lang.String str10 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder15.setStart("OASIS");
        java.lang.String str18 = copyrightBuilder15.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder15.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str23 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = copyrightBuilder22.setEnd(".cvsignore");
        boolean boolean26 = copyrightBuilder22.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str28 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder27.setEnd(".cvsignore");
        boolean boolean31 = copyrightBuilder27.hasId();
        java.lang.String str32 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean38 = matcherRefBuilder37.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap39 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = matcherRefBuilder37.setMatchers(strMap39);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.lang.String str44 = matcherRefBuilder42.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder42.setMatchers(strMap45);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray47 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, allBuilder6, copyrightBuilder12, matcherRefBuilder13, copyrightBuilder15, copyrightBuilder21, copyrightBuilder22, copyrightBuilder27, copyrightBuilder33, anyBuilder36, matcherRefBuilder37, copyrightBuilder41, matcherRefBuilder42 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList48 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48, builderArray47);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder50 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder51 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str52 = copyrightBuilder51.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder53 = notBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder51);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder55 = copyrightBuilder51.setEnd("64868");
        java.lang.String str56 = copyrightBuilder51.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder58 = copyrightBuilder51.setOwner("a80aad6c-340e-4343-88df-efe4fdbf9c47");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str10, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str18, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str23, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str28, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str32, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(anyBuilder36);
        org.junit.Assert.assertNotNull(matcherRefBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MathcerRefBuilder: null" + "'", str44, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(builderArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(abstractBuilder50);
        org.junit.Assert.assertNotNull(copyrightBuilder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str52, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(abstractBuilder53);
        org.junit.Assert.assertNotNull(copyrightBuilder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Copyright Builder: s:null e:64868 o:null" + "'", str56, "Copyright Builder: s:null e:64868 o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder58);
    }

    @Test
    public void test06828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06828");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter6 = reportConfiguration1.getDirectoryFilter();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet7 = null;
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        java.io.FilenameFilter filenameFilter10 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet12 = reportConfiguration9.getLicenses(licenseFilter11);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders13 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration9.setAddLicenseHeaders(addLicenseHeaders13);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter18);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter18);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        java.io.FilenameFilter filenameFilter23 = reportConfiguration22.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet25 = reportConfiguration22.getLicenses(licenseFilter24);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders26 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration22.setAddLicenseHeaders(addLicenseHeaders26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter31);
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter31);
        java.io.FilenameFilter filenameFilter35 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        java.io.FilenameFilter filenameFilter38 = reportConfiguration37.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet40 = reportConfiguration37.getLicenses(licenseFilter39);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders41 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration37.setAddLicenseHeaders(addLicenseHeaders41);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic45 = org.apache.rat.Reporter.report(reportConfiguration44);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter46 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration44, licenseFilter46);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter46);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        java.io.FilenameFilter filenameFilter51 = reportConfiguration50.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet53 = reportConfiguration50.getLicenses(licenseFilter52);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders54 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration50.setAddLicenseHeaders(addLicenseHeaders54);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic58 = org.apache.rat.Reporter.report(reportConfiguration57);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter59 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration57, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter59);
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter59);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet63 = reportConfiguration9.getLicenses(licenseFilter59);
        boolean boolean64 = reportConfiguration9.isAddingLicensesForced();
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.utils.ReportingSet.Options options71 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration69.licenseDuplicateOption(options71);
        reportConfiguration66.familyDuplicateOption(options71);
        reportConfiguration9.familyDuplicateOption(options71);
        java.util.SortedSet<java.lang.String> strSet75 = reportConfiguration9.getApprovedLicenseCategories();
        java.lang.String[] strArray81 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet82 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet82, strArray81);
        boolean boolean85 = strSet82.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean87 = strSet82.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction88 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet89 = strSet82.setMsgFormat(strFunction88);
        java.lang.String str90 = strSet82.last();
        reportConfiguration9.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet82);
        java.util.Comparator<? super java.lang.String> wildcardComparator92 = strSet82.comparator();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory93 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet7, (java.util.Collection<java.lang.String>) strSet82);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter94 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        java.util.SortedSet<java.lang.String> strSet95 = licenseSetFactory93.getLicenseFamilyIds(licenseFilter94);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet95);
        reportConfiguration1.setCopyrightMessage("39949991-7CB5-42BE-94B9-09B65E9FD8F9");
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(iOFileFilter6);
        org.junit.Assert.assertNull(filenameFilter10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet12);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders13 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders13.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet25);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders26 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders26.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter35);
        org.junit.Assert.assertNull(filenameFilter38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet40);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders41 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders41.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic45);
        org.junit.Assert.assertTrue("'" + licenseFilter46 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter46.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet53);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders54 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders54.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic58);
        org.junit.Assert.assertTrue("'" + licenseFilter59 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter59.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + options71 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options71.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str90, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNull(wildcardComparator92);
        org.junit.Assert.assertTrue("'" + licenseFilter94 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter94.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(strSet95);
    }

    @Test
    public void test06829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06829");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter1 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.fromText("468725e6-3745-47e3-807f-06bc0b3c3beb");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.rat.license.LicenseSetFactory.LicenseFilter.468725e6-3745-47e3-807f-06bc0b3c3beb");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06830");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyName();
        fullTextMatchingLicense0.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense0.setLicenseFamilyCategory("TMF");
        fullTextMatchingLicense0.setFullText("W3C  ");
        java.lang.String str11 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setLicenseFamilyCategory("http://org/apache/rat/meta-data#ApprovedLicense");
        org.apache.rat.license.ILicense.Builder builder14 = fullTextMatchingLicense0.getLicense();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "TMF" + "'", str11, "TMF");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test06831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06831");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        boolean boolean2 = metaData0.clear("MANIFEST.MF");
        metaData0.clear();
        org.apache.rat.api.MetaData.Datum datum4 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_GPL1;
        java.lang.String str5 = datum4.getValue();
        metaData0.set(datum4);
        org.apache.rat.api.MetaData metaData7 = new org.apache.rat.api.MetaData();
        java.lang.String str9 = metaData7.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str11 = metaData7.value("W3C Document Copyright");
        boolean boolean13 = metaData7.clear("hi!");
        java.lang.String str15 = metaData7.value("true");
        org.apache.rat.api.MetaData.Datum datum17 = metaData7.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum19 = metaData7.get("http:");
        org.apache.rat.api.MetaData.Datum datum20 = org.apache.rat.api.MetaData.RAT_APPROVED_LICENSE_DATIM_TRUE;
        metaData7.add(datum20);
        java.lang.String str22 = datum20.toString();
        metaData0.add(datum20);
        boolean boolean25 = metaData0.clear("org/a");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(datum4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GPL1 " + "'", str5, "GPL1 ");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(datum17);
        org.junit.Assert.assertNull(datum19);
        org.junit.Assert.assertNotNull(datum20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='true ']" + "'", str22, "Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='true ']");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test06832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06832");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.license.ILicenseFamily iLicenseFamily6 = null;
        reportConfiguration2.addFamily(iLicenseFamily6);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter8 = reportConfiguration2.getDirectoryFilter();
        reportConfiguration2.addApprovedLicenseCategory("GPL1 ");
        java.io.FilenameFilter filenameFilter11 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier14 = reportConfiguration13.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter15 = reportConfiguration13.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter16 = iOFileFilter15.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter17 = iOFileFilter15.negate();
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        org.apache.rat.utils.ReportingSet.Options options20 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration19.licenseDuplicateOption(options20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier51 = reportConfiguration50.getOutput();
        reportConfiguration23.setOut(outputStreamIOSupplier51);
        org.apache.rat.utils.Log.Level level53 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration23.logLicenseCollisions(level53);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter55 = reportConfiguration23.getDirectoryFilter();
        reportConfiguration19.setInputFileFilter((java.io.FilenameFilter) iOFileFilter55);
        java.nio.file.Path path57 = null;
        boolean boolean58 = iOFileFilter55.matches(path57);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter59 = iOFileFilter55.negate();
        java.nio.file.Path path60 = null;
        boolean boolean61 = iOFileFilter55.matches(path60);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter62 = iOFileFilter55.negate();
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic68 = org.apache.rat.Reporter.report(reportConfiguration67);
        org.apache.rat.utils.ReportingSet.Options options69 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration67.licenseDuplicateOption(options69);
        reportConfiguration64.familyDuplicateOption(options69);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier72 = reportConfiguration64.getWriter();
        boolean boolean73 = reportConfiguration64.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter74 = reportConfiguration64.getInputFileFilter();
        java.io.FilenameFilter filenameFilter75 = reportConfiguration64.getInputFileFilter();
        boolean boolean76 = reportConfiguration64.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier77 = reportConfiguration64.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter78 = reportConfiguration64.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter79 = reportConfiguration64.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter80 = iOFileFilter55.and(iOFileFilter79);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter81 = iOFileFilter15.or(iOFileFilter80);
        reportConfiguration2.addDirectoryFilter(iOFileFilter15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker83 = new org.apache.rat.walker.DirectoryWalker(file0, iOFileFilter15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertNotNull(iOFileFilter8);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier14);
        org.junit.Assert.assertNotNull(iOFileFilter15);
        org.junit.Assert.assertNotNull(iOFileFilter16);
        org.junit.Assert.assertNotNull(iOFileFilter17);
        org.junit.Assert.assertTrue("'" + options20 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options20.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier51);
        org.junit.Assert.assertTrue("'" + level53 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level53.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(iOFileFilter59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(iOFileFilter62);
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertNull(claimStatistic68);
        org.junit.Assert.assertTrue("'" + options69 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options69.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(filenameFilter74);
        org.junit.Assert.assertNull(filenameFilter75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier77);
        org.junit.Assert.assertNotNull(iOFileFilter78);
        org.junit.Assert.assertNotNull(iOFileFilter79);
        org.junit.Assert.assertNotNull(iOFileFilter80);
        org.junit.Assert.assertNotNull(iOFileFilter81);
    }

    @Test
    public void test06833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06833");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        strSet6.clear();
        strSet6.clear();
        java.util.Comparator<? super java.lang.String> wildcardComparator13 = strSet6.comparator();
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder15 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder16 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean17 = matcherRefBuilder16.hasId();
        java.lang.String str18 = matcherRefBuilder16.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder20 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str21 = notBuilder20.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean23 = matcherRefBuilder22.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap24 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder25 = matcherRefBuilder22.setMatchers(strMap24);
        org.apache.rat.configuration.builders.AllBuilder allBuilder26 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder29 = copyrightBuilder27.setStart("OASIS");
        java.lang.String str30 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder32 = copyrightBuilder27.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean34 = matcherRefBuilder33.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder37 = copyrightBuilder35.setStart("OASIS");
        java.lang.String str38 = copyrightBuilder35.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder40 = copyrightBuilder35.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str43 = copyrightBuilder42.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder45 = copyrightBuilder42.setEnd(".cvsignore");
        boolean boolean46 = copyrightBuilder42.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str48 = copyrightBuilder47.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder50 = copyrightBuilder47.setEnd(".cvsignore");
        boolean boolean51 = copyrightBuilder47.hasId();
        java.lang.String str52 = copyrightBuilder47.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder53 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder55 = copyrightBuilder53.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder56 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean58 = matcherRefBuilder57.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap59 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder60 = matcherRefBuilder57.setMatchers(strMap59);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder61 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder62 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean63 = matcherRefBuilder62.hasId();
        java.lang.String str64 = matcherRefBuilder62.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap65 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder66 = matcherRefBuilder62.setMatchers(strMap65);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray67 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder22, allBuilder26, copyrightBuilder32, matcherRefBuilder33, copyrightBuilder35, copyrightBuilder41, copyrightBuilder42, copyrightBuilder47, copyrightBuilder53, anyBuilder56, matcherRefBuilder57, copyrightBuilder61, matcherRefBuilder62 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList68 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList68, builderArray67);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder70 = notBuilder20.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList68);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder71 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray72 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder16, anyBuilder19, notBuilder20, matcherRefBuilder71 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList73 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList73, builderArray72);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder75 = allBuilder15.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList73);
        defaultLog14.info((java.lang.Object) allBuilder15);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender78 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog14, "true");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender80 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog14, "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher83 = new org.apache.rat.analysis.matchers.FullTextMatcher("notice");
        boolean boolean85 = fullTextMatcher83.doMatch("2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher86 = new org.apache.rat.analysis.matchers.NotMatcher("notice", (org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher83);
        defaultLog14.debug((java.lang.Object) "notice");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet88 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog14);
        boolean boolean90 = strSet88.addIfNotPresent("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        boolean boolean92 = strSet88.addIfNotPresent("TextBuilder: EBC30EB7B3EA4F39BAEA...");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNull(wildcardComparator13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNotNull(matcherRefBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MathcerRefBuilder: null" + "'", str18, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NotBuilder: null" + "'", str21, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder25);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str30, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder32);
        org.junit.Assert.assertNotNull(matcherRefBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(copyrightBuilder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str38, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(copyrightBuilder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str43, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str48, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str52, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder53);
        org.junit.Assert.assertNotNull(copyrightBuilder55);
        org.junit.Assert.assertNotNull(anyBuilder56);
        org.junit.Assert.assertNotNull(matcherRefBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder60);
        org.junit.Assert.assertNotNull(copyrightBuilder61);
        org.junit.Assert.assertNotNull(matcherRefBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "MathcerRefBuilder: null" + "'", str64, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder66);
        org.junit.Assert.assertNotNull(builderArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(abstractBuilder70);
        org.junit.Assert.assertNotNull(builderArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(abstractBuilder75);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test06834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06834");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet6.spliterator();
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        defaultLog26.setLevel(level31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration48.getLicenses(licenseFilter50);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders52 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration48.setAddLicenseHeaders(addLicenseHeaders52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter57);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier63 = reportConfiguration62.getOutput();
        reportConfiguration35.setOut(outputStreamIOSupplier63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.utils.ReportingSet.Options options71 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration69.licenseDuplicateOption(options71);
        reportConfiguration66.familyDuplicateOption(options71);
        reportConfiguration35.licenseDuplicateOption(options71);
        reportConfiguration35.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logLicenseCollisions(level81);
        reportConfiguration35.logLicenseCollisions(level81);
        defaultLog26.log(level81, "GNU General Public License, version 1");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog26);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet88 = strSet6.tailSet("Copyright Builder: s:null e:W3C Software Copyright o:null");
        java.lang.String str89 = strSet6.last();
        java.lang.String str90 = strSet6.last();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet93 = strSet6.subSet("223f0aba-15d4-49e9-901e-5740c137aebf", "http://org/apache/rat/meta-data#FileCategory");
        java.util.stream.Stream<java.lang.String> strStream94 = strSet93.parallelStream();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders52 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders52.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier63);
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + options71 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options71.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str89, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str90, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertNotNull(strStream94);
    }

    @Test
    public void test06835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06835");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder6 = builder0.add("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder7 = builder6.noDefault();
        org.apache.rat.Defaults.Builder builder9 = builder6.remove("RegexBuilder: b1db9857-a506-44af-b49f-cf1fc4c885c7");
        java.io.File file10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder11 = builder6.remove(file10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test06836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06836");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        reportConfiguration12.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level15 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration12.logFamilyCollisions(level15);
        reportConfiguration1.logLicenseCollisions(level15);
        boolean boolean18 = reportConfiguration1.isAddingLicenses();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder19 = new org.apache.rat.license.ILicenseFamilyBuilder();
        org.apache.rat.license.ILicenseFamily.Builder builder21 = iLicenseFamilyBuilder19.setLicenseFamilyCategory("Modified BSD License");
        org.apache.rat.license.ILicenseFamily.Builder builder23 = iLicenseFamilyBuilder19.setLicenseFamilyCategory("6486879f-fc81-4b57-aec7-c4c77d540c30");
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.addFamily((org.apache.rat.license.ILicenseFamily.Builder) iLicenseFamilyBuilder19);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Name must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + level15 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level15.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test06837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06837");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder2.setMatchers(strMap4);
        org.apache.rat.configuration.builders.AllBuilder allBuilder6 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setStart("OASIS");
        java.lang.String str10 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder15.setStart("OASIS");
        java.lang.String str18 = copyrightBuilder15.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder15.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str23 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = copyrightBuilder22.setEnd(".cvsignore");
        boolean boolean26 = copyrightBuilder22.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str28 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder27.setEnd(".cvsignore");
        boolean boolean31 = copyrightBuilder27.hasId();
        java.lang.String str32 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean38 = matcherRefBuilder37.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap39 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = matcherRefBuilder37.setMatchers(strMap39);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.lang.String str44 = matcherRefBuilder42.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder42.setMatchers(strMap45);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray47 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, allBuilder6, copyrightBuilder12, matcherRefBuilder13, copyrightBuilder15, copyrightBuilder21, copyrightBuilder22, copyrightBuilder27, copyrightBuilder33, anyBuilder36, matcherRefBuilder37, copyrightBuilder41, matcherRefBuilder42 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList48 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48, builderArray47);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder50 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48);
        java.lang.String str51 = notBuilder0.toString();
        java.lang.String str52 = notBuilder0.toString();
        java.lang.String str53 = notBuilder0.toString();
        java.lang.String str54 = notBuilder0.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder0.setId("Datum [ name ='021187d7-27c2-4fd9-bc74-8cc00413ee52',value ='094643d4-94c6-478a-b861-15e14bd2e656 ']");
        java.lang.String str57 = notBuilder0.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher58 = notBuilder0.build();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: 'not' type matcher requires one and only one enclosed matcher");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str10, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str18, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str23, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str28, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str32, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(anyBuilder36);
        org.junit.Assert.assertNotNull(matcherRefBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MathcerRefBuilder: null" + "'", str44, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(builderArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(abstractBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str51, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str52, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str53, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str54, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str57, "NotBuilder: MathcerRefBuilder: null");
    }

    @Test
    public void test06838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06838");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter3 = xmlWriter1.closeDocument();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06839");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isBinaryData("4f2f2825-1206-4c8c-8ea6-bc601862dd41");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test06840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06840");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        java.net.URL uRL3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder4 = builder0.remove(uRL3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test06841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06841");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.ReportingSet.Options options52 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options52);
        reportConfiguration47.familyDuplicateOption(options52);
        reportConfiguration16.licenseDuplicateOption(options52);
        reportConfiguration16.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration16.logLicenseCollisions(level62);
        defaultLog14.setLevel(level62);
        defaultLog14.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog14);
        org.apache.rat.utils.DefaultLog defaultLog69 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logFamilyCollisions(level74);
        defaultLog69.setLevel(level74);
        defaultLog14.debug((java.lang.Object) level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet13.setLogLevel(level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet80 = strSet13.headSet("binary");
        java.lang.String str81 = strSet80.last();
        strSet80.clear();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + options52 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options52.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog69);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "The MIT License" + "'", str81, "The MIT License");
    }

    @Test
    public void test06842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06842");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("");
        org.apache.rat.Defaults.Builder builder10 = builder8.remove("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.Defaults.Builder builder12 = builder8.remove("8F0EE536-38AE-476A-A728-DE95E24C13C3");
        java.io.File file13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder14 = builder8.add(file13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test06843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06843");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = org.apache.rat.analysis.IHeaderMatcher.Builder.all();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList2 = allBuilder1.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = allBuilder1.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList4 = allBuilder1.getChildren();
        java.lang.Object obj5 = toNameTransformer0.transform((java.lang.Object) allBuilder1);
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic8 = org.apache.rat.Reporter.report(reportConfiguration7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.utils.ReportingSet.Options options12 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration10.licenseDuplicateOption(options12);
        reportConfiguration7.familyDuplicateOption(options12);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier15 = reportConfiguration7.getWriter();
        boolean boolean16 = reportConfiguration7.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter17 = reportConfiguration7.getInputFileFilter();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier18 = reportConfiguration7.getStyleSheet();
        java.util.SortedSet<java.lang.String> strSet19 = reportConfiguration7.getApprovedLicenseCategories();
        java.lang.Object obj20 = toNameTransformer0.transform((java.lang.Object) reportConfiguration7);
        java.net.URI uRI21 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration7.setStyleSheet(uRI21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(allBuilder1);
        org.junit.Assert.assertNotNull(iHeaderMatcherList2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(iHeaderMatcherList4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(claimStatistic8);
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + options12 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options12.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertNull(inputStreamIOSupplier18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test06844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06844");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder5 = builder0.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.Defaults.Builder builder7 = builder0.remove("1e96b21e-f913-4d52-87cc-09323c460281");
        org.apache.rat.Defaults.Builder builder9 = builder7.add("262e4d9a-7f34-451e-9555-016ae8446cbb");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test06845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06845");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str8 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder10 = iLicenseFamilyBuilder0.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily.Builder builder12 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("8f82a952-5bfd-446b-ac79-15beef5b3f17");
        org.apache.rat.license.ILicenseFamily.Builder builder14 = iLicenseFamilyBuilder0.setLicenseFamilyName("DOJO ");
        java.lang.String str15 = builder14.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MIT  " + "'", str8, "MIT  ");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "8f82a952-5bfd-446b-ac79-15beef5b3f17" + "'", str15, "8f82a952-5bfd-446b-ac79-15beef5b3f17");
    }

    @Test
    public void test06846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06846");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders7 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration3.setAddLicenseHeaders(addLicenseHeaders7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter12);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter12);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter25);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier31 = reportConfiguration30.getOutput();
        reportConfiguration3.setOut(outputStreamIOSupplier31);
        org.apache.rat.utils.Log.Level level33 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration3.logLicenseCollisions(level33);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter35 = reportConfiguration3.getDirectoryFilter();
        java.nio.file.Path path36 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes37 = null;
        java.nio.file.FileVisitResult fileVisitResult38 = iOFileFilter35.accept(path36, basicFileAttributes37);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter39 = iOFileFilter35.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter40 = iOFileFilter39.negate();
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.utils.ReportingSet.Options options44 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration42.licenseDuplicateOption(options44);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter46 = reportConfiguration42.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter47 = iOFileFilter39.and(iOFileFilter46);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker48 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders7 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders7.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier31);
        org.junit.Assert.assertTrue("'" + level33 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level33.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter35);
        org.junit.Assert.assertTrue("'" + fileVisitResult38 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult38.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter39);
        org.junit.Assert.assertNotNull(iOFileFilter40);
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + options44 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options44.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iOFileFilter46);
        org.junit.Assert.assertNotNull(iOFileFilter47);
    }

    @Test
    public void test06847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06847");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("f5f3fb9b-540a-43ef-a018-8ce5779e23f4");
    }

    @Test
    public void test06848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06848");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        org.apache.rat.license.ILicense iLicense4 = null;
        reportConfiguration1.addLicense(iLicense4);
        org.apache.rat.Defaults.Builder builder6 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults7 = builder6.build();
        reportConfiguration1.setFrom(defaults7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray11 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList12 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList12, iLicenseFamilyArray11);
        reportConfiguration10.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList12);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense15 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense15.setLicenseFamilyName("hi!");
        java.lang.String str18 = fullTextMatchingLicense15.getLicenseFamilyCategory();
        java.lang.String str19 = fullTextMatchingLicense15.getLicenseFamilyName();
        fullTextMatchingLicense15.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense15.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily24 = fullTextMatchingLicense15.getLicenseFamily();
        reportConfiguration10.addFamily(iLicenseFamily24);
        java.lang.String str26 = iLicenseFamily24.getFamilyName();
        java.lang.String str27 = iLicenseFamily24.getFamilyName();
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily24);
        java.lang.String str29 = iLicenseFamily24.getFamilyName();
        java.lang.String str30 = iLicenseFamily24.getFamilyCategory();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(defaults7);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "SpdxBuilder: null" + "'", str26, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "SpdxBuilder: null" + "'", str27, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "SpdxBuilder: null" + "'", str29, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "TMF  " + "'", str30, "TMF  ");
    }

    @Test
    public void test06849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06849");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        boolean boolean2 = matcherRefBuilder0.hasId();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder4 = matcherRefBuilder0.setRefId("");
        java.lang.String str5 = matcherRefBuilder0.toString();
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MathcerRefBuilder: " + "'", str5, "MathcerRefBuilder: ");
    }

    @Test
    public void test06850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06850");
        java.util.regex.Pattern pattern0 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher1 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher(pattern0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = simpleRegexMatcher1.doMatch("MathcerRefBuilder: RegexBuilder: null");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06851");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        java.lang.String[] strArray72 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet73 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        boolean boolean76 = strSet73.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor77 = strSet73.iterator();
        java.lang.Object[] objArray78 = strSet73.toArray();
        org.apache.rat.utils.ReportingSet.Options options79 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet80 = strSet73.setDuplicateOption(options79);
        boolean boolean82 = strSet80.add("bd015714-405b-4304-9faa-36efad80e6e6 GEN  ");
        java.lang.String str83 = strSet80.last();
        java.lang.String str84 = strSet80.last();
        reportConfiguration66.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet80);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier86 = reportConfiguration66.getOutput();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strItor77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str83, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str84, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(outputStreamIOSupplier86);
    }

    @Test
    public void test06852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06852");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("binary", "");
        java.lang.String str3 = datum2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "binary" + "'", str3, "binary");
    }

    @Test
    public void test06853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06853");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        claimStatistic0.setNumUnknown((int) '#');
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = claimStatistic0.getLicenseFileNameMap();
        claimStatistic0.setNumApproved(256);
        int int8 = claimStatistic0.getNumUnApproved();
        claimStatistic0.setNumUnknown((-12));
        org.junit.Assert.assertNull(strMap5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test06854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06854");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap3);
        int int5 = claimStatistic0.getNumUnknown();
        claimStatistic0.setNumUnApproved((int) (byte) 100);
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getLicenseFileNameMap();
        int int9 = claimStatistic0.getNumApproved();
        claimStatistic0.setNumGenerated((int) ' ');
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test06855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06855");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier2 = reportConfiguration1.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter3 = reportConfiguration1.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter4 = iOFileFilter3.negate();
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier7 = reportConfiguration6.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter8 = reportConfiguration6.getDirectoryFilter();
        java.nio.file.Path path9 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes10 = null;
        java.nio.file.FileVisitResult fileVisitResult11 = iOFileFilter8.accept(path9, basicFileAttributes10);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration13.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet16 = reportConfiguration13.getLicenses(licenseFilter15);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders17 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration13.setAddLicenseHeaders(addLicenseHeaders17);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic21 = org.apache.rat.Reporter.report(reportConfiguration20);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter22);
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter22);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration26.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet29 = reportConfiguration26.getLicenses(licenseFilter28);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders30 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration26.setAddLicenseHeaders(addLicenseHeaders30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter35);
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter35);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier41 = reportConfiguration40.getOutput();
        reportConfiguration13.setOut(outputStreamIOSupplier41);
        org.apache.rat.utils.Log.Level level43 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration13.logLicenseCollisions(level43);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter45 = reportConfiguration13.getDirectoryFilter();
        java.nio.file.Path path46 = null;
        boolean boolean47 = iOFileFilter45.matches(path46);
        java.nio.file.Path path48 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes49 = null;
        java.nio.file.FileVisitResult fileVisitResult50 = iOFileFilter45.accept(path48, basicFileAttributes49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        java.io.FilenameFilter filenameFilter53 = reportConfiguration52.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration52.getLicenses(licenseFilter54);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders56 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration52.setAddLicenseHeaders(addLicenseHeaders56);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic60 = org.apache.rat.Reporter.report(reportConfiguration59);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter61 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter61);
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter61);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        java.io.FilenameFilter filenameFilter66 = reportConfiguration65.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter67 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet68 = reportConfiguration65.getLicenses(licenseFilter67);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders69 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration65.setAddLicenseHeaders(addLicenseHeaders69);
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic73 = org.apache.rat.Reporter.report(reportConfiguration72);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter74 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration72, licenseFilter74);
        org.apache.rat.Reporter.listLicenses(reportConfiguration65, licenseFilter74);
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter74);
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier80 = reportConfiguration79.getOutput();
        reportConfiguration52.setOut(outputStreamIOSupplier80);
        org.apache.rat.utils.Log.Level level82 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration52.logLicenseCollisions(level82);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter84 = reportConfiguration52.getDirectoryFilter();
        java.nio.file.Path path85 = null;
        boolean boolean86 = iOFileFilter84.matches(path85);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter87 = iOFileFilter45.and(iOFileFilter84);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter88 = iOFileFilter8.and(iOFileFilter45);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter89 = iOFileFilter4.and(iOFileFilter45);
        java.nio.file.Path path90 = null;
        boolean boolean91 = iOFileFilter45.matches(path90);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier2);
        org.junit.Assert.assertNotNull(iOFileFilter3);
        org.junit.Assert.assertNotNull(iOFileFilter4);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier7);
        org.junit.Assert.assertNotNull(iOFileFilter8);
        org.junit.Assert.assertTrue("'" + fileVisitResult11 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult11.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet16);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders17 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders17.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet29);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders30 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders30.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier41);
        org.junit.Assert.assertTrue("'" + level43 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level43.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult50 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult50.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNull(filenameFilter53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders56 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders56.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic60);
        org.junit.Assert.assertTrue("'" + licenseFilter61 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter61.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter66);
        org.junit.Assert.assertTrue("'" + licenseFilter67 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter67.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet68);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders69 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders69.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic73);
        org.junit.Assert.assertTrue("'" + licenseFilter74 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter74.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier80);
        org.junit.Assert.assertTrue("'" + level82 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level82.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(iOFileFilter87);
        org.junit.Assert.assertNotNull(iOFileFilter88);
        org.junit.Assert.assertNotNull(iOFileFilter89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test06856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06856");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense3 = null;
        reportConfiguration1.addLicense(iLicense3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier7 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier7);
        reportConfiguration1.removeApprovedLicenseCategory("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.lang.String[] strArray16 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        boolean boolean20 = strSet17.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean22 = strSet17.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet17.setMsgFormat(strFunction23);
        java.lang.String str25 = strSet24.first();
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet24);
        reportConfiguration1.setStyleReport(true);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        java.io.FilenameFilter filenameFilter31 = reportConfiguration30.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration30.getLicenses(licenseFilter32);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders34 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration30.setAddLicenseHeaders(addLicenseHeaders34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter39 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration37, licenseFilter39);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter39);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration43.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet46 = reportConfiguration43.getLicenses(licenseFilter45);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders47 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration43.setAddLicenseHeaders(addLicenseHeaders47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter52 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration50, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter52);
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter52);
        org.apache.rat.utils.Log log56 = null;
        org.apache.rat.ReportConfiguration reportConfiguration57 = new org.apache.rat.ReportConfiguration(log56);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier58 = reportConfiguration57.getOutput();
        reportConfiguration30.setOut(outputStreamIOSupplier58);
        boolean boolean60 = reportConfiguration30.isStyleReport();
        boolean boolean61 = reportConfiguration30.isStyleReport();
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        reportConfiguration63.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level66 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration63.logLicenseCollisions(level66);
        reportConfiguration30.logLicenseCollisions(level66);
        reportConfiguration30.setCopyrightMessage("TMF  ");
        java.lang.String str71 = reportConfiguration30.getCopyrightMessage();
        org.apache.rat.utils.ReportingSet.Options options72 = org.apache.rat.utils.ReportingSet.Options.FAIL;
        reportConfiguration30.licenseDuplicateOption(options72);
        reportConfiguration1.familyDuplicateOption(options72);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier7);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AllBuilder:" + "'", str25, "AllBuilder:");
        org.junit.Assert.assertNull(filenameFilter31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders34 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders34.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + licenseFilter39 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter39.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet46);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders47 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders47.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + licenseFilter52 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter52.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + level66 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level66.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "TMF  " + "'", str71, "TMF  ");
        org.junit.Assert.assertTrue("'" + options72 + "' != '" + org.apache.rat.utils.ReportingSet.Options.FAIL + "'", options72.equals(org.apache.rat.utils.ReportingSet.Options.FAIL));
    }

    @Test
    public void test06857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06857");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        reportConfiguration3.logFamilyCollisions(level16);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder20 = builder19.noDefault();
        defaultLog0.log(level16, (java.lang.Object) builder19);
        org.apache.rat.Defaults.Builder builder22 = builder19.noDefault();
        java.net.URL uRL23 = null;
        org.apache.rat.Defaults.Builder builder24 = builder22.remove(uRL23);
        java.net.URL uRL25 = null;
        org.apache.rat.Defaults.Builder builder26 = builder24.remove(uRL25);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test06858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06858");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection7 = metaData0.getData();
        metaData0.clear();
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("archive null");
        metaData0.clear();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(datumCollection7);
        org.junit.Assert.assertNull(datum10);
    }

    @Test
    public void test06859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06859");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        reportConfiguration1.addApprovedLicenseCategory("W3C Software Copyright");
        org.apache.rat.report.IReportable iReportable15 = null;
        reportConfiguration1.setReportable(iReportable15);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter17 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.addDirectoryFilter(iOFileFilter17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: fileFilter");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
    }

    @Test
    public void test06860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06860");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("GNU General Public License, version 3");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher2 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher1);
        org.apache.rat.analysis.IHeaderMatcher.State state3 = simpleTextMatcher1.finalizeState();
        org.apache.rat.analysis.IHeaderMatcher.State state4 = simpleTextMatcher1.currentState();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test06861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06861");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("67cdaeae-343d-464a-9d9f-0986d3bc6047");
    }

    @Test
    public void test06862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06862");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        org.apache.rat.report.IReportable iReportable10 = null;
        reportConfiguration1.setReportable(iReportable10);
        org.apache.rat.report.IReportable iReportable12 = null;
        reportConfiguration1.setReportable(iReportable12);
        org.apache.rat.report.IReportable iReportable14 = reportConfiguration1.getReportable();
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration16.getInputFileFilter();
        reportConfiguration16.setStyleReport(false);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier45 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration16.setStyleSheet(inputStreamIOSupplier45);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier45);
        reportConfiguration1.removeApprovedLicenseCategory("b10f6858-059b-420c-94fe-38f2ceac5242");
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertNull(iReportable14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier45);
    }

    @Test
    public void test06863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06863");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter3 = xmlWriter1.content((java.lang.CharSequence) "6775cc37-fac3-412f-80b3-c5b5059caea9");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: An element must be opened before content can be written.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06864");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration1.logLicenseCollisions(level31);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter33 = reportConfiguration1.getDirectoryFilter();
        java.nio.file.Path path34 = null;
        boolean boolean35 = iOFileFilter33.matches(path34);
        java.nio.file.Path path36 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes37 = null;
        java.nio.file.FileVisitResult fileVisitResult38 = iOFileFilter33.accept(path36, basicFileAttributes37);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter39 = iOFileFilter33.negate();
        java.nio.file.Path path40 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes41 = null;
        java.nio.file.FileVisitResult fileVisitResult42 = iOFileFilter33.accept(path40, basicFileAttributes41);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter43 = iOFileFilter33.negate();
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic46 = org.apache.rat.Reporter.report(reportConfiguration45);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier47 = reportConfiguration45.getStyleSheet();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense48 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense48.setLicenseFamilyName("hi!");
        java.lang.String str51 = fullTextMatchingLicense48.getLicenseFamilyCategory();
        java.lang.String str52 = fullTextMatchingLicense48.getLicenseFamilyName();
        fullTextMatchingLicense48.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense48.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily57 = fullTextMatchingLicense48.getLicenseFamily();
        java.lang.String str58 = iLicenseFamily57.getFamilyName();
        java.lang.String str59 = iLicenseFamily57.getFamilyName();
        reportConfiguration45.addApprovedLicenseCategory(iLicenseFamily57);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.utils.ReportingSet.Options options67 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration65.licenseDuplicateOption(options67);
        reportConfiguration62.familyDuplicateOption(options67);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier70 = reportConfiguration62.getWriter();
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        reportConfiguration72.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level75 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration72.logFamilyCollisions(level75);
        reportConfiguration62.logFamilyCollisions(level75);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter78 = reportConfiguration62.getDirectoryFilter();
        reportConfiguration45.addDirectoryFilter(iOFileFilter78);
        java.nio.file.Path path80 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes81 = null;
        java.nio.file.FileVisitResult fileVisitResult82 = iOFileFilter78.accept(path80, basicFileAttributes81);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter83 = iOFileFilter43.or(iOFileFilter78);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level31.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + fileVisitResult38 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult38.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter39);
        org.junit.Assert.assertTrue("'" + fileVisitResult42 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult42.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter43);
        org.junit.Assert.assertNull(claimStatistic46);
        org.junit.Assert.assertNull(inputStreamIOSupplier47);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "SpdxBuilder: null" + "'", str58, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "SpdxBuilder: null" + "'", str59, "SpdxBuilder: null");
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertTrue("'" + options67 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options67.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier70);
        org.junit.Assert.assertTrue("'" + level75 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level75.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(iOFileFilter78);
        org.junit.Assert.assertTrue("'" + fileVisitResult82 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult82.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter83);
    }

    @Test
    public void test06865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06865");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("notice");
        boolean boolean4 = fullTextMatcher2.doMatch("2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher5 = new org.apache.rat.analysis.matchers.NotMatcher("notice", (org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        org.apache.rat.analysis.IHeaderMatcher.State state6 = fullTextMatcher2.currentState();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test06866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06866");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender64 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "true");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder65 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str66 = copyrightBuilder65.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder68 = copyrightBuilder65.setEnd(".cvsignore");
        boolean boolean69 = copyrightBuilder65.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder71 = copyrightBuilder65.setEnd("notice");
        defaultLog0.debug((java.lang.Object) "notice");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender73 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender75 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "2953e6cb-20a5-4dcf-a9f5-85c51cc8c635");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder76 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder78 = copyrightBuilder76.setStart("OASIS");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher79 = copyrightBuilder76.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder81 = copyrightBuilder76.setStart(".cvsignore");
        defaultLog0.error((java.lang.Object) copyrightBuilder76);
        java.io.Writer writer83 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter84 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer83);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter85 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter84);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter86 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter84);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter87 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter84);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter88 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter84);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter89 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter84);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter90 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter84);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter91 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter84);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter92 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter84);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter93 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter84);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter94 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter84);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter95 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter84);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter96 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter84);
        java.lang.Throwable throwable97 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.debug((java.lang.Object) simpleXmlClaimReporter96, throwable97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertNotNull(copyrightBuilder65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str66, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder71);
        org.junit.Assert.assertNotNull(copyrightBuilder76);
        org.junit.Assert.assertNotNull(copyrightBuilder78);
        org.junit.Assert.assertNotNull(iHeaderMatcher79);
        org.junit.Assert.assertNotNull(copyrightBuilder81);
    }

    @Test
    public void test06867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06867");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.license.ILicense.Builder builder8 = builder6.setName("GPL3 ");
        org.apache.rat.license.ILicense.Builder builder10 = builder6.setName("?????");
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setName("GNU GENERAL PUBLIC LICENSE, VERSION 2");
        org.apache.rat.license.ILicense.Builder builder14 = builder10.setId("ANYBUILDER:");
        org.apache.rat.license.ILicense.Builder builder16 = builder10.setNotes("03F7B314-6887-4617-9C7E-BF1600B331CD");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher17 = null;
        org.apache.rat.license.ILicense.Builder builder18 = builder10.setMatcher(iHeaderMatcher17);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test06868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06868");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("");
        org.apache.rat.Defaults.Builder builder9 = builder6.noDefault();
        org.apache.rat.Defaults.Builder builder11 = builder6.remove("null http://org/apache/rat/meta-data");
        org.apache.rat.Defaults.Builder builder12 = builder11.noDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults defaults13 = builder11.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: /home/mopuser/workspace/creadur-rat/%3F%3F%3F%3F%3F");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test06869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06869");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        reportConfiguration1.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable30 = null;
        reportConfiguration1.setReportable(iReportable30);
        org.apache.rat.Defaults.Builder builder33 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults34 = builder33.build();
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = reportConfiguration49.getLicenses(licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter58);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet61 = reportConfiguration36.getLicenseFamilies(licenseFilter58);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = defaults34.getLicenses(licenseFilter58);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet63 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet62);
        org.apache.rat.license.ILicense iLicense64 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet62);
        reportConfiguration1.addLicense(iLicense64);
        java.lang.String str66 = iLicense64.derivedFrom();
        java.lang.String str67 = iLicense64.getName();
        org.apache.rat.license.ILicenseFamily iLicenseFamily68 = iLicense64.getLicenseFamily();
        iLicense64.reset();
        java.lang.String str70 = iLicense64.getNotes();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(defaults34);
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet61);
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertNotNull(iLicense64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "BSD-3" + "'", str66, "BSD-3");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "The Telemanagement Forum License" + "'", str67, "The Telemanagement Forum License");
        org.junit.Assert.assertNotNull(iLicenseFamily68);
        org.junit.Assert.assertNull(str70);
    }

    @Test
    public void test06870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06870");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumUnApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        claimStatistic0.setNumUnknown((int) ' ');
        int int7 = claimStatistic0.getNumGenerated();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = claimStatistic0.getLicenseFileNameMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap9);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(strMap8);
    }

    @Test
    public void test06871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06871");
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher2 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher(".gitignore", pattern1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = simpleRegexMatcher2.doMatch("http://org/apache/rat/meta-data#ApprovedLicense");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06872");
        org.apache.rat.configuration.builders.TextBuilder textBuilder0 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder2 = textBuilder0.setText("true");
        org.apache.rat.configuration.builders.TextBuilder textBuilder4 = textBuilder2.setText("http://org/apache/rat/meta-data#HeaderSample");
        boolean boolean5 = textBuilder2.hasId();
        org.apache.rat.configuration.builders.TextBuilder textBuilder7 = textBuilder2.setText("97f57b71-8f44-4dda-a148-19f50c572927");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder9 = textBuilder2.setId("2953E6CB-20A5-4DCF-A9F5-85C51CC8C635");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = textBuilder2.build();
        org.junit.Assert.assertNotNull(textBuilder2);
        org.junit.Assert.assertNotNull(textBuilder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(textBuilder7);
        org.junit.Assert.assertNotNull(abstractBuilder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
    }

    @Test
    public void test06873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06873");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection3 = metaData0.getData();
        java.lang.String str5 = metaData0.value("hi!");
        boolean boolean7 = metaData0.clear("6481fb19-38f0-43f5-ab95-caf84a069ee1");
        org.apache.rat.api.MetaData.Datum datum8 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_APACHE_LICENSE_VERSION_2_0;
        metaData0.set(datum8);
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        java.io.FilenameFilter filenameFilter12 = reportConfiguration11.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet14 = reportConfiguration11.getLicenses(licenseFilter13);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders15 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration11.setAddLicenseHeaders(addLicenseHeaders15);
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic19 = org.apache.rat.Reporter.report(reportConfiguration18);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter20);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter20);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        java.io.FilenameFilter filenameFilter25 = reportConfiguration24.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet27 = reportConfiguration24.getLicenses(licenseFilter26);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders28 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration24.setAddLicenseHeaders(addLicenseHeaders28);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic32 = org.apache.rat.Reporter.report(reportConfiguration31);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter33);
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter33);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration11.getInputFileFilter();
        reportConfiguration11.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable40 = null;
        reportConfiguration11.setReportable(iReportable40);
        org.apache.rat.Defaults.Builder builder43 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults44 = builder43.build();
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration46.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = reportConfiguration46.getLicenses(licenseFilter48);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders50 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration46.setAddLicenseHeaders(addLicenseHeaders50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter55);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        java.io.FilenameFilter filenameFilter60 = reportConfiguration59.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter61 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = reportConfiguration59.getLicenses(licenseFilter61);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders63 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration59.setAddLicenseHeaders(addLicenseHeaders63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter68);
        org.apache.rat.Reporter.listLicenses(reportConfiguration59, licenseFilter68);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet71 = reportConfiguration46.getLicenseFamilies(licenseFilter68);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet72 = defaults44.getLicenses(licenseFilter68);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet73 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet72);
        org.apache.rat.license.ILicense iLicense74 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet72);
        reportConfiguration11.addLicense(iLicense74);
        java.lang.String str76 = iLicense74.derivedFrom();
        metaData0.reportOnLicense(iLicense74);
        java.lang.String str78 = iLicense74.derivedFrom();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(datumCollection3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(datum8);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet14);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders15 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders15.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet27);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders28 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders28.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(defaults44);
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders50 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders50.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter60);
        org.junit.Assert.assertTrue("'" + licenseFilter61 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter61.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders63 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders63.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet71);
        org.junit.Assert.assertNotNull(iLicenseSet72);
        org.junit.Assert.assertNotNull(iLicense74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "BSD-3" + "'", str76, "BSD-3");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "BSD-3" + "'", str78, "BSD-3");
    }

    @Test
    public void test06874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06874");
        java.io.File file0 = null;
        java.util.regex.Pattern pattern1 = null;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders7 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration3.setAddLicenseHeaders(addLicenseHeaders7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter12);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter12);
        org.apache.rat.report.IReportable iReportable15 = null;
        reportConfiguration3.setReportable(iReportable15);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter17 = reportConfiguration3.getDirectoryFilter();
        java.nio.file.Path path18 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes19 = null;
        java.nio.file.FileVisitResult fileVisitResult20 = iOFileFilter17.accept(path18, basicFileAttributes19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker21 = new org.apache.rat.walker.DirectoryWalker(file0, pattern1, iOFileFilter17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders7 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders7.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iOFileFilter17);
        org.junit.Assert.assertTrue("'" + fileVisitResult20 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult20.equals(java.nio.file.FileVisitResult.TERMINATE));
    }

    @Test
    public void test06875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06875");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = copyrightBuilder7.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setOwner("TextBuilder: Datum [ name ='http:...");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder14 = copyrightBuilder7.setOwner("PLAIN-RAT.XSL");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher15 = copyrightBuilder14.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(copyrightBuilder14);
        org.junit.Assert.assertNotNull(iHeaderMatcher15);
    }

    @Test
    public void test06876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06876");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        java.io.FilenameFilter filenameFilter28 = reportConfiguration27.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = reportConfiguration27.getLicenses(licenseFilter29);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders31 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration27.setAddLicenseHeaders(addLicenseHeaders31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter36 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration34, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter36);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter36);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier42 = reportConfiguration41.getOutput();
        reportConfiguration14.setOut(outputStreamIOSupplier42);
        org.apache.rat.utils.Log.Level level44 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration14.logLicenseCollisions(level44);
        defaultLog0.warn((java.lang.Object) level44);
        org.apache.rat.utils.Log.Level level47 = defaultLog0.getLevel();
        defaultLog0.warn((java.lang.Object) 0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender51 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender53 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "MathcerRefBuilder: 58515fd1-71f9-42a1-b033-b509624129a7");
        java.io.File file54 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = apacheV2LicenseAppender53.getLicenseHeader(file54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders31 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders31.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertTrue("'" + licenseFilter36 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter36.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier42);
        org.junit.Assert.assertTrue("'" + level44 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level44.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertTrue("'" + level47 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level47.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test06877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06877");
        org.apache.rat.document.ToNameTransformer toNameTransformer0 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder2 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher8 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state9 = copyrightMatcher8.finalizeState();
        org.apache.rat.license.ILicense.Builder builder10 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher8);
        org.apache.rat.license.ILicense.Builder builder12 = builder10.setLicenseFamilyCategory("");
        defaultLog1.error((java.lang.Object) builder12);
        java.lang.Object obj14 = toNameTransformer0.transform((java.lang.Object) defaultLog1);
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog1);
        java.util.regex.Pattern pattern17 = null;
        org.apache.rat.analysis.matchers.SimpleRegexMatcher simpleRegexMatcher18 = new org.apache.rat.analysis.matchers.SimpleRegexMatcher("", pattern17);
        simpleRegexMatcher18.reset();
        java.lang.String str20 = simpleRegexMatcher18.getId();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher21 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleRegexMatcher18);
        simpleRegexMatcher18.reset();
        defaultLog1.info((java.lang.Object) simpleRegexMatcher18);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = simpleRegexMatcher18.doMatch("1179c4df-a201-41fe-a117-cdd63136e455");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(obj14);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "b185ab34-b725-43a1-85b9-892a8a41771a" + "'", str20, "b185ab34-b725-43a1-85b9-892a8a41771a");
    }

    @Test
    public void test06878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06878");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic4 = org.apache.rat.Reporter.report(reportConfiguration3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic7 = org.apache.rat.Reporter.report(reportConfiguration6);
        org.apache.rat.utils.ReportingSet.Options options8 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration6.licenseDuplicateOption(options8);
        reportConfiguration3.familyDuplicateOption(options8);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier11 = reportConfiguration3.getWriter();
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        reportConfiguration13.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level16 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration13.logFamilyCollisions(level16);
        reportConfiguration3.logFamilyCollisions(level16);
        org.apache.rat.Defaults.Builder builder19 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder20 = builder19.noDefault();
        defaultLog0.log(level16, (java.lang.Object) builder19);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender23 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0, "Datum [ name ='binary',value =' ']");
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier26 = reportConfiguration25.getOutput();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter27 = reportConfiguration25.getDirectoryFilter();
        java.nio.file.Path path28 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes29 = null;
        java.nio.file.FileVisitResult fileVisitResult30 = iOFileFilter27.accept(path28, basicFileAttributes29);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter31 = iOFileFilter27.negate();
        defaultLog0.debug((java.lang.Object) iOFileFilter27);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender33 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.api.MetaData metaData34 = new org.apache.rat.api.MetaData();
        java.lang.String str36 = metaData34.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str38 = metaData34.value("W3C Document Copyright");
        boolean boolean40 = metaData34.clear("hi!");
        java.lang.String str42 = metaData34.value("true");
        org.apache.rat.api.MetaData.Datum datum44 = metaData34.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum45 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_MIT;
        java.lang.String str46 = datum45.getName();
        metaData34.set(datum45);
        java.lang.String str48 = datum45.toString();
        java.lang.String str49 = datum45.getValue();
        defaultLog0.error((java.lang.Object) datum45);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(claimStatistic4);
        org.junit.Assert.assertNull(claimStatistic7);
        org.junit.Assert.assertTrue("'" + options8 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options8.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier11);
        org.junit.Assert.assertTrue("'" + level16 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level16.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier26);
        org.junit.Assert.assertNotNull(iOFileFilter27);
        org.junit.Assert.assertTrue("'" + fileVisitResult30 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult30.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter31);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(datum44);
        org.junit.Assert.assertNotNull(datum45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyCategory" + "'", str46, "http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='MIT   ']" + "'", str48, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='MIT   ']");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "MIT  " + "'", str49, "MIT  ");
    }

    @Test
    public void test06879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06879");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier3 = reportConfiguration1.getOutput();
        boolean boolean4 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.license.ILicense[] iLicenseArray5 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet6 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet6, iLicenseArray5);
        java.lang.String[] strArray20 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory23 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet6, (java.util.Collection<java.lang.String>) strList21);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet6);
        reportConfiguration1.setStyleReport(true);
        boolean boolean27 = reportConfiguration1.isAddingLicenses();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(iLicenseArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test06880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06880");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet2 = licenseReader1.readLicenses();
        java.lang.String[] strArray8 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet9 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean12 = strSet9.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean14 = strSet9.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction15 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet9.setMsgFormat(strFunction15);
        boolean boolean17 = strSet9.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory18 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet2, (java.util.Collection<java.lang.String>) strSet9);
        org.apache.rat.api.MetaData.Datum datum19 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_1;
        java.lang.String str20 = datum19.toString();
        boolean boolean21 = strSet9.equals((java.lang.Object) datum19);
        boolean boolean23 = strSet9.addIfNotPresent("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet25 = strSet9.headSet("notice");
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        defaultLog26.setLevel(level31);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet34 = strSet9.setLog((org.apache.rat.utils.Log) defaultLog26);
        strSet34.clear();
        java.util.stream.Stream<java.lang.String> strStream36 = strSet34.parallelStream();
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(iLicenseSet2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(datum19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']" + "'", str20, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strStream36);
    }

    @Test
    public void test06881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06881");
        java.lang.String str1 = org.apache.rat.document.impl.guesser.GuessUtils.normalise("01febb9b-15b8-4e6d-baab-05a93d5dc033");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "01FEBB9B-15B8-4E6D-BAAB-05A93D5DC033" + "'", str1, "01FEBB9B-15B8-4E6D-BAAB-05A93D5DC033");
    }

    @Test
    public void test06882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06882");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.license.ILicense.Builder builder7 = builder0.setName("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='DOJO  ']");
        org.apache.rat.license.ILicense.Builder builder9 = builder0.setDerivedFrom("OASIS Open License");
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setName("null ?????");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test06883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06883");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("f7c80ac5-f6d7-4a47-993b-a27ea27d7efb", "org/a");
        java.lang.String str3 = datum2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "f7c80ac5-f6d7-4a47-993b-a27ea27d7efb" + "'", str3, "f7c80ac5-f6d7-4a47-993b-a27ea27d7efb");
    }

    @Test
    public void test06884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06884");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("TMF  ", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state4 = fullTextMatcher2.matches("http://org/apache/rat/meta-data#HeaderCategory");
        fullTextMatcher2.reset();
        boolean boolean7 = fullTextMatcher2.doMatch("SpdxBuilder: null");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = fullTextMatcher2.finalizeState();
        java.lang.String str9 = fullTextMatcher2.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state10 = fullTextMatcher2.finalizeState();
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state4.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "TMF  " + "'", str9, "TMF  ");
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state10.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test06885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06885");
        java.lang.String str1 = org.apache.rat.analysis.matchers.FullTextMatcher.prune("56d7f968-79c2-49f5-a5bd-2e3ac5c2057d");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "56d7f96879c249f5a5bd2e3ac5c2057d" + "'", str1, "56d7f96879c249f5a5bd2e3ac5c2057d");
    }

    @Test
    public void test06886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06886");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("a3b53609-8989-4241-8aa6-1cc947f0d382");
        org.apache.rat.api.MetaData metaData5 = new org.apache.rat.api.MetaData();
        java.lang.String str7 = metaData5.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum8 = org.apache.rat.api.MetaData.RAT_DOCUMENT_CATEGORY_DATUM_STANDARD;
        metaData5.add(datum8);
        java.lang.String str11 = metaData5.value("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.api.MetaData.Datum datum14 = new org.apache.rat.api.MetaData.Datum("GNU General Public License, version 1", "W3C  ");
        metaData5.add(datum14);
        metaData0.add(datum14);
        java.lang.String str18 = metaData0.value("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        org.apache.rat.api.MetaData metaData19 = new org.apache.rat.api.MetaData();
        java.lang.String str21 = metaData19.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum23 = metaData19.get("Copyright Builder: s:null e:.cvsignore o:null");
        java.lang.String str25 = metaData19.value("W3C Software Copyright");
        java.lang.String str27 = metaData19.value("null http://org/apache/rat/meta-data#LicenseFamilyName");
        metaData19.clear();
        org.apache.rat.api.MetaData.Datum datum30 = metaData19.get("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        org.apache.rat.api.MetaData.Datum datum32 = metaData19.get("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        boolean boolean34 = metaData19.clear("f96ad0b6-2267-4692-93e4-227659f9d621");
        org.apache.rat.api.MetaData.Datum datum37 = new org.apache.rat.api.MetaData.Datum("8ECB8CCE-06E4-400F-84D9-AD1CF6289FDA", "4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        metaData19.set(datum37);
        metaData0.add(datum37);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(datum8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(datum23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(datum30);
        org.junit.Assert.assertNull(datum32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test06887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06887");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        boolean boolean4 = fullTextMatcher2.doMatch("491b6ccf-4ab4-4414-ac34-a9dc2423c7de");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test06888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06888");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder1 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str2 = iLicenseFamilyBuilder1.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder4 = iLicenseFamilyBuilder1.setLicenseFamilyCategory("3e2b228d-d5ff-4444-8d8c-d614494b2426");
        org.apache.rat.license.ILicenseFamily.Builder builder6 = iLicenseFamilyBuilder1.setLicenseFamilyName("GNU General Public License, version 3");
        org.apache.rat.license.ILicenseFamily iLicenseFamily7 = builder6.build();
        org.apache.rat.configuration.Format format8 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader9 = format8.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet10 = licenseReader9.readLicenses();
        java.lang.String[] strArray16 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        boolean boolean20 = strSet17.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean22 = strSet17.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction23 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet17.setMsgFormat(strFunction23);
        boolean boolean25 = strSet17.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory26 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet10, (java.util.Collection<java.lang.String>) strSet17);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = reportConfiguration28.getLicenses(licenseFilter30);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders32 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration28.setAddLicenseHeaders(addLicenseHeaders32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter37);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter37);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = reportConfiguration41.getLicenses(licenseFilter43);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders45 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter50);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        java.io.FilenameFilter filenameFilter57 = reportConfiguration56.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet59 = reportConfiguration56.getLicenses(licenseFilter58);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders60 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration56.setAddLicenseHeaders(addLicenseHeaders60);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic64 = org.apache.rat.Reporter.report(reportConfiguration63);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter65 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration63, licenseFilter65);
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter65);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        java.io.FilenameFilter filenameFilter70 = reportConfiguration69.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter71 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet72 = reportConfiguration69.getLicenses(licenseFilter71);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders73 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration69.setAddLicenseHeaders(addLicenseHeaders73);
        org.apache.rat.utils.Log log75 = null;
        org.apache.rat.ReportConfiguration reportConfiguration76 = new org.apache.rat.ReportConfiguration(log75);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic77 = org.apache.rat.Reporter.report(reportConfiguration76);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter78 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration76, licenseFilter78);
        org.apache.rat.Reporter.listLicenses(reportConfiguration69, licenseFilter78);
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter78);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet82 = reportConfiguration28.getLicenses(licenseFilter78);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet83 = licenseSetFactory26.getLicenseFamilies(licenseFilter78);
        org.apache.rat.policy.DefaultPolicy defaultPolicy84 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet83);
        org.apache.rat.license.ILicenseFamily iLicenseFamily85 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily7, iLicenseFamilySet83);
        org.apache.rat.license.ILicenseFamily iLicenseFamily86 = org.apache.rat.license.LicenseFamilySetFactory.search("TextBuilder: COMMON DEVELOPMENT A...", iLicenseFamilySet83);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(iLicenseFamily7);
        org.junit.Assert.assertTrue("'" + format8 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format8.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader9);
        org.junit.Assert.assertNotNull(iLicenseSet10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders32 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders32.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders45 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders45.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertNull(filenameFilter57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet59);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders60 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders60.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic64);
        org.junit.Assert.assertTrue("'" + licenseFilter65 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter65.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter70);
        org.junit.Assert.assertTrue("'" + licenseFilter71 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter71.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet72);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders73 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders73.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic77);
        org.junit.Assert.assertTrue("'" + licenseFilter78 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter78.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet82);
        org.junit.Assert.assertNotNull(iLicenseFamilySet83);
        org.junit.Assert.assertNull(iLicenseFamily85);
        org.junit.Assert.assertNull(iLicenseFamily86);
    }

    @Test
    public void test06889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06889");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder2 = copyrightBuilder0.setStart("OASIS");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher3 = copyrightBuilder0.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder5 = copyrightBuilder0.setStart(".cvsignore");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = copyrightBuilder5.setEnd(".gitignore");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = copyrightBuilder7.build();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertNotNull(copyrightBuilder2);
        org.junit.Assert.assertNotNull(iHeaderMatcher3);
        org.junit.Assert.assertNotNull(copyrightBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
    }

    @Test
    public void test06890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06890");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.api.MetaData.Datum datum10 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_2;
        boolean boolean11 = strSet6.equals((java.lang.Object) datum10);
        strSet6.clear();
        int int13 = strSet6.size();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(datum10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test06891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06891");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        claimStatistic0.setNumApproved((int) (short) 10);
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap3);
        java.util.Map<java.lang.String, java.lang.Integer> strMap5 = null;
        claimStatistic0.setLicenseFileCodeMap(strMap5);
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = claimStatistic0.getDocumentCategoryMap();
        int int8 = claimStatistic0.getNumUnknown();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = claimStatistic0.getDocumentCategoryMap();
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(strMap9);
    }

    @Test
    public void test06892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06892");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.report.IReportable iReportable6 = null;
        reportConfiguration1.setReportable(iReportable6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier11 = reportConfiguration9.getOutput();
        org.apache.rat.license.ILicense iLicense12 = null;
        reportConfiguration9.addLicense(iLicense12);
        reportConfiguration9.addApprovedLicenseCategory("6481fb19-38f0-43f5-ab95-caf84a069ee1");
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier16 = reportConfiguration9.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier16);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier11);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier16);
    }

    @Test
    public void test06893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06893");
        org.apache.rat.Defaults.Builder builder1 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults2 = builder1.build();
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        java.io.FilenameFilter filenameFilter5 = reportConfiguration4.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter6 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet7 = reportConfiguration4.getLicenses(licenseFilter6);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders8 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration4.setAddLicenseHeaders(addLicenseHeaders8);
        org.apache.rat.utils.Log log10 = null;
        org.apache.rat.ReportConfiguration reportConfiguration11 = new org.apache.rat.ReportConfiguration(log10);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic12 = org.apache.rat.Reporter.report(reportConfiguration11);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter13 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration11, licenseFilter13);
        org.apache.rat.Reporter.listLicenses(reportConfiguration4, licenseFilter13);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet20 = reportConfiguration17.getLicenses(licenseFilter19);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders21 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration17.setAddLicenseHeaders(addLicenseHeaders21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic25 = org.apache.rat.Reporter.report(reportConfiguration24);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter26 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration24, licenseFilter26);
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter26);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet29 = reportConfiguration4.getLicenseFamilies(licenseFilter26);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet30 = defaults2.getLicenses(licenseFilter26);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet31 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet30);
        org.apache.rat.license.ILicense iLicense32 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet30);
        java.lang.String str33 = iLicense32.getNotes();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(defaults2);
        org.junit.Assert.assertNull(filenameFilter5);
        org.junit.Assert.assertTrue("'" + licenseFilter6 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter6.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet7);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders8 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders8.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic12);
        org.junit.Assert.assertTrue("'" + licenseFilter13 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter13.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet20);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders21 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders21.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic25);
        org.junit.Assert.assertTrue("'" + licenseFilter26 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter26.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet29);
        org.junit.Assert.assertNotNull(iLicenseSet30);
        org.junit.Assert.assertNotNull(iLicense32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test06894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06894");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        java.lang.String str6 = reportConfiguration1.getCopyrightMessage();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier7 = reportConfiguration1.getOutput();
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier7);
    }

    @Test
    public void test06895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06895");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("Copyright Builder: s:null e:null o:4f6baee5-accf-42cc-adfd-2bd688852a2e");
    }

    @Test
    public void test06896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06896");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.configuration.builders.AllBuilder allBuilder1 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.lang.String str4 = matcherRefBuilder2.toString();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder5 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.NotBuilder notBuilder6 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str7 = notBuilder6.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean9 = matcherRefBuilder8.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap10 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder11 = matcherRefBuilder8.setMatchers(strMap10);
        org.apache.rat.configuration.builders.AllBuilder allBuilder12 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = copyrightBuilder13.setStart("OASIS");
        java.lang.String str16 = copyrightBuilder13.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder18 = copyrightBuilder13.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder19 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean20 = matcherRefBuilder19.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder23 = copyrightBuilder21.setStart("OASIS");
        java.lang.String str24 = copyrightBuilder21.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder26 = copyrightBuilder21.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder28 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str29 = copyrightBuilder28.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder31 = copyrightBuilder28.setEnd(".cvsignore");
        boolean boolean32 = copyrightBuilder28.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str34 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder36 = copyrightBuilder33.setEnd(".cvsignore");
        boolean boolean37 = copyrightBuilder33.hasId();
        java.lang.String str38 = copyrightBuilder33.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder39 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = copyrightBuilder39.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder43 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean44 = matcherRefBuilder43.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder43.setMatchers(strMap45);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder48 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean49 = matcherRefBuilder48.hasId();
        java.lang.String str50 = matcherRefBuilder48.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap51 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder52 = matcherRefBuilder48.setMatchers(strMap51);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray53 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder8, allBuilder12, copyrightBuilder18, matcherRefBuilder19, copyrightBuilder21, copyrightBuilder27, copyrightBuilder28, copyrightBuilder33, copyrightBuilder39, anyBuilder42, matcherRefBuilder43, copyrightBuilder47, matcherRefBuilder48 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList54 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54, builderArray53);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder56 = notBuilder6.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList54);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder57 = new org.apache.rat.configuration.builders.MatcherRefBuilder();
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray58 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, anyBuilder5, notBuilder6, matcherRefBuilder57 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList59 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59, builderArray58);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder61 = allBuilder1.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList59);
        defaultLog0.info((java.lang.Object) allBuilder1);
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log.Level level65 = defaultLog0.getLevel();
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender66 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.license.ILicense.Builder builder67 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder69 = builder67.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder71 = builder69.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder73 = builder71.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder74 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str75 = copyrightBuilder74.toString();
        org.apache.rat.license.ILicense.Builder builder76 = builder71.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder74);
        org.apache.rat.license.ILicense.Builder builder78 = builder71.setNotes("http:");
        org.apache.rat.license.ILicense.Builder builder80 = builder78.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder82 = builder78.setId("COMMO");
        defaultLog0.debug((java.lang.Object) "COMMO");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher87 = new org.apache.rat.analysis.matchers.CopyrightMatcher("021187d7-27c2-4fd9-bc74-8cc00413ee52", "CDDL1", "021187d7-27c2-4fd9-bc74-8cc00413ee52");
        java.lang.String str88 = copyrightMatcher87.getId();
        org.apache.rat.analysis.IHeaderMatcher.State state89 = copyrightMatcher87.finalizeState();
        java.lang.Throwable throwable90 = null;
        // The following exception was thrown during execution in test generation
        try {
            defaultLog0.error((java.lang.Object) copyrightMatcher87, throwable90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(anyBuilder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NotBuilder: null" + "'", str7, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str16, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder18);
        org.junit.Assert.assertNotNull(matcherRefBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str24, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder26);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertNotNull(copyrightBuilder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str29, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str34, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str38, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder39);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(anyBuilder42);
        org.junit.Assert.assertNotNull(matcherRefBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(matcherRefBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "MathcerRefBuilder: null" + "'", str50, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder52);
        org.junit.Assert.assertNotNull(builderArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(abstractBuilder56);
        org.junit.Assert.assertNotNull(builderArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(abstractBuilder61);
        org.junit.Assert.assertTrue("'" + level65 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level65.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(copyrightBuilder74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str75, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "8650810c-963e-48a4-a0e1-70d5f00de9b5" + "'", str88, "8650810c-963e-48a4-a0e1-70d5f00de9b5");
        org.junit.Assert.assertTrue("'" + state89 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state89.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
    }

    @Test
    public void test06897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06897");
        org.apache.rat.api.MetaData.Datum datum2 = new org.apache.rat.api.MetaData.Datum("a8ad4", "33061750-128d-41e6-a108-0814e689bc0c");
    }

    @Test
    public void test06898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06898");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter7 = xmlWriter1.openElement((java.lang.CharSequence) "Copyright Builder: s:null e:.cvsignore o:5fec021b-b12e-48c3-a002-3eea7a06339a");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: 'Copyright Builder: s:null e:.cvsignore o:5fec021b-b12e-48c3-a002-3eea7a06339a' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06899");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter51);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet55 = reportConfiguration1.getLicenses(licenseFilter51);
        boolean boolean56 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic59 = org.apache.rat.Reporter.report(reportConfiguration58);
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.utils.ReportingSet.Options options63 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration61.licenseDuplicateOption(options63);
        reportConfiguration58.familyDuplicateOption(options63);
        reportConfiguration1.familyDuplicateOption(options63);
        java.util.SortedSet<java.lang.String> strSet67 = reportConfiguration1.getApprovedLicenseCategories();
        java.lang.String[] strArray73 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet74 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        boolean boolean77 = strSet74.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean79 = strSet74.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction80 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet81 = strSet74.setMsgFormat(strFunction80);
        java.lang.String str82 = strSet74.last();
        reportConfiguration1.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet74);
        java.util.Comparator<? super java.lang.String> wildcardComparator84 = strSet74.comparator();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = strSet74.tailSet("SpdxBuilder: ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.lang.Object[] objArray87 = strSet74.toArray();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(claimStatistic59);
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertTrue("'" + options63 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options63.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str82, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNull(wildcardComparator84);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, ef7a8b13-64c3-4510-bb0c-dbf208e1e73f, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
    }

    @Test
    public void test06900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06900");
        org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader2 = format1.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet3 = licenseReader2.readLicenses();
        java.lang.String[] strArray9 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet10 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        boolean boolean13 = strSet10.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean15 = strSet10.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction16 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = strSet10.setMsgFormat(strFunction16);
        boolean boolean18 = strSet10.isEmpty();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory19 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet3, (java.util.Collection<java.lang.String>) strSet10);
        org.apache.rat.api.MetaData.Datum datum20 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_NAME_DATUM_GPL_VERSION_1;
        java.lang.String str21 = datum20.toString();
        boolean boolean22 = strSet10.equals((java.lang.Object) datum20);
        boolean boolean24 = strSet10.addIfNotPresent("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet10.spliterator();
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration27.getOutput();
        org.apache.rat.license.ILicense iLicense30 = null;
        reportConfiguration27.addLicense(iLicense30);
        org.apache.rat.Defaults.Builder builder32 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults33 = builder32.build();
        reportConfiguration27.setFrom(defaults33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray37 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList38 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList38, iLicenseFamilyArray37);
        reportConfiguration36.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList38);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense41 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense41.setLicenseFamilyName("hi!");
        java.lang.String str44 = fullTextMatchingLicense41.getLicenseFamilyCategory();
        java.lang.String str45 = fullTextMatchingLicense41.getLicenseFamilyName();
        fullTextMatchingLicense41.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense41.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily50 = fullTextMatchingLicense41.getLicenseFamily();
        reportConfiguration36.addFamily(iLicenseFamily50);
        java.lang.String str52 = iLicenseFamily50.getFamilyName();
        java.lang.String str53 = iLicenseFamily50.getFamilyName();
        reportConfiguration27.addApprovedLicenseCategory(iLicenseFamily50);
        java.lang.String str55 = iLicenseFamily50.getFamilyName();
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet58 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.policy.DefaultPolicy defaultPolicy59 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet58);
        org.apache.rat.license.ILicenseFamily iLicenseFamily60 = org.apache.rat.license.LicenseFamilySetFactory.search("MANIFEST.MF", iLicenseFamilySet58);
        org.apache.rat.license.ILicenseFamily iLicenseFamily61 = org.apache.rat.license.LicenseFamilySetFactory.search("Copyright Builder: s:null e:W3C Software Copyright o:null", iLicenseFamilySet58);
        org.apache.rat.policy.DefaultPolicy defaultPolicy62 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet58);
        org.apache.rat.license.ILicenseFamily iLicenseFamily63 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily50, iLicenseFamilySet58);
        boolean boolean64 = strSet10.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet58);
        org.apache.rat.license.ILicenseFamily iLicenseFamily65 = org.apache.rat.license.LicenseFamilySetFactory.search("http:", iLicenseFamilySet58);
        org.apache.rat.policy.DefaultPolicy defaultPolicy66 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet58);
        org.junit.Assert.assertTrue("'" + format1 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format1.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader2);
        org.junit.Assert.assertNotNull(iLicenseSet3);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(datum20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']" + "'", str21, "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(defaults33);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "SpdxBuilder: null" + "'", str52, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "SpdxBuilder: null" + "'", str53, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "SpdxBuilder: null" + "'", str55, "SpdxBuilder: null");
        org.junit.Assert.assertNotNull(iLicenseFamilySet58);
        org.junit.Assert.assertNull(iLicenseFamily60);
        org.junit.Assert.assertNull(iLicenseFamily61);
        org.junit.Assert.assertNull(iLicenseFamily63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(iLicenseFamily65);
    }

    @Test
    public void test06901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06901");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.Format format1 = org.apache.rat.configuration.Format.fromName("38e4211d-0f24-4ec0-aa5c-260c68412f39");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No such suffix: 38e4211d-0f24-4ec0-aa5c-260c68412f39");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06902");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.license.ILicense[] iLicenseArray3 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet4 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet4, iLicenseArray3);
        java.lang.String[] strArray18 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory21 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4, (java.util.Collection<java.lang.String>) strList19);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = licenseSetFactory21.getLicenses(licenseFilter45);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet49);
        org.apache.rat.utils.Log log51 = reportConfiguration1.getLog();
        org.apache.rat.report.IReportable iReportable52 = null;
        reportConfiguration1.setReportable(iReportable52);
        java.util.function.Consumer<java.lang.String> strConsumer54 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.validate(strConsumer54);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: Reportable may not be null");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(iLicenseArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertNull(log51);
    }

    @Test
    public void test06903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06903");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic3 = org.apache.rat.Reporter.report(reportConfiguration2);
        org.apache.rat.report.IReportable iReportable4 = null;
        reportConfiguration2.setReportable(iReportable4);
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        java.io.FilenameFilter filenameFilter8 = reportConfiguration7.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter9 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet10 = reportConfiguration7.getLicenses(licenseFilter9);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders11 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration7.setAddLicenseHeaders(addLicenseHeaders11);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter16);
        org.apache.rat.Reporter.listLicenses(reportConfiguration7, licenseFilter16);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter22 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet23 = reportConfiguration20.getLicenses(licenseFilter22);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders24 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration20.setAddLicenseHeaders(addLicenseHeaders24);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter29 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration27, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration20, licenseFilter29);
        org.apache.rat.Reporter.listLicenses(reportConfiguration7, licenseFilter29);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier35 = reportConfiguration34.getOutput();
        reportConfiguration7.setOut(outputStreamIOSupplier35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.rat.utils.ReportingSet.Options options43 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration41.licenseDuplicateOption(options43);
        reportConfiguration38.familyDuplicateOption(options43);
        reportConfiguration7.licenseDuplicateOption(options43);
        reportConfiguration2.familyDuplicateOption(options43);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders48 = org.apache.rat.config.AddLicenseHeaders.FORCED;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders48);
        boolean boolean50 = reportConfiguration2.isAddingLicensesForced();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter51 = reportConfiguration2.getDirectoryFilter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker52 = new org.apache.rat.walker.ArchiveWalker(file0, (java.io.FilenameFilter) iOFileFilter51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic3);
        org.junit.Assert.assertNull(filenameFilter8);
        org.junit.Assert.assertTrue("'" + licenseFilter9 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter9.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet10);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders11 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders11.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + licenseFilter22 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter22.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet23);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders24 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders24.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertTrue("'" + licenseFilter29 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter29.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier35);
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertTrue("'" + options43 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options43.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + addLicenseHeaders48 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FORCED + "'", addLicenseHeaders48.equals(org.apache.rat.config.AddLicenseHeaders.FORCED));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(iOFileFilter51);
    }

    @Test
    public void test06904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06904");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        reportConfiguration1.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet5 = reportConfiguration1.getApprovedLicenseCategories();
        java.io.FilenameFilter filenameFilter6 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.utils.ReportingSet.Options options10 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration8.licenseDuplicateOption(options10);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet13 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily14 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet13);
        org.apache.rat.policy.DefaultPolicy defaultPolicy15 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet13);
        reportConfiguration8.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet13);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet17 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray18 = strSet17.toArray();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory19 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet13, (java.util.Collection<java.lang.String>) strSet17);
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet17);
        org.apache.rat.license.ILicense[] iLicenseArray21 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet22 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet22, iLicenseArray21);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray26 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList27 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList27, iLicenseFamilyArray26);
        reportConfiguration25.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList27);
        org.apache.rat.report.IReportable iReportable30 = null;
        reportConfiguration25.setReportable(iReportable30);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet32 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray33 = strSet32.toArray();
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.utils.ReportingSet.Options options40 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration38.licenseDuplicateOption(options40);
        reportConfiguration35.familyDuplicateOption(options40);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier43 = reportConfiguration35.getWriter();
        boolean boolean44 = reportConfiguration35.isAddingLicensesForced();
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        reportConfiguration46.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level49 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration46.logFamilyCollisions(level49);
        reportConfiguration35.logLicenseCollisions(level49);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet52 = strSet32.setLogLevel(level49);
        java.util.stream.Stream<java.lang.String> strStream53 = strSet52.stream();
        reportConfiguration25.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet52);
        org.apache.rat.utils.ReportingSet.Options options55 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet56 = strSet52.setDuplicateOption(options55);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory57 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet22, (java.util.Collection<java.lang.String>) strSet52);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet22);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray61 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList62 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList62, iLicenseFamilyArray61);
        reportConfiguration60.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList62);
        org.apache.rat.report.IReportable iReportable65 = null;
        reportConfiguration60.setReportable(iReportable65);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders67 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration60.setAddLicenseHeaders(addLicenseHeaders67);
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders67);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + options10 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options10.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilySet13);
        org.junit.Assert.assertNull(iLicenseFamily14);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(iLicenseArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertTrue("'" + options40 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options40.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + level49 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level49.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertTrue("'" + options55 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options55.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders67 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders67.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
    }

    @Test
    public void test06905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06905");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.MatcherBuilderTracker.addBuilder("c887f2ac-f69d-4caf-961a-b151f15b92c9", "1a944b7a-3a72-4ca4-8b10-d9f92b78fec4");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: java.lang.ClassNotFoundException: c887f2ac-f69d-4caf-961a-b151f15b92c9");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06906");
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        reportConfiguration2.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level5 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration2.logLicenseCollisions(level5);
        reportConfiguration2.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        java.io.FilenameFilter filenameFilter11 = reportConfiguration10.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet13 = reportConfiguration10.getLicenses(licenseFilter12);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders14 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration10.setAddLicenseHeaders(addLicenseHeaders14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = org.apache.rat.Reporter.report(reportConfiguration17);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter19 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration17, licenseFilter19);
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter19);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter32);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration10.getInputFileFilter();
        reportConfiguration10.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable39 = null;
        reportConfiguration10.setReportable(iReportable39);
        org.apache.rat.Defaults.Builder builder42 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults43 = builder42.build();
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration45.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet48 = reportConfiguration45.getLicenses(licenseFilter47);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders49 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration45.setAddLicenseHeaders(addLicenseHeaders49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter54);
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter54);
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        java.io.FilenameFilter filenameFilter59 = reportConfiguration58.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter60 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet61 = reportConfiguration58.getLicenses(licenseFilter60);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders62 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration58.setAddLicenseHeaders(addLicenseHeaders62);
        org.apache.rat.utils.Log log64 = null;
        org.apache.rat.ReportConfiguration reportConfiguration65 = new org.apache.rat.ReportConfiguration(log64);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic66 = org.apache.rat.Reporter.report(reportConfiguration65);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter67 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration65, licenseFilter67);
        org.apache.rat.Reporter.listLicenses(reportConfiguration58, licenseFilter67);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet70 = reportConfiguration45.getLicenseFamilies(licenseFilter67);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet71 = defaults43.getLicenses(licenseFilter67);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet72 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet71);
        org.apache.rat.license.ILicense iLicense73 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet71);
        reportConfiguration10.addLicense(iLicense73);
        java.lang.String str75 = iLicense73.derivedFrom();
        reportConfiguration2.addLicense(iLicense73);
        java.lang.String str77 = iLicense73.getNotes();
        org.apache.rat.license.ILicenseFamily iLicenseFamily78 = iLicense73.getLicenseFamily();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher79 = new org.apache.rat.analysis.matchers.NotMatcher("", (org.apache.rat.analysis.IHeaderMatcher) iLicense73);
        org.junit.Assert.assertTrue("'" + level5 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level5.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet13);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders14 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders14.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic18);
        org.junit.Assert.assertTrue("'" + licenseFilter19 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter19.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(defaults43);
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet48);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders49 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders49.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter59);
        org.junit.Assert.assertTrue("'" + licenseFilter60 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter60.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet61);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders62 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders62.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic66);
        org.junit.Assert.assertTrue("'" + licenseFilter67 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter67.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet70);
        org.junit.Assert.assertNotNull(iLicenseSet71);
        org.junit.Assert.assertNotNull(iLicense73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "BSD-3" + "'", str75, "BSD-3");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(iLicenseFamily78);
    }

    @Test
    public void test06907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06907");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher4 = new org.apache.rat.analysis.matchers.FullTextMatcher("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.ILicense.Builder builder5 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher4);
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder6 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str7 = anyBuilder6.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList8 = anyBuilder6.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = anyBuilder6.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = anyBuilder6.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList11 = anyBuilder6.getChildren();
        org.apache.rat.license.ILicense.Builder builder12 = builder0.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) anyBuilder6);
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher14 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("binary");
        org.apache.rat.analysis.IHeaderMatcher.State state15 = simpleTextMatcher14.finalizeState();
        boolean boolean17 = simpleTextMatcher14.doMatch("null http://org/apache/rat/meta-data#LicenseFamilyName");
        org.apache.rat.license.ILicense.Builder builder18 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher14);
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher20 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("hi!");
        org.apache.rat.analysis.matchers.NotMatcher notMatcher21 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) simpleTextMatcher20);
        org.apache.rat.analysis.IHeaderMatcher.State state22 = notMatcher21.currentState();
        org.apache.rat.license.ILicense.Builder builder23 = builder12.setMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher21);
        org.apache.rat.analysis.matchers.NotMatcher notMatcher24 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) notMatcher21);
        org.apache.rat.analysis.IHeaderMatcher.State state25 = notMatcher24.finalizeState();
        java.lang.String str26 = notMatcher24.getId();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(anyBuilder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AnyBuilder:" + "'", str7, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcherList11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state15.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state22.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state25.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2ed68e58-7824-4cb9-a7a0-1fdc42449c68" + "'", str26, "2ed68e58-7824-4cb9-a7a0-1fdc42449c68");
    }

    @Test
    public void test06908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06908");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        org.apache.rat.utils.DefaultLog defaultLog14 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter38);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier44 = reportConfiguration43.getOutput();
        reportConfiguration16.setOut(outputStreamIOSupplier44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic51 = org.apache.rat.Reporter.report(reportConfiguration50);
        org.apache.rat.utils.ReportingSet.Options options52 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration50.licenseDuplicateOption(options52);
        reportConfiguration47.familyDuplicateOption(options52);
        reportConfiguration16.licenseDuplicateOption(options52);
        reportConfiguration16.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration16.logLicenseCollisions(level62);
        defaultLog14.setLevel(level62);
        defaultLog14.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration68 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog14);
        org.apache.rat.utils.DefaultLog defaultLog69 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logFamilyCollisions(level74);
        defaultLog69.setLevel(level74);
        defaultLog14.debug((java.lang.Object) level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet13.setLogLevel(level74);
        int int79 = strSet13.size();
        java.util.stream.Stream<java.lang.String> strStream80 = strSet13.parallelStream();
        strStream80.close();
        strStream80.close();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(defaultLog14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier44);
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertNull(claimStatistic51);
        org.junit.Assert.assertTrue("'" + options52 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options52.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog69);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 7 + "'", int79 == 7);
        org.junit.Assert.assertNotNull(strStream80);
    }

    @Test
    public void test06909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06909");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        java.io.FilenameFilter filenameFilter3 = reportConfiguration2.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter4 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet5 = reportConfiguration2.getLicenses(licenseFilter4);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders6 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration2.setAddLicenseHeaders(addLicenseHeaders6);
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter11 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration9, licenseFilter11);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter11);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter17 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet18 = reportConfiguration15.getLicenses(licenseFilter17);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders19 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration15.setAddLicenseHeaders(addLicenseHeaders19);
        org.apache.rat.utils.Log log21 = null;
        org.apache.rat.ReportConfiguration reportConfiguration22 = new org.apache.rat.ReportConfiguration(log21);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic23 = org.apache.rat.Reporter.report(reportConfiguration22);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter24 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration22, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration15, licenseFilter24);
        org.apache.rat.Reporter.listLicenses(reportConfiguration2, licenseFilter24);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier30 = reportConfiguration29.getOutput();
        reportConfiguration2.setOut(outputStreamIOSupplier30);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic34 = org.apache.rat.Reporter.report(reportConfiguration33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.utils.ReportingSet.Options options38 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration36.licenseDuplicateOption(options38);
        reportConfiguration33.familyDuplicateOption(options38);
        reportConfiguration2.licenseDuplicateOption(options38);
        reportConfiguration2.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        reportConfiguration45.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level48 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration45.logLicenseCollisions(level48);
        reportConfiguration2.logLicenseCollisions(level48);
        defaultLog0.setLevel(level48);
        defaultLog0.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        boolean boolean57 = reportConfiguration55.isStyleReport();
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        reportConfiguration59.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level62 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration59.logLicenseCollisions(level62);
        reportConfiguration55.logLicenseCollisions(level62);
        defaultLog0.log(level62, "Academic Free License, Version 2.1");
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender67 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        apacheV2LicenseAppender67.setForce(false);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertTrue("'" + licenseFilter4 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter4.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet5);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders6 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders6.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertTrue("'" + licenseFilter11 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter11.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertTrue("'" + licenseFilter17 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter17.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet18);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders19 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders19.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic23);
        org.junit.Assert.assertTrue("'" + licenseFilter24 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter24.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier30);
        org.junit.Assert.assertNull(claimStatistic34);
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + options38 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options38.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level48 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level48.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + level62 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level62.equals(org.apache.rat.utils.Log.Level.ERROR));
    }

    @Test
    public void test06910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06910");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap2 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder3 = matcherRefBuilder0.setMatchers(strMap2);
        java.lang.String str4 = matcherRefBuilder3.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap5 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder3.setMatchers(strMap5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = matcherRefBuilder3.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MathcerRefBuilder: null" + "'", str4, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
    }

    @Test
    public void test06911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06911");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher1 = new org.apache.rat.analysis.matchers.FullTextMatcher("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        fullTextMatcher1.reset();
        fullTextMatcher1.reset();
        boolean boolean5 = fullTextMatcher1.doMatch("NotBuilder: Copyright Builder: s:.cvsignore e:null o:null");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06912");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        reportConfiguration1.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable30 = null;
        reportConfiguration1.setReportable(iReportable30);
        org.apache.rat.Defaults.Builder builder33 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults34 = builder33.build();
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        java.io.FilenameFilter filenameFilter50 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet52 = reportConfiguration49.getLicenses(licenseFilter51);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration49.setAddLicenseHeaders(addLicenseHeaders53);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic57 = org.apache.rat.Reporter.report(reportConfiguration56);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter58);
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter58);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet61 = reportConfiguration36.getLicenseFamilies(licenseFilter58);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet62 = defaults34.getLicenses(licenseFilter58);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet63 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet62);
        org.apache.rat.license.ILicense iLicense64 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet62);
        reportConfiguration1.addLicense(iLicense64);
        java.lang.String str66 = iLicense64.derivedFrom();
        java.lang.String str67 = iLicense64.getName();
        java.lang.String str68 = iLicense64.getNotes();
        java.lang.String str69 = iLicense64.derivedFrom();
        java.lang.String str70 = iLicense64.derivedFrom();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(defaults34);
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet52);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet61);
        org.junit.Assert.assertNotNull(iLicenseSet62);
        org.junit.Assert.assertNotNull(iLicense64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "BSD-3" + "'", str66, "BSD-3");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "The Telemanagement Forum License" + "'", str67, "The Telemanagement Forum License");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "BSD-3" + "'", str69, "BSD-3");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "BSD-3" + "'", str70, "BSD-3");
    }

    @Test
    public void test06913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06913");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        java.lang.String[] strArray48 = new java.lang.String[] { "http://org/apache/rat/meta-data", "GNU General Public License, version 2", "Modified BSD License", "COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0", "The MIT License", "OASIS", "?????", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='OASIS ']", "6486879f-fc81-4b57-aec7-c4c77d540c30", "MANIFEST.MF", "?????", "GEN  ", "GPL3 ", "http://org/apache/rat/meta-data#HeaderCategory", "DOJO ", "true", "GPL2 ", "?????", "Apache License Version 2.0", "OASIS", "W3CD ", "OASIS", "?????", "OASIS Open License", "", "standard", "GPL2 ", "GEN  ", "W3CD ", "TMF  ", ".cvsignore", "Copyright Builder: s:null e:null o:null", "ef7a8b13-64c3-4510-bb0c-dbf208e1e73f", "274c6a15-09f6-4bfd-ac53-1827770eb507", "GNU General Public License, version 2", "W3CD ", ".cvsignore", "Apache License Version 2.0", "GEN  ", "W3C Software Copyright", "Modified BSD License", "GPL2 ", "JAVA" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        reportConfiguration4.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList49);
        reportConfiguration4.removeApprovedLicenseCategory("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.Log log55 = null;
        org.apache.rat.ReportConfiguration reportConfiguration56 = new org.apache.rat.ReportConfiguration(log55);
        java.io.FilenameFilter filenameFilter57 = reportConfiguration56.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter58 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet59 = reportConfiguration56.getLicenses(licenseFilter58);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders60 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration56.setAddLicenseHeaders(addLicenseHeaders60);
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic64 = org.apache.rat.Reporter.report(reportConfiguration63);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter65 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration63, licenseFilter65);
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter65);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        java.io.FilenameFilter filenameFilter70 = reportConfiguration69.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter71 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet72 = reportConfiguration69.getLicenses(licenseFilter71);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders73 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration69.setAddLicenseHeaders(addLicenseHeaders73);
        org.apache.rat.utils.Log log75 = null;
        org.apache.rat.ReportConfiguration reportConfiguration76 = new org.apache.rat.ReportConfiguration(log75);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic77 = org.apache.rat.Reporter.report(reportConfiguration76);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter78 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration76, licenseFilter78);
        org.apache.rat.Reporter.listLicenses(reportConfiguration69, licenseFilter78);
        org.apache.rat.Reporter.listLicenses(reportConfiguration56, licenseFilter78);
        org.apache.rat.utils.Log log82 = null;
        org.apache.rat.ReportConfiguration reportConfiguration83 = new org.apache.rat.ReportConfiguration(log82);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier84 = reportConfiguration83.getOutput();
        reportConfiguration56.setOut(outputStreamIOSupplier84);
        org.apache.rat.utils.Log.Level level86 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration56.logLicenseCollisions(level86);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter88 = reportConfiguration56.getDirectoryFilter();
        java.nio.file.Path path89 = null;
        boolean boolean90 = iOFileFilter88.matches(path89);
        java.nio.file.Path path91 = null;
        boolean boolean92 = iOFileFilter88.matches(path91);
        reportConfiguration4.setInputFileFilter((java.io.FilenameFilter) iOFileFilter88);
        defaultLog0.error((java.lang.Object) iOFileFilter88);
        java.util.Collection<org.apache.rat.license.ILicense> iLicenseCollection95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser96 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog0, iLicenseCollection95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertNull(filenameFilter57);
        org.junit.Assert.assertTrue("'" + licenseFilter58 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter58.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet59);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders60 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders60.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic64);
        org.junit.Assert.assertTrue("'" + licenseFilter65 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter65.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter70);
        org.junit.Assert.assertTrue("'" + licenseFilter71 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter71.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet72);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders73 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders73.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic77);
        org.junit.Assert.assertTrue("'" + licenseFilter78 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter78.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier84);
        org.junit.Assert.assertTrue("'" + level86 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level86.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test06914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06914");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection3 = metaData0.getData();
        java.lang.String str5 = metaData0.value("hi!");
        metaData0.clear();
        metaData0.clear();
        metaData0.clear();
        java.lang.String str10 = metaData0.value("d3983b6b-7325-418c-bb14-7ad2406080c1");
        java.lang.String str12 = metaData0.value("TextBuilder: standard");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(datumCollection3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test06915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06915");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("binary");
        simpleTextMatcher1.reset();
        java.lang.String str3 = simpleTextMatcher1.getId();
        boolean boolean5 = simpleTextMatcher1.doMatch("6486879f-fc81-4b57-aec7-c4c77d540c30");
        boolean boolean7 = simpleTextMatcher1.doMatch("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        java.lang.String str8 = simpleTextMatcher1.toString();
        java.lang.String str9 = simpleTextMatcher1.toString();
        org.apache.rat.analysis.IHeaderMatcher.State state10 = simpleTextMatcher1.finalizeState();
        boolean boolean12 = simpleTextMatcher1.doMatch("SpdxBuilder: 9d334763-6150-4fa3-86d4-32f09aebbaad");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "5c847b1e-9c69-4319-a528-fb19292d5e95" + "'", str3, "5c847b1e-9c69-4319-a528-fb19292d5e95");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "5c847b1e-9c69-4319-a528-fb19292d5e95" + "'", str8, "5c847b1e-9c69-4319-a528-fb19292d5e95");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "5c847b1e-9c69-4319-a528-fb19292d5e95" + "'", str9, "5c847b1e-9c69-4319-a528-fb19292d5e95");
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state10.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06916");
        java.io.File file0 = null;
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems1 = org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION;
        java.util.List<java.lang.String> strList2 = sourceCodeManagementSystems1.getExclusions();
        java.util.List<java.lang.String> strList3 = sourceCodeManagementSystems1.getExclusions();
        java.io.FilenameFilter filenameFilter4 = org.apache.rat.Report.parseExclusions(strList3);
        java.io.FilenameFilter filenameFilter5 = org.apache.rat.Report.parseExclusions(strList3);
        java.io.FilenameFilter filenameFilter6 = org.apache.rat.Report.parseExclusions(strList3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker7 = new org.apache.rat.walker.ArchiveWalker(file0, filenameFilter6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems1 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION + "'", sourceCodeManagementSystems1.equals(org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION));
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(filenameFilter4);
        org.junit.Assert.assertNotNull(filenameFilter5);
        org.junit.Assert.assertNotNull(filenameFilter6);
    }

    @Test
    public void test06917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06917");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isAudio("SpdxBuilder: 9d334763-6150-4fa3-86d4-32f09aebbaad");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test06918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06918");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        reportConfiguration1.addApprovedLicenseCategory("Copyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier8 = reportConfiguration1.getOutput();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        reportConfiguration10.addApprovedLicenseCategory(".cvsignore");
        boolean boolean13 = reportConfiguration10.isStyleReport();
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic16 = org.apache.rat.Reporter.report(reportConfiguration15);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier17 = reportConfiguration15.getOutput();
        org.apache.rat.license.ILicense iLicense18 = null;
        reportConfiguration15.addLicense(iLicense18);
        org.apache.rat.Defaults.Builder builder20 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults21 = builder20.build();
        reportConfiguration15.setFrom(defaults21);
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray25 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList26 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList26, iLicenseFamilyArray25);
        reportConfiguration24.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList26);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense29 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense29.setLicenseFamilyName("hi!");
        java.lang.String str32 = fullTextMatchingLicense29.getLicenseFamilyCategory();
        java.lang.String str33 = fullTextMatchingLicense29.getLicenseFamilyName();
        fullTextMatchingLicense29.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense29.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily38 = fullTextMatchingLicense29.getLicenseFamily();
        reportConfiguration24.addFamily(iLicenseFamily38);
        java.lang.String str40 = iLicenseFamily38.getFamilyName();
        java.lang.String str41 = iLicenseFamily38.getFamilyName();
        reportConfiguration15.addApprovedLicenseCategory(iLicenseFamily38);
        reportConfiguration10.addApprovedLicenseCategory(iLicenseFamily38);
        java.lang.String str44 = iLicenseFamily38.getFamilyCategory();
        java.lang.String str45 = iLicenseFamily38.getFamilyName();
        reportConfiguration1.addFamily(iLicenseFamily38);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(claimStatistic16);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(defaults21);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "SpdxBuilder: null" + "'", str40, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "SpdxBuilder: null" + "'", str41, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "TMF  " + "'", str44, "TMF  ");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "SpdxBuilder: null" + "'", str45, "SpdxBuilder: null");
    }

    @Test
    public void test06919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06919");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter5 = xmlWriter1.attribute((java.lang.CharSequence) "182c6bda-66b3-41a7-a4b2-bceee007bb27", (java.lang.CharSequence) "ed42033c-bb2d-4a0c-b6fe-b912f4d3a137");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06920");
        java.io.File file0 = null;
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        org.apache.rat.utils.ReportingSet.Options options3 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration2.licenseDuplicateOption(options3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        java.io.FilenameFilter filenameFilter7 = reportConfiguration6.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter8 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet9 = reportConfiguration6.getLicenses(licenseFilter8);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders10 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration6.setAddLicenseHeaders(addLicenseHeaders10);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic14 = org.apache.rat.Reporter.report(reportConfiguration13);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter15);
        org.apache.rat.Reporter.listLicenses(reportConfiguration6, licenseFilter15);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration6, licenseFilter28);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier34 = reportConfiguration33.getOutput();
        reportConfiguration6.setOut(outputStreamIOSupplier34);
        org.apache.rat.utils.Log.Level level36 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration6.logLicenseCollisions(level36);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter38 = reportConfiguration6.getDirectoryFilter();
        reportConfiguration2.setInputFileFilter((java.io.FilenameFilter) iOFileFilter38);
        java.nio.file.Path path40 = null;
        boolean boolean41 = iOFileFilter38.matches(path40);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter42 = iOFileFilter38.negate();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.DirectoryWalker directoryWalker43 = new org.apache.rat.walker.DirectoryWalker(file0, iOFileFilter42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + options3 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options3.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNull(filenameFilter7);
        org.junit.Assert.assertTrue("'" + licenseFilter8 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter8.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet9);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders10 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders10.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier34);
        org.junit.Assert.assertTrue("'" + level36 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level36.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(iOFileFilter42);
    }

    @Test
    public void test06921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06921");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.report.IReportable iReportable13 = null;
        reportConfiguration1.setReportable(iReportable13);
        org.apache.rat.report.IReportable iReportable15 = reportConfiguration1.getReportable();
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        java.io.FilenameFilter filenameFilter18 = reportConfiguration17.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense19 = null;
        reportConfiguration17.addLicense(iLicense19);
        org.apache.rat.license.ILicenseFamily iLicenseFamily21 = null;
        reportConfiguration17.addFamily(iLicenseFamily21);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier23 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration17.setStyleSheet(inputStreamIOSupplier23);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier23);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(iReportable15);
        org.junit.Assert.assertNull(filenameFilter18);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier23);
        org.junit.Assert.assertNull(claimStatistic26);
    }

    @Test
    public void test06922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06922");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender1 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.annotation.ApacheV2LicenseAppender apacheV2LicenseAppender2 = new org.apache.rat.annotation.ApacheV2LicenseAppender((org.apache.rat.utils.Log) defaultLog0);
        java.util.regex.Pattern pattern3 = null;
        org.apache.rat.header.HeaderBean headerBean5 = new org.apache.rat.header.HeaderBean(pattern3, true);
        defaultLog0.info((java.lang.Object) true);
        org.apache.rat.utils.Log.Level level7 = defaultLog0.getLevel();
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic10 = org.apache.rat.Reporter.report(reportConfiguration9);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic13 = org.apache.rat.Reporter.report(reportConfiguration12);
        org.apache.rat.utils.ReportingSet.Options options14 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration12.licenseDuplicateOption(options14);
        reportConfiguration9.familyDuplicateOption(options14);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier17 = reportConfiguration9.getWriter();
        boolean boolean18 = reportConfiguration9.isAddingLicensesForced();
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic21 = org.apache.rat.Reporter.report(reportConfiguration20);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier22 = reportConfiguration20.getOutput();
        reportConfiguration9.setOut(outputStreamIOSupplier22);
        defaultLog0.error((java.lang.Object) outputStreamIOSupplier22);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.rat.utils.ReportingSet.Options options31 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration29.licenseDuplicateOption(options31);
        reportConfiguration26.familyDuplicateOption(options31);
        boolean boolean34 = reportConfiguration26.isStyleReport();
        org.apache.rat.license.ILicense[] iLicenseArray35 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet36 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet36, iLicenseArray35);
        java.lang.String[] strArray50 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory53 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet36, (java.util.Collection<java.lang.String>) strList51);
        java.io.FilenameFilter filenameFilter54 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList51);
        java.io.FilenameFilter filenameFilter55 = org.apache.rat.Report.parseExclusions((java.util.List<java.lang.String>) strList51);
        reportConfiguration26.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strList51);
        reportConfiguration26.setCopyrightMessage("9ec38a8d-0e0f-4c31-8d12-d6138412a101");
        defaultLog0.warn((java.lang.Object) "9ec38a8d-0e0f-4c31-8d12-d6138412a101");
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        java.lang.String[] strArray66 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet67 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        boolean boolean70 = strSet67.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.lang.String str71 = strSet67.first();
        java.lang.String[] strArray77 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet78, strArray77);
        boolean boolean81 = strSet78.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean83 = strSet78.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction84 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet85 = strSet78.setMsgFormat(strFunction84);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet87 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily88 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet87);
        boolean boolean89 = strSet78.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet87);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet91 = strSet78.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.utils.Log log92 = null;
        org.apache.rat.ReportConfiguration reportConfiguration93 = new org.apache.rat.ReportConfiguration(log92);
        org.apache.rat.utils.ReportingSet.Options options94 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration93.licenseDuplicateOption(options94);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet96 = strSet91.setDuplicateOption(options94);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet97 = strSet67.setDuplicateOption(options94);
        int int98 = strSet67.size();
        reportConfiguration60.removeApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet67);
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertTrue("'" + level7 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level7.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(claimStatistic10);
        org.junit.Assert.assertNull(claimStatistic13);
        org.junit.Assert.assertTrue("'" + options14 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options14.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(claimStatistic21);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier22);
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertTrue("'" + options31 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options31.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(iLicenseArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(filenameFilter54);
        org.junit.Assert.assertNotNull(filenameFilter55);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "AllBuilder:" + "'", str71, "AllBuilder:");
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(iLicenseFamilySet87);
        org.junit.Assert.assertNull(iLicenseFamily88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertTrue("'" + options94 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options94.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertNotNull(strSet97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 6 + "'", int98 == 6);
    }

    @Test
    public void test06923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06923");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet15 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet15);
        boolean boolean17 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet15);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet19 = strSet6.tailSet("http://org/apache/rat/meta-data#HeaderCategory");
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.utils.ReportingSet.Options options22 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration21.licenseDuplicateOption(options22);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet24 = strSet19.setDuplicateOption(options22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet26 = strSet19.headSet("cf0b2491-f3c2-4580-8ac7-e69e3a8cba75");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: toKey out of range");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(iLicenseFamilySet15);
        org.junit.Assert.assertNull(iLicenseFamily16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + options22 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options22.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet24);
    }

    @Test
    public void test06924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06924");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder3 = copyrightBuilder0.setEnd(".cvsignore");
        boolean boolean4 = copyrightBuilder0.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder6 = copyrightBuilder0.setEnd("notice");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder8 = copyrightBuilder6.setEnd("9df69ca9-2229-47b6-966b-221652fd7d08");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = copyrightBuilder8.setStart("MathcerRefBuilder: 3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder10.setOwner("dcae14f6-99fc-4a48-a420-37c965fde608");
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder6);
        org.junit.Assert.assertNotNull(copyrightBuilder8);
        org.junit.Assert.assertNotNull(copyrightBuilder10);
        org.junit.Assert.assertNotNull(copyrightBuilder12);
    }

    @Test
    public void test06925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06925");
        org.apache.rat.license.ILicense[] iLicenseArray1 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet2 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet2, iLicenseArray1);
        java.lang.String[] strArray16 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory19 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet2, (java.util.Collection<java.lang.String>) strList17);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet21 = licenseSetFactory19.getLicenseFamilies(licenseFilter20);
        org.apache.rat.license.ILicense[] iLicenseArray22 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet23 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet23, iLicenseArray22);
        java.lang.String[] strArray37 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory40 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet23, (java.util.Collection<java.lang.String>) strList38);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration55.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter64);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet68 = licenseSetFactory40.getLicenses(licenseFilter64);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet69 = licenseSetFactory19.getLicenseFamilies(licenseFilter64);
        org.apache.rat.policy.DefaultPolicy defaultPolicy70 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet69);
        org.apache.rat.license.ILicenseFamily iLicenseFamily71 = org.apache.rat.license.LicenseFamilySetFactory.search("The MIT License", iLicenseFamilySet69);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet72 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray73 = strSet72.toArray();
        org.apache.rat.utils.Log log74 = null;
        org.apache.rat.ReportConfiguration reportConfiguration75 = new org.apache.rat.ReportConfiguration(log74);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic76 = org.apache.rat.Reporter.report(reportConfiguration75);
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic79 = org.apache.rat.Reporter.report(reportConfiguration78);
        org.apache.rat.utils.ReportingSet.Options options80 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration78.licenseDuplicateOption(options80);
        reportConfiguration75.familyDuplicateOption(options80);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier83 = reportConfiguration75.getWriter();
        boolean boolean84 = reportConfiguration75.isAddingLicensesForced();
        org.apache.rat.utils.Log log85 = null;
        org.apache.rat.ReportConfiguration reportConfiguration86 = new org.apache.rat.ReportConfiguration(log85);
        reportConfiguration86.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level89 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration86.logFamilyCollisions(level89);
        reportConfiguration75.logLicenseCollisions(level89);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet92 = strSet72.setLogLevel(level89);
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory93 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet69, (java.util.Collection<java.lang.String>) strSet92);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter94 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet95 = licenseFamilySetFactory93.getFamilies(licenseFilter94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iLicenseArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet21);
        org.junit.Assert.assertNotNull(iLicenseArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet68);
        org.junit.Assert.assertNotNull(iLicenseFamilySet69);
        org.junit.Assert.assertNull(iLicenseFamily71);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertNull(claimStatistic76);
        org.junit.Assert.assertNull(claimStatistic79);
        org.junit.Assert.assertTrue("'" + options80 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options80.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + level89 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level89.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet92);
    }

    @Test
    public void test06926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06926");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder0 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str1 = regexBuilder0.toString();
        java.lang.String str2 = regexBuilder0.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder4 = regexBuilder0.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        java.lang.String str5 = regexBuilder4.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = regexBuilder4.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = regexBuilder4.build();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "RegexBuilder: null" + "'", str1, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RegexBuilder: null" + "'", str2, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae" + "'", str5, "RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
    }

    @Test
    public void test06927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06927");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        java.io.FilenameFilter filenameFilter27 = reportConfiguration1.getInputFileFilter();
        reportConfiguration1.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable30 = null;
        reportConfiguration1.setReportable(iReportable30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet33 = reportConfiguration1.getLicenses(licenseFilter32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier37 = reportConfiguration35.getOutput();
        org.apache.rat.license.ILicense iLicense38 = null;
        reportConfiguration35.addLicense(iLicense38);
        org.apache.rat.Defaults.Builder builder40 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults41 = builder40.build();
        reportConfiguration35.setFrom(defaults41);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = defaults41.getLicenses(licenseFilter43);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration1.getLicenses(licenseFilter43);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier46 = reportConfiguration1.getStyleSheet();
        java.io.File file47 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setOut(file47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: output file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter27);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.approved));
        org.junit.Assert.assertNotNull(iLicenseSet33);
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(defaults41);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertNull(inputStreamIOSupplier46);
    }

    @Test
    public void test06928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06928");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter6 = xmlWriter1.attribute((java.lang.CharSequence) "Datum [ name ='binary',value =' ']", (java.lang.CharSequence) "7e27cd62-4403-40ab-a9f5-16e7c59ab2f1");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06929");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str1 = copyrightBuilder0.toString();
        java.lang.String str2 = copyrightBuilder0.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder4 = copyrightBuilder0.setOwner("The MIT License");
        java.lang.String str5 = copyrightBuilder4.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = copyrightBuilder4.build();
        org.junit.Assert.assertNotNull(copyrightBuilder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str1, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str2, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Copyright Builder: s:null e:null o:The MIT License" + "'", str5, "Copyright Builder: s:null e:null o:The MIT License");
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
    }

    @Test
    public void test06930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06930");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray2 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList3 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3, iLicenseFamilyArray2);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList3);
        org.apache.rat.utils.Log.Level level6 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logLicenseCollisions(level6);
        org.apache.rat.report.IReportable iReportable8 = reportConfiguration1.getReportable();
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        reportConfiguration10.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration10.logLicenseCollisions(level13);
        reportConfiguration10.addApprovedLicenseCategory("73fbee1b-7ed9-442a-968e-b2b525ca688f");
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        java.io.FilenameFilter filenameFilter19 = reportConfiguration18.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter20 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet21 = reportConfiguration18.getLicenses(licenseFilter20);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders22 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration18.setAddLicenseHeaders(addLicenseHeaders22);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter27);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter27);
        org.apache.rat.utils.Log log30 = null;
        org.apache.rat.ReportConfiguration reportConfiguration31 = new org.apache.rat.ReportConfiguration(log30);
        java.io.FilenameFilter filenameFilter32 = reportConfiguration31.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter33 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet34 = reportConfiguration31.getLicenses(licenseFilter33);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders35 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration31.setAddLicenseHeaders(addLicenseHeaders35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter40 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration38, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration31, licenseFilter40);
        org.apache.rat.Reporter.listLicenses(reportConfiguration18, licenseFilter40);
        java.io.FilenameFilter filenameFilter44 = reportConfiguration18.getInputFileFilter();
        reportConfiguration18.setStyleReport(false);
        org.apache.rat.report.IReportable iReportable47 = null;
        reportConfiguration18.setReportable(iReportable47);
        org.apache.rat.Defaults.Builder builder50 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults51 = builder50.build();
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        java.io.FilenameFilter filenameFilter67 = reportConfiguration66.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet69 = reportConfiguration66.getLicenses(licenseFilter68);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders70 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration66.setAddLicenseHeaders(addLicenseHeaders70);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter75);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet78 = reportConfiguration53.getLicenseFamilies(licenseFilter75);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet79 = defaults51.getLicenses(licenseFilter75);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet80 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet79);
        org.apache.rat.license.ILicense iLicense81 = org.apache.rat.license.LicenseSetFactory.search("TMF", iLicenseSet79);
        reportConfiguration18.addLicense(iLicense81);
        java.lang.String str83 = iLicense81.derivedFrom();
        reportConfiguration10.addLicense(iLicense81);
        reportConfiguration1.addLicense(iLicense81);
        java.lang.String str86 = iLicense81.derivedFrom();
        java.lang.String str87 = iLicense81.getNotes();
        org.junit.Assert.assertNotNull(iLicenseFamilyArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + level6 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level6.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(iReportable8);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level13.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter19);
        org.junit.Assert.assertTrue("'" + licenseFilter20 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter20.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet21);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders22 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders22.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter32);
        org.junit.Assert.assertTrue("'" + licenseFilter33 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter33.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet34);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders35 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders35.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertTrue("'" + licenseFilter40 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter40.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter44);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(defaults51);
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet69);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders70 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders70.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet78);
        org.junit.Assert.assertNotNull(iLicenseSet79);
        org.junit.Assert.assertNotNull(iLicense81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "BSD-3" + "'", str83, "BSD-3");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "BSD-3" + "'", str86, "BSD-3");
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test06931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06931");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder1 = org.apache.rat.configuration.MatcherBuilderTracker.getMatcherBuilder("f65b7401-dce0-4358-b870-cf848940a8e0");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: ?Valid builders?all?matcherRef?copyright?not?regex?spdx?text?any?ERROR MSG?No matcher builder named f65b7401-dce0-4358-b870-cf848940a8e0");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06932");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.license.ILicense[] iLicenseArray3 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet4 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet4, iLicenseArray3);
        java.lang.String[] strArray18 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory21 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet4, (java.util.Collection<java.lang.String>) strList19);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        java.io.FilenameFilter filenameFilter24 = reportConfiguration23.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet26 = reportConfiguration23.getLicenses(licenseFilter25);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders27 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration23.setAddLicenseHeaders(addLicenseHeaders27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration30, licenseFilter32);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter32);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        java.io.FilenameFilter filenameFilter37 = reportConfiguration36.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet39 = reportConfiguration36.getLicenses(licenseFilter38);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders40 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration36.setAddLicenseHeaders(addLicenseHeaders40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter45 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration43, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter45);
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter45);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = licenseSetFactory21.getLicenses(licenseFilter45);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet49);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet51 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean53 = strSet51.addIfNotPresent("OASIS Open License");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet55 = strSet51.tailSet("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        org.apache.rat.license.LicenseSetFactory licenseSetFactory56 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet49, (java.util.Collection<java.lang.String>) strSet55);
        java.util.function.Function<java.lang.String, java.lang.String> strFunction57 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet58 = strSet55.setMsgFormat(strFunction57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = strSet58.first();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(iLicenseArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(filenameFilter24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet26);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders27 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders27.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet39);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders40 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders40.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertTrue("'" + licenseFilter45 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter45.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(strSet58);
    }

    @Test
    public void test06933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06933");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder2.setMatchers(strMap4);
        org.apache.rat.configuration.builders.AllBuilder allBuilder6 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setStart("OASIS");
        java.lang.String str10 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder15.setStart("OASIS");
        java.lang.String str18 = copyrightBuilder15.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder15.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str23 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = copyrightBuilder22.setEnd(".cvsignore");
        boolean boolean26 = copyrightBuilder22.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str28 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder27.setEnd(".cvsignore");
        boolean boolean31 = copyrightBuilder27.hasId();
        java.lang.String str32 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean38 = matcherRefBuilder37.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap39 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = matcherRefBuilder37.setMatchers(strMap39);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.lang.String str44 = matcherRefBuilder42.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder42.setMatchers(strMap45);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray47 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, allBuilder6, copyrightBuilder12, matcherRefBuilder13, copyrightBuilder15, copyrightBuilder21, copyrightBuilder22, copyrightBuilder27, copyrightBuilder33, anyBuilder36, matcherRefBuilder37, copyrightBuilder41, matcherRefBuilder42 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList48 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48, builderArray47);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder50 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48);
        java.lang.String str51 = notBuilder0.toString();
        java.lang.String str52 = notBuilder0.toString();
        java.lang.String str53 = notBuilder0.toString();
        java.lang.String str54 = notBuilder0.toString();
        java.lang.String str55 = notBuilder0.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher56 = notBuilder0.build();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: 'not' type matcher requires one and only one enclosed matcher");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str10, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str18, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str23, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str28, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str32, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(anyBuilder36);
        org.junit.Assert.assertNotNull(matcherRefBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MathcerRefBuilder: null" + "'", str44, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(builderArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(abstractBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str51, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str52, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str53, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str54, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str55, "NotBuilder: MathcerRefBuilder: null");
    }

    @Test
    public void test06934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06934");
        java.util.regex.Pattern pattern0 = null;
        org.apache.rat.header.HeaderBean headerBean2 = new org.apache.rat.header.HeaderBean(pattern0, true);
        headerBean2.setMatch(false);
        boolean boolean5 = headerBean2.isMatch();
        java.util.regex.Pattern pattern6 = headerBean2.getHeaderPattern();
        java.util.regex.Pattern pattern7 = null;
        headerBean2.setHeaderPattern(pattern7);
        java.util.regex.Pattern pattern9 = null;
        headerBean2.setHeaderPattern(pattern9);
        boolean boolean11 = headerBean2.isMatch();
        java.util.regex.Pattern pattern12 = headerBean2.getHeaderPattern();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(pattern6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(pattern12);
    }

    @Test
    public void test06935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06935");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isAudio("6232a9af-c312-410c-9bbb-6b12d7725116");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test06936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06936");
        java.io.Reader reader0 = null;
        org.apache.rat.header.LineNumberReader lineNumberReader1 = new org.apache.rat.header.LineNumberReader(reader0);
        int int2 = lineNumberReader1.getLineNumber();
        int int3 = lineNumberReader1.getLineNumber();
        int int4 = lineNumberReader1.getLineNumber();
        int int5 = lineNumberReader1.getLineNumber();
        int int6 = lineNumberReader1.getLineNumber();
        int int7 = lineNumberReader1.getLineNumber();
        int int8 = lineNumberReader1.getLineNumber();
        int int9 = lineNumberReader1.getLineNumber();
        int int10 = lineNumberReader1.getLineNumber();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = lineNumberReader1.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test06937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06937");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder1 = org.apache.rat.configuration.MatcherBuilderTracker.getMatcherBuilder("8db879cc-ee3e-4155-b6f2-7a5caecabc30");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: ?Valid builders?all?matcherRef?copyright?not?regex?spdx?text?any?ERROR MSG?No matcher builder named 8db879cc-ee3e-4155-b6f2-7a5caecabc30");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06938");
        java.lang.String[] strArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("ac588fb8-47ff-4c8a-b192-4b692ac6762c", strArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06939");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("AllBuilder:");
        org.apache.rat.Defaults.Builder builder6 = builder4.add("?????");
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("");
        org.apache.rat.Defaults.Builder builder9 = builder6.noDefault();
        org.apache.rat.Defaults.Builder builder10 = builder6.noDefault();
        org.apache.rat.Defaults.Builder builder12 = builder10.remove("");
        org.apache.rat.Defaults.Builder builder14 = builder10.remove("Copyright Builder: s:SpdxBuilder: Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false '] e:W3C Software Copyright o:null");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test06940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06940");
        org.apache.rat.utils.Log log1 = null;
        org.apache.rat.ReportConfiguration reportConfiguration2 = new org.apache.rat.ReportConfiguration(log1);
        reportConfiguration2.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        java.io.FilenameFilter filenameFilter7 = reportConfiguration6.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter8 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet9 = reportConfiguration6.getLicenses(licenseFilter8);
        reportConfiguration2.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet9);
        reportConfiguration2.removeApprovedLicenseCategory("The MIT License");
        org.apache.rat.license.ILicense[] iLicenseArray13 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet14 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet14, iLicenseArray13);
        java.lang.String[] strArray28 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory31 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet14, (java.util.Collection<java.lang.String>) strList29);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter32 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet33 = licenseSetFactory31.getLicenseFamilies(licenseFilter32);
        org.apache.rat.policy.DefaultPolicy defaultPolicy34 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet33);
        org.apache.rat.api.Document document35 = null;
        defaultPolicy34.analyse(document35);
        org.apache.rat.utils.Log log37 = null;
        org.apache.rat.ReportConfiguration reportConfiguration38 = new org.apache.rat.ReportConfiguration(log37);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic39 = org.apache.rat.Reporter.report(reportConfiguration38);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.rat.utils.ReportingSet.Options options43 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration41.licenseDuplicateOption(options43);
        reportConfiguration38.familyDuplicateOption(options43);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier46 = reportConfiguration38.getWriter();
        org.apache.rat.report.IReportable iReportable47 = null;
        reportConfiguration38.setReportable(iReportable47);
        org.apache.rat.utils.Log log49 = null;
        org.apache.rat.ReportConfiguration reportConfiguration50 = new org.apache.rat.ReportConfiguration(log49);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier51 = reportConfiguration50.getOutput();
        reportConfiguration50.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log54 = reportConfiguration50.getLog();
        org.apache.rat.Defaults.Builder builder55 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder56 = builder55.noDefault();
        org.apache.rat.Defaults defaults57 = builder56.build();
        reportConfiguration50.setFrom(defaults57);
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder59 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str60 = iLicenseFamilyBuilder59.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder62 = iLicenseFamilyBuilder59.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder64 = iLicenseFamilyBuilder59.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder66 = iLicenseFamilyBuilder59.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str67 = iLicenseFamilyBuilder59.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder69 = iLicenseFamilyBuilder59.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily70 = iLicenseFamilyBuilder59.build();
        reportConfiguration50.addApprovedLicenseCategory(iLicenseFamily70);
        reportConfiguration38.addFamily(iLicenseFamily70);
        defaultPolicy34.add(iLicenseFamily70);
        reportConfiguration2.addFamily(iLicenseFamily70);
        java.lang.String str75 = iLicenseFamily70.getFamilyCategory();
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray76 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList77 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList77, iLicenseFamilyArray76);
        org.apache.rat.policy.DefaultPolicy defaultPolicy79 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList77);
        org.apache.rat.api.Document document80 = null;
        defaultPolicy79.analyse(document80);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet82 = defaultPolicy79.getApprovedLicenseNames();
        org.apache.rat.license.ILicenseFamily iLicenseFamily83 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily70, iLicenseFamilySet82);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.license.ILicenseFamily iLicenseFamily84 = org.apache.rat.license.LicenseFamilySetFactory.search("", iLicenseFamilySet82);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: LicenseFamily Category must be specified");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter7);
        org.junit.Assert.assertTrue("'" + licenseFilter8 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter8.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet9);
        org.junit.Assert.assertNotNull(iLicenseArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter32 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter32.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet33);
        org.junit.Assert.assertNull(claimStatistic39);
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertTrue("'" + options43 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options43.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier46);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier51);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(defaults57);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "MIT  " + "'", str67, "MIT  ");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(iLicenseFamily70);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "MIT  " + "'", str75, "MIT  ");
        org.junit.Assert.assertNotNull(iLicenseFamilyArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet82);
        org.junit.Assert.assertNull(iLicenseFamily83);
    }

    @Test
    public void test06941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06941");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.configuration.Format format6 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader7 = format6.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader8 = format6.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader9 = format6.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet10 = licenseReader9.readLicenses();
        org.apache.rat.license.ILicense iLicense11 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet10);
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean23 = strSet18.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction24 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet25 = strSet18.setMsgFormat(strFunction24);
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        java.io.FilenameFilter filenameFilter29 = reportConfiguration28.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter30 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet31 = reportConfiguration28.getLicenses(licenseFilter30);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders32 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration28.setAddLicenseHeaders(addLicenseHeaders32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter37);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter37);
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        java.io.FilenameFilter filenameFilter42 = reportConfiguration41.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter43 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = reportConfiguration41.getLicenses(licenseFilter43);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders45 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration41.setAddLicenseHeaders(addLicenseHeaders45);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic49 = org.apache.rat.Reporter.report(reportConfiguration48);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration41, licenseFilter50);
        org.apache.rat.Reporter.listLicenses(reportConfiguration28, licenseFilter50);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier56 = reportConfiguration55.getOutput();
        reportConfiguration28.setOut(outputStreamIOSupplier56);
        org.apache.rat.utils.Log log58 = null;
        org.apache.rat.ReportConfiguration reportConfiguration59 = new org.apache.rat.ReportConfiguration(log58);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic60 = org.apache.rat.Reporter.report(reportConfiguration59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.utils.ReportingSet.Options options64 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration62.licenseDuplicateOption(options64);
        reportConfiguration59.familyDuplicateOption(options64);
        reportConfiguration28.licenseDuplicateOption(options64);
        reportConfiguration28.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logLicenseCollisions(level74);
        reportConfiguration28.logLicenseCollisions(level74);
        defaultLog26.setLevel(level74);
        defaultLog26.warn((java.lang.Object) "GNU General Public License, version 3");
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog26);
        org.apache.rat.utils.DefaultLog defaultLog81 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log82 = null;
        org.apache.rat.ReportConfiguration reportConfiguration83 = new org.apache.rat.ReportConfiguration(log82);
        reportConfiguration83.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level86 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration83.logFamilyCollisions(level86);
        defaultLog81.setLevel(level86);
        defaultLog26.debug((java.lang.Object) level86);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet90 = strSet25.setLogLevel(level86);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory91 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet10, (java.util.Collection<java.lang.String>) strSet90);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory92 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet4, (java.util.Collection<java.lang.String>) strSet90);
        org.apache.rat.utils.Log log93 = null;
        org.apache.rat.ReportConfiguration reportConfiguration94 = new org.apache.rat.ReportConfiguration(log93);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic95 = org.apache.rat.Reporter.report(reportConfiguration94);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter96 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration94, licenseFilter96);
        java.util.SortedSet<java.lang.String> strSet98 = licenseSetFactory92.getLicenseFamilyIds(licenseFilter96);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + format6 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format6.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader7);
        org.junit.Assert.assertNotNull(matcherReader8);
        org.junit.Assert.assertNotNull(licenseReader9);
        org.junit.Assert.assertNotNull(iLicenseSet10);
        org.junit.Assert.assertNull(iLicense11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertNull(filenameFilter29);
        org.junit.Assert.assertTrue("'" + licenseFilter30 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter30.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet31);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders32 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders32.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter42);
        org.junit.Assert.assertTrue("'" + licenseFilter43 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter43.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders45 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders45.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier56);
        org.junit.Assert.assertNull(claimStatistic60);
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + options64 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options64.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(defaultLog81);
        org.junit.Assert.assertTrue("'" + level86 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level86.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertNull(claimStatistic95);
        org.junit.Assert.assertTrue("'" + licenseFilter96 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter96.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(strSet98);
    }

    @Test
    public void test06942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06942");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet6.spliterator();
        org.apache.rat.utils.DefaultLog defaultLog26 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        reportConfiguration28.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration28.logFamilyCollisions(level31);
        defaultLog26.setLevel(level31);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        java.io.FilenameFilter filenameFilter36 = reportConfiguration35.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = reportConfiguration35.getLicenses(licenseFilter37);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders39 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration35.setAddLicenseHeaders(addLicenseHeaders39);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic43 = org.apache.rat.Reporter.report(reportConfiguration42);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter44);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter44);
        org.apache.rat.utils.Log log47 = null;
        org.apache.rat.ReportConfiguration reportConfiguration48 = new org.apache.rat.ReportConfiguration(log47);
        java.io.FilenameFilter filenameFilter49 = reportConfiguration48.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter50 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet51 = reportConfiguration48.getLicenses(licenseFilter50);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders52 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration48.setAddLicenseHeaders(addLicenseHeaders52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration48, licenseFilter57);
        org.apache.rat.Reporter.listLicenses(reportConfiguration35, licenseFilter57);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier63 = reportConfiguration62.getOutput();
        reportConfiguration35.setOut(outputStreamIOSupplier63);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic67 = org.apache.rat.Reporter.report(reportConfiguration66);
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic70 = org.apache.rat.Reporter.report(reportConfiguration69);
        org.apache.rat.utils.ReportingSet.Options options71 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration69.licenseDuplicateOption(options71);
        reportConfiguration66.familyDuplicateOption(options71);
        reportConfiguration35.licenseDuplicateOption(options71);
        reportConfiguration35.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log77 = null;
        org.apache.rat.ReportConfiguration reportConfiguration78 = new org.apache.rat.ReportConfiguration(log77);
        reportConfiguration78.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level81 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration78.logLicenseCollisions(level81);
        reportConfiguration35.logLicenseCollisions(level81);
        defaultLog26.log(level81, "GNU General Public License, version 1");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet86 = strSet6.setLog((org.apache.rat.utils.Log) defaultLog26);
        org.apache.rat.utils.ReportingSet.Options options87 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet88 = strSet86.setDuplicateOption(options87);
        boolean boolean89 = strSet88.isEmpty();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(defaultLog26);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level31.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter36);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders39 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders39.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter49);
        org.junit.Assert.assertTrue("'" + licenseFilter50 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter50.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet51);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders52 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders52.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier63);
        org.junit.Assert.assertNull(claimStatistic67);
        org.junit.Assert.assertNull(claimStatistic70);
        org.junit.Assert.assertTrue("'" + options71 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options71.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level81 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level81.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + options87 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options87.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test06943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06943");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        reportConfiguration1.removeApprovedLicenseCategory("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier6 = reportConfiguration1.getOutput();
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier9 = reportConfiguration8.getOutput();
        reportConfiguration8.removeApprovedLicenseCategory("EF7A8B13-64C3-4510-BB0C-DBF208E1E73F");
        java.util.SortedSet<java.lang.String> strSet12 = reportConfiguration8.getApprovedLicenseCategories();
        org.apache.rat.Defaults.Builder builder13 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults14 = builder13.build();
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        java.io.FilenameFilter filenameFilter30 = reportConfiguration29.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter31 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet32 = reportConfiguration29.getLicenses(licenseFilter31);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders33 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration29.setAddLicenseHeaders(addLicenseHeaders33);
        org.apache.rat.utils.Log log35 = null;
        org.apache.rat.ReportConfiguration reportConfiguration36 = new org.apache.rat.ReportConfiguration(log35);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic37 = org.apache.rat.Reporter.report(reportConfiguration36);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter38 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration36, licenseFilter38);
        org.apache.rat.Reporter.listLicenses(reportConfiguration29, licenseFilter38);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet41 = reportConfiguration16.getLicenseFamilies(licenseFilter38);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet42 = defaults14.getLicenses(licenseFilter38);
        org.apache.rat.utils.Log log43 = null;
        org.apache.rat.ReportConfiguration reportConfiguration44 = new org.apache.rat.ReportConfiguration(log43);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier45 = reportConfiguration44.getOutput();
        reportConfiguration44.removeApprovedLicenseCategory("EF7A8B13-64C3-4510-BB0C-DBF208E1E73F");
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.utils.ReportingSet.Options options54 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration52.licenseDuplicateOption(options54);
        reportConfiguration49.familyDuplicateOption(options54);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier57 = reportConfiguration49.getWriter();
        org.apache.rat.report.IReportable iReportable58 = null;
        reportConfiguration49.setReportable(iReportable58);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray60 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList61 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList61, iLicenseFamilyArray60);
        org.apache.rat.policy.DefaultPolicy defaultPolicy63 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList61);
        reportConfiguration49.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList61);
        org.apache.rat.utils.Log log65 = null;
        org.apache.rat.ReportConfiguration reportConfiguration66 = new org.apache.rat.ReportConfiguration(log65);
        java.io.FilenameFilter filenameFilter67 = reportConfiguration66.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter68 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet69 = reportConfiguration66.getLicenses(licenseFilter68);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders70 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration66.setAddLicenseHeaders(addLicenseHeaders70);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic74 = org.apache.rat.Reporter.report(reportConfiguration73);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter75);
        org.apache.rat.Reporter.listLicenses(reportConfiguration66, licenseFilter75);
        org.apache.rat.utils.Log log78 = null;
        org.apache.rat.ReportConfiguration reportConfiguration79 = new org.apache.rat.ReportConfiguration(log78);
        java.io.FilenameFilter filenameFilter80 = reportConfiguration79.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter81 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet82 = reportConfiguration79.getLicenses(licenseFilter81);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders83 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration79.setAddLicenseHeaders(addLicenseHeaders83);
        org.apache.rat.utils.Log log85 = null;
        org.apache.rat.ReportConfiguration reportConfiguration86 = new org.apache.rat.ReportConfiguration(log85);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic87 = org.apache.rat.Reporter.report(reportConfiguration86);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter88 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration86, licenseFilter88);
        org.apache.rat.Reporter.listLicenses(reportConfiguration79, licenseFilter88);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet91 = reportConfiguration66.getLicenseFamilies(licenseFilter88);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet92 = reportConfiguration49.getLicenses(licenseFilter88);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration44, licenseFilter88);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet94 = defaults14.getLicenses(licenseFilter88);
        reportConfiguration8.setFrom(defaults14);
        reportConfiguration1.setFrom(defaults14);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter97 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet98 = defaults14.getLicenseFamilies(licenseFilter97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamIOSupplier6);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier9);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(defaults14);
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter30);
        org.junit.Assert.assertTrue("'" + licenseFilter31 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter31.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet32);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders33 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders33.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic37);
        org.junit.Assert.assertTrue("'" + licenseFilter38 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter38.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet41);
        org.junit.Assert.assertNotNull(iLicenseSet42);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier45);
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertTrue("'" + options54 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options54.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier57);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(filenameFilter67);
        org.junit.Assert.assertTrue("'" + licenseFilter68 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter68.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet69);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders70 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders70.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter80);
        org.junit.Assert.assertTrue("'" + licenseFilter81 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter81.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet82);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders83 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders83.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic87);
        org.junit.Assert.assertTrue("'" + licenseFilter88 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter88.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet91);
        org.junit.Assert.assertNotNull(iLicenseSet92);
        org.junit.Assert.assertNotNull(iLicenseSet94);
    }

    @Test
    public void test06944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06944");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher3 = new org.apache.rat.analysis.matchers.CopyrightMatcher("TextBuilderstandard", "8ECB8CCE06E4400F84D9AD1CF6289FDA", "03f57a5c-be91-4df3-b5be-50bd5e31e571");
    }

    @Test
    public void test06945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06945");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder2.setMatchers(strMap4);
        org.apache.rat.configuration.builders.AllBuilder allBuilder6 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setStart("OASIS");
        java.lang.String str10 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder15.setStart("OASIS");
        java.lang.String str18 = copyrightBuilder15.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder15.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str23 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = copyrightBuilder22.setEnd(".cvsignore");
        boolean boolean26 = copyrightBuilder22.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str28 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder27.setEnd(".cvsignore");
        boolean boolean31 = copyrightBuilder27.hasId();
        java.lang.String str32 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean38 = matcherRefBuilder37.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap39 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = matcherRefBuilder37.setMatchers(strMap39);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.lang.String str44 = matcherRefBuilder42.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder42.setMatchers(strMap45);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray47 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, allBuilder6, copyrightBuilder12, matcherRefBuilder13, copyrightBuilder15, copyrightBuilder21, copyrightBuilder22, copyrightBuilder27, copyrightBuilder33, anyBuilder36, matcherRefBuilder37, copyrightBuilder41, matcherRefBuilder42 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList48 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48, builderArray47);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder50 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48);
        java.lang.String str51 = notBuilder0.toString();
        java.lang.String str52 = notBuilder0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str10, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str18, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str23, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str28, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str32, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(anyBuilder36);
        org.junit.Assert.assertNotNull(matcherRefBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MathcerRefBuilder: null" + "'", str44, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(builderArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(abstractBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str51, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str52, "NotBuilder: MathcerRefBuilder: null");
    }

    @Test
    public void test06946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06946");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("GPL3 ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = sPDXMatcherFactory0.create("6620e9ee-d651-4c18-8162-edad6d18368e");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = sPDXMatcherFactory0.create("JAVA");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = sPDXMatcherFactory0.create("RegexBuilder: d4148d3a-edbc-4672-b347-0fa619553f91");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = sPDXMatcherFactory0.create(".cvsignore");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher12 = sPDXMatcherFactory0.create("TextBuilder: COMMON DEVELOPMENT A...");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher14 = sPDXMatcherFactory0.create("Datum [ name ='3c840dc2-bef0-42b5-b26c-35a568d53a24',value ='NotBuilder: null ']");
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcher12);
        org.junit.Assert.assertNotNull(iHeaderMatcher14);
    }

    @Test
    public void test06947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06947");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        java.io.FilenameFilter filenameFilter12 = reportConfiguration1.getInputFileFilter();
        boolean boolean13 = reportConfiguration1.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier14 = reportConfiguration1.getStyleSheet();
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic17 = org.apache.rat.Reporter.report(reportConfiguration16);
        reportConfiguration16.addApprovedLicenseCategory("Copyright Builder: s:null e:null o:null");
        java.util.SortedSet<java.lang.String> strSet20 = reportConfiguration16.getApprovedLicenseCategories();
        java.io.FilenameFilter filenameFilter21 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.utils.ReportingSet.Options options25 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration23.licenseDuplicateOption(options25);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet28 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily29 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet28);
        org.apache.rat.policy.DefaultPolicy defaultPolicy30 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet28);
        reportConfiguration23.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet28);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet32 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.lang.Object[] objArray33 = strSet32.toArray();
        org.apache.rat.license.LicenseFamilySetFactory licenseFamilySetFactory34 = new org.apache.rat.license.LicenseFamilySetFactory(iLicenseFamilySet28, (java.util.Collection<java.lang.String>) strSet32);
        reportConfiguration16.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet32);
        org.apache.rat.document.ToNameTransformer toNameTransformer36 = new org.apache.rat.document.ToNameTransformer();
        org.apache.rat.utils.DefaultLog defaultLog37 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder38 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder40 = builder38.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher44 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state45 = copyrightMatcher44.finalizeState();
        org.apache.rat.license.ILicense.Builder builder46 = builder40.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher44);
        org.apache.rat.license.ILicense.Builder builder48 = builder46.setLicenseFamilyCategory("");
        defaultLog37.error((java.lang.Object) builder48);
        java.lang.Object obj50 = toNameTransformer36.transform((java.lang.Object) defaultLog37);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic56 = org.apache.rat.Reporter.report(reportConfiguration55);
        org.apache.rat.utils.ReportingSet.Options options57 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration55.licenseDuplicateOption(options57);
        reportConfiguration52.familyDuplicateOption(options57);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier60 = reportConfiguration52.getWriter();
        boolean boolean61 = reportConfiguration52.isAddingLicensesForced();
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        reportConfiguration63.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level66 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration63.logFamilyCollisions(level66);
        reportConfiguration52.logLicenseCollisions(level66);
        defaultLog37.setLevel(level66);
        boolean boolean70 = strSet32.equals((java.lang.Object) level66);
        reportConfiguration1.logFamilyCollisions(level66);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet72 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.policy.DefaultPolicy defaultPolicy73 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet72);
        org.apache.rat.policy.DefaultPolicy defaultPolicy74 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet72);
        reportConfiguration1.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet72);
        boolean boolean76 = reportConfiguration1.isAddingLicensesForced();
        reportConfiguration1.addApprovedLicenseCategory("26befe44-3963-441c-b461-10e25182f535");
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(inputStreamIOSupplier14);
        org.junit.Assert.assertNull(claimStatistic17);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + options25 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options25.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(iLicenseFamilySet28);
        org.junit.Assert.assertNull(iLicenseFamily29);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(defaultLog37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state45.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertNull(claimStatistic56);
        org.junit.Assert.assertTrue("'" + options57 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options57.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + level66 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level66.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(iLicenseFamilySet72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test06948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06948");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean11 = strSet6.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction12 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet13 = strSet6.setMsgFormat(strFunction12);
        java.lang.String str14 = strSet6.last();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet16 = strSet6.tailSet("SpdxBuilder: null");
        org.apache.rat.utils.Log log17 = null;
        org.apache.rat.ReportConfiguration reportConfiguration18 = new org.apache.rat.ReportConfiguration(log17);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray19 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList20 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20, iLicenseFamilyArray19);
        reportConfiguration18.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        boolean boolean23 = strSet16.retainAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList20);
        boolean boolean25 = strSet16.equals((java.lang.Object) "OASIS Open License");
        boolean boolean27 = strSet16.add("TextBuilder: META-DATA#LICENSEFAM...");
        strSet16.clear();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.utils.ReportingSet<java.lang.String> strSet30 = strSet16.tailSet("Copyright Builder: s:null e:CopyrightBuildersnulleW3CSoftwareCopyrightonull o:null");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey out of range");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyName" + "'", str14, "http://org/apache/rat/meta-data#LicenseFamilyName");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test06949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06949");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isKeystore("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='The MIT License ']");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test06950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06950");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log4 = null;
        org.apache.rat.ReportConfiguration reportConfiguration5 = new org.apache.rat.ReportConfiguration(log4);
        java.io.FilenameFilter filenameFilter6 = reportConfiguration5.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter7 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet8 = reportConfiguration5.getLicenses(licenseFilter7);
        reportConfiguration1.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet8);
        reportConfiguration1.removeApprovedLicenseCategory("The MIT License");
        org.apache.rat.license.ILicense[] iLicenseArray12 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet13 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet13, iLicenseArray12);
        java.lang.String[] strArray27 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory30 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet13, (java.util.Collection<java.lang.String>) strList28);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        java.io.FilenameFilter filenameFilter33 = reportConfiguration32.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet35 = reportConfiguration32.getLicenses(licenseFilter34);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders36 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration32.setAddLicenseHeaders(addLicenseHeaders36);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic40 = org.apache.rat.Reporter.report(reportConfiguration39);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter41 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration39, licenseFilter41);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter41);
        org.apache.rat.utils.Log log44 = null;
        org.apache.rat.ReportConfiguration reportConfiguration45 = new org.apache.rat.ReportConfiguration(log44);
        java.io.FilenameFilter filenameFilter46 = reportConfiguration45.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter47 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet48 = reportConfiguration45.getLicenses(licenseFilter47);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders49 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration45.setAddLicenseHeaders(addLicenseHeaders49);
        org.apache.rat.utils.Log log51 = null;
        org.apache.rat.ReportConfiguration reportConfiguration52 = new org.apache.rat.ReportConfiguration(log51);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic53 = org.apache.rat.Reporter.report(reportConfiguration52);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter54 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration52, licenseFilter54);
        org.apache.rat.Reporter.listLicenses(reportConfiguration45, licenseFilter54);
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter54);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = licenseSetFactory30.getLicenses(licenseFilter54);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet58);
        org.apache.rat.utils.Log log60 = reportConfiguration1.getLog();
        boolean boolean61 = reportConfiguration1.isAddingLicensesForced();
        org.apache.rat.utils.Log log62 = null;
        org.apache.rat.ReportConfiguration reportConfiguration63 = new org.apache.rat.ReportConfiguration(log62);
        reportConfiguration63.addApprovedLicenseCategory(".cvsignore");
        boolean boolean66 = reportConfiguration63.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier67 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration63.setStyleSheet(inputStreamIOSupplier67);
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier67);
        java.lang.String[] strArray75 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet76 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        boolean boolean79 = strSet76.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Spliterator<java.lang.String> strSpliterator80 = strSet76.spliterator();
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet83 = strSet76.subSet("Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='false ']", "W3C Software Copyright");
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet83);
        org.junit.Assert.assertNull(filenameFilter6);
        org.junit.Assert.assertTrue("'" + licenseFilter7 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter7.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet8);
        org.junit.Assert.assertNotNull(iLicenseArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(filenameFilter33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet35);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders36 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders36.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic40);
        org.junit.Assert.assertTrue("'" + licenseFilter41 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter41.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter46);
        org.junit.Assert.assertTrue("'" + licenseFilter47 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter47.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet48);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders49 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders49.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic53);
        org.junit.Assert.assertTrue("'" + licenseFilter54 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter54.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier67);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strSpliterator80);
        org.junit.Assert.assertNotNull(strSet83);
    }

    @Test
    public void test06951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06951");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        metaData0.clear();
        boolean boolean11 = metaData0.clear("W3CD ");
        metaData0.clear();
        metaData0.clear();
        metaData0.clear();
        metaData0.clear();
        org.apache.rat.utils.DefaultLog defaultLog16 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder17 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder19 = builder17.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher23 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state24 = copyrightMatcher23.finalizeState();
        org.apache.rat.license.ILicense.Builder builder25 = builder19.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher23);
        org.apache.rat.license.ILicense.Builder builder27 = builder25.setLicenseFamilyCategory("");
        defaultLog16.error((java.lang.Object) builder27);
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog16);
        org.apache.rat.Defaults.Builder builder30 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults31 = builder30.build();
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        java.io.FilenameFilter filenameFilter47 = reportConfiguration46.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter48 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet49 = reportConfiguration46.getLicenses(licenseFilter48);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders50 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration46.setAddLicenseHeaders(addLicenseHeaders50);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic54 = org.apache.rat.Reporter.report(reportConfiguration53);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter55);
        org.apache.rat.Reporter.listLicenses(reportConfiguration46, licenseFilter55);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet58 = reportConfiguration33.getLicenseFamilies(licenseFilter55);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet59 = defaults31.getLicenses(licenseFilter55);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet60 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet59);
        org.apache.rat.document.IDocumentAnalyser iDocumentAnalyser61 = org.apache.rat.analysis.DefaultAnalyserFactory.createDefaultAnalyser((org.apache.rat.utils.Log) defaultLog16, (java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet59);
        org.apache.rat.api.MetaData metaData62 = new org.apache.rat.api.MetaData();
        java.lang.String str64 = metaData62.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        org.apache.rat.api.MetaData.Datum datum65 = org.apache.rat.api.MetaData.RAT_DOCUMENT_CATEGORY_DATUM_STANDARD;
        metaData62.add(datum65);
        defaultLog16.warn((java.lang.Object) datum65);
        metaData0.add(datum65);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(defaultLog16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state24.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(defaults31);
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter47);
        org.junit.Assert.assertTrue("'" + licenseFilter48 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter48.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet49);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders50 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders50.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet58);
        org.junit.Assert.assertNotNull(iLicenseSet59);
        org.junit.Assert.assertNotNull(iDocumentAnalyser61);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(datum65);
    }

    @Test
    public void test06952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06952");
        java.lang.String str1 = org.apache.rat.document.impl.guesser.GuessUtils.normalise("659c96ab-5c6e-4067-997a-fa311a81a261");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "659C96AB-5C6E-4067-997A-FA311A81A261" + "'", str1, "659C96AB-5C6E-4067-997A-FA311A81A261");
    }

    @Test
    public void test06953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06953");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder2 = builder0.add("META-DATA#LICENSEFAMILYNAME");
        org.apache.rat.Defaults.Builder builder4 = builder0.remove("Copyright Builder: s:null e:null o:null");
        org.apache.rat.Defaults.Builder builder5 = builder4.noDefault();
        org.apache.rat.Defaults.Builder builder6 = builder5.noDefault();
        org.apache.rat.Defaults.Builder builder8 = builder6.remove("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.Defaults.Builder builder10 = builder6.remove("b9d57440-4b03-461e-a164-b29e1341bbc8");
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder12 = builder10.remove(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test06954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06954");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.license.ILicense.Builder builder9 = builder4.setMatcher((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = copyrightBuilder7.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher11 = copyrightBuilder7.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = copyrightBuilder7.setEnd("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder15 = copyrightBuilder7.setId("55614");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
        org.junit.Assert.assertNotNull(iHeaderMatcher11);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(abstractBuilder15);
    }

    @Test
    public void test06955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06955");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.report.IReportable iReportable3 = null;
        reportConfiguration1.setReportable(iReportable3);
        org.apache.rat.license.ILicense iLicense5 = null;
        reportConfiguration1.addLicense(iLicense5);
        org.apache.rat.utils.Log.Level level7 = null;
        reportConfiguration1.logFamilyCollisions(level7);
        java.lang.String[] strArray14 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet15 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        boolean boolean18 = strSet15.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor19 = strSet15.iterator();
        strSet15.clear();
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet15);
        boolean boolean23 = strSet15.addIfNotPresent("RegexBuilder: d4148d3a-edbc-4672-b347-0fa619553f91");
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strItor19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test06956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06956");
        org.apache.rat.config.ReportFormat reportFormat0 = org.apache.rat.config.ReportFormat.XML;
        boolean boolean2 = reportFormat0.is("GPL1 ");
        boolean boolean4 = reportFormat0.is("");
        boolean boolean6 = reportFormat0.is("Copyright Builder: s:W3CD  e:null o:Copyright Builder: s:null e:274c6a15-09f6-4bfd-ac53-1827770eb507 o:null");
        org.junit.Assert.assertTrue("'" + reportFormat0 + "' != '" + org.apache.rat.config.ReportFormat.XML + "'", reportFormat0.equals(org.apache.rat.config.ReportFormat.XML));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06957");
        org.apache.rat.report.claim.ClaimStatistic claimStatistic0 = new org.apache.rat.report.claim.ClaimStatistic();
        java.util.Map<java.lang.String, java.lang.Integer> strMap1 = claimStatistic0.getLicenseFileCodeMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap2 = claimStatistic0.getDocumentCategoryMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null;
        claimStatistic0.setDocumentCategoryMap(strMap3);
        org.junit.Assert.assertNull(strMap1);
        org.junit.Assert.assertNull(strMap2);
    }

    @Test
    public void test06958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06958");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        java.io.FilenameFilter filenameFilter12 = reportConfiguration1.getInputFileFilter();
        boolean boolean13 = reportConfiguration1.isStyleReport();
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        java.io.FilenameFilter filenameFilter16 = reportConfiguration15.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense17 = null;
        reportConfiguration15.addLicense(iLicense17);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        java.io.FilenameFilter filenameFilter21 = reportConfiguration20.getInputFileFilter();
        boolean boolean22 = reportConfiguration20.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier23 = reportConfiguration20.getOutput();
        reportConfiguration15.setOut(outputStreamIOSupplier23);
        reportConfiguration1.setOut(outputStreamIOSupplier23);
        org.apache.rat.utils.Log log26 = null;
        org.apache.rat.ReportConfiguration reportConfiguration27 = new org.apache.rat.ReportConfiguration(log26);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic28 = org.apache.rat.Reporter.report(reportConfiguration27);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic31 = org.apache.rat.Reporter.report(reportConfiguration30);
        org.apache.rat.utils.ReportingSet.Options options32 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration30.licenseDuplicateOption(options32);
        reportConfiguration27.familyDuplicateOption(options32);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier35 = reportConfiguration27.getWriter();
        boolean boolean36 = reportConfiguration27.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter37 = reportConfiguration27.getInputFileFilter();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier38 = reportConfiguration27.getStyleSheet();
        java.lang.String str39 = reportConfiguration27.getCopyrightMessage();
        org.apache.rat.utils.Log log40 = null;
        org.apache.rat.ReportConfiguration reportConfiguration41 = new org.apache.rat.ReportConfiguration(log40);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic42 = org.apache.rat.Reporter.report(reportConfiguration41);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier43 = reportConfiguration41.getStyleSheet();
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense44 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense44.setLicenseFamilyName("hi!");
        java.lang.String str47 = fullTextMatchingLicense44.getLicenseFamilyCategory();
        java.lang.String str48 = fullTextMatchingLicense44.getLicenseFamilyName();
        fullTextMatchingLicense44.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense44.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily53 = fullTextMatchingLicense44.getLicenseFamily();
        java.lang.String str54 = iLicenseFamily53.getFamilyName();
        java.lang.String str55 = iLicenseFamily53.getFamilyName();
        reportConfiguration41.addApprovedLicenseCategory(iLicenseFamily53);
        reportConfiguration27.addApprovedLicenseCategory(iLicenseFamily53);
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily53);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier59 = reportConfiguration1.getStyleSheet();
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNull(filenameFilter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(filenameFilter16);
        org.junit.Assert.assertNull(filenameFilter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier23);
        org.junit.Assert.assertNull(claimStatistic28);
        org.junit.Assert.assertNull(claimStatistic31);
        org.junit.Assert.assertTrue("'" + options32 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options32.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(filenameFilter37);
        org.junit.Assert.assertNull(inputStreamIOSupplier38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(claimStatistic42);
        org.junit.Assert.assertNull(inputStreamIOSupplier43);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "SpdxBuilder: null" + "'", str54, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "SpdxBuilder: null" + "'", str55, "SpdxBuilder: null");
        org.junit.Assert.assertNull(inputStreamIOSupplier59);
    }

    @Test
    public void test06959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06959");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter15 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter16 = xmlWriter1.closeElement();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.OperationNotAllowedException; message: Close called before an element has been opened.");
        } catch (org.apache.rat.report.xml.writer.OperationNotAllowedException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06960");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isExecutable("REGEXBUILDER: 021187D7-27C2-4FD9-BC74-8CC00413EE52");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test06961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06961");
        java.io.File file0 = null;
        org.apache.rat.config.SourceCodeManagementSystems sourceCodeManagementSystems1 = org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION;
        java.util.List<java.lang.String> strList2 = sourceCodeManagementSystems1.getExclusions();
        java.util.List<java.lang.String> strList3 = sourceCodeManagementSystems1.getExclusions();
        java.io.FilenameFilter filenameFilter4 = org.apache.rat.Report.parseExclusions(strList3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.walker.ArchiveWalker archiveWalker5 = new org.apache.rat.walker.ArchiveWalker(file0, filenameFilter4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + sourceCodeManagementSystems1 + "' != '" + org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION + "'", sourceCodeManagementSystems1.equals(org.apache.rat.config.SourceCodeManagementSystems.SUBVERSION));
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(filenameFilter4);
    }

    @Test
    public void test06962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06962");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        org.apache.rat.analysis.IHeaderMatcher.State state6 = notMatcher4.matches("2b7a7df2-0dac-406a-96b5-ea6b08e88337");
        org.apache.rat.analysis.IHeaderMatcher.State state7 = notMatcher4.currentState();
        org.apache.rat.analysis.IHeaderMatcher.State state9 = notMatcher4.matches("d4ddbedc-4cec-4790-9c53-114883ccd4cc");
        org.apache.rat.analysis.IHeaderMatcher.State state11 = notMatcher4.matches("ece24682-3459-4761-bb85-7fc8538fa181");
        java.lang.String str12 = state11.toString();
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state6.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state9.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state11.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "i indeterminent" + "'", str12, "i indeterminent");
    }

    @Test
    public void test06963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06963");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration((org.apache.rat.utils.Log) defaultLog0);
        org.apache.rat.utils.Log log14 = null;
        org.apache.rat.ReportConfiguration reportConfiguration15 = new org.apache.rat.ReportConfiguration(log14);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier16 = reportConfiguration15.getOutput();
        reportConfiguration15.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log19 = reportConfiguration15.getLog();
        org.apache.rat.utils.Log.Level level20 = org.apache.rat.utils.Log.Level.INFO;
        reportConfiguration15.logFamilyCollisions(level20);
        defaultLog0.log(level20, "Copyright Builder: s:6481fb19-38f0-43f5-ab95-caf84a069ee1 e:null o:null");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder24 = new org.apache.rat.configuration.builders.RegexBuilder();
        java.lang.String str25 = regexBuilder24.toString();
        java.lang.String str26 = regexBuilder24.toString();
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder28 = regexBuilder24.setExpr("89662180-a89f-497b-9301-227d494d2bae");
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder30 = regexBuilder28.setExpr("AL   ");
        defaultLog0.error((java.lang.Object) regexBuilder30);
        org.apache.rat.configuration.builders.RegexBuilder regexBuilder33 = regexBuilder30.setExpr("f96ad0b6-2267-4692-93e4-227659f9d621");
        java.lang.String str34 = regexBuilder30.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder36 = regexBuilder30.setId("28dca3d8-d654-4253-aa51-1b1f7affbc28");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher37 = regexBuilder30.build();
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier16);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + level20 + "' != '" + org.apache.rat.utils.Log.Level.INFO + "'", level20.equals(org.apache.rat.utils.Log.Level.INFO));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "RegexBuilder: null" + "'", str25, "RegexBuilder: null");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "RegexBuilder: null" + "'", str26, "RegexBuilder: null");
        org.junit.Assert.assertNotNull(regexBuilder28);
        org.junit.Assert.assertNotNull(regexBuilder30);
        org.junit.Assert.assertNotNull(regexBuilder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "RegexBuilder: f96ad0b6-2267-4692-93e4-227659f9d621" + "'", str34, "RegexBuilder: f96ad0b6-2267-4692-93e4-227659f9d621");
        org.junit.Assert.assertNotNull(abstractBuilder36);
        org.junit.Assert.assertNotNull(iHeaderMatcher37);
    }

    @Test
    public void test06964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06964");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher2 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("03F7B314-6887-4617-9C7E-BF1600B331CD", "ffalse");
    }

    @Test
    public void test06965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06965");
        org.apache.rat.analysis.matchers.FullTextMatcher fullTextMatcher2 = new org.apache.rat.analysis.matchers.FullTextMatcher("http://org/apache/rat/meta-data", "Apache License Version 2.0");
        org.apache.rat.analysis.IHeaderMatcher.State state3 = fullTextMatcher2.currentState();
        org.apache.rat.analysis.matchers.NotMatcher notMatcher4 = new org.apache.rat.analysis.matchers.NotMatcher((org.apache.rat.analysis.IHeaderMatcher) fullTextMatcher2);
        notMatcher4.reset();
        org.apache.rat.analysis.IHeaderMatcher.State state7 = notMatcher4.matches("3e58153a-ea8f-4517-97b0-38e5f764f653");
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state3.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.i + "'", state7.equals(org.apache.rat.analysis.IHeaderMatcher.State.i));
    }

    @Test
    public void test06966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06966");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        metaData0.clear();
        java.util.Collection<org.apache.rat.api.MetaData.Datum> datumCollection8 = metaData0.getData();
        org.apache.rat.api.MetaData.Datum datum11 = new org.apache.rat.api.MetaData.Datum("3c840dc2-bef0-42b5-b26c-35a568d53a24", "NotBuilder: null");
        metaData0.set(datum11);
        java.lang.String str13 = datum11.getName();
        java.lang.String str14 = datum11.toString();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(datumCollection8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3c840dc2-bef0-42b5-b26c-35a568d53a24" + "'", str13, "3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Datum [ name ='3c840dc2-bef0-42b5-b26c-35a568d53a24',value ='NotBuilder: null ']" + "'", str14, "Datum [ name ='3c840dc2-bef0-42b5-b26c-35a568d53a24',value ='NotBuilder: null ']");
    }

    @Test
    public void test06967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06967");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        java.lang.String[] strArray10 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet11 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        boolean boolean14 = strSet11.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor15 = strSet11.iterator();
        java.lang.Object[] objArray16 = strSet11.toArray();
        java.lang.String[] strArray22 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet23 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        boolean boolean26 = strSet23.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet27 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean28 = strSet23.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet27);
        boolean boolean29 = strSet11.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet27);
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet11.spliterator();
        org.apache.rat.utils.DefaultLog defaultLog31 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        reportConfiguration33.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level36 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration33.logFamilyCollisions(level36);
        defaultLog31.setLevel(level36);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        java.io.FilenameFilter filenameFilter41 = reportConfiguration40.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = reportConfiguration40.getLicenses(licenseFilter42);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders44 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration40.setAddLicenseHeaders(addLicenseHeaders44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter49);
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter49);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter62);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier68 = reportConfiguration67.getOutput();
        reportConfiguration40.setOut(outputStreamIOSupplier68);
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic72 = org.apache.rat.Reporter.report(reportConfiguration71);
        org.apache.rat.utils.Log log73 = null;
        org.apache.rat.ReportConfiguration reportConfiguration74 = new org.apache.rat.ReportConfiguration(log73);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic75 = org.apache.rat.Reporter.report(reportConfiguration74);
        org.apache.rat.utils.ReportingSet.Options options76 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration74.licenseDuplicateOption(options76);
        reportConfiguration71.familyDuplicateOption(options76);
        reportConfiguration40.licenseDuplicateOption(options76);
        reportConfiguration40.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log82 = null;
        org.apache.rat.ReportConfiguration reportConfiguration83 = new org.apache.rat.ReportConfiguration(log82);
        reportConfiguration83.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level86 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration83.logLicenseCollisions(level86);
        reportConfiguration40.logLicenseCollisions(level86);
        defaultLog31.log(level86, "GNU General Public License, version 1");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet91 = strSet11.setLog((org.apache.rat.utils.Log) defaultLog31);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet93 = strSet11.tailSet("Copyright Builder: s:null e:W3C Software Copyright o:null");
        reportConfiguration1.addApprovedLicenseCategories((java.util.Collection<java.lang.String>) strSet93);
        int int95 = strSet93.size();
        boolean boolean97 = strSet93.add("b10f6858-059b-420c-94fe-38f2ceac5242");
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertNotNull(defaultLog31);
        org.junit.Assert.assertTrue("'" + level36 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level36.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders44 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders44.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier68);
        org.junit.Assert.assertNull(claimStatistic72);
        org.junit.Assert.assertNull(claimStatistic75);
        org.junit.Assert.assertTrue("'" + options76 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options76.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level86 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level86.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 5 + "'", int95 == 5);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test06968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06968");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher4 = new org.apache.rat.analysis.matchers.CopyrightMatcher("OASISOpenLicense", "", "", "d13e4bcc7d3946ffafd9093527a31ca6");
    }

    @Test
    public void test06969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06969");
        org.apache.rat.license.ILicense.Builder builder0 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder2 = builder0.setLicenseFamilyCategory("");
        org.apache.rat.license.ILicense.Builder builder4 = builder2.setDerivedFrom("GEN  ");
        org.apache.rat.license.ILicense.Builder builder6 = builder4.setId("DOJO ");
        org.apache.rat.license.ILicense.Builder builder8 = builder6.setName("GPL3 ");
        org.apache.rat.license.ILicense.Builder builder10 = builder6.setNotes("http://org/apache/rat/meta-data");
        org.apache.rat.license.ILicense.Builder builder12 = builder6.setId("021187d7-27c2-4fd9-bc74-8cc00413ee52");
        org.apache.rat.license.ILicense.Builder builder14 = builder6.setLicenseFamilyCategory("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='GNU General Public License, version 1 ']");
        org.apache.rat.license.ILicense.Builder builder16 = builder6.setId("f489c72e-9df8-4339-86cc-35c229864db7");
        org.apache.rat.license.ILicense.Builder builder18 = builder6.setId("i ind");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test06970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06970");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        org.apache.rat.api.MetaData.Datum datum11 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_MIT;
        java.lang.String str12 = datum11.getName();
        metaData0.set(datum11);
        boolean boolean15 = metaData0.clear("TextBuilder: true http://org/apache/rat/meta-data#LicenseFamilyName");
        metaData0.clear();
        org.apache.rat.api.MetaData.Datum datum17 = org.apache.rat.api.MetaData.RAT_LICENSE_FAMILY_CATEGORY_DATUM_UNKNOWN;
        java.lang.String str18 = datum17.getValue();
        metaData0.add(datum17);
        boolean boolean21 = metaData0.clear("a8ad40e5-63d4-4711-aeee-d32efcd029a3");
        org.apache.rat.api.MetaData.Datum datum23 = metaData0.get("15FF671B-67B8-4791-9E1E-208F319FB7E2");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNotNull(datum11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://org/apache/rat/meta-data#LicenseFamilyCategory" + "'", str12, "http://org/apache/rat/meta-data#LicenseFamilyCategory");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(datum17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "?????" + "'", str18, "?????");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(datum23);
    }

    @Test
    public void test06971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06971");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        java.io.FilenameFilter filenameFilter3 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        java.io.FilenameFilter filenameFilter7 = reportConfiguration6.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter8 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet9 = reportConfiguration6.getLicenses(licenseFilter8);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders10 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration6.setAddLicenseHeaders(addLicenseHeaders10);
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic14 = org.apache.rat.Reporter.report(reportConfiguration13);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration13, licenseFilter15);
        org.apache.rat.Reporter.listLicenses(reportConfiguration6, licenseFilter15);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        java.io.FilenameFilter filenameFilter20 = reportConfiguration19.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet22 = reportConfiguration19.getLicenses(licenseFilter21);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders23 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration19.setAddLicenseHeaders(addLicenseHeaders23);
        org.apache.rat.utils.Log log25 = null;
        org.apache.rat.ReportConfiguration reportConfiguration26 = new org.apache.rat.ReportConfiguration(log25);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic27 = org.apache.rat.Reporter.report(reportConfiguration26);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter28 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration26, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter28);
        org.apache.rat.Reporter.listLicenses(reportConfiguration6, licenseFilter28);
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier34 = reportConfiguration33.getOutput();
        reportConfiguration6.setOut(outputStreamIOSupplier34);
        org.apache.rat.utils.Log.Level level36 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration6.logLicenseCollisions(level36);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter38 = reportConfiguration6.getDirectoryFilter();
        org.apache.rat.configuration.Format format40 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader41 = format40.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader42 = format40.matcherReader();
        org.apache.rat.configuration.LicenseReader licenseReader43 = format40.licenseReader();
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet44 = licenseReader43.readLicenses();
        org.apache.rat.license.ILicense iLicense45 = org.apache.rat.license.LicenseSetFactory.search("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", iLicenseSet44);
        reportConfiguration6.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet44);
        org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense> iLicenseSet47 = new org.apache.rat.utils.ReportingSet<org.apache.rat.license.ILicense>(iLicenseSet44);
        org.apache.rat.license.ILicense iLicense48 = org.apache.rat.license.LicenseSetFactory.search("f5f3fb9b-540a-43ef-a018-8ce5779e23f4", iLicenseSet44);
        reportConfiguration1.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet44);
        java.io.File file50 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(file50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertNull(filenameFilter3);
        org.junit.Assert.assertNull(filenameFilter7);
        org.junit.Assert.assertTrue("'" + licenseFilter8 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter8.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet9);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders10 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders10.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet22);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders23 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders23.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic27);
        org.junit.Assert.assertTrue("'" + licenseFilter28 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter28.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier34);
        org.junit.Assert.assertTrue("'" + level36 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level36.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter38);
        org.junit.Assert.assertTrue("'" + format40 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format40.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader41);
        org.junit.Assert.assertNotNull(matcherReader42);
        org.junit.Assert.assertNotNull(licenseReader43);
        org.junit.Assert.assertNotNull(iLicenseSet44);
        org.junit.Assert.assertNull(iLicense45);
        org.junit.Assert.assertNull(iLicense48);
    }

    @Test
    public void test06972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06972");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        reportConfiguration1.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level4 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration1.logFamilyCollisions(level4);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier6 = reportConfiguration1.getOutput();
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier7 = reportConfiguration1.getWriter();
        org.apache.rat.utils.Log log8 = null;
        org.apache.rat.ReportConfiguration reportConfiguration9 = new org.apache.rat.ReportConfiguration(log8);
        reportConfiguration9.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log12 = null;
        org.apache.rat.ReportConfiguration reportConfiguration13 = new org.apache.rat.ReportConfiguration(log12);
        java.io.FilenameFilter filenameFilter14 = reportConfiguration13.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter15 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet16 = reportConfiguration13.getLicenses(licenseFilter15);
        reportConfiguration9.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet16);
        reportConfiguration9.removeApprovedLicenseCategory("The MIT License");
        org.apache.rat.license.ILicense[] iLicenseArray20 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet21 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet21, iLicenseArray20);
        java.lang.String[] strArray35 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory38 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet21, (java.util.Collection<java.lang.String>) strList36);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        java.io.FilenameFilter filenameFilter41 = reportConfiguration40.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet43 = reportConfiguration40.getLicenses(licenseFilter42);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders44 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration40.setAddLicenseHeaders(addLicenseHeaders44);
        org.apache.rat.utils.Log log46 = null;
        org.apache.rat.ReportConfiguration reportConfiguration47 = new org.apache.rat.ReportConfiguration(log46);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic48 = org.apache.rat.Reporter.report(reportConfiguration47);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter49 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration47, licenseFilter49);
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter49);
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders57 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration53.setAddLicenseHeaders(addLicenseHeaders57);
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic61 = org.apache.rat.Reporter.report(reportConfiguration60);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration53, licenseFilter62);
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter62);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet66 = licenseSetFactory38.getLicenses(licenseFilter62);
        reportConfiguration9.addLicenses((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet66);
        org.apache.rat.utils.Log log68 = reportConfiguration9.getLog();
        java.io.FilenameFilter filenameFilter69 = reportConfiguration9.getInputFileFilter();
        org.apache.rat.utils.DefaultLog defaultLog70 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder71 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder73 = builder71.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher77 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state78 = copyrightMatcher77.finalizeState();
        org.apache.rat.license.ILicense.Builder builder79 = builder73.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher77);
        org.apache.rat.license.ILicense.Builder builder81 = builder79.setLicenseFamilyCategory("");
        defaultLog70.error((java.lang.Object) builder81);
        org.apache.rat.utils.Log.Level level83 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog70.setLevel(level83);
        reportConfiguration9.logLicenseCollisions(level83);
        org.apache.rat.utils.ReportingSet.Options options86 = org.apache.rat.utils.ReportingSet.Options.IGNORE;
        reportConfiguration9.familyDuplicateOption(options86);
        reportConfiguration1.licenseDuplicateOption(options86);
        java.io.FilenameFilter filenameFilter89 = reportConfiguration1.getInputFileFilter();
        boolean boolean90 = reportConfiguration1.isAddingLicensesForced();
        java.util.function.Consumer<java.lang.String> strConsumer91 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.validate(strConsumer91);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: Reportable may not be null");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + level4 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level4.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier6);
        org.junit.Assert.assertNotNull(printWriterIOSupplier7);
        org.junit.Assert.assertNull(filenameFilter14);
        org.junit.Assert.assertTrue("'" + licenseFilter15 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter15.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet16);
        org.junit.Assert.assertNotNull(iLicenseArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(filenameFilter41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet43);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders44 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders44.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic48);
        org.junit.Assert.assertTrue("'" + licenseFilter49 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter49.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders57 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders57.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet66);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertNull(filenameFilter69);
        org.junit.Assert.assertNotNull(defaultLog70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + state78 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state78.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + level83 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level83.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertTrue("'" + options86 + "' != '" + org.apache.rat.utils.ReportingSet.Options.IGNORE + "'", options86.equals(org.apache.rat.utils.ReportingSet.Options.IGNORE));
        org.junit.Assert.assertNull(filenameFilter89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test06973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06973");
        boolean boolean1 = org.apache.rat.document.impl.guesser.BinaryGuesser.isAudio("Datum [ name ='http://org/apache/rat/meta-data#FileCategory',value ='archive ']");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test06974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06974");
        org.apache.rat.analysis.matchers.SPDXMatcherFactory sPDXMatcherFactory0 = org.apache.rat.analysis.matchers.SPDXMatcherFactory.INSTANCE;
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = sPDXMatcherFactory0.create("GPL3 ");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = sPDXMatcherFactory0.create("6620e9ee-d651-4c18-8162-edad6d18368e");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = sPDXMatcherFactory0.create("Copyright Builder: s:null e:null o:null");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = sPDXMatcherFactory0.create("46eea23e-d320-45bc-aa7f-844d2e1597ce");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher10 = sPDXMatcherFactory0.create("02ef6fb0-9b9f-4a44-a5c6-08823bf147fd");
        org.junit.Assert.assertNotNull(sPDXMatcherFactory0);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher10);
    }

    @Test
    public void test06975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06975");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.stream();
        strStream1.close();
        strStream1.close();
        org.junit.Assert.assertNotNull(strStream1);
    }

    @Test
    public void test06976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06976");
        org.apache.rat.utils.DefaultLog defaultLog0 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.license.ILicense.Builder builder1 = org.apache.rat.license.ILicense.builder();
        org.apache.rat.license.ILicense.Builder builder3 = builder1.setLicenseFamilyCategory("");
        org.apache.rat.analysis.matchers.CopyrightMatcher copyrightMatcher7 = new org.apache.rat.analysis.matchers.CopyrightMatcher("", "GPL1 ", "hi!");
        org.apache.rat.analysis.IHeaderMatcher.State state8 = copyrightMatcher7.finalizeState();
        org.apache.rat.license.ILicense.Builder builder9 = builder3.setMatcher((org.apache.rat.analysis.IHeaderMatcher) copyrightMatcher7);
        org.apache.rat.license.ILicense.Builder builder11 = builder9.setLicenseFamilyCategory("");
        defaultLog0.error((java.lang.Object) builder11);
        org.apache.rat.utils.Log.Level level13 = org.apache.rat.utils.Log.Level.DEBUG;
        defaultLog0.setLevel(level13);
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily15 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str16 = simpleLicenseFamily15.getFamilyName();
        java.lang.String str17 = simpleLicenseFamily15.getFamilyCategory();
        simpleLicenseFamily15.setFamilyCategory("W3C  ");
        simpleLicenseFamily15.setFamilyCategory("AllBuilder:");
        defaultLog0.info((java.lang.Object) simpleLicenseFamily15);
        simpleLicenseFamily15.setFamilyCategory("archive");
        java.lang.String str25 = simpleLicenseFamily15.getFamilyCategory();
        java.lang.String str26 = simpleLicenseFamily15.toString();
        java.lang.String str27 = simpleLicenseFamily15.getFamilyName();
        simpleLicenseFamily15.setFamilyName("SpdxBuilder: 03F7B314-6887-4617-9C7E-BF1600B331CD");
        org.junit.Assert.assertNotNull(defaultLog0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.apache.rat.analysis.IHeaderMatcher.State.f + "'", state8.equals(org.apache.rat.analysis.IHeaderMatcher.State.f));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + level13 + "' != '" + org.apache.rat.utils.Log.Level.DEBUG + "'", level13.equals(org.apache.rat.utils.Log.Level.DEBUG));
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "archive" + "'", str25, "archive");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "archive null" + "'", str26, "archive null");
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test06977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06977");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        reportConfiguration1.setCopyrightMessage("hi!");
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier11 = reportConfiguration10.getOutput();
        reportConfiguration10.setCopyrightMessage("MANIFEST.MF");
        org.apache.rat.utils.Log log14 = reportConfiguration10.getLog();
        org.apache.rat.Defaults.Builder builder15 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults.Builder builder16 = builder15.noDefault();
        org.apache.rat.Defaults defaults17 = builder16.build();
        reportConfiguration10.setFrom(defaults17);
        org.apache.rat.utils.Log log19 = null;
        org.apache.rat.ReportConfiguration reportConfiguration20 = new org.apache.rat.ReportConfiguration(log19);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier21 = reportConfiguration20.getOutput();
        reportConfiguration20.removeApprovedLicenseCategory("EF7A8B13-64C3-4510-BB0C-DBF208E1E73F");
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic26 = org.apache.rat.Reporter.report(reportConfiguration25);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic29 = org.apache.rat.Reporter.report(reportConfiguration28);
        org.apache.rat.utils.ReportingSet.Options options30 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration28.licenseDuplicateOption(options30);
        reportConfiguration25.familyDuplicateOption(options30);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier33 = reportConfiguration25.getWriter();
        org.apache.rat.report.IReportable iReportable34 = null;
        reportConfiguration25.setReportable(iReportable34);
        org.apache.rat.license.ILicenseFamily[] iLicenseFamilyArray36 = new org.apache.rat.license.ILicenseFamily[] {};
        java.util.ArrayList<org.apache.rat.license.ILicenseFamily> iLicenseFamilyList37 = new java.util.ArrayList<org.apache.rat.license.ILicenseFamily>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList37, iLicenseFamilyArray36);
        org.apache.rat.policy.DefaultPolicy defaultPolicy39 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList37);
        reportConfiguration25.addFamilies((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilyList37);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        java.io.FilenameFilter filenameFilter43 = reportConfiguration42.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter44 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration42.getLicenses(licenseFilter44);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders46 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration42.setAddLicenseHeaders(addLicenseHeaders46);
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic50 = org.apache.rat.Reporter.report(reportConfiguration49);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter51 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration49, licenseFilter51);
        org.apache.rat.Reporter.listLicenses(reportConfiguration42, licenseFilter51);
        org.apache.rat.utils.Log log54 = null;
        org.apache.rat.ReportConfiguration reportConfiguration55 = new org.apache.rat.ReportConfiguration(log54);
        java.io.FilenameFilter filenameFilter56 = reportConfiguration55.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter57 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet58 = reportConfiguration55.getLicenses(licenseFilter57);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders59 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration55.setAddLicenseHeaders(addLicenseHeaders59);
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic63 = org.apache.rat.Reporter.report(reportConfiguration62);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration62, licenseFilter64);
        org.apache.rat.Reporter.listLicenses(reportConfiguration55, licenseFilter64);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet67 = reportConfiguration42.getLicenseFamilies(licenseFilter64);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet68 = reportConfiguration25.getLicenses(licenseFilter64);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration20, licenseFilter64);
        java.util.SortedSet<java.lang.String> strSet70 = defaults17.getLicenseIds(licenseFilter64);
        org.apache.rat.utils.Log log71 = null;
        org.apache.rat.ReportConfiguration reportConfiguration72 = new org.apache.rat.ReportConfiguration(log71);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic73 = org.apache.rat.Reporter.report(reportConfiguration72);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter74 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration72, licenseFilter74);
        java.util.SortedSet<java.lang.String> strSet76 = defaults17.getLicenseIds(licenseFilter74);
        reportConfiguration1.setFrom(defaults17);
        reportConfiguration1.setCopyrightMessage("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='????? ']");
        reportConfiguration1.addApprovedLicenseCategory("GNU GENERAL PUBLIC LICENSE, VERSION 2");
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier11);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(defaults17);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier21);
        org.junit.Assert.assertNull(claimStatistic26);
        org.junit.Assert.assertNull(claimStatistic29);
        org.junit.Assert.assertTrue("'" + options30 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options30.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier33);
        org.junit.Assert.assertNotNull(iLicenseFamilyArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(filenameFilter43);
        org.junit.Assert.assertTrue("'" + licenseFilter44 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter44.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders46 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders46.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic50);
        org.junit.Assert.assertTrue("'" + licenseFilter51 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter51.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter56);
        org.junit.Assert.assertTrue("'" + licenseFilter57 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter57.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet58);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders59 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders59.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet67);
        org.junit.Assert.assertNotNull(iLicenseSet68);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNull(claimStatistic73);
        org.junit.Assert.assertTrue("'" + licenseFilter74 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter74.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(strSet76);
    }

    @Test
    public void test06978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06978");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.utils.Log log34 = null;
        org.apache.rat.ReportConfiguration reportConfiguration35 = new org.apache.rat.ReportConfiguration(log34);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic36 = org.apache.rat.Reporter.report(reportConfiguration35);
        org.apache.rat.utils.ReportingSet.Options options37 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration35.licenseDuplicateOption(options37);
        reportConfiguration32.familyDuplicateOption(options37);
        reportConfiguration1.licenseDuplicateOption(options37);
        org.apache.rat.utils.Log log41 = null;
        org.apache.rat.ReportConfiguration reportConfiguration42 = new org.apache.rat.ReportConfiguration(log41);
        reportConfiguration42.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level45 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration42.logFamilyCollisions(level45);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier47 = reportConfiguration42.getOutput();
        org.apache.rat.utils.Log log48 = null;
        org.apache.rat.ReportConfiguration reportConfiguration49 = new org.apache.rat.ReportConfiguration(log48);
        reportConfiguration49.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log52 = null;
        org.apache.rat.ReportConfiguration reportConfiguration53 = new org.apache.rat.ReportConfiguration(log52);
        java.io.FilenameFilter filenameFilter54 = reportConfiguration53.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter55 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet56 = reportConfiguration53.getLicenses(licenseFilter55);
        reportConfiguration49.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet56);
        java.io.FilenameFilter filenameFilter58 = reportConfiguration49.getInputFileFilter();
        org.apache.rat.utils.Log log59 = null;
        org.apache.rat.ReportConfiguration reportConfiguration60 = new org.apache.rat.ReportConfiguration(log59);
        java.io.FilenameFilter filenameFilter61 = reportConfiguration60.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter62 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet63 = reportConfiguration60.getLicenses(licenseFilter62);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders64 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration60.setAddLicenseHeaders(addLicenseHeaders64);
        org.apache.rat.utils.Log log66 = null;
        org.apache.rat.ReportConfiguration reportConfiguration67 = new org.apache.rat.ReportConfiguration(log66);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic68 = org.apache.rat.Reporter.report(reportConfiguration67);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter69 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration67, licenseFilter69);
        org.apache.rat.Reporter.listLicenses(reportConfiguration60, licenseFilter69);
        org.apache.rat.utils.Log log72 = null;
        org.apache.rat.ReportConfiguration reportConfiguration73 = new org.apache.rat.ReportConfiguration(log72);
        java.io.FilenameFilter filenameFilter74 = reportConfiguration73.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter75 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet76 = reportConfiguration73.getLicenses(licenseFilter75);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders77 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration73.setAddLicenseHeaders(addLicenseHeaders77);
        org.apache.rat.utils.Log log79 = null;
        org.apache.rat.ReportConfiguration reportConfiguration80 = new org.apache.rat.ReportConfiguration(log79);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic81 = org.apache.rat.Reporter.report(reportConfiguration80);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter82 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration80, licenseFilter82);
        org.apache.rat.Reporter.listLicenses(reportConfiguration73, licenseFilter82);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet85 = reportConfiguration60.getLicenseFamilies(licenseFilter82);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration49, licenseFilter82);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet87 = reportConfiguration42.getLicenseFamilies(licenseFilter82);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet88 = reportConfiguration1.getLicenses(licenseFilter82);
        org.apache.rat.report.IReportable iReportable89 = reportConfiguration1.getReportable();
        reportConfiguration1.addApprovedLicenseCategory("MathcerRefBuilder: t true");
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertNull(claimStatistic36);
        org.junit.Assert.assertTrue("'" + options37 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options37.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level45 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level45.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier47);
        org.junit.Assert.assertNull(filenameFilter54);
        org.junit.Assert.assertTrue("'" + licenseFilter55 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter55.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet56);
        org.junit.Assert.assertNull(filenameFilter58);
        org.junit.Assert.assertNull(filenameFilter61);
        org.junit.Assert.assertTrue("'" + licenseFilter62 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter62.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet63);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders64 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders64.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic68);
        org.junit.Assert.assertTrue("'" + licenseFilter69 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter69.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter74);
        org.junit.Assert.assertTrue("'" + licenseFilter75 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter75.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet76);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders77 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders77.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic81);
        org.junit.Assert.assertTrue("'" + licenseFilter82 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter82.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet85);
        org.junit.Assert.assertNotNull(iLicenseFamilySet87);
        org.junit.Assert.assertNotNull(iLicenseSet88);
        org.junit.Assert.assertNull(iReportable89);
    }

    @Test
    public void test06979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06979");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense3 = null;
        reportConfiguration1.addLicense(iLicense3);
        org.apache.rat.utils.Log log5 = null;
        org.apache.rat.ReportConfiguration reportConfiguration6 = new org.apache.rat.ReportConfiguration(log5);
        java.io.FilenameFilter filenameFilter7 = reportConfiguration6.getInputFileFilter();
        boolean boolean8 = reportConfiguration6.isStyleReport();
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier9 = reportConfiguration6.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier9);
        java.util.function.Consumer<java.lang.String> strConsumer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.validate(strConsumer11);
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: Reportable may not be null");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertNull(filenameFilter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier9);
    }

    @Test
    public void test06980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06980");
        java.lang.String[] strArray6 = org.apache.commons.io.filefilter.IOFileFilter.EMPTY_STRING_ARRAY;
        boolean boolean7 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("Copyright Builder: s:null e:.cvsignore o:null", strArray6);
        boolean boolean8 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("03f7b314-6887-4617-9c7e-bf1600b331cd", strArray6);
        boolean boolean9 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("", strArray6);
        boolean boolean10 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("MATHCERREFBUILDER: TMF", strArray6);
        boolean boolean11 = org.apache.rat.document.impl.guesser.BinaryGuesser.extensionMatches("TextBuilder: true|false|forced", strArray6);
        boolean boolean12 = org.apache.rat.document.impl.guesser.BinaryGuesser.containsExtension("Copyright Builder: s:null e:64868 o:Copyright Builder: s:org/a e:standard o:W3C  ", strArray6);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06981");
        org.apache.rat.configuration.builders.NotBuilder notBuilder0 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str1 = notBuilder0.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder2 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean3 = matcherRefBuilder2.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap4 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder5 = matcherRefBuilder2.setMatchers(strMap4);
        org.apache.rat.configuration.builders.AllBuilder allBuilder6 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder9 = copyrightBuilder7.setStart("OASIS");
        java.lang.String str10 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder12 = copyrightBuilder7.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder13 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean14 = matcherRefBuilder13.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder15 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder17 = copyrightBuilder15.setStart("OASIS");
        java.lang.String str18 = copyrightBuilder15.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder20 = copyrightBuilder15.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder21 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder22 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str23 = copyrightBuilder22.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder25 = copyrightBuilder22.setEnd(".cvsignore");
        boolean boolean26 = copyrightBuilder22.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder27 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str28 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder30 = copyrightBuilder27.setEnd(".cvsignore");
        boolean boolean31 = copyrightBuilder27.hasId();
        java.lang.String str32 = copyrightBuilder27.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder33 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder35 = copyrightBuilder33.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder36 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder37 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean38 = matcherRefBuilder37.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap39 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder40 = matcherRefBuilder37.setMatchers(strMap39);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder41 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.lang.String str44 = matcherRefBuilder42.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap45 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder46 = matcherRefBuilder42.setMatchers(strMap45);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray47 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder2, allBuilder6, copyrightBuilder12, matcherRefBuilder13, copyrightBuilder15, copyrightBuilder21, copyrightBuilder22, copyrightBuilder27, copyrightBuilder33, anyBuilder36, matcherRefBuilder37, copyrightBuilder41, matcherRefBuilder42 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList48 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48, builderArray47);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder50 = notBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList48);
        java.lang.String str51 = notBuilder0.toString();
        java.lang.String str52 = notBuilder0.toString();
        java.lang.String str53 = notBuilder0.toString();
        java.lang.String str54 = notBuilder0.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher55 = notBuilder0.build();
            org.junit.Assert.fail("Expected exception of type org.apache.rat.ConfigurationException; message: 'not' type matcher requires one and only one enclosed matcher");
        } catch (org.apache.rat.ConfigurationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NotBuilder: null" + "'", str1, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder5);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertNotNull(copyrightBuilder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str10, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder12);
        org.junit.Assert.assertNotNull(matcherRefBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder15);
        org.junit.Assert.assertNotNull(copyrightBuilder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str18, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder20);
        org.junit.Assert.assertNotNull(copyrightBuilder21);
        org.junit.Assert.assertNotNull(copyrightBuilder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str23, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str28, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str32, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder33);
        org.junit.Assert.assertNotNull(copyrightBuilder35);
        org.junit.Assert.assertNotNull(anyBuilder36);
        org.junit.Assert.assertNotNull(matcherRefBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder40);
        org.junit.Assert.assertNotNull(copyrightBuilder41);
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "MathcerRefBuilder: null" + "'", str44, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder46);
        org.junit.Assert.assertNotNull(builderArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(abstractBuilder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str51, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str52, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str53, "NotBuilder: MathcerRefBuilder: null");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NotBuilder: MathcerRefBuilder: null" + "'", str54, "NotBuilder: MathcerRefBuilder: null");
    }

    @Test
    public void test06982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06982");
        org.apache.rat.Defaults.Builder builder0 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults1 = builder0.build();
        org.apache.rat.Defaults.Builder builder2 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder3 = builder0.noDefault();
        org.apache.rat.Defaults.Builder builder5 = builder0.add("Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyName',value ='Academic Free License, Version 2.1 ']");
        org.apache.rat.Defaults.Builder builder7 = builder5.add("NotBuilder: null");
        java.io.File file8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.Defaults.Builder builder9 = builder7.add(file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(defaults1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test06983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06983");
        java.io.Writer writer0 = null;
        org.apache.rat.report.xml.writer.impl.base.XmlWriter xmlWriter1 = new org.apache.rat.report.xml.writer.impl.base.XmlWriter(writer0);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter2 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter3 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter4 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter5 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter6 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter7 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter8 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter9 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter10 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter11 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter12 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter13 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter simpleXmlClaimReporter14 = new org.apache.rat.report.claim.impl.xml.SimpleXmlClaimReporter((org.apache.rat.report.xml.writer.IXmlWriter) xmlWriter1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.report.xml.writer.IXmlWriter iXmlWriter16 = xmlWriter1.openElement((java.lang.CharSequence) "d5b3cead-3d07-43ee-903a-1e1ba144eb11");
            org.junit.Assert.fail("Expected exception of type org.apache.rat.report.xml.writer.InvalidXmlException; message: 'd5b3cead-3d07-43ee-903a-1e1ba144eb11' is not a valid element name");
        } catch (org.apache.rat.report.xml.writer.InvalidXmlException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06984");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        java.io.FilenameFilter filenameFilter5 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.utils.Log log6 = null;
        org.apache.rat.ReportConfiguration reportConfiguration7 = new org.apache.rat.ReportConfiguration(log6);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic8 = org.apache.rat.Reporter.report(reportConfiguration7);
        org.apache.rat.report.IReportable iReportable9 = null;
        reportConfiguration7.setReportable(iReportable9);
        org.apache.rat.utils.Log log11 = null;
        org.apache.rat.ReportConfiguration reportConfiguration12 = new org.apache.rat.ReportConfiguration(log11);
        java.io.FilenameFilter filenameFilter13 = reportConfiguration12.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter14 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet15 = reportConfiguration12.getLicenses(licenseFilter14);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders16 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration12.setAddLicenseHeaders(addLicenseHeaders16);
        org.apache.rat.utils.Log log18 = null;
        org.apache.rat.ReportConfiguration reportConfiguration19 = new org.apache.rat.ReportConfiguration(log18);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic20 = org.apache.rat.Reporter.report(reportConfiguration19);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter21 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration19, licenseFilter21);
        org.apache.rat.Reporter.listLicenses(reportConfiguration12, licenseFilter21);
        org.apache.rat.utils.Log log24 = null;
        org.apache.rat.ReportConfiguration reportConfiguration25 = new org.apache.rat.ReportConfiguration(log24);
        java.io.FilenameFilter filenameFilter26 = reportConfiguration25.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter27 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet28 = reportConfiguration25.getLicenses(licenseFilter27);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders29 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration25.setAddLicenseHeaders(addLicenseHeaders29);
        org.apache.rat.utils.Log log31 = null;
        org.apache.rat.ReportConfiguration reportConfiguration32 = new org.apache.rat.ReportConfiguration(log31);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic33 = org.apache.rat.Reporter.report(reportConfiguration32);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter34 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration32, licenseFilter34);
        org.apache.rat.Reporter.listLicenses(reportConfiguration25, licenseFilter34);
        org.apache.rat.Reporter.listLicenses(reportConfiguration12, licenseFilter34);
        org.apache.rat.utils.Log log38 = null;
        org.apache.rat.ReportConfiguration reportConfiguration39 = new org.apache.rat.ReportConfiguration(log38);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier40 = reportConfiguration39.getOutput();
        reportConfiguration12.setOut(outputStreamIOSupplier40);
        org.apache.rat.utils.Log log42 = null;
        org.apache.rat.ReportConfiguration reportConfiguration43 = new org.apache.rat.ReportConfiguration(log42);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic44 = org.apache.rat.Reporter.report(reportConfiguration43);
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic47 = org.apache.rat.Reporter.report(reportConfiguration46);
        org.apache.rat.utils.ReportingSet.Options options48 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration46.licenseDuplicateOption(options48);
        reportConfiguration43.familyDuplicateOption(options48);
        reportConfiguration12.licenseDuplicateOption(options48);
        reportConfiguration7.familyDuplicateOption(options48);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders53 = org.apache.rat.config.AddLicenseHeaders.FORCED;
        reportConfiguration7.setAddLicenseHeaders(addLicenseHeaders53);
        boolean boolean55 = reportConfiguration7.isAddingLicensesForced();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter56 = reportConfiguration7.getDirectoryFilter();
        java.nio.file.Path path57 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes58 = null;
        java.nio.file.FileVisitResult fileVisitResult59 = iOFileFilter56.accept(path57, basicFileAttributes58);
        reportConfiguration1.setDirectoryFilter(iOFileFilter56);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter61 = reportConfiguration1.getDirectoryFilter();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.io.filefilter.IOFileFilter iOFileFilter63 = iOFileFilter61.or(iOFileFilter62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: fileFilter");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNull(filenameFilter5);
        org.junit.Assert.assertNull(claimStatistic8);
        org.junit.Assert.assertNull(filenameFilter13);
        org.junit.Assert.assertTrue("'" + licenseFilter14 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter14.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet15);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders16 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders16.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic20);
        org.junit.Assert.assertTrue("'" + licenseFilter21 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter21.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter26);
        org.junit.Assert.assertTrue("'" + licenseFilter27 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter27.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet28);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders29 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders29.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic33);
        org.junit.Assert.assertTrue("'" + licenseFilter34 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter34.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier40);
        org.junit.Assert.assertNull(claimStatistic44);
        org.junit.Assert.assertNull(claimStatistic47);
        org.junit.Assert.assertTrue("'" + options48 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options48.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + addLicenseHeaders53 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FORCED + "'", addLicenseHeaders53.equals(org.apache.rat.config.AddLicenseHeaders.FORCED));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(iOFileFilter56);
        org.junit.Assert.assertTrue("'" + fileVisitResult59 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult59.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter61);
    }

    @Test
    public void test06985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06985");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder0 = new org.apache.rat.configuration.builders.AnyBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher1 = anyBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = anyBuilder0.build();
        org.apache.rat.configuration.builders.AllBuilder allBuilder3 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = allBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = allBuilder3.build();
        org.apache.rat.configuration.builders.AllBuilder allBuilder6 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher7 = allBuilder6.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher8 = allBuilder6.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = allBuilder6.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str11 = copyrightBuilder10.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = copyrightBuilder10.setEnd(".cvsignore");
        boolean boolean14 = copyrightBuilder10.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder16 = copyrightBuilder10.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder17 = allBuilder6.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder10);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder18 = allBuilder3.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder10);
        org.apache.rat.configuration.builders.TextBuilder textBuilder19 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder21 = textBuilder19.setText("t true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher22 = textBuilder19.build();
        java.lang.String str23 = textBuilder19.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder24 = allBuilder3.add((org.apache.rat.analysis.IHeaderMatcher.Builder) textBuilder19);
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList25 = allBuilder3.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher26 = allBuilder3.build();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder27 = anyBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) allBuilder3);
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList28 = allBuilder3.getChildren();
        org.junit.Assert.assertNotNull(iHeaderMatcher1);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher7);
        org.junit.Assert.assertNotNull(iHeaderMatcher8);
        org.junit.Assert.assertNotNull(iHeaderMatcher9);
        org.junit.Assert.assertNotNull(copyrightBuilder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str11, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder16);
        org.junit.Assert.assertNotNull(abstractBuilder17);
        org.junit.Assert.assertNotNull(abstractBuilder18);
        org.junit.Assert.assertNotNull(textBuilder21);
        org.junit.Assert.assertNotNull(iHeaderMatcher22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "TextBuilder: t true" + "'", str23, "TextBuilder: t true");
        org.junit.Assert.assertNotNull(abstractBuilder24);
        org.junit.Assert.assertNotNull(iHeaderMatcherList25);
        org.junit.Assert.assertNotNull(iHeaderMatcher26);
        org.junit.Assert.assertNotNull(abstractBuilder27);
        org.junit.Assert.assertNotNull(iHeaderMatcherList28);
    }

    @Test
    public void test06986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06986");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet1 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        org.apache.rat.license.ILicenseFamily iLicenseFamily2 = org.apache.rat.license.LicenseFamilySetFactory.search("http://org/apache/rat/meta-data", iLicenseFamilySet1);
        org.apache.rat.policy.DefaultPolicy defaultPolicy3 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet1);
        org.apache.rat.api.Document document4 = null;
        defaultPolicy3.analyse(document4);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense6 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense6.setLicenseFamilyName("hi!");
        java.lang.String str9 = fullTextMatchingLicense6.getLicenseFamilyCategory();
        java.lang.String str10 = fullTextMatchingLicense6.getLicenseFamilyName();
        fullTextMatchingLicense6.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense6.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily15 = fullTextMatchingLicense6.getLicenseFamily();
        java.lang.String str16 = iLicenseFamily15.getFamilyName();
        java.lang.String str17 = iLicenseFamily15.getFamilyName();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder18 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str19 = iLicenseFamilyBuilder18.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder21 = iLicenseFamilyBuilder18.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder23 = iLicenseFamilyBuilder18.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder25 = iLicenseFamilyBuilder18.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str26 = iLicenseFamilyBuilder18.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder28 = iLicenseFamilyBuilder18.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily29 = iLicenseFamilyBuilder18.build();
        int int30 = iLicenseFamily15.compareTo(iLicenseFamily29);
        defaultPolicy3.add(iLicenseFamily29);
        org.apache.rat.api.Document document32 = null;
        defaultPolicy3.analyse(document32);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet34 = defaultPolicy3.getApprovedLicenseNames();
        org.apache.rat.policy.DefaultPolicy defaultPolicy35 = new org.apache.rat.policy.DefaultPolicy((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet34);
        java.lang.Class<?> wildcardClass36 = iLicenseFamilySet34.getClass();
        org.junit.Assert.assertNotNull(iLicenseFamilySet1);
        org.junit.Assert.assertNull(iLicenseFamily2);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "SpdxBuilder: null" + "'", str16, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "SpdxBuilder: null" + "'", str17, "SpdxBuilder: null");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "MIT  " + "'", str26, "MIT  ");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(iLicenseFamily29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 7 + "'", int30 == 7);
        org.junit.Assert.assertNotNull(iLicenseFamilySet34);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test06987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06987");
        org.apache.rat.license.SimpleLicenseFamily simpleLicenseFamily0 = new org.apache.rat.license.SimpleLicenseFamily();
        java.lang.String str1 = simpleLicenseFamily0.getFamilyName();
        java.lang.String str2 = simpleLicenseFamily0.getFamilyCategory();
        simpleLicenseFamily0.setFamilyCategory("W3C  ");
        simpleLicenseFamily0.setFamilyName("GEN  ");
        simpleLicenseFamily0.setFamilyName("http://org/apache/rat/meta-data#ApprovedLicense");
        simpleLicenseFamily0.setFamilyCategory("c523095e-4421-4cc4-93e2-039f23b91f76");
        java.lang.String str11 = simpleLicenseFamily0.toString();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "c523095e-4421-4cc4-93e2-039f23b91f76 http://org/apache/rat/meta-data#ApprovedLicense" + "'", str11, "c523095e-4421-4cc4-93e2-039f23b91f76 http://org/apache/rat/meta-data#ApprovedLicense");
    }

    @Test
    public void test06988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06988");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense7 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense7.setLicenseFamilyName("hi!");
        java.lang.String str10 = fullTextMatchingLicense7.getLicenseFamilyCategory();
        java.lang.String str11 = fullTextMatchingLicense7.getLicenseFamilyName();
        fullTextMatchingLicense7.setLicenseFamilyName("SpdxBuilder: null");
        fullTextMatchingLicense7.setLicenseFamilyCategory("TMF");
        org.apache.rat.license.ILicenseFamily iLicenseFamily16 = fullTextMatchingLicense7.getLicenseFamily();
        java.lang.String str17 = iLicenseFamily16.getFamilyName();
        java.lang.String str18 = iLicenseFamily16.getFamilyName();
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder19 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str20 = iLicenseFamilyBuilder19.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder22 = iLicenseFamilyBuilder19.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder24 = iLicenseFamilyBuilder19.setLicenseFamilyCategory("MIT  ");
        org.apache.rat.license.ILicenseFamily.Builder builder26 = iLicenseFamilyBuilder19.setLicenseFamilyName("4a00cf7d-fe76-423e-917e-b03bbae6b8a5");
        java.lang.String str27 = iLicenseFamilyBuilder19.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder29 = iLicenseFamilyBuilder19.setLicenseFamilyName("8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
        org.apache.rat.license.ILicenseFamily iLicenseFamily30 = iLicenseFamilyBuilder19.build();
        int int31 = iLicenseFamily16.compareTo(iLicenseFamily30);
        java.lang.String str32 = iLicenseFamily30.getFamilyCategory();
        reportConfiguration1.addApprovedLicenseCategory(iLicenseFamily30);
        org.apache.rat.license.ILicense[] iLicenseArray34 = new org.apache.rat.license.ILicense[] {};
        java.util.TreeSet<org.apache.rat.license.ILicense> iLicenseSet35 = new java.util.TreeSet<org.apache.rat.license.ILicense>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet35, iLicenseArray34);
        java.lang.String[] strArray49 = new java.lang.String[] { "GPL2 ", "GPL1 ", "notice", "http://org/apache/rat/meta-data#LicenseFamilyName", "notice", "GPL2 ", "http://org/apache/rat/meta-data#LicenseFamilyName", "", "GPL2 ", "", "GPL1 ", "hi!" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        org.apache.rat.license.LicenseSetFactory licenseSetFactory52 = new org.apache.rat.license.LicenseSetFactory((java.util.SortedSet<org.apache.rat.license.ILicense>) iLicenseSet35, (java.util.Collection<java.lang.String>) strList50);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter53 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.none;
        java.util.SortedSet<java.lang.String> strSet54 = licenseSetFactory52.getLicenseFamilyIds(licenseFilter53);
        org.apache.rat.Defaults.Builder builder55 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults56 = builder55.build();
        org.apache.rat.utils.Log log57 = null;
        org.apache.rat.ReportConfiguration reportConfiguration58 = new org.apache.rat.ReportConfiguration(log57);
        reportConfiguration58.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log log61 = null;
        org.apache.rat.ReportConfiguration reportConfiguration62 = new org.apache.rat.ReportConfiguration(log61);
        java.io.FilenameFilter filenameFilter63 = reportConfiguration62.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter64 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet65 = reportConfiguration62.getLicenses(licenseFilter64);
        reportConfiguration58.addLicensesIfNotPresent((java.util.Collection<org.apache.rat.license.ILicense>) iLicenseSet65);
        java.io.FilenameFilter filenameFilter67 = reportConfiguration58.getInputFileFilter();
        org.apache.rat.utils.Log log68 = null;
        org.apache.rat.ReportConfiguration reportConfiguration69 = new org.apache.rat.ReportConfiguration(log68);
        java.io.FilenameFilter filenameFilter70 = reportConfiguration69.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter71 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet72 = reportConfiguration69.getLicenses(licenseFilter71);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders73 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration69.setAddLicenseHeaders(addLicenseHeaders73);
        org.apache.rat.utils.Log log75 = null;
        org.apache.rat.ReportConfiguration reportConfiguration76 = new org.apache.rat.ReportConfiguration(log75);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic77 = org.apache.rat.Reporter.report(reportConfiguration76);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter78 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration76, licenseFilter78);
        org.apache.rat.Reporter.listLicenses(reportConfiguration69, licenseFilter78);
        org.apache.rat.utils.Log log81 = null;
        org.apache.rat.ReportConfiguration reportConfiguration82 = new org.apache.rat.ReportConfiguration(log81);
        java.io.FilenameFilter filenameFilter83 = reportConfiguration82.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter84 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet85 = reportConfiguration82.getLicenses(licenseFilter84);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders86 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration82.setAddLicenseHeaders(addLicenseHeaders86);
        org.apache.rat.utils.Log log88 = null;
        org.apache.rat.ReportConfiguration reportConfiguration89 = new org.apache.rat.ReportConfiguration(log88);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic90 = org.apache.rat.Reporter.report(reportConfiguration89);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter91 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration89, licenseFilter91);
        org.apache.rat.Reporter.listLicenses(reportConfiguration82, licenseFilter91);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet94 = reportConfiguration69.getLicenseFamilies(licenseFilter91);
        org.apache.rat.Reporter.listLicenseFamilies(reportConfiguration58, licenseFilter91);
        java.util.SortedSet<java.lang.String> strSet96 = defaults56.getLicenseIds(licenseFilter91);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet97 = licenseSetFactory52.getLicenseFamilies(licenseFilter91);
        org.apache.rat.license.ILicenseFamily iLicenseFamily98 = org.apache.rat.license.LicenseFamilySetFactory.search(iLicenseFamily30, iLicenseFamilySet97);
        java.lang.String str99 = iLicenseFamily30.getFamilyName();
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(iLicenseFamily16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "SpdxBuilder: null" + "'", str17, "SpdxBuilder: null");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "SpdxBuilder: null" + "'", str18, "SpdxBuilder: null");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "MIT  " + "'", str27, "MIT  ");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(iLicenseFamily30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "MIT  " + "'", str32, "MIT  ");
        org.junit.Assert.assertNotNull(iLicenseArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + licenseFilter53 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.none + "'", licenseFilter53.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.none));
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(defaults56);
        org.junit.Assert.assertNull(filenameFilter63);
        org.junit.Assert.assertTrue("'" + licenseFilter64 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter64.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet65);
        org.junit.Assert.assertNull(filenameFilter67);
        org.junit.Assert.assertNull(filenameFilter70);
        org.junit.Assert.assertTrue("'" + licenseFilter71 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter71.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet72);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders73 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders73.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic77);
        org.junit.Assert.assertTrue("'" + licenseFilter78 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter78.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter83);
        org.junit.Assert.assertTrue("'" + licenseFilter84 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter84.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet85);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders86 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders86.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic90);
        org.junit.Assert.assertTrue("'" + licenseFilter91 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter91.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseFamilySet94);
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertNotNull(iLicenseFamilySet97);
        org.junit.Assert.assertNull(iLicenseFamily98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "8ecb8cce-06e4-400f-84d9-ad1cf6289fda" + "'", str99, "8ecb8cce-06e4-400f-84d9-ad1cf6289fda");
    }

    @Test
    public void test06989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06989");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet0 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        org.apache.rat.utils.DefaultLog defaultLog1 = org.apache.rat.utils.DefaultLog.INSTANCE;
        org.apache.rat.utils.Log log2 = null;
        org.apache.rat.ReportConfiguration reportConfiguration3 = new org.apache.rat.ReportConfiguration(log2);
        java.io.FilenameFilter filenameFilter4 = reportConfiguration3.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter5 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet6 = reportConfiguration3.getLicenses(licenseFilter5);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders7 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration3.setAddLicenseHeaders(addLicenseHeaders7);
        org.apache.rat.utils.Log log9 = null;
        org.apache.rat.ReportConfiguration reportConfiguration10 = new org.apache.rat.ReportConfiguration(log9);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic11 = org.apache.rat.Reporter.report(reportConfiguration10);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter12 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration10, licenseFilter12);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter12);
        org.apache.rat.utils.Log log15 = null;
        org.apache.rat.ReportConfiguration reportConfiguration16 = new org.apache.rat.ReportConfiguration(log15);
        java.io.FilenameFilter filenameFilter17 = reportConfiguration16.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter18 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet19 = reportConfiguration16.getLicenses(licenseFilter18);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders20 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration16.setAddLicenseHeaders(addLicenseHeaders20);
        org.apache.rat.utils.Log log22 = null;
        org.apache.rat.ReportConfiguration reportConfiguration23 = new org.apache.rat.ReportConfiguration(log22);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic24 = org.apache.rat.Reporter.report(reportConfiguration23);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter25 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration23, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration16, licenseFilter25);
        org.apache.rat.Reporter.listLicenses(reportConfiguration3, licenseFilter25);
        org.apache.rat.utils.Log log29 = null;
        org.apache.rat.ReportConfiguration reportConfiguration30 = new org.apache.rat.ReportConfiguration(log29);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier31 = reportConfiguration30.getOutput();
        reportConfiguration3.setOut(outputStreamIOSupplier31);
        org.apache.rat.utils.Log log33 = null;
        org.apache.rat.ReportConfiguration reportConfiguration34 = new org.apache.rat.ReportConfiguration(log33);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic35 = org.apache.rat.Reporter.report(reportConfiguration34);
        org.apache.rat.utils.Log log36 = null;
        org.apache.rat.ReportConfiguration reportConfiguration37 = new org.apache.rat.ReportConfiguration(log36);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic38 = org.apache.rat.Reporter.report(reportConfiguration37);
        org.apache.rat.utils.ReportingSet.Options options39 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration37.licenseDuplicateOption(options39);
        reportConfiguration34.familyDuplicateOption(options39);
        reportConfiguration3.licenseDuplicateOption(options39);
        reportConfiguration3.addApprovedLicenseCategory("W3C Document Copyright");
        org.apache.rat.utils.Log log45 = null;
        org.apache.rat.ReportConfiguration reportConfiguration46 = new org.apache.rat.ReportConfiguration(log45);
        reportConfiguration46.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level49 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration46.logLicenseCollisions(level49);
        reportConfiguration3.logLicenseCollisions(level49);
        defaultLog1.setLevel(level49);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet53 = strSet0.setLog((org.apache.rat.utils.Log) defaultLog1);
        java.lang.String[] strArray59 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet60 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        boolean boolean63 = strSet60.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor64 = strSet60.iterator();
        java.lang.Object[] objArray65 = strSet60.toArray();
        java.lang.String[] strArray71 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet72 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        boolean boolean75 = strSet72.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet76 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean77 = strSet72.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet76);
        boolean boolean78 = strSet60.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet76);
        boolean boolean79 = strSet0.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet76);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet82 = strSet0.subSet("468725e6-3745-47e3-807f-06bc0b3c3beb", "MathcerRefBuilder: http:");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction83 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet84 = strSet0.setMsgFormat(strFunction83);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = strSet0.last();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(defaultLog1);
        org.junit.Assert.assertNull(filenameFilter4);
        org.junit.Assert.assertTrue("'" + licenseFilter5 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter5.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet6);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders7 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders7.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic11);
        org.junit.Assert.assertTrue("'" + licenseFilter12 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter12.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter17);
        org.junit.Assert.assertTrue("'" + licenseFilter18 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter18.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet19);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders20 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders20.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic24);
        org.junit.Assert.assertTrue("'" + licenseFilter25 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter25.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier31);
        org.junit.Assert.assertNull(claimStatistic35);
        org.junit.Assert.assertNull(claimStatistic38);
        org.junit.Assert.assertTrue("'" + options39 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options39.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertTrue("'" + level49 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level49.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(strSet84);
    }

    @Test
    public void test06990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06990");
        java.lang.String[] strArray5 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet6 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean9 = strSet6.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.Iterator<java.lang.String> strItor10 = strSet6.iterator();
        java.lang.Object[] objArray11 = strSet6.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet18 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean21 = strSet18.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet22 = org.apache.rat.license.LicenseFamilySetFactory.emptyLicenseFamilySet();
        boolean boolean23 = strSet18.removeAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        boolean boolean24 = strSet6.containsAll((java.util.Collection<org.apache.rat.license.ILicenseFamily>) iLicenseFamilySet22);
        java.util.stream.Stream<java.lang.String> strStream25 = strSet6.parallelStream();
        boolean boolean27 = strSet6.add("null http://org/apache/rat/meta-data");
        org.apache.rat.utils.Log log28 = null;
        org.apache.rat.ReportConfiguration reportConfiguration29 = new org.apache.rat.ReportConfiguration(log28);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic30 = org.apache.rat.Reporter.report(reportConfiguration29);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier31 = reportConfiguration29.getOutput();
        org.apache.rat.license.ILicense iLicense32 = null;
        reportConfiguration29.addLicense(iLicense32);
        org.apache.rat.Defaults.Builder builder34 = org.apache.rat.Defaults.builder();
        org.apache.rat.Defaults defaults35 = builder34.build();
        reportConfiguration29.setFrom(defaults35);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter37 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet38 = defaults35.getLicenses(licenseFilter37);
        java.lang.String[] strArray44 = new java.lang.String[] { "http://org/apache/rat/meta-data#LicenseFamilyCategory", "Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  ']", "MANIFEST.MF", "AllBuilder:", "The MIT License" };
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet45 = new org.apache.rat.utils.ReportingSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        boolean boolean48 = strSet45.addIfNotPresent("http://org/apache/rat/meta-data#LicenseFamilyName");
        boolean boolean50 = strSet45.addIfNotPresent("ef7a8b13-64c3-4510-bb0c-dbf208e1e73f");
        java.util.function.Function<java.lang.String, java.lang.String> strFunction51 = null;
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet52 = strSet45.setMsgFormat(strFunction51);
        java.util.Spliterator<java.lang.String> strSpliterator53 = strSet45.spliterator();
        org.apache.rat.license.LicenseSetFactory licenseSetFactory54 = new org.apache.rat.license.LicenseSetFactory(iLicenseSet38, (java.util.Collection<java.lang.String>) strSet45);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet57 = strSet45.subSet("MathcerRefBuilder: null", "ffalse");
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet59 = strSet45.tailSet("357bf79d-4123-4d3b-a061-96986cdaedaa");
        org.apache.rat.utils.Log log60 = null;
        org.apache.rat.ReportConfiguration reportConfiguration61 = new org.apache.rat.ReportConfiguration(log60);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic62 = org.apache.rat.Reporter.report(reportConfiguration61);
        org.apache.rat.utils.Log log63 = null;
        org.apache.rat.ReportConfiguration reportConfiguration64 = new org.apache.rat.ReportConfiguration(log63);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic65 = org.apache.rat.Reporter.report(reportConfiguration64);
        org.apache.rat.utils.ReportingSet.Options options66 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration64.licenseDuplicateOption(options66);
        reportConfiguration61.familyDuplicateOption(options66);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier69 = reportConfiguration61.getWriter();
        org.apache.rat.utils.Log log70 = null;
        org.apache.rat.ReportConfiguration reportConfiguration71 = new org.apache.rat.ReportConfiguration(log70);
        reportConfiguration71.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level74 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration71.logFamilyCollisions(level74);
        reportConfiguration61.logFamilyCollisions(level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet77 = strSet59.setLogLevel(level74);
        org.apache.rat.utils.ReportingSet<java.lang.String> strSet78 = strSet6.setLogLevel(level74);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[AllBuilder:, Datum [ name ='http://org/apache/rat/meta-data#LicenseFamilyCategory',value ='GPL1  '], MANIFEST.MF, The MIT License, http://org/apache/rat/meta-data#LicenseFamilyCategory, http://org/apache/rat/meta-data#LicenseFamilyName]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(iLicenseFamilySet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strStream25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(claimStatistic30);
        org.junit.Assert.assertNotNull(outputStreamIOSupplier31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(defaults35);
        org.junit.Assert.assertTrue("'" + licenseFilter37 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter37.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(strSpliterator53);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNull(claimStatistic62);
        org.junit.Assert.assertNull(claimStatistic65);
        org.junit.Assert.assertTrue("'" + options66 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options66.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier69);
        org.junit.Assert.assertTrue("'" + level74 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level74.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(strSet78);
    }

    @Test
    public void test06991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06991");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter3 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet4 = reportConfiguration1.getLicenses(licenseFilter3);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders5 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration1.setAddLicenseHeaders(addLicenseHeaders5);
        org.apache.rat.utils.Log log7 = null;
        org.apache.rat.ReportConfiguration reportConfiguration8 = new org.apache.rat.ReportConfiguration(log7);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic9 = org.apache.rat.Reporter.report(reportConfiguration8);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter10 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration8, licenseFilter10);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter10);
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        java.io.FilenameFilter filenameFilter15 = reportConfiguration14.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter16 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet17 = reportConfiguration14.getLicenses(licenseFilter16);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders18 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration14.setAddLicenseHeaders(addLicenseHeaders18);
        org.apache.rat.utils.Log log20 = null;
        org.apache.rat.ReportConfiguration reportConfiguration21 = new org.apache.rat.ReportConfiguration(log20);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic22 = org.apache.rat.Reporter.report(reportConfiguration21);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter23 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration21, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration14, licenseFilter23);
        org.apache.rat.Reporter.listLicenses(reportConfiguration1, licenseFilter23);
        org.apache.rat.utils.Log log27 = null;
        org.apache.rat.ReportConfiguration reportConfiguration28 = new org.apache.rat.ReportConfiguration(log27);
        org.apache.commons.io.function.IOSupplier<java.io.OutputStream> outputStreamIOSupplier29 = reportConfiguration28.getOutput();
        reportConfiguration1.setOut(outputStreamIOSupplier29);
        org.apache.rat.utils.Log.Level level31 = org.apache.rat.utils.Log.Level.WARN;
        reportConfiguration1.logLicenseCollisions(level31);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter33 = reportConfiguration1.getDirectoryFilter();
        java.nio.file.Path path34 = null;
        java.nio.file.attribute.BasicFileAttributes basicFileAttributes35 = null;
        java.nio.file.FileVisitResult fileVisitResult36 = iOFileFilter33.accept(path34, basicFileAttributes35);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter37 = iOFileFilter33.negate();
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter38 = iOFileFilter37.negate();
        java.nio.file.Path path39 = null;
        boolean boolean40 = iOFileFilter38.matches(path39);
        java.nio.file.Path path41 = null;
        boolean boolean42 = iOFileFilter38.matches(path41);
        org.apache.commons.io.filefilter.IOFileFilter iOFileFilter43 = iOFileFilter38.negate();
        java.nio.file.Path path44 = null;
        boolean boolean45 = iOFileFilter38.matches(path44);
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertTrue("'" + licenseFilter3 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter3.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet4);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders5 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders5.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic9);
        org.junit.Assert.assertTrue("'" + licenseFilter10 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter10.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNull(filenameFilter15);
        org.junit.Assert.assertTrue("'" + licenseFilter16 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter16.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet17);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders18 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders18.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic22);
        org.junit.Assert.assertTrue("'" + licenseFilter23 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter23.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(outputStreamIOSupplier29);
        org.junit.Assert.assertTrue("'" + level31 + "' != '" + org.apache.rat.utils.Log.Level.WARN + "'", level31.equals(org.apache.rat.utils.Log.Level.WARN));
        org.junit.Assert.assertNotNull(iOFileFilter33);
        org.junit.Assert.assertTrue("'" + fileVisitResult36 + "' != '" + java.nio.file.FileVisitResult.TERMINATE + "'", fileVisitResult36.equals(java.nio.file.FileVisitResult.TERMINATE));
        org.junit.Assert.assertNotNull(iOFileFilter37);
        org.junit.Assert.assertNotNull(iOFileFilter38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(iOFileFilter43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test06992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06992");
        org.apache.rat.api.MetaData metaData0 = new org.apache.rat.api.MetaData();
        java.lang.String str2 = metaData0.value("COMMON DEVELOPMENT AND DISTRIBUTION LICENSE Version 1.0");
        java.lang.String str4 = metaData0.value("W3C Document Copyright");
        boolean boolean6 = metaData0.clear("hi!");
        java.lang.String str8 = metaData0.value("true");
        org.apache.rat.api.MetaData.Datum datum10 = metaData0.get("GNU General Public License, version 1");
        java.lang.String str12 = metaData0.value("Datum [ name ='http://org/apache/rat/meta-data#ApprovedLicense',value ='true ']");
        org.apache.rat.api.MetaData.Datum datum15 = new org.apache.rat.api.MetaData.Datum("d0774232-cdef-4507-a8b6-ac22a273dde3", "10ceccc6-9da0-47a6-810c-684cf0a59f88");
        metaData0.set(datum15);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(datum10);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test06993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06993");
        org.apache.rat.configuration.Format format0 = org.apache.rat.configuration.Format.XML;
        org.apache.rat.configuration.LicenseReader licenseReader1 = format0.licenseReader();
        org.apache.rat.configuration.MatcherReader matcherReader2 = format0.matcherReader();
        matcherReader2.readMatcherBuilders();
        matcherReader2.readMatcherBuilders();
        matcherReader2.readMatcherBuilders();
        matcherReader2.readMatcherBuilders();
        matcherReader2.readMatcherBuilders();
        matcherReader2.readMatcherBuilders();
        matcherReader2.readMatcherBuilders();
        matcherReader2.readMatcherBuilders();
        java.net.URL uRL11 = null;
        // The following exception was thrown during execution in test generation
        try {
            matcherReader2.addMatchers(uRL11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + format0 + "' != '" + org.apache.rat.configuration.Format.XML + "'", format0.equals(org.apache.rat.configuration.Format.XML));
        org.junit.Assert.assertNotNull(licenseReader1);
        org.junit.Assert.assertNotNull(matcherReader2);
    }

    @Test
    public void test06994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06994");
        org.apache.rat.license.ILicenseFamilyBuilder iLicenseFamilyBuilder0 = new org.apache.rat.license.ILicenseFamilyBuilder();
        java.lang.String str1 = iLicenseFamilyBuilder0.getCategory();
        org.apache.rat.license.ILicenseFamily.Builder builder3 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("AL   ");
        org.apache.rat.license.ILicenseFamily.Builder builder5 = iLicenseFamilyBuilder0.setLicenseFamilyName("binary");
        org.apache.rat.license.ILicenseFamily.Builder builder7 = iLicenseFamilyBuilder0.setLicenseFamilyCategory("3c74a3ec-8235-4035-9db7-f9f475b48681");
        org.apache.rat.license.ILicenseFamily.Builder builder9 = builder7.setLicenseFamilyCategory("49ba0523-306f-4984-949f-9db17b9667d9");
        java.lang.String str10 = builder9.getCategory();
        java.lang.String str11 = builder9.getCategory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "49ba0523-306f-4984-949f-9db17b9667d9" + "'", str10, "49ba0523-306f-4984-949f-9db17b9667d9");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "49ba0523-306f-4984-949f-9db17b9667d9" + "'", str11, "49ba0523-306f-4984-949f-9db17b9667d9");
    }

    @Test
    public void test06995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06995");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic2 = org.apache.rat.Reporter.report(reportConfiguration1);
        org.apache.rat.utils.Log log3 = null;
        org.apache.rat.ReportConfiguration reportConfiguration4 = new org.apache.rat.ReportConfiguration(log3);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic5 = org.apache.rat.Reporter.report(reportConfiguration4);
        org.apache.rat.utils.ReportingSet.Options options6 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration4.licenseDuplicateOption(options6);
        reportConfiguration1.familyDuplicateOption(options6);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        boolean boolean10 = reportConfiguration1.isAddingLicensesForced();
        java.io.FilenameFilter filenameFilter11 = reportConfiguration1.getInputFileFilter();
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier12 = reportConfiguration1.getStyleSheet();
        org.apache.rat.utils.Log log13 = null;
        org.apache.rat.ReportConfiguration reportConfiguration14 = new org.apache.rat.ReportConfiguration(log13);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic15 = org.apache.rat.Reporter.report(reportConfiguration14);
        org.apache.rat.utils.Log log16 = null;
        org.apache.rat.ReportConfiguration reportConfiguration17 = new org.apache.rat.ReportConfiguration(log16);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic18 = org.apache.rat.Reporter.report(reportConfiguration17);
        org.apache.rat.utils.ReportingSet.Options options19 = org.apache.rat.utils.ReportingSet.Options.OVERWRITE;
        reportConfiguration17.licenseDuplicateOption(options19);
        reportConfiguration14.familyDuplicateOption(options19);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier22 = reportConfiguration14.getWriter();
        org.apache.rat.utils.Log log23 = null;
        org.apache.rat.ReportConfiguration reportConfiguration24 = new org.apache.rat.ReportConfiguration(log23);
        reportConfiguration24.addApprovedLicenseCategory(".cvsignore");
        org.apache.rat.utils.Log.Level level27 = org.apache.rat.utils.Log.Level.ERROR;
        reportConfiguration24.logFamilyCollisions(level27);
        reportConfiguration14.logFamilyCollisions(level27);
        reportConfiguration14.removeApprovedLicenseCategory("b9d57440-4b03-461e-a164-b29e1341bbc8");
        org.apache.rat.utils.Log log32 = null;
        org.apache.rat.ReportConfiguration reportConfiguration33 = new org.apache.rat.ReportConfiguration(log32);
        java.io.FilenameFilter filenameFilter34 = reportConfiguration33.getInputFileFilter();
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter35 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet36 = reportConfiguration33.getLicenses(licenseFilter35);
        org.apache.rat.config.AddLicenseHeaders addLicenseHeaders37 = org.apache.rat.config.AddLicenseHeaders.FALSE;
        reportConfiguration33.setAddLicenseHeaders(addLicenseHeaders37);
        org.apache.rat.utils.Log log39 = null;
        org.apache.rat.ReportConfiguration reportConfiguration40 = new org.apache.rat.ReportConfiguration(log39);
        org.apache.rat.report.claim.ClaimStatistic claimStatistic41 = org.apache.rat.Reporter.report(reportConfiguration40);
        org.apache.rat.license.LicenseSetFactory.LicenseFilter licenseFilter42 = org.apache.rat.license.LicenseSetFactory.LicenseFilter.all;
        org.apache.rat.Reporter.listLicenses(reportConfiguration40, licenseFilter42);
        org.apache.rat.Reporter.listLicenses(reportConfiguration33, licenseFilter42);
        java.util.SortedSet<org.apache.rat.license.ILicense> iLicenseSet45 = reportConfiguration14.getLicenses(licenseFilter42);
        java.util.SortedSet<org.apache.rat.license.ILicenseFamily> iLicenseFamilySet46 = reportConfiguration1.getLicenseFamilies(licenseFilter42);
        org.junit.Assert.assertNull(claimStatistic2);
        org.junit.Assert.assertNull(claimStatistic5);
        org.junit.Assert.assertTrue("'" + options6 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options6.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(filenameFilter11);
        org.junit.Assert.assertNull(inputStreamIOSupplier12);
        org.junit.Assert.assertNull(claimStatistic15);
        org.junit.Assert.assertNull(claimStatistic18);
        org.junit.Assert.assertTrue("'" + options19 + "' != '" + org.apache.rat.utils.ReportingSet.Options.OVERWRITE + "'", options19.equals(org.apache.rat.utils.ReportingSet.Options.OVERWRITE));
        org.junit.Assert.assertNotNull(printWriterIOSupplier22);
        org.junit.Assert.assertTrue("'" + level27 + "' != '" + org.apache.rat.utils.Log.Level.ERROR + "'", level27.equals(org.apache.rat.utils.Log.Level.ERROR));
        org.junit.Assert.assertNull(filenameFilter34);
        org.junit.Assert.assertTrue("'" + licenseFilter35 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter35.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet36);
        org.junit.Assert.assertTrue("'" + addLicenseHeaders37 + "' != '" + org.apache.rat.config.AddLicenseHeaders.FALSE + "'", addLicenseHeaders37.equals(org.apache.rat.config.AddLicenseHeaders.FALSE));
        org.junit.Assert.assertNull(claimStatistic41);
        org.junit.Assert.assertTrue("'" + licenseFilter42 + "' != '" + org.apache.rat.license.LicenseSetFactory.LicenseFilter.all + "'", licenseFilter42.equals(org.apache.rat.license.LicenseSetFactory.LicenseFilter.all));
        org.junit.Assert.assertNotNull(iLicenseSet45);
        org.junit.Assert.assertNotNull(iLicenseFamilySet46);
    }

    @Test
    public void test06996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06996");
        org.apache.rat.utils.Log log0 = null;
        org.apache.rat.ReportConfiguration reportConfiguration1 = new org.apache.rat.ReportConfiguration(log0);
        java.io.FilenameFilter filenameFilter2 = reportConfiguration1.getInputFileFilter();
        org.apache.rat.license.ILicense iLicense3 = null;
        reportConfiguration1.addLicense(iLicense3);
        org.apache.rat.license.ILicenseFamily iLicenseFamily5 = null;
        reportConfiguration1.addFamily(iLicenseFamily5);
        org.apache.commons.io.function.IOSupplier<java.io.InputStream> inputStreamIOSupplier7 = org.apache.rat.Defaults.getPlainStyleSheet();
        reportConfiguration1.setStyleSheet(inputStreamIOSupplier7);
        org.apache.commons.io.function.IOSupplier<java.io.PrintWriter> printWriterIOSupplier9 = reportConfiguration1.getWriter();
        java.net.URI uRI10 = null;
        // The following exception was thrown during execution in test generation
        try {
            reportConfiguration1.setStyleSheet(uRI10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: styleSheet file should not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(filenameFilter2);
        org.junit.Assert.assertNotNull(inputStreamIOSupplier7);
        org.junit.Assert.assertNotNull(printWriterIOSupplier9);
    }

    @Test
    public void test06997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06997");
        org.apache.rat.analysis.license.FullTextMatchingLicense fullTextMatchingLicense0 = new org.apache.rat.analysis.license.FullTextMatchingLicense();
        fullTextMatchingLicense0.setLicenseFamilyName("hi!");
        java.lang.String str3 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        java.lang.String str4 = fullTextMatchingLicense0.getLicenseFamilyCategory();
        fullTextMatchingLicense0.setFullText("NotBuilder: MathcerRefBuilder: null");
        org.apache.rat.license.ILicense.Builder builder7 = fullTextMatchingLicense0.getLicense();
        org.apache.rat.license.ILicense.Builder builder8 = fullTextMatchingLicense0.getLicense();
        fullTextMatchingLicense0.setLicenseFamilyCategory("0356753d-7389-48e7-8d63-056fd4c4548c");
        org.apache.rat.license.ILicenseFamily iLicenseFamily11 = fullTextMatchingLicense0.getLicenseFamily();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(iLicenseFamily11);
    }

    @Test
    public void test06998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06998");
        org.apache.rat.configuration.builders.AllBuilder allBuilder0 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher1 = allBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher2 = allBuilder0.build();
        org.apache.rat.configuration.builders.AllBuilder allBuilder3 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher4 = allBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher5 = allBuilder3.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher6 = allBuilder3.build();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder7 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str8 = copyrightBuilder7.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder10 = copyrightBuilder7.setEnd(".cvsignore");
        boolean boolean11 = copyrightBuilder7.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder13 = copyrightBuilder7.setOwner("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder14 = allBuilder3.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder15 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) copyrightBuilder7);
        org.apache.rat.configuration.builders.TextBuilder textBuilder16 = new org.apache.rat.configuration.builders.TextBuilder();
        org.apache.rat.configuration.builders.TextBuilder textBuilder18 = textBuilder16.setText("t true");
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher19 = textBuilder16.build();
        java.lang.String str20 = textBuilder16.toString();
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder21 = allBuilder0.add((org.apache.rat.analysis.IHeaderMatcher.Builder) textBuilder16);
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList22 = allBuilder0.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher23 = allBuilder0.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher24 = allBuilder0.build();
        java.lang.String str25 = allBuilder0.toString();
        org.apache.rat.configuration.builders.AllBuilder allBuilder26 = new org.apache.rat.configuration.builders.AllBuilder();
        java.lang.String str27 = allBuilder26.toString();
        java.lang.String str28 = allBuilder26.toString();
        java.lang.String str29 = allBuilder26.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher30 = allBuilder26.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder31 = new org.apache.rat.configuration.builders.AnyBuilder();
        java.lang.String str32 = anyBuilder31.toString();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher33 = anyBuilder31.build();
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder34 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        java.lang.String str35 = anyBuilder34.toString();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList36 = anyBuilder34.getChildren();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher37 = anyBuilder34.build();
        org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher38 = anyBuilder34.build();
        java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList39 = anyBuilder34.getChildren();
        org.apache.rat.configuration.builders.NotBuilder notBuilder40 = new org.apache.rat.configuration.builders.NotBuilder();
        java.lang.String str41 = notBuilder40.toString();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder42 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean43 = matcherRefBuilder42.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap44 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder45 = matcherRefBuilder42.setMatchers(strMap44);
        org.apache.rat.configuration.builders.AllBuilder allBuilder46 = new org.apache.rat.configuration.builders.AllBuilder();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder47 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder49 = copyrightBuilder47.setStart("OASIS");
        java.lang.String str50 = copyrightBuilder47.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder52 = copyrightBuilder47.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder53 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean54 = matcherRefBuilder53.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder55 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder57 = copyrightBuilder55.setStart("OASIS");
        java.lang.String str58 = copyrightBuilder55.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder60 = copyrightBuilder55.setStart("223f0aba-15d4-49e9-901e-5740c137aebf");
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder61 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder62 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str63 = copyrightBuilder62.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder65 = copyrightBuilder62.setEnd(".cvsignore");
        boolean boolean66 = copyrightBuilder62.hasId();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder67 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        java.lang.String str68 = copyrightBuilder67.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder70 = copyrightBuilder67.setEnd(".cvsignore");
        boolean boolean71 = copyrightBuilder67.hasId();
        java.lang.String str72 = copyrightBuilder67.toString();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder73 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder75 = copyrightBuilder73.setStart("OASIS");
        org.apache.rat.configuration.builders.AnyBuilder anyBuilder76 = org.apache.rat.analysis.IHeaderMatcher.Builder.any();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder77 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean78 = matcherRefBuilder77.hasId();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap79 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder80 = matcherRefBuilder77.setMatchers(strMap79);
        org.apache.rat.configuration.builders.CopyrightBuilder copyrightBuilder81 = org.apache.rat.analysis.IHeaderMatcher.Builder.copyright();
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder82 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean83 = matcherRefBuilder82.hasId();
        java.lang.String str84 = matcherRefBuilder82.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap85 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder86 = matcherRefBuilder82.setMatchers(strMap85);
        org.apache.rat.analysis.IHeaderMatcher.Builder[] builderArray87 = new org.apache.rat.analysis.IHeaderMatcher.Builder[] { matcherRefBuilder42, allBuilder46, copyrightBuilder52, matcherRefBuilder53, copyrightBuilder55, copyrightBuilder61, copyrightBuilder62, copyrightBuilder67, copyrightBuilder73, anyBuilder76, matcherRefBuilder77, copyrightBuilder81, matcherRefBuilder82 };
        java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder> builderList88 = new java.util.ArrayList<org.apache.rat.analysis.IHeaderMatcher.Builder>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList88, builderArray87);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder90 = notBuilder40.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList88);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder91 = anyBuilder34.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList88);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder92 = anyBuilder31.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList88);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder93 = allBuilder26.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList88);
        org.apache.rat.configuration.builders.AbstractBuilder abstractBuilder94 = allBuilder0.add((java.util.Collection<org.apache.rat.analysis.IHeaderMatcher.Builder>) builderList88);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.apache.rat.analysis.IHeaderMatcher> iHeaderMatcherList95 = allBuilder0.getChildren();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(iHeaderMatcher1);
        org.junit.Assert.assertNotNull(iHeaderMatcher2);
        org.junit.Assert.assertNotNull(iHeaderMatcher4);
        org.junit.Assert.assertNotNull(iHeaderMatcher5);
        org.junit.Assert.assertNotNull(iHeaderMatcher6);
        org.junit.Assert.assertNotNull(copyrightBuilder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str8, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder13);
        org.junit.Assert.assertNotNull(abstractBuilder14);
        org.junit.Assert.assertNotNull(abstractBuilder15);
        org.junit.Assert.assertNotNull(textBuilder18);
        org.junit.Assert.assertNotNull(iHeaderMatcher19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "TextBuilder: t true" + "'", str20, "TextBuilder: t true");
        org.junit.Assert.assertNotNull(abstractBuilder21);
        org.junit.Assert.assertNotNull(iHeaderMatcherList22);
        org.junit.Assert.assertNotNull(iHeaderMatcher23);
        org.junit.Assert.assertNotNull(iHeaderMatcher24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24\nTextBuilder: t true" + "'", str25, "AllBuilder:\nCopyright Builder: s:null e:.cvsignore o:3c840dc2-bef0-42b5-b26c-35a568d53a24\nTextBuilder: t true");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AllBuilder:" + "'", str27, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "AllBuilder:" + "'", str28, "AllBuilder:");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AllBuilder:" + "'", str29, "AllBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AnyBuilder:" + "'", str32, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcher33);
        org.junit.Assert.assertNotNull(anyBuilder34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AnyBuilder:" + "'", str35, "AnyBuilder:");
        org.junit.Assert.assertNotNull(iHeaderMatcherList36);
        org.junit.Assert.assertNotNull(iHeaderMatcher37);
        org.junit.Assert.assertNotNull(iHeaderMatcher38);
        org.junit.Assert.assertNotNull(iHeaderMatcherList39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NotBuilder: null" + "'", str41, "NotBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder45);
        org.junit.Assert.assertNotNull(copyrightBuilder47);
        org.junit.Assert.assertNotNull(copyrightBuilder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str50, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder52);
        org.junit.Assert.assertNotNull(matcherRefBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder55);
        org.junit.Assert.assertNotNull(copyrightBuilder57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Copyright Builder: s:OASIS e:null o:null" + "'", str58, "Copyright Builder: s:OASIS e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder60);
        org.junit.Assert.assertNotNull(copyrightBuilder61);
        org.junit.Assert.assertNotNull(copyrightBuilder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str63, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(copyrightBuilder67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Copyright Builder: s:null e:null o:null" + "'", str68, "Copyright Builder: s:null e:null o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Copyright Builder: s:null e:.cvsignore o:null" + "'", str72, "Copyright Builder: s:null e:.cvsignore o:null");
        org.junit.Assert.assertNotNull(copyrightBuilder73);
        org.junit.Assert.assertNotNull(copyrightBuilder75);
        org.junit.Assert.assertNotNull(anyBuilder76);
        org.junit.Assert.assertNotNull(matcherRefBuilder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(matcherRefBuilder80);
        org.junit.Assert.assertNotNull(copyrightBuilder81);
        org.junit.Assert.assertNotNull(matcherRefBuilder82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "MathcerRefBuilder: null" + "'", str84, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder86);
        org.junit.Assert.assertNotNull(builderArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(abstractBuilder90);
        org.junit.Assert.assertNotNull(abstractBuilder91);
        org.junit.Assert.assertNotNull(abstractBuilder92);
        org.junit.Assert.assertNotNull(abstractBuilder93);
        org.junit.Assert.assertNotNull(abstractBuilder94);
    }

    @Test
    public void test06999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06999");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder0 = org.apache.rat.analysis.IHeaderMatcher.Builder.matcherRef();
        boolean boolean1 = matcherRefBuilder0.hasId();
        java.lang.String str2 = matcherRefBuilder0.toString();
        java.util.Map<java.lang.String, org.apache.rat.analysis.IHeaderMatcher> strMap3 = null;
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder4 = matcherRefBuilder0.setMatchers(strMap3);
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder6 = matcherRefBuilder0.setRefId("RegexBuilder: null");
        org.apache.rat.configuration.builders.MatcherRefBuilder matcherRefBuilder8 = matcherRefBuilder0.setRefId("3c840dc2-bef0-42b5-b26c-35a568d53a24");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.rat.analysis.IHeaderMatcher iHeaderMatcher9 = matcherRefBuilder8.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(matcherRefBuilder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MathcerRefBuilder: null" + "'", str2, "MathcerRefBuilder: null");
        org.junit.Assert.assertNotNull(matcherRefBuilder4);
        org.junit.Assert.assertNotNull(matcherRefBuilder6);
        org.junit.Assert.assertNotNull(matcherRefBuilder8);
    }

    @Test
    public void test07000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test07000");
        org.apache.rat.analysis.matchers.SimpleTextMatcher simpleTextMatcher1 = new org.apache.rat.analysis.matchers.SimpleTextMatcher("binary");
        simpleTextMatcher1.reset();
        java.lang.String str3 = simpleTextMatcher1.getId();
        boolean boolean5 = simpleTextMatcher1.doMatch("6486879f-fc81-4b57-aec7-c4c77d540c30");
        java.lang.String str6 = simpleTextMatcher1.toString();
        boolean boolean8 = simpleTextMatcher1.doMatch("RegexBuilder: 89662180-a89f-497b-9301-227d494d2bae");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "61afd79a-82bd-404a-ae8f-c555f3916a3e" + "'", str3, "61afd79a-82bd-404a-ae8f-c555f3916a3e");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "61afd79a-82bd-404a-ae8f-c555f3916a3e" + "'", str6, "61afd79a-82bd-404a-ae8f-c555f3916a3e");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }
}
